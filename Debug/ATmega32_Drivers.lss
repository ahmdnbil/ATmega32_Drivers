
ATmega32_Drivers.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004ac2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000034  00800060  00004ac2  00004b56  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000008  00800094  00800094  00004b8a  2**0
                  ALLOC
  3 .stab         000041dc  00000000  00000000  00004b8c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000011a5  00000000  00000000  00008d68  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000160  00000000  00000000  00009f0d  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000018f  00000000  00000000  0000a06d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002045  00000000  00000000  0000a1fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001101  00000000  00000000  0000c241  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000f82  00000000  00000000  0000d342  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000180  00000000  00000000  0000e2c4  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002c2  00000000  00000000  0000e444  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000088e  00000000  00000000  0000e706  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000ef94  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 32 0c 	jmp	0x1864	; 0x1864 <__vector_1>
       8:	0c 94 65 0c 	jmp	0x18ca	; 0x18ca <__vector_2>
       c:	0c 94 98 0c 	jmp	0x1930	; 0x1930 <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e2 ec       	ldi	r30, 0xC2	; 194
      68:	fa e4       	ldi	r31, 0x4A	; 74
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a4 39       	cpi	r26, 0x94	; 148
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a4 e9       	ldi	r26, 0x94	; 148
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ac 39       	cpi	r26, 0x9C	; 156
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 f1 23 	call	0x47e2	; 0x47e2 <main>
      8a:	0c 94 5f 25 	jmp	0x4abe	; 0x4abe <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 28 25 	jmp	0x4a50	; 0x4a50 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 44 25 	jmp	0x4a88	; 0x4a88 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 34 25 	jmp	0x4a68	; 0x4a68 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 50 25 	jmp	0x4aa0	; 0x4aa0 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 34 25 	jmp	0x4a68	; 0x4a68 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 50 25 	jmp	0x4aa0	; 0x4aa0 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 28 25 	jmp	0x4a50	; 0x4a50 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 44 25 	jmp	0x4a88	; 0x4a88 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 30 25 	jmp	0x4a60	; 0x4a60 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	60 e6       	ldi	r22, 0x60	; 96
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 4c 25 	jmp	0x4a98	; 0x4a98 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 34 25 	jmp	0x4a68	; 0x4a68 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 50 25 	jmp	0x4aa0	; 0x4aa0 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 34 25 	jmp	0x4a68	; 0x4a68 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 50 25 	jmp	0x4aa0	; 0x4aa0 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 34 25 	jmp	0x4a68	; 0x4a68 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 50 25 	jmp	0x4aa0	; 0x4aa0 <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 38 25 	jmp	0x4a70	; 0x4a70 <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 54 25 	jmp	0x4aa8	; 0x4aa8 <__epilogue_restores__+0x20>

00000952 <__pack_f>:
     952:	df 92       	push	r13
     954:	ef 92       	push	r14
     956:	ff 92       	push	r15
     958:	0f 93       	push	r16
     95a:	1f 93       	push	r17
     95c:	fc 01       	movw	r30, r24
     95e:	e4 80       	ldd	r14, Z+4	; 0x04
     960:	f5 80       	ldd	r15, Z+5	; 0x05
     962:	06 81       	ldd	r16, Z+6	; 0x06
     964:	17 81       	ldd	r17, Z+7	; 0x07
     966:	d1 80       	ldd	r13, Z+1	; 0x01
     968:	80 81       	ld	r24, Z
     96a:	82 30       	cpi	r24, 0x02	; 2
     96c:	48 f4       	brcc	.+18     	; 0x980 <__pack_f+0x2e>
     96e:	80 e0       	ldi	r24, 0x00	; 0
     970:	90 e0       	ldi	r25, 0x00	; 0
     972:	a0 e1       	ldi	r26, 0x10	; 16
     974:	b0 e0       	ldi	r27, 0x00	; 0
     976:	e8 2a       	or	r14, r24
     978:	f9 2a       	or	r15, r25
     97a:	0a 2b       	or	r16, r26
     97c:	1b 2b       	or	r17, r27
     97e:	a5 c0       	rjmp	.+330    	; 0xaca <__pack_f+0x178>
     980:	84 30       	cpi	r24, 0x04	; 4
     982:	09 f4       	brne	.+2      	; 0x986 <__pack_f+0x34>
     984:	9f c0       	rjmp	.+318    	; 0xac4 <__pack_f+0x172>
     986:	82 30       	cpi	r24, 0x02	; 2
     988:	21 f4       	brne	.+8      	; 0x992 <__pack_f+0x40>
     98a:	ee 24       	eor	r14, r14
     98c:	ff 24       	eor	r15, r15
     98e:	87 01       	movw	r16, r14
     990:	05 c0       	rjmp	.+10     	; 0x99c <__pack_f+0x4a>
     992:	e1 14       	cp	r14, r1
     994:	f1 04       	cpc	r15, r1
     996:	01 05       	cpc	r16, r1
     998:	11 05       	cpc	r17, r1
     99a:	19 f4       	brne	.+6      	; 0x9a2 <__pack_f+0x50>
     99c:	e0 e0       	ldi	r30, 0x00	; 0
     99e:	f0 e0       	ldi	r31, 0x00	; 0
     9a0:	96 c0       	rjmp	.+300    	; 0xace <__pack_f+0x17c>
     9a2:	62 81       	ldd	r22, Z+2	; 0x02
     9a4:	73 81       	ldd	r23, Z+3	; 0x03
     9a6:	9f ef       	ldi	r25, 0xFF	; 255
     9a8:	62 38       	cpi	r22, 0x82	; 130
     9aa:	79 07       	cpc	r23, r25
     9ac:	0c f0       	brlt	.+2      	; 0x9b0 <__pack_f+0x5e>
     9ae:	5b c0       	rjmp	.+182    	; 0xa66 <__pack_f+0x114>
     9b0:	22 e8       	ldi	r18, 0x82	; 130
     9b2:	3f ef       	ldi	r19, 0xFF	; 255
     9b4:	26 1b       	sub	r18, r22
     9b6:	37 0b       	sbc	r19, r23
     9b8:	2a 31       	cpi	r18, 0x1A	; 26
     9ba:	31 05       	cpc	r19, r1
     9bc:	2c f0       	brlt	.+10     	; 0x9c8 <__pack_f+0x76>
     9be:	20 e0       	ldi	r18, 0x00	; 0
     9c0:	30 e0       	ldi	r19, 0x00	; 0
     9c2:	40 e0       	ldi	r20, 0x00	; 0
     9c4:	50 e0       	ldi	r21, 0x00	; 0
     9c6:	2a c0       	rjmp	.+84     	; 0xa1c <__pack_f+0xca>
     9c8:	b8 01       	movw	r22, r16
     9ca:	a7 01       	movw	r20, r14
     9cc:	02 2e       	mov	r0, r18
     9ce:	04 c0       	rjmp	.+8      	; 0x9d8 <__pack_f+0x86>
     9d0:	76 95       	lsr	r23
     9d2:	67 95       	ror	r22
     9d4:	57 95       	ror	r21
     9d6:	47 95       	ror	r20
     9d8:	0a 94       	dec	r0
     9da:	d2 f7       	brpl	.-12     	; 0x9d0 <__pack_f+0x7e>
     9dc:	81 e0       	ldi	r24, 0x01	; 1
     9de:	90 e0       	ldi	r25, 0x00	; 0
     9e0:	a0 e0       	ldi	r26, 0x00	; 0
     9e2:	b0 e0       	ldi	r27, 0x00	; 0
     9e4:	04 c0       	rjmp	.+8      	; 0x9ee <__pack_f+0x9c>
     9e6:	88 0f       	add	r24, r24
     9e8:	99 1f       	adc	r25, r25
     9ea:	aa 1f       	adc	r26, r26
     9ec:	bb 1f       	adc	r27, r27
     9ee:	2a 95       	dec	r18
     9f0:	d2 f7       	brpl	.-12     	; 0x9e6 <__pack_f+0x94>
     9f2:	01 97       	sbiw	r24, 0x01	; 1
     9f4:	a1 09       	sbc	r26, r1
     9f6:	b1 09       	sbc	r27, r1
     9f8:	8e 21       	and	r24, r14
     9fa:	9f 21       	and	r25, r15
     9fc:	a0 23       	and	r26, r16
     9fe:	b1 23       	and	r27, r17
     a00:	00 97       	sbiw	r24, 0x00	; 0
     a02:	a1 05       	cpc	r26, r1
     a04:	b1 05       	cpc	r27, r1
     a06:	21 f0       	breq	.+8      	; 0xa10 <__pack_f+0xbe>
     a08:	81 e0       	ldi	r24, 0x01	; 1
     a0a:	90 e0       	ldi	r25, 0x00	; 0
     a0c:	a0 e0       	ldi	r26, 0x00	; 0
     a0e:	b0 e0       	ldi	r27, 0x00	; 0
     a10:	9a 01       	movw	r18, r20
     a12:	ab 01       	movw	r20, r22
     a14:	28 2b       	or	r18, r24
     a16:	39 2b       	or	r19, r25
     a18:	4a 2b       	or	r20, r26
     a1a:	5b 2b       	or	r21, r27
     a1c:	da 01       	movw	r26, r20
     a1e:	c9 01       	movw	r24, r18
     a20:	8f 77       	andi	r24, 0x7F	; 127
     a22:	90 70       	andi	r25, 0x00	; 0
     a24:	a0 70       	andi	r26, 0x00	; 0
     a26:	b0 70       	andi	r27, 0x00	; 0
     a28:	80 34       	cpi	r24, 0x40	; 64
     a2a:	91 05       	cpc	r25, r1
     a2c:	a1 05       	cpc	r26, r1
     a2e:	b1 05       	cpc	r27, r1
     a30:	39 f4       	brne	.+14     	; 0xa40 <__pack_f+0xee>
     a32:	27 ff       	sbrs	r18, 7
     a34:	09 c0       	rjmp	.+18     	; 0xa48 <__pack_f+0xf6>
     a36:	20 5c       	subi	r18, 0xC0	; 192
     a38:	3f 4f       	sbci	r19, 0xFF	; 255
     a3a:	4f 4f       	sbci	r20, 0xFF	; 255
     a3c:	5f 4f       	sbci	r21, 0xFF	; 255
     a3e:	04 c0       	rjmp	.+8      	; 0xa48 <__pack_f+0xf6>
     a40:	21 5c       	subi	r18, 0xC1	; 193
     a42:	3f 4f       	sbci	r19, 0xFF	; 255
     a44:	4f 4f       	sbci	r20, 0xFF	; 255
     a46:	5f 4f       	sbci	r21, 0xFF	; 255
     a48:	e0 e0       	ldi	r30, 0x00	; 0
     a4a:	f0 e0       	ldi	r31, 0x00	; 0
     a4c:	20 30       	cpi	r18, 0x00	; 0
     a4e:	a0 e0       	ldi	r26, 0x00	; 0
     a50:	3a 07       	cpc	r19, r26
     a52:	a0 e0       	ldi	r26, 0x00	; 0
     a54:	4a 07       	cpc	r20, r26
     a56:	a0 e4       	ldi	r26, 0x40	; 64
     a58:	5a 07       	cpc	r21, r26
     a5a:	10 f0       	brcs	.+4      	; 0xa60 <__pack_f+0x10e>
     a5c:	e1 e0       	ldi	r30, 0x01	; 1
     a5e:	f0 e0       	ldi	r31, 0x00	; 0
     a60:	79 01       	movw	r14, r18
     a62:	8a 01       	movw	r16, r20
     a64:	27 c0       	rjmp	.+78     	; 0xab4 <__pack_f+0x162>
     a66:	60 38       	cpi	r22, 0x80	; 128
     a68:	71 05       	cpc	r23, r1
     a6a:	64 f5       	brge	.+88     	; 0xac4 <__pack_f+0x172>
     a6c:	fb 01       	movw	r30, r22
     a6e:	e1 58       	subi	r30, 0x81	; 129
     a70:	ff 4f       	sbci	r31, 0xFF	; 255
     a72:	d8 01       	movw	r26, r16
     a74:	c7 01       	movw	r24, r14
     a76:	8f 77       	andi	r24, 0x7F	; 127
     a78:	90 70       	andi	r25, 0x00	; 0
     a7a:	a0 70       	andi	r26, 0x00	; 0
     a7c:	b0 70       	andi	r27, 0x00	; 0
     a7e:	80 34       	cpi	r24, 0x40	; 64
     a80:	91 05       	cpc	r25, r1
     a82:	a1 05       	cpc	r26, r1
     a84:	b1 05       	cpc	r27, r1
     a86:	39 f4       	brne	.+14     	; 0xa96 <__pack_f+0x144>
     a88:	e7 fe       	sbrs	r14, 7
     a8a:	0d c0       	rjmp	.+26     	; 0xaa6 <__pack_f+0x154>
     a8c:	80 e4       	ldi	r24, 0x40	; 64
     a8e:	90 e0       	ldi	r25, 0x00	; 0
     a90:	a0 e0       	ldi	r26, 0x00	; 0
     a92:	b0 e0       	ldi	r27, 0x00	; 0
     a94:	04 c0       	rjmp	.+8      	; 0xa9e <__pack_f+0x14c>
     a96:	8f e3       	ldi	r24, 0x3F	; 63
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	e8 0e       	add	r14, r24
     aa0:	f9 1e       	adc	r15, r25
     aa2:	0a 1f       	adc	r16, r26
     aa4:	1b 1f       	adc	r17, r27
     aa6:	17 ff       	sbrs	r17, 7
     aa8:	05 c0       	rjmp	.+10     	; 0xab4 <__pack_f+0x162>
     aaa:	16 95       	lsr	r17
     aac:	07 95       	ror	r16
     aae:	f7 94       	ror	r15
     ab0:	e7 94       	ror	r14
     ab2:	31 96       	adiw	r30, 0x01	; 1
     ab4:	87 e0       	ldi	r24, 0x07	; 7
     ab6:	16 95       	lsr	r17
     ab8:	07 95       	ror	r16
     aba:	f7 94       	ror	r15
     abc:	e7 94       	ror	r14
     abe:	8a 95       	dec	r24
     ac0:	d1 f7       	brne	.-12     	; 0xab6 <__pack_f+0x164>
     ac2:	05 c0       	rjmp	.+10     	; 0xace <__pack_f+0x17c>
     ac4:	ee 24       	eor	r14, r14
     ac6:	ff 24       	eor	r15, r15
     ac8:	87 01       	movw	r16, r14
     aca:	ef ef       	ldi	r30, 0xFF	; 255
     acc:	f0 e0       	ldi	r31, 0x00	; 0
     ace:	6e 2f       	mov	r22, r30
     ad0:	67 95       	ror	r22
     ad2:	66 27       	eor	r22, r22
     ad4:	67 95       	ror	r22
     ad6:	90 2f       	mov	r25, r16
     ad8:	9f 77       	andi	r25, 0x7F	; 127
     ada:	d7 94       	ror	r13
     adc:	dd 24       	eor	r13, r13
     ade:	d7 94       	ror	r13
     ae0:	8e 2f       	mov	r24, r30
     ae2:	86 95       	lsr	r24
     ae4:	49 2f       	mov	r20, r25
     ae6:	46 2b       	or	r20, r22
     ae8:	58 2f       	mov	r21, r24
     aea:	5d 29       	or	r21, r13
     aec:	b7 01       	movw	r22, r14
     aee:	ca 01       	movw	r24, r20
     af0:	1f 91       	pop	r17
     af2:	0f 91       	pop	r16
     af4:	ff 90       	pop	r15
     af6:	ef 90       	pop	r14
     af8:	df 90       	pop	r13
     afa:	08 95       	ret

00000afc <__unpack_f>:
     afc:	fc 01       	movw	r30, r24
     afe:	db 01       	movw	r26, r22
     b00:	40 81       	ld	r20, Z
     b02:	51 81       	ldd	r21, Z+1	; 0x01
     b04:	22 81       	ldd	r18, Z+2	; 0x02
     b06:	62 2f       	mov	r22, r18
     b08:	6f 77       	andi	r22, 0x7F	; 127
     b0a:	70 e0       	ldi	r23, 0x00	; 0
     b0c:	22 1f       	adc	r18, r18
     b0e:	22 27       	eor	r18, r18
     b10:	22 1f       	adc	r18, r18
     b12:	93 81       	ldd	r25, Z+3	; 0x03
     b14:	89 2f       	mov	r24, r25
     b16:	88 0f       	add	r24, r24
     b18:	82 2b       	or	r24, r18
     b1a:	28 2f       	mov	r18, r24
     b1c:	30 e0       	ldi	r19, 0x00	; 0
     b1e:	99 1f       	adc	r25, r25
     b20:	99 27       	eor	r25, r25
     b22:	99 1f       	adc	r25, r25
     b24:	11 96       	adiw	r26, 0x01	; 1
     b26:	9c 93       	st	X, r25
     b28:	11 97       	sbiw	r26, 0x01	; 1
     b2a:	21 15       	cp	r18, r1
     b2c:	31 05       	cpc	r19, r1
     b2e:	a9 f5       	brne	.+106    	; 0xb9a <__unpack_f+0x9e>
     b30:	41 15       	cp	r20, r1
     b32:	51 05       	cpc	r21, r1
     b34:	61 05       	cpc	r22, r1
     b36:	71 05       	cpc	r23, r1
     b38:	11 f4       	brne	.+4      	; 0xb3e <__unpack_f+0x42>
     b3a:	82 e0       	ldi	r24, 0x02	; 2
     b3c:	37 c0       	rjmp	.+110    	; 0xbac <__unpack_f+0xb0>
     b3e:	82 e8       	ldi	r24, 0x82	; 130
     b40:	9f ef       	ldi	r25, 0xFF	; 255
     b42:	13 96       	adiw	r26, 0x03	; 3
     b44:	9c 93       	st	X, r25
     b46:	8e 93       	st	-X, r24
     b48:	12 97       	sbiw	r26, 0x02	; 2
     b4a:	9a 01       	movw	r18, r20
     b4c:	ab 01       	movw	r20, r22
     b4e:	67 e0       	ldi	r22, 0x07	; 7
     b50:	22 0f       	add	r18, r18
     b52:	33 1f       	adc	r19, r19
     b54:	44 1f       	adc	r20, r20
     b56:	55 1f       	adc	r21, r21
     b58:	6a 95       	dec	r22
     b5a:	d1 f7       	brne	.-12     	; 0xb50 <__unpack_f+0x54>
     b5c:	83 e0       	ldi	r24, 0x03	; 3
     b5e:	8c 93       	st	X, r24
     b60:	0d c0       	rjmp	.+26     	; 0xb7c <__unpack_f+0x80>
     b62:	22 0f       	add	r18, r18
     b64:	33 1f       	adc	r19, r19
     b66:	44 1f       	adc	r20, r20
     b68:	55 1f       	adc	r21, r21
     b6a:	12 96       	adiw	r26, 0x02	; 2
     b6c:	8d 91       	ld	r24, X+
     b6e:	9c 91       	ld	r25, X
     b70:	13 97       	sbiw	r26, 0x03	; 3
     b72:	01 97       	sbiw	r24, 0x01	; 1
     b74:	13 96       	adiw	r26, 0x03	; 3
     b76:	9c 93       	st	X, r25
     b78:	8e 93       	st	-X, r24
     b7a:	12 97       	sbiw	r26, 0x02	; 2
     b7c:	20 30       	cpi	r18, 0x00	; 0
     b7e:	80 e0       	ldi	r24, 0x00	; 0
     b80:	38 07       	cpc	r19, r24
     b82:	80 e0       	ldi	r24, 0x00	; 0
     b84:	48 07       	cpc	r20, r24
     b86:	80 e4       	ldi	r24, 0x40	; 64
     b88:	58 07       	cpc	r21, r24
     b8a:	58 f3       	brcs	.-42     	; 0xb62 <__unpack_f+0x66>
     b8c:	14 96       	adiw	r26, 0x04	; 4
     b8e:	2d 93       	st	X+, r18
     b90:	3d 93       	st	X+, r19
     b92:	4d 93       	st	X+, r20
     b94:	5c 93       	st	X, r21
     b96:	17 97       	sbiw	r26, 0x07	; 7
     b98:	08 95       	ret
     b9a:	2f 3f       	cpi	r18, 0xFF	; 255
     b9c:	31 05       	cpc	r19, r1
     b9e:	79 f4       	brne	.+30     	; 0xbbe <__unpack_f+0xc2>
     ba0:	41 15       	cp	r20, r1
     ba2:	51 05       	cpc	r21, r1
     ba4:	61 05       	cpc	r22, r1
     ba6:	71 05       	cpc	r23, r1
     ba8:	19 f4       	brne	.+6      	; 0xbb0 <__unpack_f+0xb4>
     baa:	84 e0       	ldi	r24, 0x04	; 4
     bac:	8c 93       	st	X, r24
     bae:	08 95       	ret
     bb0:	64 ff       	sbrs	r22, 4
     bb2:	03 c0       	rjmp	.+6      	; 0xbba <__unpack_f+0xbe>
     bb4:	81 e0       	ldi	r24, 0x01	; 1
     bb6:	8c 93       	st	X, r24
     bb8:	12 c0       	rjmp	.+36     	; 0xbde <__unpack_f+0xe2>
     bba:	1c 92       	st	X, r1
     bbc:	10 c0       	rjmp	.+32     	; 0xbde <__unpack_f+0xe2>
     bbe:	2f 57       	subi	r18, 0x7F	; 127
     bc0:	30 40       	sbci	r19, 0x00	; 0
     bc2:	13 96       	adiw	r26, 0x03	; 3
     bc4:	3c 93       	st	X, r19
     bc6:	2e 93       	st	-X, r18
     bc8:	12 97       	sbiw	r26, 0x02	; 2
     bca:	83 e0       	ldi	r24, 0x03	; 3
     bcc:	8c 93       	st	X, r24
     bce:	87 e0       	ldi	r24, 0x07	; 7
     bd0:	44 0f       	add	r20, r20
     bd2:	55 1f       	adc	r21, r21
     bd4:	66 1f       	adc	r22, r22
     bd6:	77 1f       	adc	r23, r23
     bd8:	8a 95       	dec	r24
     bda:	d1 f7       	brne	.-12     	; 0xbd0 <__unpack_f+0xd4>
     bdc:	70 64       	ori	r23, 0x40	; 64
     bde:	14 96       	adiw	r26, 0x04	; 4
     be0:	4d 93       	st	X+, r20
     be2:	5d 93       	st	X+, r21
     be4:	6d 93       	st	X+, r22
     be6:	7c 93       	st	X, r23
     be8:	17 97       	sbiw	r26, 0x07	; 7
     bea:	08 95       	ret

00000bec <__fpcmp_parts_f>:
     bec:	1f 93       	push	r17
     bee:	dc 01       	movw	r26, r24
     bf0:	fb 01       	movw	r30, r22
     bf2:	9c 91       	ld	r25, X
     bf4:	92 30       	cpi	r25, 0x02	; 2
     bf6:	08 f4       	brcc	.+2      	; 0xbfa <__fpcmp_parts_f+0xe>
     bf8:	47 c0       	rjmp	.+142    	; 0xc88 <__fpcmp_parts_f+0x9c>
     bfa:	80 81       	ld	r24, Z
     bfc:	82 30       	cpi	r24, 0x02	; 2
     bfe:	08 f4       	brcc	.+2      	; 0xc02 <__fpcmp_parts_f+0x16>
     c00:	43 c0       	rjmp	.+134    	; 0xc88 <__fpcmp_parts_f+0x9c>
     c02:	94 30       	cpi	r25, 0x04	; 4
     c04:	51 f4       	brne	.+20     	; 0xc1a <__fpcmp_parts_f+0x2e>
     c06:	11 96       	adiw	r26, 0x01	; 1
     c08:	1c 91       	ld	r17, X
     c0a:	84 30       	cpi	r24, 0x04	; 4
     c0c:	99 f5       	brne	.+102    	; 0xc74 <__fpcmp_parts_f+0x88>
     c0e:	81 81       	ldd	r24, Z+1	; 0x01
     c10:	68 2f       	mov	r22, r24
     c12:	70 e0       	ldi	r23, 0x00	; 0
     c14:	61 1b       	sub	r22, r17
     c16:	71 09       	sbc	r23, r1
     c18:	3f c0       	rjmp	.+126    	; 0xc98 <__fpcmp_parts_f+0xac>
     c1a:	84 30       	cpi	r24, 0x04	; 4
     c1c:	21 f0       	breq	.+8      	; 0xc26 <__fpcmp_parts_f+0x3a>
     c1e:	92 30       	cpi	r25, 0x02	; 2
     c20:	31 f4       	brne	.+12     	; 0xc2e <__fpcmp_parts_f+0x42>
     c22:	82 30       	cpi	r24, 0x02	; 2
     c24:	b9 f1       	breq	.+110    	; 0xc94 <__fpcmp_parts_f+0xa8>
     c26:	81 81       	ldd	r24, Z+1	; 0x01
     c28:	88 23       	and	r24, r24
     c2a:	89 f1       	breq	.+98     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c2c:	2d c0       	rjmp	.+90     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c2e:	11 96       	adiw	r26, 0x01	; 1
     c30:	1c 91       	ld	r17, X
     c32:	11 97       	sbiw	r26, 0x01	; 1
     c34:	82 30       	cpi	r24, 0x02	; 2
     c36:	f1 f0       	breq	.+60     	; 0xc74 <__fpcmp_parts_f+0x88>
     c38:	81 81       	ldd	r24, Z+1	; 0x01
     c3a:	18 17       	cp	r17, r24
     c3c:	d9 f4       	brne	.+54     	; 0xc74 <__fpcmp_parts_f+0x88>
     c3e:	12 96       	adiw	r26, 0x02	; 2
     c40:	2d 91       	ld	r18, X+
     c42:	3c 91       	ld	r19, X
     c44:	13 97       	sbiw	r26, 0x03	; 3
     c46:	82 81       	ldd	r24, Z+2	; 0x02
     c48:	93 81       	ldd	r25, Z+3	; 0x03
     c4a:	82 17       	cp	r24, r18
     c4c:	93 07       	cpc	r25, r19
     c4e:	94 f0       	brlt	.+36     	; 0xc74 <__fpcmp_parts_f+0x88>
     c50:	28 17       	cp	r18, r24
     c52:	39 07       	cpc	r19, r25
     c54:	bc f0       	brlt	.+46     	; 0xc84 <__fpcmp_parts_f+0x98>
     c56:	14 96       	adiw	r26, 0x04	; 4
     c58:	8d 91       	ld	r24, X+
     c5a:	9d 91       	ld	r25, X+
     c5c:	0d 90       	ld	r0, X+
     c5e:	bc 91       	ld	r27, X
     c60:	a0 2d       	mov	r26, r0
     c62:	24 81       	ldd	r18, Z+4	; 0x04
     c64:	35 81       	ldd	r19, Z+5	; 0x05
     c66:	46 81       	ldd	r20, Z+6	; 0x06
     c68:	57 81       	ldd	r21, Z+7	; 0x07
     c6a:	28 17       	cp	r18, r24
     c6c:	39 07       	cpc	r19, r25
     c6e:	4a 07       	cpc	r20, r26
     c70:	5b 07       	cpc	r21, r27
     c72:	18 f4       	brcc	.+6      	; 0xc7a <__fpcmp_parts_f+0x8e>
     c74:	11 23       	and	r17, r17
     c76:	41 f0       	breq	.+16     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c78:	0a c0       	rjmp	.+20     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c7a:	82 17       	cp	r24, r18
     c7c:	93 07       	cpc	r25, r19
     c7e:	a4 07       	cpc	r26, r20
     c80:	b5 07       	cpc	r27, r21
     c82:	40 f4       	brcc	.+16     	; 0xc94 <__fpcmp_parts_f+0xa8>
     c84:	11 23       	and	r17, r17
     c86:	19 f0       	breq	.+6      	; 0xc8e <__fpcmp_parts_f+0xa2>
     c88:	61 e0       	ldi	r22, 0x01	; 1
     c8a:	70 e0       	ldi	r23, 0x00	; 0
     c8c:	05 c0       	rjmp	.+10     	; 0xc98 <__fpcmp_parts_f+0xac>
     c8e:	6f ef       	ldi	r22, 0xFF	; 255
     c90:	7f ef       	ldi	r23, 0xFF	; 255
     c92:	02 c0       	rjmp	.+4      	; 0xc98 <__fpcmp_parts_f+0xac>
     c94:	60 e0       	ldi	r22, 0x00	; 0
     c96:	70 e0       	ldi	r23, 0x00	; 0
     c98:	cb 01       	movw	r24, r22
     c9a:	1f 91       	pop	r17
     c9c:	08 95       	ret

00000c9e <HDCMOTOR_voidHBridge>:

#include <util/delay.h>

//H-bridge using 4npn transistors 2N2222
void HDCMOTOR_voidHBridge()
{
     c9e:	df 93       	push	r29
     ca0:	cf 93       	push	r28
     ca2:	cd b7       	in	r28, 0x3d	; 61
     ca4:	de b7       	in	r29, 0x3e	; 62
     ca6:	6c 97       	sbiw	r28, 0x1c	; 28
     ca8:	0f b6       	in	r0, 0x3f	; 63
     caa:	f8 94       	cli
     cac:	de bf       	out	0x3e, r29	; 62
     cae:	0f be       	out	0x3f, r0	; 63
     cb0:	cd bf       	out	0x3d, r28	; 61
    MDIO_voidSetPinValue(DC_MOTOR_PORT,DC_MOTOR_PIN1,PIN_HIGH);
     cb2:	80 e0       	ldi	r24, 0x00	; 0
     cb4:	60 e0       	ldi	r22, 0x00	; 0
     cb6:	41 e0       	ldi	r20, 0x01	; 1
     cb8:	0e 94 32 08 	call	0x1064	; 0x1064 <MDIO_voidSetPinValue>
    MDIO_voidSetPinValue(DC_MOTOR_PORT,DC_MOTOR_PIN2,PIN_LOW);
     cbc:	80 e0       	ldi	r24, 0x00	; 0
     cbe:	61 e0       	ldi	r22, 0x01	; 1
     cc0:	40 e0       	ldi	r20, 0x00	; 0
     cc2:	0e 94 32 08 	call	0x1064	; 0x1064 <MDIO_voidSetPinValue>
     cc6:	80 e0       	ldi	r24, 0x00	; 0
     cc8:	90 e0       	ldi	r25, 0x00	; 0
     cca:	aa e7       	ldi	r26, 0x7A	; 122
     ccc:	b4 e4       	ldi	r27, 0x44	; 68
     cce:	89 8f       	std	Y+25, r24	; 0x19
     cd0:	9a 8f       	std	Y+26, r25	; 0x1a
     cd2:	ab 8f       	std	Y+27, r26	; 0x1b
     cd4:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     cd6:	69 8d       	ldd	r22, Y+25	; 0x19
     cd8:	7a 8d       	ldd	r23, Y+26	; 0x1a
     cda:	8b 8d       	ldd	r24, Y+27	; 0x1b
     cdc:	9c 8d       	ldd	r25, Y+28	; 0x1c
     cde:	20 e0       	ldi	r18, 0x00	; 0
     ce0:	30 e0       	ldi	r19, 0x00	; 0
     ce2:	4a ef       	ldi	r20, 0xFA	; 250
     ce4:	54 e4       	ldi	r21, 0x44	; 68
     ce6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     cea:	dc 01       	movw	r26, r24
     cec:	cb 01       	movw	r24, r22
     cee:	8d 8b       	std	Y+21, r24	; 0x15
     cf0:	9e 8b       	std	Y+22, r25	; 0x16
     cf2:	af 8b       	std	Y+23, r26	; 0x17
     cf4:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     cf6:	6d 89       	ldd	r22, Y+21	; 0x15
     cf8:	7e 89       	ldd	r23, Y+22	; 0x16
     cfa:	8f 89       	ldd	r24, Y+23	; 0x17
     cfc:	98 8d       	ldd	r25, Y+24	; 0x18
     cfe:	20 e0       	ldi	r18, 0x00	; 0
     d00:	30 e0       	ldi	r19, 0x00	; 0
     d02:	40 e8       	ldi	r20, 0x80	; 128
     d04:	5f e3       	ldi	r21, 0x3F	; 63
     d06:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
     d0a:	88 23       	and	r24, r24
     d0c:	2c f4       	brge	.+10     	; 0xd18 <HDCMOTOR_voidHBridge+0x7a>
		__ticks = 1;
     d0e:	81 e0       	ldi	r24, 0x01	; 1
     d10:	90 e0       	ldi	r25, 0x00	; 0
     d12:	9c 8b       	std	Y+20, r25	; 0x14
     d14:	8b 8b       	std	Y+19, r24	; 0x13
     d16:	3f c0       	rjmp	.+126    	; 0xd96 <HDCMOTOR_voidHBridge+0xf8>
	else if (__tmp > 65535)
     d18:	6d 89       	ldd	r22, Y+21	; 0x15
     d1a:	7e 89       	ldd	r23, Y+22	; 0x16
     d1c:	8f 89       	ldd	r24, Y+23	; 0x17
     d1e:	98 8d       	ldd	r25, Y+24	; 0x18
     d20:	20 e0       	ldi	r18, 0x00	; 0
     d22:	3f ef       	ldi	r19, 0xFF	; 255
     d24:	4f e7       	ldi	r20, 0x7F	; 127
     d26:	57 e4       	ldi	r21, 0x47	; 71
     d28:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
     d2c:	18 16       	cp	r1, r24
     d2e:	4c f5       	brge	.+82     	; 0xd82 <HDCMOTOR_voidHBridge+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     d30:	69 8d       	ldd	r22, Y+25	; 0x19
     d32:	7a 8d       	ldd	r23, Y+26	; 0x1a
     d34:	8b 8d       	ldd	r24, Y+27	; 0x1b
     d36:	9c 8d       	ldd	r25, Y+28	; 0x1c
     d38:	20 e0       	ldi	r18, 0x00	; 0
     d3a:	30 e0       	ldi	r19, 0x00	; 0
     d3c:	40 e2       	ldi	r20, 0x20	; 32
     d3e:	51 e4       	ldi	r21, 0x41	; 65
     d40:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d44:	dc 01       	movw	r26, r24
     d46:	cb 01       	movw	r24, r22
     d48:	bc 01       	movw	r22, r24
     d4a:	cd 01       	movw	r24, r26
     d4c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     d50:	dc 01       	movw	r26, r24
     d52:	cb 01       	movw	r24, r22
     d54:	9c 8b       	std	Y+20, r25	; 0x14
     d56:	8b 8b       	std	Y+19, r24	; 0x13
     d58:	0f c0       	rjmp	.+30     	; 0xd78 <HDCMOTOR_voidHBridge+0xda>
     d5a:	88 ec       	ldi	r24, 0xC8	; 200
     d5c:	90 e0       	ldi	r25, 0x00	; 0
     d5e:	9a 8b       	std	Y+18, r25	; 0x12
     d60:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     d62:	89 89       	ldd	r24, Y+17	; 0x11
     d64:	9a 89       	ldd	r25, Y+18	; 0x12
     d66:	01 97       	sbiw	r24, 0x01	; 1
     d68:	f1 f7       	brne	.-4      	; 0xd66 <HDCMOTOR_voidHBridge+0xc8>
     d6a:	9a 8b       	std	Y+18, r25	; 0x12
     d6c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     d6e:	8b 89       	ldd	r24, Y+19	; 0x13
     d70:	9c 89       	ldd	r25, Y+20	; 0x14
     d72:	01 97       	sbiw	r24, 0x01	; 1
     d74:	9c 8b       	std	Y+20, r25	; 0x14
     d76:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     d78:	8b 89       	ldd	r24, Y+19	; 0x13
     d7a:	9c 89       	ldd	r25, Y+20	; 0x14
     d7c:	00 97       	sbiw	r24, 0x00	; 0
     d7e:	69 f7       	brne	.-38     	; 0xd5a <HDCMOTOR_voidHBridge+0xbc>
     d80:	14 c0       	rjmp	.+40     	; 0xdaa <HDCMOTOR_voidHBridge+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     d82:	6d 89       	ldd	r22, Y+21	; 0x15
     d84:	7e 89       	ldd	r23, Y+22	; 0x16
     d86:	8f 89       	ldd	r24, Y+23	; 0x17
     d88:	98 8d       	ldd	r25, Y+24	; 0x18
     d8a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     d8e:	dc 01       	movw	r26, r24
     d90:	cb 01       	movw	r24, r22
     d92:	9c 8b       	std	Y+20, r25	; 0x14
     d94:	8b 8b       	std	Y+19, r24	; 0x13
     d96:	8b 89       	ldd	r24, Y+19	; 0x13
     d98:	9c 89       	ldd	r25, Y+20	; 0x14
     d9a:	98 8b       	std	Y+16, r25	; 0x10
     d9c:	8f 87       	std	Y+15, r24	; 0x0f
     d9e:	8f 85       	ldd	r24, Y+15	; 0x0f
     da0:	98 89       	ldd	r25, Y+16	; 0x10
     da2:	01 97       	sbiw	r24, 0x01	; 1
     da4:	f1 f7       	brne	.-4      	; 0xda2 <HDCMOTOR_voidHBridge+0x104>
     da6:	98 8b       	std	Y+16, r25	; 0x10
     da8:	8f 87       	std	Y+15, r24	; 0x0f
    _delay_ms(INVERSE_MOTOR_DELAY);
    MDIO_voidSetPinValue(DC_MOTOR_PORT,DC_MOTOR_PIN1,PIN_LOW);
     daa:	80 e0       	ldi	r24, 0x00	; 0
     dac:	60 e0       	ldi	r22, 0x00	; 0
     dae:	40 e0       	ldi	r20, 0x00	; 0
     db0:	0e 94 32 08 	call	0x1064	; 0x1064 <MDIO_voidSetPinValue>
    MDIO_voidSetPinValue(DC_MOTOR_PORT,DC_MOTOR_PIN2,PIN_HIGH);
     db4:	80 e0       	ldi	r24, 0x00	; 0
     db6:	61 e0       	ldi	r22, 0x01	; 1
     db8:	41 e0       	ldi	r20, 0x01	; 1
     dba:	0e 94 32 08 	call	0x1064	; 0x1064 <MDIO_voidSetPinValue>
     dbe:	80 e0       	ldi	r24, 0x00	; 0
     dc0:	90 e0       	ldi	r25, 0x00	; 0
     dc2:	aa e7       	ldi	r26, 0x7A	; 122
     dc4:	b4 e4       	ldi	r27, 0x44	; 68
     dc6:	8b 87       	std	Y+11, r24	; 0x0b
     dc8:	9c 87       	std	Y+12, r25	; 0x0c
     dca:	ad 87       	std	Y+13, r26	; 0x0d
     dcc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     dce:	6b 85       	ldd	r22, Y+11	; 0x0b
     dd0:	7c 85       	ldd	r23, Y+12	; 0x0c
     dd2:	8d 85       	ldd	r24, Y+13	; 0x0d
     dd4:	9e 85       	ldd	r25, Y+14	; 0x0e
     dd6:	20 e0       	ldi	r18, 0x00	; 0
     dd8:	30 e0       	ldi	r19, 0x00	; 0
     dda:	4a ef       	ldi	r20, 0xFA	; 250
     ddc:	54 e4       	ldi	r21, 0x44	; 68
     dde:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     de2:	dc 01       	movw	r26, r24
     de4:	cb 01       	movw	r24, r22
     de6:	8f 83       	std	Y+7, r24	; 0x07
     de8:	98 87       	std	Y+8, r25	; 0x08
     dea:	a9 87       	std	Y+9, r26	; 0x09
     dec:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     dee:	6f 81       	ldd	r22, Y+7	; 0x07
     df0:	78 85       	ldd	r23, Y+8	; 0x08
     df2:	89 85       	ldd	r24, Y+9	; 0x09
     df4:	9a 85       	ldd	r25, Y+10	; 0x0a
     df6:	20 e0       	ldi	r18, 0x00	; 0
     df8:	30 e0       	ldi	r19, 0x00	; 0
     dfa:	40 e8       	ldi	r20, 0x80	; 128
     dfc:	5f e3       	ldi	r21, 0x3F	; 63
     dfe:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
     e02:	88 23       	and	r24, r24
     e04:	2c f4       	brge	.+10     	; 0xe10 <HDCMOTOR_voidHBridge+0x172>
		__ticks = 1;
     e06:	81 e0       	ldi	r24, 0x01	; 1
     e08:	90 e0       	ldi	r25, 0x00	; 0
     e0a:	9e 83       	std	Y+6, r25	; 0x06
     e0c:	8d 83       	std	Y+5, r24	; 0x05
     e0e:	3f c0       	rjmp	.+126    	; 0xe8e <HDCMOTOR_voidHBridge+0x1f0>
	else if (__tmp > 65535)
     e10:	6f 81       	ldd	r22, Y+7	; 0x07
     e12:	78 85       	ldd	r23, Y+8	; 0x08
     e14:	89 85       	ldd	r24, Y+9	; 0x09
     e16:	9a 85       	ldd	r25, Y+10	; 0x0a
     e18:	20 e0       	ldi	r18, 0x00	; 0
     e1a:	3f ef       	ldi	r19, 0xFF	; 255
     e1c:	4f e7       	ldi	r20, 0x7F	; 127
     e1e:	57 e4       	ldi	r21, 0x47	; 71
     e20:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
     e24:	18 16       	cp	r1, r24
     e26:	4c f5       	brge	.+82     	; 0xe7a <HDCMOTOR_voidHBridge+0x1dc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     e28:	6b 85       	ldd	r22, Y+11	; 0x0b
     e2a:	7c 85       	ldd	r23, Y+12	; 0x0c
     e2c:	8d 85       	ldd	r24, Y+13	; 0x0d
     e2e:	9e 85       	ldd	r25, Y+14	; 0x0e
     e30:	20 e0       	ldi	r18, 0x00	; 0
     e32:	30 e0       	ldi	r19, 0x00	; 0
     e34:	40 e2       	ldi	r20, 0x20	; 32
     e36:	51 e4       	ldi	r21, 0x41	; 65
     e38:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e3c:	dc 01       	movw	r26, r24
     e3e:	cb 01       	movw	r24, r22
     e40:	bc 01       	movw	r22, r24
     e42:	cd 01       	movw	r24, r26
     e44:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e48:	dc 01       	movw	r26, r24
     e4a:	cb 01       	movw	r24, r22
     e4c:	9e 83       	std	Y+6, r25	; 0x06
     e4e:	8d 83       	std	Y+5, r24	; 0x05
     e50:	0f c0       	rjmp	.+30     	; 0xe70 <HDCMOTOR_voidHBridge+0x1d2>
     e52:	88 ec       	ldi	r24, 0xC8	; 200
     e54:	90 e0       	ldi	r25, 0x00	; 0
     e56:	9c 83       	std	Y+4, r25	; 0x04
     e58:	8b 83       	std	Y+3, r24	; 0x03
     e5a:	8b 81       	ldd	r24, Y+3	; 0x03
     e5c:	9c 81       	ldd	r25, Y+4	; 0x04
     e5e:	01 97       	sbiw	r24, 0x01	; 1
     e60:	f1 f7       	brne	.-4      	; 0xe5e <HDCMOTOR_voidHBridge+0x1c0>
     e62:	9c 83       	std	Y+4, r25	; 0x04
     e64:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e66:	8d 81       	ldd	r24, Y+5	; 0x05
     e68:	9e 81       	ldd	r25, Y+6	; 0x06
     e6a:	01 97       	sbiw	r24, 0x01	; 1
     e6c:	9e 83       	std	Y+6, r25	; 0x06
     e6e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e70:	8d 81       	ldd	r24, Y+5	; 0x05
     e72:	9e 81       	ldd	r25, Y+6	; 0x06
     e74:	00 97       	sbiw	r24, 0x00	; 0
     e76:	69 f7       	brne	.-38     	; 0xe52 <HDCMOTOR_voidHBridge+0x1b4>
     e78:	14 c0       	rjmp	.+40     	; 0xea2 <HDCMOTOR_voidHBridge+0x204>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     e7a:	6f 81       	ldd	r22, Y+7	; 0x07
     e7c:	78 85       	ldd	r23, Y+8	; 0x08
     e7e:	89 85       	ldd	r24, Y+9	; 0x09
     e80:	9a 85       	ldd	r25, Y+10	; 0x0a
     e82:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e86:	dc 01       	movw	r26, r24
     e88:	cb 01       	movw	r24, r22
     e8a:	9e 83       	std	Y+6, r25	; 0x06
     e8c:	8d 83       	std	Y+5, r24	; 0x05
     e8e:	8d 81       	ldd	r24, Y+5	; 0x05
     e90:	9e 81       	ldd	r25, Y+6	; 0x06
     e92:	9a 83       	std	Y+2, r25	; 0x02
     e94:	89 83       	std	Y+1, r24	; 0x01
     e96:	89 81       	ldd	r24, Y+1	; 0x01
     e98:	9a 81       	ldd	r25, Y+2	; 0x02
     e9a:	01 97       	sbiw	r24, 0x01	; 1
     e9c:	f1 f7       	brne	.-4      	; 0xe9a <HDCMOTOR_voidHBridge+0x1fc>
     e9e:	9a 83       	std	Y+2, r25	; 0x02
     ea0:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(INVERSE_MOTOR_DELAY);
    
}
     ea2:	6c 96       	adiw	r28, 0x1c	; 28
     ea4:	0f b6       	in	r0, 0x3f	; 63
     ea6:	f8 94       	cli
     ea8:	de bf       	out	0x3e, r29	; 62
     eaa:	0f be       	out	0x3f, r0	; 63
     eac:	cd bf       	out	0x3d, r28	; 61
     eae:	cf 91       	pop	r28
     eb0:	df 91       	pop	r29
     eb2:	08 95       	ret

00000eb4 <MDIO_voidInit>:
#include "../Include/MCAL/DIO/DIO_Private.h"
#include "../Include/MCAL/DIO/DIO_Configuration.h"
#include "../Include/MCAL/DIO/DIO_Interface.h"

void MDIO_voidInit()
{
     eb4:	df 93       	push	r29
     eb6:	cf 93       	push	r28
     eb8:	cd b7       	in	r28, 0x3d	; 61
     eba:	de b7       	in	r29, 0x3e	; 62
    PORTA_REG=CONC_BIT(PORTA_PIN7_VALUE,PORTA_PIN6_VALUE,PORTA_PIN5_VALUE,PORTA_PIN4_VALUE,PORTA_PIN3_VALUE,PORTA_PIN2_VALUE,PORTA_PIN1_VALUE,PORTA_PIN0_VALUE);
     ebc:	eb e3       	ldi	r30, 0x3B	; 59
     ebe:	f0 e0       	ldi	r31, 0x00	; 0
     ec0:	10 82       	st	Z, r1
    PORTB_REG=CONC_BIT(PORTB_PIN7_VALUE,PORTB_PIN6_VALUE,PORTB_PIN5_VALUE,PORTB_PIN4_VALUE,PORTB_PIN3_VALUE,PORTB_PIN2_VALUE,PORTB_PIN1_VALUE,PORTB_PIN0_VALUE);
     ec2:	e8 e3       	ldi	r30, 0x38	; 56
     ec4:	f0 e0       	ldi	r31, 0x00	; 0
     ec6:	10 82       	st	Z, r1
    PORTC_REG=CONC_BIT(PORTC_PIN7_VALUE,PORTC_PIN6_VALUE,PORTC_PIN5_VALUE,PORTC_PIN4_VALUE,PORTC_PIN3_VALUE,PORTC_PIN2_VALUE,PORTC_PIN1_VALUE,PORTC_PIN0_VALUE);
     ec8:	e5 e3       	ldi	r30, 0x35	; 53
     eca:	f0 e0       	ldi	r31, 0x00	; 0
     ecc:	10 82       	st	Z, r1
    PORTD_REG=CONC_BIT(PORTD_PIN7_VALUE,PORTD_PIN6_VALUE,PORTD_PIN5_VALUE,PORTD_PIN4_VALUE,PORTD_PIN3_VALUE,PORTD_PIN2_VALUE,PORTD_PIN1_VALUE,PORTD_PIN0_VALUE);
     ece:	e2 e3       	ldi	r30, 0x32	; 50
     ed0:	f0 e0       	ldi	r31, 0x00	; 0
     ed2:	84 e0       	ldi	r24, 0x04	; 4
     ed4:	80 83       	st	Z, r24
    
    DDRA_REG=CONC_BIT(DDRA_PIN7_DIRECTION,DDRA_PIN6_DIRECTION,DDRA_PIN5_DIRECTION,DDRA_PIN4_DIRECTION,DDRA_PIN3_DIRECTION,DDRA_PIN2_DIRECTION,DDRA_PIN1_DIRECTION,DDRA_PIN0_DIRECTION);
     ed6:	ea e3       	ldi	r30, 0x3A	; 58
     ed8:	f0 e0       	ldi	r31, 0x00	; 0
     eda:	8f ef       	ldi	r24, 0xFF	; 255
     edc:	80 83       	st	Z, r24
    DDRB_REG=CONC_BIT(DDRB_PIN7_DIRECTION,DDRB_PIN6_DIRECTION,DDRB_PIN5_DIRECTION,DDRB_PIN4_DIRECTION,DDRB_PIN3_DIRECTION,DDRB_PIN2_DIRECTION,DDRB_PIN1_DIRECTION,DDRB_PIN0_DIRECTION);
     ede:	e7 e3       	ldi	r30, 0x37	; 55
     ee0:	f0 e0       	ldi	r31, 0x00	; 0
     ee2:	8f ef       	ldi	r24, 0xFF	; 255
     ee4:	80 83       	st	Z, r24
    DDRC_REG=CONC_BIT(DDRC_PIN7_DIRECTION,DDRC_PIN6_DIRECTION,DDRC_PIN5_DIRECTION,DDRC_PIN4_DIRECTION,DDRC_PIN3_DIRECTION,DDRC_PIN2_DIRECTION,DDRC_PIN1_DIRECTION,DDRC_PIN0_DIRECTION);
     ee6:	e4 e3       	ldi	r30, 0x34	; 52
     ee8:	f0 e0       	ldi	r31, 0x00	; 0
     eea:	8f ef       	ldi	r24, 0xFF	; 255
     eec:	80 83       	st	Z, r24
    DDRD_REG=CONC_BIT(DDRD_PIN7_DIRECTION,DDRD_PIN6_DIRECTION,DDRD_PIN5_DIRECTION,DDRD_PIN4_DIRECTION,DDRD_PIN3_DIRECTION,DDRD_PIN2_DIRECTION,DDRD_PIN1_DIRECTION,DDRD_PIN0_DIRECTION);
     eee:	e1 e3       	ldi	r30, 0x31	; 49
     ef0:	f0 e0       	ldi	r31, 0x00	; 0
     ef2:	8b ef       	ldi	r24, 0xFB	; 251
     ef4:	80 83       	st	Z, r24

}
     ef6:	cf 91       	pop	r28
     ef8:	df 91       	pop	r29
     efa:	08 95       	ret

00000efc <MDIO_u8GetPinValue>:

u8 MDIO_u8GetPinValue(u8 A_u8Port,u8 A_u8Pin)
{
     efc:	df 93       	push	r29
     efe:	cf 93       	push	r28
     f00:	00 d0       	rcall	.+0      	; 0xf02 <MDIO_u8GetPinValue+0x6>
     f02:	00 d0       	rcall	.+0      	; 0xf04 <MDIO_u8GetPinValue+0x8>
     f04:	0f 92       	push	r0
     f06:	cd b7       	in	r28, 0x3d	; 61
     f08:	de b7       	in	r29, 0x3e	; 62
     f0a:	8a 83       	std	Y+2, r24	; 0x02
     f0c:	6b 83       	std	Y+3, r22	; 0x03
    u8 local_u8Value;
    switch(A_u8Port)
     f0e:	8a 81       	ldd	r24, Y+2	; 0x02
     f10:	28 2f       	mov	r18, r24
     f12:	30 e0       	ldi	r19, 0x00	; 0
     f14:	3d 83       	std	Y+5, r19	; 0x05
     f16:	2c 83       	std	Y+4, r18	; 0x04
     f18:	8c 81       	ldd	r24, Y+4	; 0x04
     f1a:	9d 81       	ldd	r25, Y+5	; 0x05
     f1c:	81 30       	cpi	r24, 0x01	; 1
     f1e:	91 05       	cpc	r25, r1
     f20:	c1 f1       	breq	.+112    	; 0xf92 <MDIO_u8GetPinValue+0x96>
     f22:	2c 81       	ldd	r18, Y+4	; 0x04
     f24:	3d 81       	ldd	r19, Y+5	; 0x05
     f26:	22 30       	cpi	r18, 0x02	; 2
     f28:	31 05       	cpc	r19, r1
     f2a:	2c f4       	brge	.+10     	; 0xf36 <MDIO_u8GetPinValue+0x3a>
     f2c:	8c 81       	ldd	r24, Y+4	; 0x04
     f2e:	9d 81       	ldd	r25, Y+5	; 0x05
     f30:	00 97       	sbiw	r24, 0x00	; 0
     f32:	71 f0       	breq	.+28     	; 0xf50 <MDIO_u8GetPinValue+0x54>
     f34:	8e c0       	rjmp	.+284    	; 0x1052 <MDIO_u8GetPinValue+0x156>
     f36:	2c 81       	ldd	r18, Y+4	; 0x04
     f38:	3d 81       	ldd	r19, Y+5	; 0x05
     f3a:	22 30       	cpi	r18, 0x02	; 2
     f3c:	31 05       	cpc	r19, r1
     f3e:	09 f4       	brne	.+2      	; 0xf42 <MDIO_u8GetPinValue+0x46>
     f40:	49 c0       	rjmp	.+146    	; 0xfd4 <MDIO_u8GetPinValue+0xd8>
     f42:	8c 81       	ldd	r24, Y+4	; 0x04
     f44:	9d 81       	ldd	r25, Y+5	; 0x05
     f46:	83 30       	cpi	r24, 0x03	; 3
     f48:	91 05       	cpc	r25, r1
     f4a:	09 f4       	brne	.+2      	; 0xf4e <MDIO_u8GetPinValue+0x52>
     f4c:	63 c0       	rjmp	.+198    	; 0x1014 <MDIO_u8GetPinValue+0x118>
     f4e:	81 c0       	rjmp	.+258    	; 0x1052 <MDIO_u8GetPinValue+0x156>
    {
        case PORTA: local_u8Value=GET_BIT(PINA_REG,A_u8Pin);
     f50:	e9 e3       	ldi	r30, 0x39	; 57
     f52:	f0 e0       	ldi	r31, 0x00	; 0
     f54:	80 81       	ld	r24, Z
     f56:	48 2f       	mov	r20, r24
     f58:	50 e0       	ldi	r21, 0x00	; 0
     f5a:	8b 81       	ldd	r24, Y+3	; 0x03
     f5c:	28 2f       	mov	r18, r24
     f5e:	30 e0       	ldi	r19, 0x00	; 0
     f60:	81 e0       	ldi	r24, 0x01	; 1
     f62:	90 e0       	ldi	r25, 0x00	; 0
     f64:	02 c0       	rjmp	.+4      	; 0xf6a <MDIO_u8GetPinValue+0x6e>
     f66:	88 0f       	add	r24, r24
     f68:	99 1f       	adc	r25, r25
     f6a:	2a 95       	dec	r18
     f6c:	e2 f7       	brpl	.-8      	; 0xf66 <MDIO_u8GetPinValue+0x6a>
     f6e:	80 95       	com	r24
     f70:	90 95       	com	r25
     f72:	9a 01       	movw	r18, r20
     f74:	28 23       	and	r18, r24
     f76:	39 23       	and	r19, r25
     f78:	e9 e3       	ldi	r30, 0x39	; 57
     f7a:	f0 e0       	ldi	r31, 0x00	; 0
     f7c:	80 81       	ld	r24, Z
     f7e:	88 2f       	mov	r24, r24
     f80:	90 e0       	ldi	r25, 0x00	; 0
     f82:	19 82       	std	Y+1, r1	; 0x01
     f84:	28 17       	cp	r18, r24
     f86:	39 07       	cpc	r19, r25
     f88:	09 f4       	brne	.+2      	; 0xf8c <MDIO_u8GetPinValue+0x90>
     f8a:	63 c0       	rjmp	.+198    	; 0x1052 <MDIO_u8GetPinValue+0x156>
     f8c:	81 e0       	ldi	r24, 0x01	; 1
     f8e:	89 83       	std	Y+1, r24	; 0x01
     f90:	60 c0       	rjmp	.+192    	; 0x1052 <MDIO_u8GetPinValue+0x156>
        break;
        case PORTB: local_u8Value=GET_BIT(PINB_REG,A_u8Pin);
     f92:	e6 e3       	ldi	r30, 0x36	; 54
     f94:	f0 e0       	ldi	r31, 0x00	; 0
     f96:	80 81       	ld	r24, Z
     f98:	48 2f       	mov	r20, r24
     f9a:	50 e0       	ldi	r21, 0x00	; 0
     f9c:	8b 81       	ldd	r24, Y+3	; 0x03
     f9e:	28 2f       	mov	r18, r24
     fa0:	30 e0       	ldi	r19, 0x00	; 0
     fa2:	81 e0       	ldi	r24, 0x01	; 1
     fa4:	90 e0       	ldi	r25, 0x00	; 0
     fa6:	02 c0       	rjmp	.+4      	; 0xfac <MDIO_u8GetPinValue+0xb0>
     fa8:	88 0f       	add	r24, r24
     faa:	99 1f       	adc	r25, r25
     fac:	2a 95       	dec	r18
     fae:	e2 f7       	brpl	.-8      	; 0xfa8 <MDIO_u8GetPinValue+0xac>
     fb0:	80 95       	com	r24
     fb2:	90 95       	com	r25
     fb4:	9a 01       	movw	r18, r20
     fb6:	28 23       	and	r18, r24
     fb8:	39 23       	and	r19, r25
     fba:	e6 e3       	ldi	r30, 0x36	; 54
     fbc:	f0 e0       	ldi	r31, 0x00	; 0
     fbe:	80 81       	ld	r24, Z
     fc0:	88 2f       	mov	r24, r24
     fc2:	90 e0       	ldi	r25, 0x00	; 0
     fc4:	19 82       	std	Y+1, r1	; 0x01
     fc6:	28 17       	cp	r18, r24
     fc8:	39 07       	cpc	r19, r25
     fca:	09 f4       	brne	.+2      	; 0xfce <MDIO_u8GetPinValue+0xd2>
     fcc:	42 c0       	rjmp	.+132    	; 0x1052 <MDIO_u8GetPinValue+0x156>
     fce:	81 e0       	ldi	r24, 0x01	; 1
     fd0:	89 83       	std	Y+1, r24	; 0x01
     fd2:	3f c0       	rjmp	.+126    	; 0x1052 <MDIO_u8GetPinValue+0x156>
        break;
        case PORTC: local_u8Value=GET_BIT(PINC_REG,A_u8Pin);
     fd4:	e3 e3       	ldi	r30, 0x33	; 51
     fd6:	f0 e0       	ldi	r31, 0x00	; 0
     fd8:	80 81       	ld	r24, Z
     fda:	48 2f       	mov	r20, r24
     fdc:	50 e0       	ldi	r21, 0x00	; 0
     fde:	8b 81       	ldd	r24, Y+3	; 0x03
     fe0:	28 2f       	mov	r18, r24
     fe2:	30 e0       	ldi	r19, 0x00	; 0
     fe4:	81 e0       	ldi	r24, 0x01	; 1
     fe6:	90 e0       	ldi	r25, 0x00	; 0
     fe8:	02 c0       	rjmp	.+4      	; 0xfee <MDIO_u8GetPinValue+0xf2>
     fea:	88 0f       	add	r24, r24
     fec:	99 1f       	adc	r25, r25
     fee:	2a 95       	dec	r18
     ff0:	e2 f7       	brpl	.-8      	; 0xfea <MDIO_u8GetPinValue+0xee>
     ff2:	80 95       	com	r24
     ff4:	90 95       	com	r25
     ff6:	9a 01       	movw	r18, r20
     ff8:	28 23       	and	r18, r24
     ffa:	39 23       	and	r19, r25
     ffc:	e3 e3       	ldi	r30, 0x33	; 51
     ffe:	f0 e0       	ldi	r31, 0x00	; 0
    1000:	80 81       	ld	r24, Z
    1002:	88 2f       	mov	r24, r24
    1004:	90 e0       	ldi	r25, 0x00	; 0
    1006:	19 82       	std	Y+1, r1	; 0x01
    1008:	28 17       	cp	r18, r24
    100a:	39 07       	cpc	r19, r25
    100c:	11 f1       	breq	.+68     	; 0x1052 <MDIO_u8GetPinValue+0x156>
    100e:	81 e0       	ldi	r24, 0x01	; 1
    1010:	89 83       	std	Y+1, r24	; 0x01
    1012:	1f c0       	rjmp	.+62     	; 0x1052 <MDIO_u8GetPinValue+0x156>
        break;
        case PORTD: local_u8Value=GET_BIT(PIND_REG,A_u8Pin);
    1014:	e0 e3       	ldi	r30, 0x30	; 48
    1016:	f0 e0       	ldi	r31, 0x00	; 0
    1018:	80 81       	ld	r24, Z
    101a:	48 2f       	mov	r20, r24
    101c:	50 e0       	ldi	r21, 0x00	; 0
    101e:	8b 81       	ldd	r24, Y+3	; 0x03
    1020:	28 2f       	mov	r18, r24
    1022:	30 e0       	ldi	r19, 0x00	; 0
    1024:	81 e0       	ldi	r24, 0x01	; 1
    1026:	90 e0       	ldi	r25, 0x00	; 0
    1028:	02 c0       	rjmp	.+4      	; 0x102e <MDIO_u8GetPinValue+0x132>
    102a:	88 0f       	add	r24, r24
    102c:	99 1f       	adc	r25, r25
    102e:	2a 95       	dec	r18
    1030:	e2 f7       	brpl	.-8      	; 0x102a <MDIO_u8GetPinValue+0x12e>
    1032:	80 95       	com	r24
    1034:	90 95       	com	r25
    1036:	9a 01       	movw	r18, r20
    1038:	28 23       	and	r18, r24
    103a:	39 23       	and	r19, r25
    103c:	e0 e3       	ldi	r30, 0x30	; 48
    103e:	f0 e0       	ldi	r31, 0x00	; 0
    1040:	80 81       	ld	r24, Z
    1042:	88 2f       	mov	r24, r24
    1044:	90 e0       	ldi	r25, 0x00	; 0
    1046:	19 82       	std	Y+1, r1	; 0x01
    1048:	28 17       	cp	r18, r24
    104a:	39 07       	cpc	r19, r25
    104c:	11 f0       	breq	.+4      	; 0x1052 <MDIO_u8GetPinValue+0x156>
    104e:	81 e0       	ldi	r24, 0x01	; 1
    1050:	89 83       	std	Y+1, r24	; 0x01
        break;
    }
    return local_u8Value;
    1052:	89 81       	ldd	r24, Y+1	; 0x01
}
    1054:	0f 90       	pop	r0
    1056:	0f 90       	pop	r0
    1058:	0f 90       	pop	r0
    105a:	0f 90       	pop	r0
    105c:	0f 90       	pop	r0
    105e:	cf 91       	pop	r28
    1060:	df 91       	pop	r29
    1062:	08 95       	ret

00001064 <MDIO_voidSetPinValue>:

void MDIO_voidSetPinValue(u8 A_u8Port,u8 A_u8Pin, u8 A_u8Value)
{
    1064:	df 93       	push	r29
    1066:	cf 93       	push	r28
    1068:	cd b7       	in	r28, 0x3d	; 61
    106a:	de b7       	in	r29, 0x3e	; 62
    106c:	2d 97       	sbiw	r28, 0x0d	; 13
    106e:	0f b6       	in	r0, 0x3f	; 63
    1070:	f8 94       	cli
    1072:	de bf       	out	0x3e, r29	; 62
    1074:	0f be       	out	0x3f, r0	; 63
    1076:	cd bf       	out	0x3d, r28	; 61
    1078:	89 83       	std	Y+1, r24	; 0x01
    107a:	6a 83       	std	Y+2, r22	; 0x02
    107c:	4b 83       	std	Y+3, r20	; 0x03
    switch(A_u8Port)
    107e:	89 81       	ldd	r24, Y+1	; 0x01
    1080:	28 2f       	mov	r18, r24
    1082:	30 e0       	ldi	r19, 0x00	; 0
    1084:	3d 87       	std	Y+13, r19	; 0x0d
    1086:	2c 87       	std	Y+12, r18	; 0x0c
    1088:	8c 85       	ldd	r24, Y+12	; 0x0c
    108a:	9d 85       	ldd	r25, Y+13	; 0x0d
    108c:	81 30       	cpi	r24, 0x01	; 1
    108e:	91 05       	cpc	r25, r1
    1090:	09 f4       	brne	.+2      	; 0x1094 <MDIO_voidSetPinValue+0x30>
    1092:	4f c0       	rjmp	.+158    	; 0x1132 <MDIO_voidSetPinValue+0xce>
    1094:	2c 85       	ldd	r18, Y+12	; 0x0c
    1096:	3d 85       	ldd	r19, Y+13	; 0x0d
    1098:	22 30       	cpi	r18, 0x02	; 2
    109a:	31 05       	cpc	r19, r1
    109c:	2c f4       	brge	.+10     	; 0x10a8 <MDIO_voidSetPinValue+0x44>
    109e:	8c 85       	ldd	r24, Y+12	; 0x0c
    10a0:	9d 85       	ldd	r25, Y+13	; 0x0d
    10a2:	00 97       	sbiw	r24, 0x00	; 0
    10a4:	71 f0       	breq	.+28     	; 0x10c2 <MDIO_voidSetPinValue+0x5e>
    10a6:	eb c0       	rjmp	.+470    	; 0x127e <MDIO_voidSetPinValue+0x21a>
    10a8:	2c 85       	ldd	r18, Y+12	; 0x0c
    10aa:	3d 85       	ldd	r19, Y+13	; 0x0d
    10ac:	22 30       	cpi	r18, 0x02	; 2
    10ae:	31 05       	cpc	r19, r1
    10b0:	09 f4       	brne	.+2      	; 0x10b4 <MDIO_voidSetPinValue+0x50>
    10b2:	77 c0       	rjmp	.+238    	; 0x11a2 <MDIO_voidSetPinValue+0x13e>
    10b4:	8c 85       	ldd	r24, Y+12	; 0x0c
    10b6:	9d 85       	ldd	r25, Y+13	; 0x0d
    10b8:	83 30       	cpi	r24, 0x03	; 3
    10ba:	91 05       	cpc	r25, r1
    10bc:	09 f4       	brne	.+2      	; 0x10c0 <MDIO_voidSetPinValue+0x5c>
    10be:	a9 c0       	rjmp	.+338    	; 0x1212 <MDIO_voidSetPinValue+0x1ae>
    10c0:	de c0       	rjmp	.+444    	; 0x127e <MDIO_voidSetPinValue+0x21a>
    {
        case PORTA:
        switch (A_u8Value)
    10c2:	8b 81       	ldd	r24, Y+3	; 0x03
    10c4:	28 2f       	mov	r18, r24
    10c6:	30 e0       	ldi	r19, 0x00	; 0
    10c8:	3b 87       	std	Y+11, r19	; 0x0b
    10ca:	2a 87       	std	Y+10, r18	; 0x0a
    10cc:	8a 85       	ldd	r24, Y+10	; 0x0a
    10ce:	9b 85       	ldd	r25, Y+11	; 0x0b
    10d0:	00 97       	sbiw	r24, 0x00	; 0
    10d2:	d1 f0       	breq	.+52     	; 0x1108 <MDIO_voidSetPinValue+0xa4>
    10d4:	2a 85       	ldd	r18, Y+10	; 0x0a
    10d6:	3b 85       	ldd	r19, Y+11	; 0x0b
    10d8:	21 30       	cpi	r18, 0x01	; 1
    10da:	31 05       	cpc	r19, r1
    10dc:	09 f0       	breq	.+2      	; 0x10e0 <MDIO_voidSetPinValue+0x7c>
    10de:	cf c0       	rjmp	.+414    	; 0x127e <MDIO_voidSetPinValue+0x21a>
        {
            case PIN_HIGH: SET_BIT(PORTA_REG,A_u8Pin);
    10e0:	ab e3       	ldi	r26, 0x3B	; 59
    10e2:	b0 e0       	ldi	r27, 0x00	; 0
    10e4:	eb e3       	ldi	r30, 0x3B	; 59
    10e6:	f0 e0       	ldi	r31, 0x00	; 0
    10e8:	80 81       	ld	r24, Z
    10ea:	48 2f       	mov	r20, r24
    10ec:	8a 81       	ldd	r24, Y+2	; 0x02
    10ee:	28 2f       	mov	r18, r24
    10f0:	30 e0       	ldi	r19, 0x00	; 0
    10f2:	81 e0       	ldi	r24, 0x01	; 1
    10f4:	90 e0       	ldi	r25, 0x00	; 0
    10f6:	02 2e       	mov	r0, r18
    10f8:	02 c0       	rjmp	.+4      	; 0x10fe <MDIO_voidSetPinValue+0x9a>
    10fa:	88 0f       	add	r24, r24
    10fc:	99 1f       	adc	r25, r25
    10fe:	0a 94       	dec	r0
    1100:	e2 f7       	brpl	.-8      	; 0x10fa <MDIO_voidSetPinValue+0x96>
    1102:	84 2b       	or	r24, r20
    1104:	8c 93       	st	X, r24
    1106:	bb c0       	rjmp	.+374    	; 0x127e <MDIO_voidSetPinValue+0x21a>
            break;

            case PIN_LOW: CLR_BIT(PORTA_REG,A_u8Pin);
    1108:	ab e3       	ldi	r26, 0x3B	; 59
    110a:	b0 e0       	ldi	r27, 0x00	; 0
    110c:	eb e3       	ldi	r30, 0x3B	; 59
    110e:	f0 e0       	ldi	r31, 0x00	; 0
    1110:	80 81       	ld	r24, Z
    1112:	48 2f       	mov	r20, r24
    1114:	8a 81       	ldd	r24, Y+2	; 0x02
    1116:	28 2f       	mov	r18, r24
    1118:	30 e0       	ldi	r19, 0x00	; 0
    111a:	81 e0       	ldi	r24, 0x01	; 1
    111c:	90 e0       	ldi	r25, 0x00	; 0
    111e:	02 2e       	mov	r0, r18
    1120:	02 c0       	rjmp	.+4      	; 0x1126 <MDIO_voidSetPinValue+0xc2>
    1122:	88 0f       	add	r24, r24
    1124:	99 1f       	adc	r25, r25
    1126:	0a 94       	dec	r0
    1128:	e2 f7       	brpl	.-8      	; 0x1122 <MDIO_voidSetPinValue+0xbe>
    112a:	80 95       	com	r24
    112c:	84 23       	and	r24, r20
    112e:	8c 93       	st	X, r24
    1130:	a6 c0       	rjmp	.+332    	; 0x127e <MDIO_voidSetPinValue+0x21a>
            break;
        };
        break;

        case PORTB:
        switch (A_u8Value)
    1132:	8b 81       	ldd	r24, Y+3	; 0x03
    1134:	28 2f       	mov	r18, r24
    1136:	30 e0       	ldi	r19, 0x00	; 0
    1138:	39 87       	std	Y+9, r19	; 0x09
    113a:	28 87       	std	Y+8, r18	; 0x08
    113c:	88 85       	ldd	r24, Y+8	; 0x08
    113e:	99 85       	ldd	r25, Y+9	; 0x09
    1140:	00 97       	sbiw	r24, 0x00	; 0
    1142:	d1 f0       	breq	.+52     	; 0x1178 <MDIO_voidSetPinValue+0x114>
    1144:	28 85       	ldd	r18, Y+8	; 0x08
    1146:	39 85       	ldd	r19, Y+9	; 0x09
    1148:	21 30       	cpi	r18, 0x01	; 1
    114a:	31 05       	cpc	r19, r1
    114c:	09 f0       	breq	.+2      	; 0x1150 <MDIO_voidSetPinValue+0xec>
    114e:	97 c0       	rjmp	.+302    	; 0x127e <MDIO_voidSetPinValue+0x21a>
        {
            case PIN_HIGH: SET_BIT(PORTB_REG,A_u8Pin);
    1150:	a8 e3       	ldi	r26, 0x38	; 56
    1152:	b0 e0       	ldi	r27, 0x00	; 0
    1154:	e8 e3       	ldi	r30, 0x38	; 56
    1156:	f0 e0       	ldi	r31, 0x00	; 0
    1158:	80 81       	ld	r24, Z
    115a:	48 2f       	mov	r20, r24
    115c:	8a 81       	ldd	r24, Y+2	; 0x02
    115e:	28 2f       	mov	r18, r24
    1160:	30 e0       	ldi	r19, 0x00	; 0
    1162:	81 e0       	ldi	r24, 0x01	; 1
    1164:	90 e0       	ldi	r25, 0x00	; 0
    1166:	02 2e       	mov	r0, r18
    1168:	02 c0       	rjmp	.+4      	; 0x116e <MDIO_voidSetPinValue+0x10a>
    116a:	88 0f       	add	r24, r24
    116c:	99 1f       	adc	r25, r25
    116e:	0a 94       	dec	r0
    1170:	e2 f7       	brpl	.-8      	; 0x116a <MDIO_voidSetPinValue+0x106>
    1172:	84 2b       	or	r24, r20
    1174:	8c 93       	st	X, r24
    1176:	83 c0       	rjmp	.+262    	; 0x127e <MDIO_voidSetPinValue+0x21a>
            break;

            case PIN_LOW: CLR_BIT(PORTB_REG,A_u8Pin);
    1178:	a8 e3       	ldi	r26, 0x38	; 56
    117a:	b0 e0       	ldi	r27, 0x00	; 0
    117c:	e8 e3       	ldi	r30, 0x38	; 56
    117e:	f0 e0       	ldi	r31, 0x00	; 0
    1180:	80 81       	ld	r24, Z
    1182:	48 2f       	mov	r20, r24
    1184:	8a 81       	ldd	r24, Y+2	; 0x02
    1186:	28 2f       	mov	r18, r24
    1188:	30 e0       	ldi	r19, 0x00	; 0
    118a:	81 e0       	ldi	r24, 0x01	; 1
    118c:	90 e0       	ldi	r25, 0x00	; 0
    118e:	02 2e       	mov	r0, r18
    1190:	02 c0       	rjmp	.+4      	; 0x1196 <MDIO_voidSetPinValue+0x132>
    1192:	88 0f       	add	r24, r24
    1194:	99 1f       	adc	r25, r25
    1196:	0a 94       	dec	r0
    1198:	e2 f7       	brpl	.-8      	; 0x1192 <MDIO_voidSetPinValue+0x12e>
    119a:	80 95       	com	r24
    119c:	84 23       	and	r24, r20
    119e:	8c 93       	st	X, r24
    11a0:	6e c0       	rjmp	.+220    	; 0x127e <MDIO_voidSetPinValue+0x21a>
            break;
        };
        break;

        case PORTC:
        switch (A_u8Value)
    11a2:	8b 81       	ldd	r24, Y+3	; 0x03
    11a4:	28 2f       	mov	r18, r24
    11a6:	30 e0       	ldi	r19, 0x00	; 0
    11a8:	3f 83       	std	Y+7, r19	; 0x07
    11aa:	2e 83       	std	Y+6, r18	; 0x06
    11ac:	8e 81       	ldd	r24, Y+6	; 0x06
    11ae:	9f 81       	ldd	r25, Y+7	; 0x07
    11b0:	00 97       	sbiw	r24, 0x00	; 0
    11b2:	d1 f0       	breq	.+52     	; 0x11e8 <MDIO_voidSetPinValue+0x184>
    11b4:	2e 81       	ldd	r18, Y+6	; 0x06
    11b6:	3f 81       	ldd	r19, Y+7	; 0x07
    11b8:	21 30       	cpi	r18, 0x01	; 1
    11ba:	31 05       	cpc	r19, r1
    11bc:	09 f0       	breq	.+2      	; 0x11c0 <MDIO_voidSetPinValue+0x15c>
    11be:	5f c0       	rjmp	.+190    	; 0x127e <MDIO_voidSetPinValue+0x21a>
        {
            case PIN_HIGH: SET_BIT(PORTC_REG,A_u8Pin);
    11c0:	a5 e3       	ldi	r26, 0x35	; 53
    11c2:	b0 e0       	ldi	r27, 0x00	; 0
    11c4:	e5 e3       	ldi	r30, 0x35	; 53
    11c6:	f0 e0       	ldi	r31, 0x00	; 0
    11c8:	80 81       	ld	r24, Z
    11ca:	48 2f       	mov	r20, r24
    11cc:	8a 81       	ldd	r24, Y+2	; 0x02
    11ce:	28 2f       	mov	r18, r24
    11d0:	30 e0       	ldi	r19, 0x00	; 0
    11d2:	81 e0       	ldi	r24, 0x01	; 1
    11d4:	90 e0       	ldi	r25, 0x00	; 0
    11d6:	02 2e       	mov	r0, r18
    11d8:	02 c0       	rjmp	.+4      	; 0x11de <MDIO_voidSetPinValue+0x17a>
    11da:	88 0f       	add	r24, r24
    11dc:	99 1f       	adc	r25, r25
    11de:	0a 94       	dec	r0
    11e0:	e2 f7       	brpl	.-8      	; 0x11da <MDIO_voidSetPinValue+0x176>
    11e2:	84 2b       	or	r24, r20
    11e4:	8c 93       	st	X, r24
    11e6:	4b c0       	rjmp	.+150    	; 0x127e <MDIO_voidSetPinValue+0x21a>
            break;

            case PIN_LOW: CLR_BIT(PORTC_REG,A_u8Pin);
    11e8:	a5 e3       	ldi	r26, 0x35	; 53
    11ea:	b0 e0       	ldi	r27, 0x00	; 0
    11ec:	e5 e3       	ldi	r30, 0x35	; 53
    11ee:	f0 e0       	ldi	r31, 0x00	; 0
    11f0:	80 81       	ld	r24, Z
    11f2:	48 2f       	mov	r20, r24
    11f4:	8a 81       	ldd	r24, Y+2	; 0x02
    11f6:	28 2f       	mov	r18, r24
    11f8:	30 e0       	ldi	r19, 0x00	; 0
    11fa:	81 e0       	ldi	r24, 0x01	; 1
    11fc:	90 e0       	ldi	r25, 0x00	; 0
    11fe:	02 2e       	mov	r0, r18
    1200:	02 c0       	rjmp	.+4      	; 0x1206 <MDIO_voidSetPinValue+0x1a2>
    1202:	88 0f       	add	r24, r24
    1204:	99 1f       	adc	r25, r25
    1206:	0a 94       	dec	r0
    1208:	e2 f7       	brpl	.-8      	; 0x1202 <MDIO_voidSetPinValue+0x19e>
    120a:	80 95       	com	r24
    120c:	84 23       	and	r24, r20
    120e:	8c 93       	st	X, r24
    1210:	36 c0       	rjmp	.+108    	; 0x127e <MDIO_voidSetPinValue+0x21a>
            break;
        };
        break;

        case PORTD:
        switch (A_u8Value)
    1212:	8b 81       	ldd	r24, Y+3	; 0x03
    1214:	28 2f       	mov	r18, r24
    1216:	30 e0       	ldi	r19, 0x00	; 0
    1218:	3d 83       	std	Y+5, r19	; 0x05
    121a:	2c 83       	std	Y+4, r18	; 0x04
    121c:	8c 81       	ldd	r24, Y+4	; 0x04
    121e:	9d 81       	ldd	r25, Y+5	; 0x05
    1220:	00 97       	sbiw	r24, 0x00	; 0
    1222:	c9 f0       	breq	.+50     	; 0x1256 <MDIO_voidSetPinValue+0x1f2>
    1224:	2c 81       	ldd	r18, Y+4	; 0x04
    1226:	3d 81       	ldd	r19, Y+5	; 0x05
    1228:	21 30       	cpi	r18, 0x01	; 1
    122a:	31 05       	cpc	r19, r1
    122c:	41 f5       	brne	.+80     	; 0x127e <MDIO_voidSetPinValue+0x21a>
        {
            case PIN_HIGH: SET_BIT(PORTD_REG,A_u8Pin);
    122e:	a2 e3       	ldi	r26, 0x32	; 50
    1230:	b0 e0       	ldi	r27, 0x00	; 0
    1232:	e2 e3       	ldi	r30, 0x32	; 50
    1234:	f0 e0       	ldi	r31, 0x00	; 0
    1236:	80 81       	ld	r24, Z
    1238:	48 2f       	mov	r20, r24
    123a:	8a 81       	ldd	r24, Y+2	; 0x02
    123c:	28 2f       	mov	r18, r24
    123e:	30 e0       	ldi	r19, 0x00	; 0
    1240:	81 e0       	ldi	r24, 0x01	; 1
    1242:	90 e0       	ldi	r25, 0x00	; 0
    1244:	02 2e       	mov	r0, r18
    1246:	02 c0       	rjmp	.+4      	; 0x124c <MDIO_voidSetPinValue+0x1e8>
    1248:	88 0f       	add	r24, r24
    124a:	99 1f       	adc	r25, r25
    124c:	0a 94       	dec	r0
    124e:	e2 f7       	brpl	.-8      	; 0x1248 <MDIO_voidSetPinValue+0x1e4>
    1250:	84 2b       	or	r24, r20
    1252:	8c 93       	st	X, r24
    1254:	14 c0       	rjmp	.+40     	; 0x127e <MDIO_voidSetPinValue+0x21a>
            break;

            case PIN_LOW: CLR_BIT(PORTD_REG,A_u8Pin);
    1256:	a2 e3       	ldi	r26, 0x32	; 50
    1258:	b0 e0       	ldi	r27, 0x00	; 0
    125a:	e2 e3       	ldi	r30, 0x32	; 50
    125c:	f0 e0       	ldi	r31, 0x00	; 0
    125e:	80 81       	ld	r24, Z
    1260:	48 2f       	mov	r20, r24
    1262:	8a 81       	ldd	r24, Y+2	; 0x02
    1264:	28 2f       	mov	r18, r24
    1266:	30 e0       	ldi	r19, 0x00	; 0
    1268:	81 e0       	ldi	r24, 0x01	; 1
    126a:	90 e0       	ldi	r25, 0x00	; 0
    126c:	02 2e       	mov	r0, r18
    126e:	02 c0       	rjmp	.+4      	; 0x1274 <MDIO_voidSetPinValue+0x210>
    1270:	88 0f       	add	r24, r24
    1272:	99 1f       	adc	r25, r25
    1274:	0a 94       	dec	r0
    1276:	e2 f7       	brpl	.-8      	; 0x1270 <MDIO_voidSetPinValue+0x20c>
    1278:	80 95       	com	r24
    127a:	84 23       	and	r24, r20
    127c:	8c 93       	st	X, r24
            break;
        };
        break;
    }
}
    127e:	2d 96       	adiw	r28, 0x0d	; 13
    1280:	0f b6       	in	r0, 0x3f	; 63
    1282:	f8 94       	cli
    1284:	de bf       	out	0x3e, r29	; 62
    1286:	0f be       	out	0x3f, r0	; 63
    1288:	cd bf       	out	0x3d, r28	; 61
    128a:	cf 91       	pop	r28
    128c:	df 91       	pop	r29
    128e:	08 95       	ret

00001290 <MDIO_voidSetPinDirection>:

void MDIO_voidSetPinDirection(u8 A_u8Port,u8 A_u8Pin, u8 A_u8Value)
{
    1290:	df 93       	push	r29
    1292:	cf 93       	push	r28
    1294:	cd b7       	in	r28, 0x3d	; 61
    1296:	de b7       	in	r29, 0x3e	; 62
    1298:	2d 97       	sbiw	r28, 0x0d	; 13
    129a:	0f b6       	in	r0, 0x3f	; 63
    129c:	f8 94       	cli
    129e:	de bf       	out	0x3e, r29	; 62
    12a0:	0f be       	out	0x3f, r0	; 63
    12a2:	cd bf       	out	0x3d, r28	; 61
    12a4:	89 83       	std	Y+1, r24	; 0x01
    12a6:	6a 83       	std	Y+2, r22	; 0x02
    12a8:	4b 83       	std	Y+3, r20	; 0x03
    switch(A_u8Port)
    12aa:	89 81       	ldd	r24, Y+1	; 0x01
    12ac:	28 2f       	mov	r18, r24
    12ae:	30 e0       	ldi	r19, 0x00	; 0
    12b0:	3d 87       	std	Y+13, r19	; 0x0d
    12b2:	2c 87       	std	Y+12, r18	; 0x0c
    12b4:	8c 85       	ldd	r24, Y+12	; 0x0c
    12b6:	9d 85       	ldd	r25, Y+13	; 0x0d
    12b8:	81 30       	cpi	r24, 0x01	; 1
    12ba:	91 05       	cpc	r25, r1
    12bc:	09 f4       	brne	.+2      	; 0x12c0 <MDIO_voidSetPinDirection+0x30>
    12be:	4f c0       	rjmp	.+158    	; 0x135e <MDIO_voidSetPinDirection+0xce>
    12c0:	2c 85       	ldd	r18, Y+12	; 0x0c
    12c2:	3d 85       	ldd	r19, Y+13	; 0x0d
    12c4:	22 30       	cpi	r18, 0x02	; 2
    12c6:	31 05       	cpc	r19, r1
    12c8:	2c f4       	brge	.+10     	; 0x12d4 <MDIO_voidSetPinDirection+0x44>
    12ca:	8c 85       	ldd	r24, Y+12	; 0x0c
    12cc:	9d 85       	ldd	r25, Y+13	; 0x0d
    12ce:	00 97       	sbiw	r24, 0x00	; 0
    12d0:	71 f0       	breq	.+28     	; 0x12ee <MDIO_voidSetPinDirection+0x5e>
    12d2:	eb c0       	rjmp	.+470    	; 0x14aa <MDIO_voidSetPinDirection+0x21a>
    12d4:	2c 85       	ldd	r18, Y+12	; 0x0c
    12d6:	3d 85       	ldd	r19, Y+13	; 0x0d
    12d8:	22 30       	cpi	r18, 0x02	; 2
    12da:	31 05       	cpc	r19, r1
    12dc:	09 f4       	brne	.+2      	; 0x12e0 <MDIO_voidSetPinDirection+0x50>
    12de:	77 c0       	rjmp	.+238    	; 0x13ce <MDIO_voidSetPinDirection+0x13e>
    12e0:	8c 85       	ldd	r24, Y+12	; 0x0c
    12e2:	9d 85       	ldd	r25, Y+13	; 0x0d
    12e4:	83 30       	cpi	r24, 0x03	; 3
    12e6:	91 05       	cpc	r25, r1
    12e8:	09 f4       	brne	.+2      	; 0x12ec <MDIO_voidSetPinDirection+0x5c>
    12ea:	a9 c0       	rjmp	.+338    	; 0x143e <MDIO_voidSetPinDirection+0x1ae>
    12ec:	de c0       	rjmp	.+444    	; 0x14aa <MDIO_voidSetPinDirection+0x21a>
    {
        case PORTA:
        switch (A_u8Value)
    12ee:	8b 81       	ldd	r24, Y+3	; 0x03
    12f0:	28 2f       	mov	r18, r24
    12f2:	30 e0       	ldi	r19, 0x00	; 0
    12f4:	3b 87       	std	Y+11, r19	; 0x0b
    12f6:	2a 87       	std	Y+10, r18	; 0x0a
    12f8:	8a 85       	ldd	r24, Y+10	; 0x0a
    12fa:	9b 85       	ldd	r25, Y+11	; 0x0b
    12fc:	00 97       	sbiw	r24, 0x00	; 0
    12fe:	d1 f0       	breq	.+52     	; 0x1334 <MDIO_voidSetPinDirection+0xa4>
    1300:	2a 85       	ldd	r18, Y+10	; 0x0a
    1302:	3b 85       	ldd	r19, Y+11	; 0x0b
    1304:	21 30       	cpi	r18, 0x01	; 1
    1306:	31 05       	cpc	r19, r1
    1308:	09 f0       	breq	.+2      	; 0x130c <MDIO_voidSetPinDirection+0x7c>
    130a:	cf c0       	rjmp	.+414    	; 0x14aa <MDIO_voidSetPinDirection+0x21a>
        {
            case PIN_OUTPUT: SET_BIT(DDRA_REG,A_u8Pin);
    130c:	aa e3       	ldi	r26, 0x3A	; 58
    130e:	b0 e0       	ldi	r27, 0x00	; 0
    1310:	ea e3       	ldi	r30, 0x3A	; 58
    1312:	f0 e0       	ldi	r31, 0x00	; 0
    1314:	80 81       	ld	r24, Z
    1316:	48 2f       	mov	r20, r24
    1318:	8a 81       	ldd	r24, Y+2	; 0x02
    131a:	28 2f       	mov	r18, r24
    131c:	30 e0       	ldi	r19, 0x00	; 0
    131e:	81 e0       	ldi	r24, 0x01	; 1
    1320:	90 e0       	ldi	r25, 0x00	; 0
    1322:	02 2e       	mov	r0, r18
    1324:	02 c0       	rjmp	.+4      	; 0x132a <MDIO_voidSetPinDirection+0x9a>
    1326:	88 0f       	add	r24, r24
    1328:	99 1f       	adc	r25, r25
    132a:	0a 94       	dec	r0
    132c:	e2 f7       	brpl	.-8      	; 0x1326 <MDIO_voidSetPinDirection+0x96>
    132e:	84 2b       	or	r24, r20
    1330:	8c 93       	st	X, r24
    1332:	bb c0       	rjmp	.+374    	; 0x14aa <MDIO_voidSetPinDirection+0x21a>
            break;

            case PIN_INPUT: CLR_BIT(DDRA_REG,A_u8Pin);
    1334:	aa e3       	ldi	r26, 0x3A	; 58
    1336:	b0 e0       	ldi	r27, 0x00	; 0
    1338:	ea e3       	ldi	r30, 0x3A	; 58
    133a:	f0 e0       	ldi	r31, 0x00	; 0
    133c:	80 81       	ld	r24, Z
    133e:	48 2f       	mov	r20, r24
    1340:	8a 81       	ldd	r24, Y+2	; 0x02
    1342:	28 2f       	mov	r18, r24
    1344:	30 e0       	ldi	r19, 0x00	; 0
    1346:	81 e0       	ldi	r24, 0x01	; 1
    1348:	90 e0       	ldi	r25, 0x00	; 0
    134a:	02 2e       	mov	r0, r18
    134c:	02 c0       	rjmp	.+4      	; 0x1352 <MDIO_voidSetPinDirection+0xc2>
    134e:	88 0f       	add	r24, r24
    1350:	99 1f       	adc	r25, r25
    1352:	0a 94       	dec	r0
    1354:	e2 f7       	brpl	.-8      	; 0x134e <MDIO_voidSetPinDirection+0xbe>
    1356:	80 95       	com	r24
    1358:	84 23       	and	r24, r20
    135a:	8c 93       	st	X, r24
    135c:	a6 c0       	rjmp	.+332    	; 0x14aa <MDIO_voidSetPinDirection+0x21a>
            break;
        };
        break;

        case PORTB:
        switch (A_u8Value)
    135e:	8b 81       	ldd	r24, Y+3	; 0x03
    1360:	28 2f       	mov	r18, r24
    1362:	30 e0       	ldi	r19, 0x00	; 0
    1364:	39 87       	std	Y+9, r19	; 0x09
    1366:	28 87       	std	Y+8, r18	; 0x08
    1368:	88 85       	ldd	r24, Y+8	; 0x08
    136a:	99 85       	ldd	r25, Y+9	; 0x09
    136c:	00 97       	sbiw	r24, 0x00	; 0
    136e:	d1 f0       	breq	.+52     	; 0x13a4 <MDIO_voidSetPinDirection+0x114>
    1370:	28 85       	ldd	r18, Y+8	; 0x08
    1372:	39 85       	ldd	r19, Y+9	; 0x09
    1374:	21 30       	cpi	r18, 0x01	; 1
    1376:	31 05       	cpc	r19, r1
    1378:	09 f0       	breq	.+2      	; 0x137c <MDIO_voidSetPinDirection+0xec>
    137a:	97 c0       	rjmp	.+302    	; 0x14aa <MDIO_voidSetPinDirection+0x21a>
        {
            case PIN_OUTPUT: SET_BIT(DDRB_REG,A_u8Pin);
    137c:	a7 e3       	ldi	r26, 0x37	; 55
    137e:	b0 e0       	ldi	r27, 0x00	; 0
    1380:	e7 e3       	ldi	r30, 0x37	; 55
    1382:	f0 e0       	ldi	r31, 0x00	; 0
    1384:	80 81       	ld	r24, Z
    1386:	48 2f       	mov	r20, r24
    1388:	8a 81       	ldd	r24, Y+2	; 0x02
    138a:	28 2f       	mov	r18, r24
    138c:	30 e0       	ldi	r19, 0x00	; 0
    138e:	81 e0       	ldi	r24, 0x01	; 1
    1390:	90 e0       	ldi	r25, 0x00	; 0
    1392:	02 2e       	mov	r0, r18
    1394:	02 c0       	rjmp	.+4      	; 0x139a <MDIO_voidSetPinDirection+0x10a>
    1396:	88 0f       	add	r24, r24
    1398:	99 1f       	adc	r25, r25
    139a:	0a 94       	dec	r0
    139c:	e2 f7       	brpl	.-8      	; 0x1396 <MDIO_voidSetPinDirection+0x106>
    139e:	84 2b       	or	r24, r20
    13a0:	8c 93       	st	X, r24
    13a2:	83 c0       	rjmp	.+262    	; 0x14aa <MDIO_voidSetPinDirection+0x21a>
            break;

            case PIN_INPUT: CLR_BIT(DDRB_REG,A_u8Pin);
    13a4:	a7 e3       	ldi	r26, 0x37	; 55
    13a6:	b0 e0       	ldi	r27, 0x00	; 0
    13a8:	e7 e3       	ldi	r30, 0x37	; 55
    13aa:	f0 e0       	ldi	r31, 0x00	; 0
    13ac:	80 81       	ld	r24, Z
    13ae:	48 2f       	mov	r20, r24
    13b0:	8a 81       	ldd	r24, Y+2	; 0x02
    13b2:	28 2f       	mov	r18, r24
    13b4:	30 e0       	ldi	r19, 0x00	; 0
    13b6:	81 e0       	ldi	r24, 0x01	; 1
    13b8:	90 e0       	ldi	r25, 0x00	; 0
    13ba:	02 2e       	mov	r0, r18
    13bc:	02 c0       	rjmp	.+4      	; 0x13c2 <MDIO_voidSetPinDirection+0x132>
    13be:	88 0f       	add	r24, r24
    13c0:	99 1f       	adc	r25, r25
    13c2:	0a 94       	dec	r0
    13c4:	e2 f7       	brpl	.-8      	; 0x13be <MDIO_voidSetPinDirection+0x12e>
    13c6:	80 95       	com	r24
    13c8:	84 23       	and	r24, r20
    13ca:	8c 93       	st	X, r24
    13cc:	6e c0       	rjmp	.+220    	; 0x14aa <MDIO_voidSetPinDirection+0x21a>
            break;
        };
        break;

        case PORTC:
        switch (A_u8Value)
    13ce:	8b 81       	ldd	r24, Y+3	; 0x03
    13d0:	28 2f       	mov	r18, r24
    13d2:	30 e0       	ldi	r19, 0x00	; 0
    13d4:	3f 83       	std	Y+7, r19	; 0x07
    13d6:	2e 83       	std	Y+6, r18	; 0x06
    13d8:	8e 81       	ldd	r24, Y+6	; 0x06
    13da:	9f 81       	ldd	r25, Y+7	; 0x07
    13dc:	00 97       	sbiw	r24, 0x00	; 0
    13de:	d1 f0       	breq	.+52     	; 0x1414 <MDIO_voidSetPinDirection+0x184>
    13e0:	2e 81       	ldd	r18, Y+6	; 0x06
    13e2:	3f 81       	ldd	r19, Y+7	; 0x07
    13e4:	21 30       	cpi	r18, 0x01	; 1
    13e6:	31 05       	cpc	r19, r1
    13e8:	09 f0       	breq	.+2      	; 0x13ec <MDIO_voidSetPinDirection+0x15c>
    13ea:	5f c0       	rjmp	.+190    	; 0x14aa <MDIO_voidSetPinDirection+0x21a>
        {
            case PIN_OUTPUT: SET_BIT(DDRC_REG,A_u8Pin);
    13ec:	a4 e3       	ldi	r26, 0x34	; 52
    13ee:	b0 e0       	ldi	r27, 0x00	; 0
    13f0:	e4 e3       	ldi	r30, 0x34	; 52
    13f2:	f0 e0       	ldi	r31, 0x00	; 0
    13f4:	80 81       	ld	r24, Z
    13f6:	48 2f       	mov	r20, r24
    13f8:	8a 81       	ldd	r24, Y+2	; 0x02
    13fa:	28 2f       	mov	r18, r24
    13fc:	30 e0       	ldi	r19, 0x00	; 0
    13fe:	81 e0       	ldi	r24, 0x01	; 1
    1400:	90 e0       	ldi	r25, 0x00	; 0
    1402:	02 2e       	mov	r0, r18
    1404:	02 c0       	rjmp	.+4      	; 0x140a <MDIO_voidSetPinDirection+0x17a>
    1406:	88 0f       	add	r24, r24
    1408:	99 1f       	adc	r25, r25
    140a:	0a 94       	dec	r0
    140c:	e2 f7       	brpl	.-8      	; 0x1406 <MDIO_voidSetPinDirection+0x176>
    140e:	84 2b       	or	r24, r20
    1410:	8c 93       	st	X, r24
    1412:	4b c0       	rjmp	.+150    	; 0x14aa <MDIO_voidSetPinDirection+0x21a>
            break;

            case PIN_INPUT: CLR_BIT(DDRC_REG,A_u8Pin);
    1414:	a4 e3       	ldi	r26, 0x34	; 52
    1416:	b0 e0       	ldi	r27, 0x00	; 0
    1418:	e4 e3       	ldi	r30, 0x34	; 52
    141a:	f0 e0       	ldi	r31, 0x00	; 0
    141c:	80 81       	ld	r24, Z
    141e:	48 2f       	mov	r20, r24
    1420:	8a 81       	ldd	r24, Y+2	; 0x02
    1422:	28 2f       	mov	r18, r24
    1424:	30 e0       	ldi	r19, 0x00	; 0
    1426:	81 e0       	ldi	r24, 0x01	; 1
    1428:	90 e0       	ldi	r25, 0x00	; 0
    142a:	02 2e       	mov	r0, r18
    142c:	02 c0       	rjmp	.+4      	; 0x1432 <MDIO_voidSetPinDirection+0x1a2>
    142e:	88 0f       	add	r24, r24
    1430:	99 1f       	adc	r25, r25
    1432:	0a 94       	dec	r0
    1434:	e2 f7       	brpl	.-8      	; 0x142e <MDIO_voidSetPinDirection+0x19e>
    1436:	80 95       	com	r24
    1438:	84 23       	and	r24, r20
    143a:	8c 93       	st	X, r24
    143c:	36 c0       	rjmp	.+108    	; 0x14aa <MDIO_voidSetPinDirection+0x21a>
            break;
        };
        break;

        case PORTD:
        switch (A_u8Value)
    143e:	8b 81       	ldd	r24, Y+3	; 0x03
    1440:	28 2f       	mov	r18, r24
    1442:	30 e0       	ldi	r19, 0x00	; 0
    1444:	3d 83       	std	Y+5, r19	; 0x05
    1446:	2c 83       	std	Y+4, r18	; 0x04
    1448:	8c 81       	ldd	r24, Y+4	; 0x04
    144a:	9d 81       	ldd	r25, Y+5	; 0x05
    144c:	00 97       	sbiw	r24, 0x00	; 0
    144e:	c9 f0       	breq	.+50     	; 0x1482 <MDIO_voidSetPinDirection+0x1f2>
    1450:	2c 81       	ldd	r18, Y+4	; 0x04
    1452:	3d 81       	ldd	r19, Y+5	; 0x05
    1454:	21 30       	cpi	r18, 0x01	; 1
    1456:	31 05       	cpc	r19, r1
    1458:	41 f5       	brne	.+80     	; 0x14aa <MDIO_voidSetPinDirection+0x21a>
        {
            case PIN_OUTPUT: SET_BIT(DDRD_REG,A_u8Pin);
    145a:	a1 e3       	ldi	r26, 0x31	; 49
    145c:	b0 e0       	ldi	r27, 0x00	; 0
    145e:	e1 e3       	ldi	r30, 0x31	; 49
    1460:	f0 e0       	ldi	r31, 0x00	; 0
    1462:	80 81       	ld	r24, Z
    1464:	48 2f       	mov	r20, r24
    1466:	8a 81       	ldd	r24, Y+2	; 0x02
    1468:	28 2f       	mov	r18, r24
    146a:	30 e0       	ldi	r19, 0x00	; 0
    146c:	81 e0       	ldi	r24, 0x01	; 1
    146e:	90 e0       	ldi	r25, 0x00	; 0
    1470:	02 2e       	mov	r0, r18
    1472:	02 c0       	rjmp	.+4      	; 0x1478 <MDIO_voidSetPinDirection+0x1e8>
    1474:	88 0f       	add	r24, r24
    1476:	99 1f       	adc	r25, r25
    1478:	0a 94       	dec	r0
    147a:	e2 f7       	brpl	.-8      	; 0x1474 <MDIO_voidSetPinDirection+0x1e4>
    147c:	84 2b       	or	r24, r20
    147e:	8c 93       	st	X, r24
    1480:	14 c0       	rjmp	.+40     	; 0x14aa <MDIO_voidSetPinDirection+0x21a>
            break;

            case PIN_INPUT: CLR_BIT(DDRD_REG,A_u8Pin);
    1482:	a1 e3       	ldi	r26, 0x31	; 49
    1484:	b0 e0       	ldi	r27, 0x00	; 0
    1486:	e1 e3       	ldi	r30, 0x31	; 49
    1488:	f0 e0       	ldi	r31, 0x00	; 0
    148a:	80 81       	ld	r24, Z
    148c:	48 2f       	mov	r20, r24
    148e:	8a 81       	ldd	r24, Y+2	; 0x02
    1490:	28 2f       	mov	r18, r24
    1492:	30 e0       	ldi	r19, 0x00	; 0
    1494:	81 e0       	ldi	r24, 0x01	; 1
    1496:	90 e0       	ldi	r25, 0x00	; 0
    1498:	02 2e       	mov	r0, r18
    149a:	02 c0       	rjmp	.+4      	; 0x14a0 <MDIO_voidSetPinDirection+0x210>
    149c:	88 0f       	add	r24, r24
    149e:	99 1f       	adc	r25, r25
    14a0:	0a 94       	dec	r0
    14a2:	e2 f7       	brpl	.-8      	; 0x149c <MDIO_voidSetPinDirection+0x20c>
    14a4:	80 95       	com	r24
    14a6:	84 23       	and	r24, r20
    14a8:	8c 93       	st	X, r24
            break;
        };
        break;
    }
}
    14aa:	2d 96       	adiw	r28, 0x0d	; 13
    14ac:	0f b6       	in	r0, 0x3f	; 63
    14ae:	f8 94       	cli
    14b0:	de bf       	out	0x3e, r29	; 62
    14b2:	0f be       	out	0x3f, r0	; 63
    14b4:	cd bf       	out	0x3d, r28	; 61
    14b6:	cf 91       	pop	r28
    14b8:	df 91       	pop	r29
    14ba:	08 95       	ret

000014bc <MDIO_voidSetPortValue>:


void MDIO_voidSetPortValue(u8 A_u8Port,u8 A_u8Value)
{
    14bc:	df 93       	push	r29
    14be:	cf 93       	push	r28
    14c0:	00 d0       	rcall	.+0      	; 0x14c2 <MDIO_voidSetPortValue+0x6>
    14c2:	00 d0       	rcall	.+0      	; 0x14c4 <MDIO_voidSetPortValue+0x8>
    14c4:	cd b7       	in	r28, 0x3d	; 61
    14c6:	de b7       	in	r29, 0x3e	; 62
    14c8:	89 83       	std	Y+1, r24	; 0x01
    14ca:	6a 83       	std	Y+2, r22	; 0x02
    switch(A_u8Port)
    14cc:	89 81       	ldd	r24, Y+1	; 0x01
    14ce:	28 2f       	mov	r18, r24
    14d0:	30 e0       	ldi	r19, 0x00	; 0
    14d2:	3c 83       	std	Y+4, r19	; 0x04
    14d4:	2b 83       	std	Y+3, r18	; 0x03
    14d6:	8b 81       	ldd	r24, Y+3	; 0x03
    14d8:	9c 81       	ldd	r25, Y+4	; 0x04
    14da:	81 30       	cpi	r24, 0x01	; 1
    14dc:	91 05       	cpc	r25, r1
    14de:	d1 f0       	breq	.+52     	; 0x1514 <MDIO_voidSetPortValue+0x58>
    14e0:	2b 81       	ldd	r18, Y+3	; 0x03
    14e2:	3c 81       	ldd	r19, Y+4	; 0x04
    14e4:	22 30       	cpi	r18, 0x02	; 2
    14e6:	31 05       	cpc	r19, r1
    14e8:	2c f4       	brge	.+10     	; 0x14f4 <MDIO_voidSetPortValue+0x38>
    14ea:	8b 81       	ldd	r24, Y+3	; 0x03
    14ec:	9c 81       	ldd	r25, Y+4	; 0x04
    14ee:	00 97       	sbiw	r24, 0x00	; 0
    14f0:	61 f0       	breq	.+24     	; 0x150a <MDIO_voidSetPortValue+0x4e>
    14f2:	1e c0       	rjmp	.+60     	; 0x1530 <MDIO_voidSetPortValue+0x74>
    14f4:	2b 81       	ldd	r18, Y+3	; 0x03
    14f6:	3c 81       	ldd	r19, Y+4	; 0x04
    14f8:	22 30       	cpi	r18, 0x02	; 2
    14fa:	31 05       	cpc	r19, r1
    14fc:	81 f0       	breq	.+32     	; 0x151e <MDIO_voidSetPortValue+0x62>
    14fe:	8b 81       	ldd	r24, Y+3	; 0x03
    1500:	9c 81       	ldd	r25, Y+4	; 0x04
    1502:	83 30       	cpi	r24, 0x03	; 3
    1504:	91 05       	cpc	r25, r1
    1506:	81 f0       	breq	.+32     	; 0x1528 <MDIO_voidSetPortValue+0x6c>
    1508:	13 c0       	rjmp	.+38     	; 0x1530 <MDIO_voidSetPortValue+0x74>
    {
        case PORTA:PORTA_REG=A_u8Value;
    150a:	eb e3       	ldi	r30, 0x3B	; 59
    150c:	f0 e0       	ldi	r31, 0x00	; 0
    150e:	8a 81       	ldd	r24, Y+2	; 0x02
    1510:	80 83       	st	Z, r24
    1512:	0e c0       	rjmp	.+28     	; 0x1530 <MDIO_voidSetPortValue+0x74>
        break;
        case PORTB:PORTB_REG=A_u8Value;
    1514:	e8 e3       	ldi	r30, 0x38	; 56
    1516:	f0 e0       	ldi	r31, 0x00	; 0
    1518:	8a 81       	ldd	r24, Y+2	; 0x02
    151a:	80 83       	st	Z, r24
    151c:	09 c0       	rjmp	.+18     	; 0x1530 <MDIO_voidSetPortValue+0x74>
        break;
        case PORTC:PORTC_REG=A_u8Value;
    151e:	e5 e3       	ldi	r30, 0x35	; 53
    1520:	f0 e0       	ldi	r31, 0x00	; 0
    1522:	8a 81       	ldd	r24, Y+2	; 0x02
    1524:	80 83       	st	Z, r24
    1526:	04 c0       	rjmp	.+8      	; 0x1530 <MDIO_voidSetPortValue+0x74>
        break;
        case PORTD:PORTD_REG=A_u8Value;
    1528:	e2 e3       	ldi	r30, 0x32	; 50
    152a:	f0 e0       	ldi	r31, 0x00	; 0
    152c:	8a 81       	ldd	r24, Y+2	; 0x02
    152e:	80 83       	st	Z, r24
        break;
    }
}
    1530:	0f 90       	pop	r0
    1532:	0f 90       	pop	r0
    1534:	0f 90       	pop	r0
    1536:	0f 90       	pop	r0
    1538:	cf 91       	pop	r28
    153a:	df 91       	pop	r29
    153c:	08 95       	ret

0000153e <MDIO_voidSetPortDirection>:

void MDIO_voidSetPortDirection(u8 A_u8Port,u8 A_u8Value)
{
    153e:	df 93       	push	r29
    1540:	cf 93       	push	r28
    1542:	00 d0       	rcall	.+0      	; 0x1544 <MDIO_voidSetPortDirection+0x6>
    1544:	00 d0       	rcall	.+0      	; 0x1546 <MDIO_voidSetPortDirection+0x8>
    1546:	cd b7       	in	r28, 0x3d	; 61
    1548:	de b7       	in	r29, 0x3e	; 62
    154a:	89 83       	std	Y+1, r24	; 0x01
    154c:	6a 83       	std	Y+2, r22	; 0x02
    switch(A_u8Port)
    154e:	89 81       	ldd	r24, Y+1	; 0x01
    1550:	28 2f       	mov	r18, r24
    1552:	30 e0       	ldi	r19, 0x00	; 0
    1554:	3c 83       	std	Y+4, r19	; 0x04
    1556:	2b 83       	std	Y+3, r18	; 0x03
    1558:	8b 81       	ldd	r24, Y+3	; 0x03
    155a:	9c 81       	ldd	r25, Y+4	; 0x04
    155c:	81 30       	cpi	r24, 0x01	; 1
    155e:	91 05       	cpc	r25, r1
    1560:	d1 f0       	breq	.+52     	; 0x1596 <MDIO_voidSetPortDirection+0x58>
    1562:	2b 81       	ldd	r18, Y+3	; 0x03
    1564:	3c 81       	ldd	r19, Y+4	; 0x04
    1566:	22 30       	cpi	r18, 0x02	; 2
    1568:	31 05       	cpc	r19, r1
    156a:	2c f4       	brge	.+10     	; 0x1576 <MDIO_voidSetPortDirection+0x38>
    156c:	8b 81       	ldd	r24, Y+3	; 0x03
    156e:	9c 81       	ldd	r25, Y+4	; 0x04
    1570:	00 97       	sbiw	r24, 0x00	; 0
    1572:	61 f0       	breq	.+24     	; 0x158c <MDIO_voidSetPortDirection+0x4e>
    1574:	1e c0       	rjmp	.+60     	; 0x15b2 <MDIO_voidSetPortDirection+0x74>
    1576:	2b 81       	ldd	r18, Y+3	; 0x03
    1578:	3c 81       	ldd	r19, Y+4	; 0x04
    157a:	22 30       	cpi	r18, 0x02	; 2
    157c:	31 05       	cpc	r19, r1
    157e:	81 f0       	breq	.+32     	; 0x15a0 <MDIO_voidSetPortDirection+0x62>
    1580:	8b 81       	ldd	r24, Y+3	; 0x03
    1582:	9c 81       	ldd	r25, Y+4	; 0x04
    1584:	83 30       	cpi	r24, 0x03	; 3
    1586:	91 05       	cpc	r25, r1
    1588:	81 f0       	breq	.+32     	; 0x15aa <MDIO_voidSetPortDirection+0x6c>
    158a:	13 c0       	rjmp	.+38     	; 0x15b2 <MDIO_voidSetPortDirection+0x74>
    {
        case PORTA:DDRA_REG=A_u8Value;
    158c:	ea e3       	ldi	r30, 0x3A	; 58
    158e:	f0 e0       	ldi	r31, 0x00	; 0
    1590:	8a 81       	ldd	r24, Y+2	; 0x02
    1592:	80 83       	st	Z, r24
    1594:	0e c0       	rjmp	.+28     	; 0x15b2 <MDIO_voidSetPortDirection+0x74>
        break;
        case PORTB:DDRB_REG=A_u8Value;
    1596:	e7 e3       	ldi	r30, 0x37	; 55
    1598:	f0 e0       	ldi	r31, 0x00	; 0
    159a:	8a 81       	ldd	r24, Y+2	; 0x02
    159c:	80 83       	st	Z, r24
    159e:	09 c0       	rjmp	.+18     	; 0x15b2 <MDIO_voidSetPortDirection+0x74>
        break;
        case PORTC:DDRC_REG=A_u8Value;
    15a0:	e4 e3       	ldi	r30, 0x34	; 52
    15a2:	f0 e0       	ldi	r31, 0x00	; 0
    15a4:	8a 81       	ldd	r24, Y+2	; 0x02
    15a6:	80 83       	st	Z, r24
    15a8:	04 c0       	rjmp	.+8      	; 0x15b2 <MDIO_voidSetPortDirection+0x74>
        break;
        case PORTD:DDRD_REG=A_u8Value;
    15aa:	e1 e3       	ldi	r30, 0x31	; 49
    15ac:	f0 e0       	ldi	r31, 0x00	; 0
    15ae:	8a 81       	ldd	r24, Y+2	; 0x02
    15b0:	80 83       	st	Z, r24
        break;
    }
    15b2:	0f 90       	pop	r0
    15b4:	0f 90       	pop	r0
    15b6:	0f 90       	pop	r0
    15b8:	0f 90       	pop	r0
    15ba:	cf 91       	pop	r28
    15bc:	df 91       	pop	r29
    15be:	08 95       	ret

000015c0 <MEXTI_voidConfig>:
void (*EXTI0_CallBack)(void)=NULL;
void (*EXTI1_CallBack)(void)=NULL;
void (*EXTI2_CallBack)(void)=NULL;

void MEXTI_voidConfig(u8 A_u8EXTINo,u8 A_u8SenseMode)
{
    15c0:	df 93       	push	r29
    15c2:	cf 93       	push	r28
    15c4:	00 d0       	rcall	.+0      	; 0x15c6 <MEXTI_voidConfig+0x6>
    15c6:	00 d0       	rcall	.+0      	; 0x15c8 <MEXTI_voidConfig+0x8>
    15c8:	00 d0       	rcall	.+0      	; 0x15ca <MEXTI_voidConfig+0xa>
    15ca:	cd b7       	in	r28, 0x3d	; 61
    15cc:	de b7       	in	r29, 0x3e	; 62
    15ce:	89 83       	std	Y+1, r24	; 0x01
    15d0:	6a 83       	std	Y+2, r22	; 0x02
    if(A_u8SenseMode <4)
    15d2:	8a 81       	ldd	r24, Y+2	; 0x02
    15d4:	84 30       	cpi	r24, 0x04	; 4
    15d6:	08 f0       	brcs	.+2      	; 0x15da <MEXTI_voidConfig+0x1a>
    15d8:	5a c0       	rjmp	.+180    	; 0x168e <MEXTI_voidConfig+0xce>
    {
        switch (A_u8EXTINo)
    15da:	89 81       	ldd	r24, Y+1	; 0x01
    15dc:	28 2f       	mov	r18, r24
    15de:	30 e0       	ldi	r19, 0x00	; 0
    15e0:	3e 83       	std	Y+6, r19	; 0x06
    15e2:	2d 83       	std	Y+5, r18	; 0x05
    15e4:	8d 81       	ldd	r24, Y+5	; 0x05
    15e6:	9e 81       	ldd	r25, Y+6	; 0x06
    15e8:	81 30       	cpi	r24, 0x01	; 1
    15ea:	91 05       	cpc	r25, r1
    15ec:	d1 f0       	breq	.+52     	; 0x1622 <MEXTI_voidConfig+0x62>
    15ee:	2d 81       	ldd	r18, Y+5	; 0x05
    15f0:	3e 81       	ldd	r19, Y+6	; 0x06
    15f2:	22 30       	cpi	r18, 0x02	; 2
    15f4:	31 05       	cpc	r19, r1
    15f6:	61 f1       	breq	.+88     	; 0x1650 <MEXTI_voidConfig+0x90>
    15f8:	8d 81       	ldd	r24, Y+5	; 0x05
    15fa:	9e 81       	ldd	r25, Y+6	; 0x06
    15fc:	00 97       	sbiw	r24, 0x00	; 0
    15fe:	09 f0       	breq	.+2      	; 0x1602 <MEXTI_voidConfig+0x42>
    1600:	46 c0       	rjmp	.+140    	; 0x168e <MEXTI_voidConfig+0xce>
        {
        case EXTI0:
            MCUCR &=~(SENSE_MODE_MASK<<ISC00); //clearing bits
    1602:	a5 e5       	ldi	r26, 0x55	; 85
    1604:	b0 e0       	ldi	r27, 0x00	; 0
    1606:	e5 e5       	ldi	r30, 0x55	; 85
    1608:	f0 e0       	ldi	r31, 0x00	; 0
    160a:	80 81       	ld	r24, Z
    160c:	8c 7f       	andi	r24, 0xFC	; 252
    160e:	8c 93       	st	X, r24
            MCUCR |=(A_u8SenseMode<<ISC00); //puting values
    1610:	a5 e5       	ldi	r26, 0x55	; 85
    1612:	b0 e0       	ldi	r27, 0x00	; 0
    1614:	e5 e5       	ldi	r30, 0x55	; 85
    1616:	f0 e0       	ldi	r31, 0x00	; 0
    1618:	90 81       	ld	r25, Z
    161a:	8a 81       	ldd	r24, Y+2	; 0x02
    161c:	89 2b       	or	r24, r25
    161e:	8c 93       	st	X, r24
    1620:	36 c0       	rjmp	.+108    	; 0x168e <MEXTI_voidConfig+0xce>
            break;

        case EXTI1:
            MCUCR &=~(SENSE_MODE_MASK<<ISC10); //clearing bits
    1622:	a5 e5       	ldi	r26, 0x55	; 85
    1624:	b0 e0       	ldi	r27, 0x00	; 0
    1626:	e5 e5       	ldi	r30, 0x55	; 85
    1628:	f0 e0       	ldi	r31, 0x00	; 0
    162a:	80 81       	ld	r24, Z
    162c:	83 7f       	andi	r24, 0xF3	; 243
    162e:	8c 93       	st	X, r24
            MCUCR |=(A_u8SenseMode<<ISC10); //puting values
    1630:	a5 e5       	ldi	r26, 0x55	; 85
    1632:	b0 e0       	ldi	r27, 0x00	; 0
    1634:	e5 e5       	ldi	r30, 0x55	; 85
    1636:	f0 e0       	ldi	r31, 0x00	; 0
    1638:	80 81       	ld	r24, Z
    163a:	28 2f       	mov	r18, r24
    163c:	8a 81       	ldd	r24, Y+2	; 0x02
    163e:	88 2f       	mov	r24, r24
    1640:	90 e0       	ldi	r25, 0x00	; 0
    1642:	88 0f       	add	r24, r24
    1644:	99 1f       	adc	r25, r25
    1646:	88 0f       	add	r24, r24
    1648:	99 1f       	adc	r25, r25
    164a:	82 2b       	or	r24, r18
    164c:	8c 93       	st	X, r24
    164e:	1f c0       	rjmp	.+62     	; 0x168e <MEXTI_voidConfig+0xce>
            break;
        
        case EXTI2:
            switch (A_u8SenseMode)
    1650:	8a 81       	ldd	r24, Y+2	; 0x02
    1652:	28 2f       	mov	r18, r24
    1654:	30 e0       	ldi	r19, 0x00	; 0
    1656:	3c 83       	std	Y+4, r19	; 0x04
    1658:	2b 83       	std	Y+3, r18	; 0x03
    165a:	8b 81       	ldd	r24, Y+3	; 0x03
    165c:	9c 81       	ldd	r25, Y+4	; 0x04
    165e:	82 30       	cpi	r24, 0x02	; 2
    1660:	91 05       	cpc	r25, r1
    1662:	31 f0       	breq	.+12     	; 0x1670 <MEXTI_voidConfig+0xb0>
    1664:	2b 81       	ldd	r18, Y+3	; 0x03
    1666:	3c 81       	ldd	r19, Y+4	; 0x04
    1668:	23 30       	cpi	r18, 0x03	; 3
    166a:	31 05       	cpc	r19, r1
    166c:	49 f0       	breq	.+18     	; 0x1680 <MEXTI_voidConfig+0xc0>
    166e:	0f c0       	rjmp	.+30     	; 0x168e <MEXTI_voidConfig+0xce>
            {
                case FALLING_EDGE:CLR_BIT(MCUCSR,ISC2);
    1670:	a4 e5       	ldi	r26, 0x54	; 84
    1672:	b0 e0       	ldi	r27, 0x00	; 0
    1674:	e4 e5       	ldi	r30, 0x54	; 84
    1676:	f0 e0       	ldi	r31, 0x00	; 0
    1678:	80 81       	ld	r24, Z
    167a:	8f 7b       	andi	r24, 0xBF	; 191
    167c:	8c 93       	st	X, r24
    167e:	07 c0       	rjmp	.+14     	; 0x168e <MEXTI_voidConfig+0xce>
                break;

                case RISING_EDGE:SET_BIT(MCUCSR,ISC2);
    1680:	a4 e5       	ldi	r26, 0x54	; 84
    1682:	b0 e0       	ldi	r27, 0x00	; 0
    1684:	e4 e5       	ldi	r30, 0x54	; 84
    1686:	f0 e0       	ldi	r31, 0x00	; 0
    1688:	80 81       	ld	r24, Z
    168a:	80 64       	ori	r24, 0x40	; 64
    168c:	8c 93       	st	X, r24
        
        default:
            break;
        }
    }
}
    168e:	26 96       	adiw	r28, 0x06	; 6
    1690:	0f b6       	in	r0, 0x3f	; 63
    1692:	f8 94       	cli
    1694:	de bf       	out	0x3e, r29	; 62
    1696:	0f be       	out	0x3f, r0	; 63
    1698:	cd bf       	out	0x3d, r28	; 61
    169a:	cf 91       	pop	r28
    169c:	df 91       	pop	r29
    169e:	08 95       	ret

000016a0 <MEXTI_voidEnable>:

void MEXTI_voidEnable(u8 A_u8EXTI)
{
    16a0:	df 93       	push	r29
    16a2:	cf 93       	push	r28
    16a4:	00 d0       	rcall	.+0      	; 0x16a6 <MEXTI_voidEnable+0x6>
    16a6:	0f 92       	push	r0
    16a8:	cd b7       	in	r28, 0x3d	; 61
    16aa:	de b7       	in	r29, 0x3e	; 62
    16ac:	89 83       	std	Y+1, r24	; 0x01
    switch(A_u8EXTI)
    16ae:	89 81       	ldd	r24, Y+1	; 0x01
    16b0:	28 2f       	mov	r18, r24
    16b2:	30 e0       	ldi	r19, 0x00	; 0
    16b4:	3b 83       	std	Y+3, r19	; 0x03
    16b6:	2a 83       	std	Y+2, r18	; 0x02
    16b8:	8a 81       	ldd	r24, Y+2	; 0x02
    16ba:	9b 81       	ldd	r25, Y+3	; 0x03
    16bc:	81 30       	cpi	r24, 0x01	; 1
    16be:	91 05       	cpc	r25, r1
    16c0:	89 f0       	breq	.+34     	; 0x16e4 <MEXTI_voidEnable+0x44>
    16c2:	2a 81       	ldd	r18, Y+2	; 0x02
    16c4:	3b 81       	ldd	r19, Y+3	; 0x03
    16c6:	22 30       	cpi	r18, 0x02	; 2
    16c8:	31 05       	cpc	r19, r1
    16ca:	a1 f0       	breq	.+40     	; 0x16f4 <MEXTI_voidEnable+0x54>
    16cc:	8a 81       	ldd	r24, Y+2	; 0x02
    16ce:	9b 81       	ldd	r25, Y+3	; 0x03
    16d0:	00 97       	sbiw	r24, 0x00	; 0
    16d2:	b9 f4       	brne	.+46     	; 0x1702 <MEXTI_voidEnable+0x62>
    {
        case EXTI0: SET_BIT(GICR,INT0);
    16d4:	ab e5       	ldi	r26, 0x5B	; 91
    16d6:	b0 e0       	ldi	r27, 0x00	; 0
    16d8:	eb e5       	ldi	r30, 0x5B	; 91
    16da:	f0 e0       	ldi	r31, 0x00	; 0
    16dc:	80 81       	ld	r24, Z
    16de:	80 64       	ori	r24, 0x40	; 64
    16e0:	8c 93       	st	X, r24
    16e2:	0f c0       	rjmp	.+30     	; 0x1702 <MEXTI_voidEnable+0x62>
        break;
        case EXTI1: SET_BIT(GICR,INT1);
    16e4:	ab e5       	ldi	r26, 0x5B	; 91
    16e6:	b0 e0       	ldi	r27, 0x00	; 0
    16e8:	eb e5       	ldi	r30, 0x5B	; 91
    16ea:	f0 e0       	ldi	r31, 0x00	; 0
    16ec:	80 81       	ld	r24, Z
    16ee:	80 68       	ori	r24, 0x80	; 128
    16f0:	8c 93       	st	X, r24
    16f2:	07 c0       	rjmp	.+14     	; 0x1702 <MEXTI_voidEnable+0x62>
        break;
        case EXTI2: SET_BIT(GICR,INT2);
    16f4:	ab e5       	ldi	r26, 0x5B	; 91
    16f6:	b0 e0       	ldi	r27, 0x00	; 0
    16f8:	eb e5       	ldi	r30, 0x5B	; 91
    16fa:	f0 e0       	ldi	r31, 0x00	; 0
    16fc:	80 81       	ld	r24, Z
    16fe:	80 62       	ori	r24, 0x20	; 32
    1700:	8c 93       	st	X, r24
        break;
    }
}
    1702:	0f 90       	pop	r0
    1704:	0f 90       	pop	r0
    1706:	0f 90       	pop	r0
    1708:	cf 91       	pop	r28
    170a:	df 91       	pop	r29
    170c:	08 95       	ret

0000170e <MEXTI_voidDisable>:

void MEXTI_voidDisable(u8 A_u8EXTI)
{
    170e:	df 93       	push	r29
    1710:	cf 93       	push	r28
    1712:	00 d0       	rcall	.+0      	; 0x1714 <MEXTI_voidDisable+0x6>
    1714:	0f 92       	push	r0
    1716:	cd b7       	in	r28, 0x3d	; 61
    1718:	de b7       	in	r29, 0x3e	; 62
    171a:	89 83       	std	Y+1, r24	; 0x01
    switch(A_u8EXTI)
    171c:	89 81       	ldd	r24, Y+1	; 0x01
    171e:	28 2f       	mov	r18, r24
    1720:	30 e0       	ldi	r19, 0x00	; 0
    1722:	3b 83       	std	Y+3, r19	; 0x03
    1724:	2a 83       	std	Y+2, r18	; 0x02
    1726:	8a 81       	ldd	r24, Y+2	; 0x02
    1728:	9b 81       	ldd	r25, Y+3	; 0x03
    172a:	81 30       	cpi	r24, 0x01	; 1
    172c:	91 05       	cpc	r25, r1
    172e:	89 f0       	breq	.+34     	; 0x1752 <MEXTI_voidDisable+0x44>
    1730:	2a 81       	ldd	r18, Y+2	; 0x02
    1732:	3b 81       	ldd	r19, Y+3	; 0x03
    1734:	22 30       	cpi	r18, 0x02	; 2
    1736:	31 05       	cpc	r19, r1
    1738:	a1 f0       	breq	.+40     	; 0x1762 <MEXTI_voidDisable+0x54>
    173a:	8a 81       	ldd	r24, Y+2	; 0x02
    173c:	9b 81       	ldd	r25, Y+3	; 0x03
    173e:	00 97       	sbiw	r24, 0x00	; 0
    1740:	b9 f4       	brne	.+46     	; 0x1770 <MEXTI_voidDisable+0x62>
    {
        case EXTI0: CLR_BIT(GICR,INT0);
    1742:	ab e5       	ldi	r26, 0x5B	; 91
    1744:	b0 e0       	ldi	r27, 0x00	; 0
    1746:	eb e5       	ldi	r30, 0x5B	; 91
    1748:	f0 e0       	ldi	r31, 0x00	; 0
    174a:	80 81       	ld	r24, Z
    174c:	8f 7b       	andi	r24, 0xBF	; 191
    174e:	8c 93       	st	X, r24
    1750:	0f c0       	rjmp	.+30     	; 0x1770 <MEXTI_voidDisable+0x62>
        break;
        case EXTI1: CLR_BIT(GICR,INT1);
    1752:	ab e5       	ldi	r26, 0x5B	; 91
    1754:	b0 e0       	ldi	r27, 0x00	; 0
    1756:	eb e5       	ldi	r30, 0x5B	; 91
    1758:	f0 e0       	ldi	r31, 0x00	; 0
    175a:	80 81       	ld	r24, Z
    175c:	8f 77       	andi	r24, 0x7F	; 127
    175e:	8c 93       	st	X, r24
    1760:	07 c0       	rjmp	.+14     	; 0x1770 <MEXTI_voidDisable+0x62>
        break;
        case EXTI2: CLR_BIT(GICR,INT2);
    1762:	ab e5       	ldi	r26, 0x5B	; 91
    1764:	b0 e0       	ldi	r27, 0x00	; 0
    1766:	eb e5       	ldi	r30, 0x5B	; 91
    1768:	f0 e0       	ldi	r31, 0x00	; 0
    176a:	80 81       	ld	r24, Z
    176c:	8f 7d       	andi	r24, 0xDF	; 223
    176e:	8c 93       	st	X, r24
        break;
    }
}
    1770:	0f 90       	pop	r0
    1772:	0f 90       	pop	r0
    1774:	0f 90       	pop	r0
    1776:	cf 91       	pop	r28
    1778:	df 91       	pop	r29
    177a:	08 95       	ret

0000177c <MEXTI_voidClearFlag>:

void MEXTI_voidClearFlag(u8 A_u8EXTI)
{
    177c:	df 93       	push	r29
    177e:	cf 93       	push	r28
    1780:	00 d0       	rcall	.+0      	; 0x1782 <MEXTI_voidClearFlag+0x6>
    1782:	0f 92       	push	r0
    1784:	cd b7       	in	r28, 0x3d	; 61
    1786:	de b7       	in	r29, 0x3e	; 62
    1788:	89 83       	std	Y+1, r24	; 0x01
    switch(A_u8EXTI)
    178a:	89 81       	ldd	r24, Y+1	; 0x01
    178c:	28 2f       	mov	r18, r24
    178e:	30 e0       	ldi	r19, 0x00	; 0
    1790:	3b 83       	std	Y+3, r19	; 0x03
    1792:	2a 83       	std	Y+2, r18	; 0x02
    1794:	8a 81       	ldd	r24, Y+2	; 0x02
    1796:	9b 81       	ldd	r25, Y+3	; 0x03
    1798:	81 30       	cpi	r24, 0x01	; 1
    179a:	91 05       	cpc	r25, r1
    179c:	89 f0       	breq	.+34     	; 0x17c0 <MEXTI_voidClearFlag+0x44>
    179e:	2a 81       	ldd	r18, Y+2	; 0x02
    17a0:	3b 81       	ldd	r19, Y+3	; 0x03
    17a2:	22 30       	cpi	r18, 0x02	; 2
    17a4:	31 05       	cpc	r19, r1
    17a6:	a1 f0       	breq	.+40     	; 0x17d0 <MEXTI_voidClearFlag+0x54>
    17a8:	8a 81       	ldd	r24, Y+2	; 0x02
    17aa:	9b 81       	ldd	r25, Y+3	; 0x03
    17ac:	00 97       	sbiw	r24, 0x00	; 0
    17ae:	b9 f4       	brne	.+46     	; 0x17de <MEXTI_voidClearFlag+0x62>
    {
        case EXTI0: SET_BIT(GIFR,INTF0);
    17b0:	aa e5       	ldi	r26, 0x5A	; 90
    17b2:	b0 e0       	ldi	r27, 0x00	; 0
    17b4:	ea e5       	ldi	r30, 0x5A	; 90
    17b6:	f0 e0       	ldi	r31, 0x00	; 0
    17b8:	80 81       	ld	r24, Z
    17ba:	80 64       	ori	r24, 0x40	; 64
    17bc:	8c 93       	st	X, r24
    17be:	0f c0       	rjmp	.+30     	; 0x17de <MEXTI_voidClearFlag+0x62>
        break;
        case EXTI1: SET_BIT(GIFR,INTF1);
    17c0:	aa e5       	ldi	r26, 0x5A	; 90
    17c2:	b0 e0       	ldi	r27, 0x00	; 0
    17c4:	ea e5       	ldi	r30, 0x5A	; 90
    17c6:	f0 e0       	ldi	r31, 0x00	; 0
    17c8:	80 81       	ld	r24, Z
    17ca:	80 68       	ori	r24, 0x80	; 128
    17cc:	8c 93       	st	X, r24
    17ce:	07 c0       	rjmp	.+14     	; 0x17de <MEXTI_voidClearFlag+0x62>
        break;
        case EXTI2: SET_BIT(GIFR,INTF2);
    17d0:	aa e5       	ldi	r26, 0x5A	; 90
    17d2:	b0 e0       	ldi	r27, 0x00	; 0
    17d4:	ea e5       	ldi	r30, 0x5A	; 90
    17d6:	f0 e0       	ldi	r31, 0x00	; 0
    17d8:	80 81       	ld	r24, Z
    17da:	80 62       	ori	r24, 0x20	; 32
    17dc:	8c 93       	st	X, r24
        break;
    }
}
    17de:	0f 90       	pop	r0
    17e0:	0f 90       	pop	r0
    17e2:	0f 90       	pop	r0
    17e4:	cf 91       	pop	r28
    17e6:	df 91       	pop	r29
    17e8:	08 95       	ret

000017ea <MEXTI_voidSetCallBack>:

void MEXTI_voidSetCallBack(u8 A_u8EXTI,void (*ptrToFunc)(void))
{
    17ea:	df 93       	push	r29
    17ec:	cf 93       	push	r28
    17ee:	00 d0       	rcall	.+0      	; 0x17f0 <MEXTI_voidSetCallBack+0x6>
    17f0:	00 d0       	rcall	.+0      	; 0x17f2 <MEXTI_voidSetCallBack+0x8>
    17f2:	0f 92       	push	r0
    17f4:	cd b7       	in	r28, 0x3d	; 61
    17f6:	de b7       	in	r29, 0x3e	; 62
    17f8:	89 83       	std	Y+1, r24	; 0x01
    17fa:	7b 83       	std	Y+3, r23	; 0x03
    17fc:	6a 83       	std	Y+2, r22	; 0x02
    if(ptrToFunc!=NULL)
    17fe:	8a 81       	ldd	r24, Y+2	; 0x02
    1800:	9b 81       	ldd	r25, Y+3	; 0x03
    1802:	00 97       	sbiw	r24, 0x00	; 0
    1804:	39 f1       	breq	.+78     	; 0x1854 <MEXTI_voidSetCallBack+0x6a>
    {
        switch (A_u8EXTI)
    1806:	89 81       	ldd	r24, Y+1	; 0x01
    1808:	28 2f       	mov	r18, r24
    180a:	30 e0       	ldi	r19, 0x00	; 0
    180c:	3d 83       	std	Y+5, r19	; 0x05
    180e:	2c 83       	std	Y+4, r18	; 0x04
    1810:	8c 81       	ldd	r24, Y+4	; 0x04
    1812:	9d 81       	ldd	r25, Y+5	; 0x05
    1814:	81 30       	cpi	r24, 0x01	; 1
    1816:	91 05       	cpc	r25, r1
    1818:	81 f0       	breq	.+32     	; 0x183a <MEXTI_voidSetCallBack+0x50>
    181a:	2c 81       	ldd	r18, Y+4	; 0x04
    181c:	3d 81       	ldd	r19, Y+5	; 0x05
    181e:	22 30       	cpi	r18, 0x02	; 2
    1820:	31 05       	cpc	r19, r1
    1822:	91 f0       	breq	.+36     	; 0x1848 <MEXTI_voidSetCallBack+0x5e>
    1824:	8c 81       	ldd	r24, Y+4	; 0x04
    1826:	9d 81       	ldd	r25, Y+5	; 0x05
    1828:	00 97       	sbiw	r24, 0x00	; 0
    182a:	a1 f4       	brne	.+40     	; 0x1854 <MEXTI_voidSetCallBack+0x6a>
        {
        case EXTI0:EXTI0_CallBack=ptrToFunc;break;
    182c:	8a 81       	ldd	r24, Y+2	; 0x02
    182e:	9b 81       	ldd	r25, Y+3	; 0x03
    1830:	90 93 95 00 	sts	0x0095, r25
    1834:	80 93 94 00 	sts	0x0094, r24
    1838:	0d c0       	rjmp	.+26     	; 0x1854 <MEXTI_voidSetCallBack+0x6a>
        case EXTI1:EXTI1_CallBack=ptrToFunc;break;
    183a:	8a 81       	ldd	r24, Y+2	; 0x02
    183c:	9b 81       	ldd	r25, Y+3	; 0x03
    183e:	90 93 97 00 	sts	0x0097, r25
    1842:	80 93 96 00 	sts	0x0096, r24
    1846:	06 c0       	rjmp	.+12     	; 0x1854 <MEXTI_voidSetCallBack+0x6a>
        case EXTI2:EXTI2_CallBack=ptrToFunc;break;
    1848:	8a 81       	ldd	r24, Y+2	; 0x02
    184a:	9b 81       	ldd	r25, Y+3	; 0x03
    184c:	90 93 99 00 	sts	0x0099, r25
    1850:	80 93 98 00 	sts	0x0098, r24
        default:
            break;
        }
    }
}
    1854:	0f 90       	pop	r0
    1856:	0f 90       	pop	r0
    1858:	0f 90       	pop	r0
    185a:	0f 90       	pop	r0
    185c:	0f 90       	pop	r0
    185e:	cf 91       	pop	r28
    1860:	df 91       	pop	r29
    1862:	08 95       	ret

00001864 <__vector_1>:



void __vector_1(void)  __attribute__((signal)); //__attribute__ for linker to recognize as ISR
void __vector_1(void)
{
    1864:	1f 92       	push	r1
    1866:	0f 92       	push	r0
    1868:	0f b6       	in	r0, 0x3f	; 63
    186a:	0f 92       	push	r0
    186c:	11 24       	eor	r1, r1
    186e:	2f 93       	push	r18
    1870:	3f 93       	push	r19
    1872:	4f 93       	push	r20
    1874:	5f 93       	push	r21
    1876:	6f 93       	push	r22
    1878:	7f 93       	push	r23
    187a:	8f 93       	push	r24
    187c:	9f 93       	push	r25
    187e:	af 93       	push	r26
    1880:	bf 93       	push	r27
    1882:	ef 93       	push	r30
    1884:	ff 93       	push	r31
    1886:	df 93       	push	r29
    1888:	cf 93       	push	r28
    188a:	cd b7       	in	r28, 0x3d	; 61
    188c:	de b7       	in	r29, 0x3e	; 62
    if(EXTI0_CallBack!=NULL)
    188e:	80 91 94 00 	lds	r24, 0x0094
    1892:	90 91 95 00 	lds	r25, 0x0095
    1896:	00 97       	sbiw	r24, 0x00	; 0
    1898:	29 f0       	breq	.+10     	; 0x18a4 <__vector_1+0x40>
    {
        EXTI0_CallBack();
    189a:	e0 91 94 00 	lds	r30, 0x0094
    189e:	f0 91 95 00 	lds	r31, 0x0095
    18a2:	09 95       	icall
    }
}
    18a4:	cf 91       	pop	r28
    18a6:	df 91       	pop	r29
    18a8:	ff 91       	pop	r31
    18aa:	ef 91       	pop	r30
    18ac:	bf 91       	pop	r27
    18ae:	af 91       	pop	r26
    18b0:	9f 91       	pop	r25
    18b2:	8f 91       	pop	r24
    18b4:	7f 91       	pop	r23
    18b6:	6f 91       	pop	r22
    18b8:	5f 91       	pop	r21
    18ba:	4f 91       	pop	r20
    18bc:	3f 91       	pop	r19
    18be:	2f 91       	pop	r18
    18c0:	0f 90       	pop	r0
    18c2:	0f be       	out	0x3f, r0	; 63
    18c4:	0f 90       	pop	r0
    18c6:	1f 90       	pop	r1
    18c8:	18 95       	reti

000018ca <__vector_2>:

void __vector_2(void)  __attribute__((signal)); //__attribute__ for linker to recognize as ISR
void __vector_2(void)
{
    18ca:	1f 92       	push	r1
    18cc:	0f 92       	push	r0
    18ce:	0f b6       	in	r0, 0x3f	; 63
    18d0:	0f 92       	push	r0
    18d2:	11 24       	eor	r1, r1
    18d4:	2f 93       	push	r18
    18d6:	3f 93       	push	r19
    18d8:	4f 93       	push	r20
    18da:	5f 93       	push	r21
    18dc:	6f 93       	push	r22
    18de:	7f 93       	push	r23
    18e0:	8f 93       	push	r24
    18e2:	9f 93       	push	r25
    18e4:	af 93       	push	r26
    18e6:	bf 93       	push	r27
    18e8:	ef 93       	push	r30
    18ea:	ff 93       	push	r31
    18ec:	df 93       	push	r29
    18ee:	cf 93       	push	r28
    18f0:	cd b7       	in	r28, 0x3d	; 61
    18f2:	de b7       	in	r29, 0x3e	; 62
    if(EXTI1_CallBack!=NULL)
    18f4:	80 91 96 00 	lds	r24, 0x0096
    18f8:	90 91 97 00 	lds	r25, 0x0097
    18fc:	00 97       	sbiw	r24, 0x00	; 0
    18fe:	29 f0       	breq	.+10     	; 0x190a <__vector_2+0x40>
    {
        EXTI1_CallBack();
    1900:	e0 91 96 00 	lds	r30, 0x0096
    1904:	f0 91 97 00 	lds	r31, 0x0097
    1908:	09 95       	icall
    }
}
    190a:	cf 91       	pop	r28
    190c:	df 91       	pop	r29
    190e:	ff 91       	pop	r31
    1910:	ef 91       	pop	r30
    1912:	bf 91       	pop	r27
    1914:	af 91       	pop	r26
    1916:	9f 91       	pop	r25
    1918:	8f 91       	pop	r24
    191a:	7f 91       	pop	r23
    191c:	6f 91       	pop	r22
    191e:	5f 91       	pop	r21
    1920:	4f 91       	pop	r20
    1922:	3f 91       	pop	r19
    1924:	2f 91       	pop	r18
    1926:	0f 90       	pop	r0
    1928:	0f be       	out	0x3f, r0	; 63
    192a:	0f 90       	pop	r0
    192c:	1f 90       	pop	r1
    192e:	18 95       	reti

00001930 <__vector_3>:
void __vector_3(void)  __attribute__((signal)); //__attribute__ for linker to recognize as ISR
void __vector_3(void)
{
    1930:	1f 92       	push	r1
    1932:	0f 92       	push	r0
    1934:	0f b6       	in	r0, 0x3f	; 63
    1936:	0f 92       	push	r0
    1938:	11 24       	eor	r1, r1
    193a:	2f 93       	push	r18
    193c:	3f 93       	push	r19
    193e:	4f 93       	push	r20
    1940:	5f 93       	push	r21
    1942:	6f 93       	push	r22
    1944:	7f 93       	push	r23
    1946:	8f 93       	push	r24
    1948:	9f 93       	push	r25
    194a:	af 93       	push	r26
    194c:	bf 93       	push	r27
    194e:	ef 93       	push	r30
    1950:	ff 93       	push	r31
    1952:	df 93       	push	r29
    1954:	cf 93       	push	r28
    1956:	cd b7       	in	r28, 0x3d	; 61
    1958:	de b7       	in	r29, 0x3e	; 62
    if(EXTI2_CallBack!=NULL)
    195a:	80 91 98 00 	lds	r24, 0x0098
    195e:	90 91 99 00 	lds	r25, 0x0099
    1962:	00 97       	sbiw	r24, 0x00	; 0
    1964:	29 f0       	breq	.+10     	; 0x1970 <__vector_3+0x40>
    {
        EXTI2_CallBack();
    1966:	e0 91 98 00 	lds	r30, 0x0098
    196a:	f0 91 99 00 	lds	r31, 0x0099
    196e:	09 95       	icall
    }
    1970:	cf 91       	pop	r28
    1972:	df 91       	pop	r29
    1974:	ff 91       	pop	r31
    1976:	ef 91       	pop	r30
    1978:	bf 91       	pop	r27
    197a:	af 91       	pop	r26
    197c:	9f 91       	pop	r25
    197e:	8f 91       	pop	r24
    1980:	7f 91       	pop	r23
    1982:	6f 91       	pop	r22
    1984:	5f 91       	pop	r21
    1986:	4f 91       	pop	r20
    1988:	3f 91       	pop	r19
    198a:	2f 91       	pop	r18
    198c:	0f 90       	pop	r0
    198e:	0f be       	out	0x3f, r0	; 63
    1990:	0f 90       	pop	r0
    1992:	1f 90       	pop	r1
    1994:	18 95       	reti

00001996 <MGI_voidEnable>:
#include "../Include/MCAL/GI/GI_Configuration.h"



void MGI_voidEnable()
{
    1996:	df 93       	push	r29
    1998:	cf 93       	push	r28
    199a:	cd b7       	in	r28, 0x3d	; 61
    199c:	de b7       	in	r29, 0x3e	; 62
    SET_BIT(SREG,I_BIT);
    199e:	af e5       	ldi	r26, 0x5F	; 95
    19a0:	b0 e0       	ldi	r27, 0x00	; 0
    19a2:	ef e5       	ldi	r30, 0x5F	; 95
    19a4:	f0 e0       	ldi	r31, 0x00	; 0
    19a6:	80 81       	ld	r24, Z
    19a8:	80 68       	ori	r24, 0x80	; 128
    19aa:	8c 93       	st	X, r24
}
    19ac:	cf 91       	pop	r28
    19ae:	df 91       	pop	r29
    19b0:	08 95       	ret

000019b2 <MGI_voidDisable>:

void MGI_voidDisable()
{
    19b2:	df 93       	push	r29
    19b4:	cf 93       	push	r28
    19b6:	cd b7       	in	r28, 0x3d	; 61
    19b8:	de b7       	in	r29, 0x3e	; 62
    
    CLR_BIT(SREG,I_BIT);
    19ba:	af e5       	ldi	r26, 0x5F	; 95
    19bc:	b0 e0       	ldi	r27, 0x00	; 0
    19be:	ef e5       	ldi	r30, 0x5F	; 95
    19c0:	f0 e0       	ldi	r31, 0x00	; 0
    19c2:	80 81       	ld	r24, Z
    19c4:	8f 77       	andi	r24, 0x7F	; 127
    19c6:	8c 93       	st	X, r24
    19c8:	cf 91       	pop	r28
    19ca:	df 91       	pop	r29
    19cc:	08 95       	ret

000019ce <HKEYPAD_u8GetPressedKey>:
u8 keypadRow[ROWS_NUMBER]=ROW_PINS;
u8 keypadCol[COLS_NUMBER]=COL_PINS;


u8 HKEYPAD_u8GetPressedKey()
{
    19ce:	df 93       	push	r29
    19d0:	cf 93       	push	r28
    19d2:	cd b7       	in	r28, 0x3d	; 61
    19d4:	de b7       	in	r29, 0x3e	; 62
    19d6:	62 97       	sbiw	r28, 0x12	; 18
    19d8:	0f b6       	in	r0, 0x3f	; 63
    19da:	f8 94       	cli
    19dc:	de bf       	out	0x3e, r29	; 62
    19de:	0f be       	out	0x3f, r0	; 63
    19e0:	cd bf       	out	0x3d, r28	; 61
    u8 local_u8RowCounter,local_u8ColCounter,local_u8Flag=FLAG_DOWN,local_u8PressedKey=KEY_NOT_PRESSED;
    19e2:	18 8a       	std	Y+16, r1	; 0x10
    19e4:	8f ef       	ldi	r24, 0xFF	; 255
    19e6:	8f 87       	std	Y+15, r24	; 0x0f
    
    for(local_u8RowCounter=0;local_u8RowCounter<ROWS_NUMBER;local_u8RowCounter++)
    19e8:	1a 8a       	std	Y+18, r1	; 0x12
    19ea:	c9 c0       	rjmp	.+402    	; 0x1b7e <HKEYPAD_u8GetPressedKey+0x1b0>
    {
        MDIO_voidSetPinValue(KEYPAD_PORT,keypadRow[local_u8RowCounter],PIN_LOW);
    19ec:	8a 89       	ldd	r24, Y+18	; 0x12
    19ee:	88 2f       	mov	r24, r24
    19f0:	90 e0       	ldi	r25, 0x00	; 0
    19f2:	fc 01       	movw	r30, r24
    19f4:	e8 58       	subi	r30, 0x88	; 136
    19f6:	ff 4f       	sbci	r31, 0xFF	; 255
    19f8:	90 81       	ld	r25, Z
    19fa:	80 e0       	ldi	r24, 0x00	; 0
    19fc:	69 2f       	mov	r22, r25
    19fe:	40 e0       	ldi	r20, 0x00	; 0
    1a00:	0e 94 32 08 	call	0x1064	; 0x1064 <MDIO_voidSetPinValue>
        for(local_u8ColCounter=0;local_u8ColCounter<COLS_NUMBER;local_u8ColCounter++)
    1a04:	19 8a       	std	Y+17, r1	; 0x11
    1a06:	a5 c0       	rjmp	.+330    	; 0x1b52 <HKEYPAD_u8GetPressedKey+0x184>
        {
            if (MDIO_u8GetPinValue(KEYPAD_PORT,keypadCol[local_u8ColCounter])==PIN_LOW)
    1a08:	89 89       	ldd	r24, Y+17	; 0x11
    1a0a:	88 2f       	mov	r24, r24
    1a0c:	90 e0       	ldi	r25, 0x00	; 0
    1a0e:	fc 01       	movw	r30, r24
    1a10:	e4 58       	subi	r30, 0x84	; 132
    1a12:	ff 4f       	sbci	r31, 0xFF	; 255
    1a14:	90 81       	ld	r25, Z
    1a16:	80 e0       	ldi	r24, 0x00	; 0
    1a18:	69 2f       	mov	r22, r25
    1a1a:	0e 94 7e 07 	call	0xefc	; 0xefc <MDIO_u8GetPinValue>
    1a1e:	88 23       	and	r24, r24
    1a20:	09 f0       	breq	.+2      	; 0x1a24 <HKEYPAD_u8GetPressedKey+0x56>
    1a22:	94 c0       	rjmp	.+296    	; 0x1b4c <HKEYPAD_u8GetPressedKey+0x17e>
    1a24:	80 e0       	ldi	r24, 0x00	; 0
    1a26:	90 e0       	ldi	r25, 0x00	; 0
    1a28:	a6 e1       	ldi	r26, 0x16	; 22
    1a2a:	b3 e4       	ldi	r27, 0x43	; 67
    1a2c:	8b 87       	std	Y+11, r24	; 0x0b
    1a2e:	9c 87       	std	Y+12, r25	; 0x0c
    1a30:	ad 87       	std	Y+13, r26	; 0x0d
    1a32:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a34:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a36:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a38:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a3a:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a3c:	20 e0       	ldi	r18, 0x00	; 0
    1a3e:	30 e0       	ldi	r19, 0x00	; 0
    1a40:	4a ef       	ldi	r20, 0xFA	; 250
    1a42:	54 e4       	ldi	r21, 0x44	; 68
    1a44:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a48:	dc 01       	movw	r26, r24
    1a4a:	cb 01       	movw	r24, r22
    1a4c:	8f 83       	std	Y+7, r24	; 0x07
    1a4e:	98 87       	std	Y+8, r25	; 0x08
    1a50:	a9 87       	std	Y+9, r26	; 0x09
    1a52:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1a54:	6f 81       	ldd	r22, Y+7	; 0x07
    1a56:	78 85       	ldd	r23, Y+8	; 0x08
    1a58:	89 85       	ldd	r24, Y+9	; 0x09
    1a5a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a5c:	20 e0       	ldi	r18, 0x00	; 0
    1a5e:	30 e0       	ldi	r19, 0x00	; 0
    1a60:	40 e8       	ldi	r20, 0x80	; 128
    1a62:	5f e3       	ldi	r21, 0x3F	; 63
    1a64:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1a68:	88 23       	and	r24, r24
    1a6a:	2c f4       	brge	.+10     	; 0x1a76 <HKEYPAD_u8GetPressedKey+0xa8>
		__ticks = 1;
    1a6c:	81 e0       	ldi	r24, 0x01	; 1
    1a6e:	90 e0       	ldi	r25, 0x00	; 0
    1a70:	9e 83       	std	Y+6, r25	; 0x06
    1a72:	8d 83       	std	Y+5, r24	; 0x05
    1a74:	3f c0       	rjmp	.+126    	; 0x1af4 <HKEYPAD_u8GetPressedKey+0x126>
	else if (__tmp > 65535)
    1a76:	6f 81       	ldd	r22, Y+7	; 0x07
    1a78:	78 85       	ldd	r23, Y+8	; 0x08
    1a7a:	89 85       	ldd	r24, Y+9	; 0x09
    1a7c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a7e:	20 e0       	ldi	r18, 0x00	; 0
    1a80:	3f ef       	ldi	r19, 0xFF	; 255
    1a82:	4f e7       	ldi	r20, 0x7F	; 127
    1a84:	57 e4       	ldi	r21, 0x47	; 71
    1a86:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1a8a:	18 16       	cp	r1, r24
    1a8c:	4c f5       	brge	.+82     	; 0x1ae0 <HKEYPAD_u8GetPressedKey+0x112>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a8e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a90:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a92:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a94:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a96:	20 e0       	ldi	r18, 0x00	; 0
    1a98:	30 e0       	ldi	r19, 0x00	; 0
    1a9a:	40 e2       	ldi	r20, 0x20	; 32
    1a9c:	51 e4       	ldi	r21, 0x41	; 65
    1a9e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1aa2:	dc 01       	movw	r26, r24
    1aa4:	cb 01       	movw	r24, r22
    1aa6:	bc 01       	movw	r22, r24
    1aa8:	cd 01       	movw	r24, r26
    1aaa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1aae:	dc 01       	movw	r26, r24
    1ab0:	cb 01       	movw	r24, r22
    1ab2:	9e 83       	std	Y+6, r25	; 0x06
    1ab4:	8d 83       	std	Y+5, r24	; 0x05
    1ab6:	0f c0       	rjmp	.+30     	; 0x1ad6 <HKEYPAD_u8GetPressedKey+0x108>
    1ab8:	88 ec       	ldi	r24, 0xC8	; 200
    1aba:	90 e0       	ldi	r25, 0x00	; 0
    1abc:	9c 83       	std	Y+4, r25	; 0x04
    1abe:	8b 83       	std	Y+3, r24	; 0x03
    1ac0:	8b 81       	ldd	r24, Y+3	; 0x03
    1ac2:	9c 81       	ldd	r25, Y+4	; 0x04
    1ac4:	01 97       	sbiw	r24, 0x01	; 1
    1ac6:	f1 f7       	brne	.-4      	; 0x1ac4 <HKEYPAD_u8GetPressedKey+0xf6>
    1ac8:	9c 83       	std	Y+4, r25	; 0x04
    1aca:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1acc:	8d 81       	ldd	r24, Y+5	; 0x05
    1ace:	9e 81       	ldd	r25, Y+6	; 0x06
    1ad0:	01 97       	sbiw	r24, 0x01	; 1
    1ad2:	9e 83       	std	Y+6, r25	; 0x06
    1ad4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ad6:	8d 81       	ldd	r24, Y+5	; 0x05
    1ad8:	9e 81       	ldd	r25, Y+6	; 0x06
    1ada:	00 97       	sbiw	r24, 0x00	; 0
    1adc:	69 f7       	brne	.-38     	; 0x1ab8 <HKEYPAD_u8GetPressedKey+0xea>
    1ade:	14 c0       	rjmp	.+40     	; 0x1b08 <HKEYPAD_u8GetPressedKey+0x13a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ae0:	6f 81       	ldd	r22, Y+7	; 0x07
    1ae2:	78 85       	ldd	r23, Y+8	; 0x08
    1ae4:	89 85       	ldd	r24, Y+9	; 0x09
    1ae6:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ae8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1aec:	dc 01       	movw	r26, r24
    1aee:	cb 01       	movw	r24, r22
    1af0:	9e 83       	std	Y+6, r25	; 0x06
    1af2:	8d 83       	std	Y+5, r24	; 0x05
    1af4:	8d 81       	ldd	r24, Y+5	; 0x05
    1af6:	9e 81       	ldd	r25, Y+6	; 0x06
    1af8:	9a 83       	std	Y+2, r25	; 0x02
    1afa:	89 83       	std	Y+1, r24	; 0x01
    1afc:	89 81       	ldd	r24, Y+1	; 0x01
    1afe:	9a 81       	ldd	r25, Y+2	; 0x02
    1b00:	01 97       	sbiw	r24, 0x01	; 1
    1b02:	f1 f7       	brne	.-4      	; 0x1b00 <HKEYPAD_u8GetPressedKey+0x132>
    1b04:	9a 83       	std	Y+2, r25	; 0x02
    1b06:	89 83       	std	Y+1, r24	; 0x01
            {
                //to avoid "debounce effect"
                _delay_ms(DEBOUNCING_DELAY);
                local_u8Flag=FLAG_UP;
    1b08:	81 e0       	ldi	r24, 0x01	; 1
    1b0a:	88 8b       	std	Y+16, r24	; 0x10
                //to make sure it will not print the character more than once if the user still press the button
                while(MDIO_u8GetPinValue(KEYPAD_PORT,keypadCol[local_u8ColCounter])==PIN_LOW);
    1b0c:	89 89       	ldd	r24, Y+17	; 0x11
    1b0e:	88 2f       	mov	r24, r24
    1b10:	90 e0       	ldi	r25, 0x00	; 0
    1b12:	fc 01       	movw	r30, r24
    1b14:	e4 58       	subi	r30, 0x84	; 132
    1b16:	ff 4f       	sbci	r31, 0xFF	; 255
    1b18:	90 81       	ld	r25, Z
    1b1a:	80 e0       	ldi	r24, 0x00	; 0
    1b1c:	69 2f       	mov	r22, r25
    1b1e:	0e 94 7e 07 	call	0xefc	; 0xefc <MDIO_u8GetPinValue>
    1b22:	88 23       	and	r24, r24
    1b24:	99 f3       	breq	.-26     	; 0x1b0c <HKEYPAD_u8GetPressedKey+0x13e>
                local_u8PressedKey=KeypadArr[local_u8RowCounter][local_u8ColCounter];
    1b26:	8a 89       	ldd	r24, Y+18	; 0x12
    1b28:	48 2f       	mov	r20, r24
    1b2a:	50 e0       	ldi	r21, 0x00	; 0
    1b2c:	89 89       	ldd	r24, Y+17	; 0x11
    1b2e:	28 2f       	mov	r18, r24
    1b30:	30 e0       	ldi	r19, 0x00	; 0
    1b32:	ca 01       	movw	r24, r20
    1b34:	88 0f       	add	r24, r24
    1b36:	99 1f       	adc	r25, r25
    1b38:	88 0f       	add	r24, r24
    1b3a:	99 1f       	adc	r25, r25
    1b3c:	82 0f       	add	r24, r18
    1b3e:	93 1f       	adc	r25, r19
    1b40:	fc 01       	movw	r30, r24
    1b42:	e8 59       	subi	r30, 0x98	; 152
    1b44:	ff 4f       	sbci	r31, 0xFF	; 255
    1b46:	80 81       	ld	r24, Z
    1b48:	8f 87       	std	Y+15, r24	; 0x0f
    1b4a:	07 c0       	rjmp	.+14     	; 0x1b5a <HKEYPAD_u8GetPressedKey+0x18c>
    u8 local_u8RowCounter,local_u8ColCounter,local_u8Flag=FLAG_DOWN,local_u8PressedKey=KEY_NOT_PRESSED;
    
    for(local_u8RowCounter=0;local_u8RowCounter<ROWS_NUMBER;local_u8RowCounter++)
    {
        MDIO_voidSetPinValue(KEYPAD_PORT,keypadRow[local_u8RowCounter],PIN_LOW);
        for(local_u8ColCounter=0;local_u8ColCounter<COLS_NUMBER;local_u8ColCounter++)
    1b4c:	89 89       	ldd	r24, Y+17	; 0x11
    1b4e:	8f 5f       	subi	r24, 0xFF	; 255
    1b50:	89 8b       	std	Y+17, r24	; 0x11
    1b52:	89 89       	ldd	r24, Y+17	; 0x11
    1b54:	84 30       	cpi	r24, 0x04	; 4
    1b56:	08 f4       	brcc	.+2      	; 0x1b5a <HKEYPAD_u8GetPressedKey+0x18c>
    1b58:	57 cf       	rjmp	.-338    	; 0x1a08 <HKEYPAD_u8GetPressedKey+0x3a>
                while(MDIO_u8GetPinValue(KEYPAD_PORT,keypadCol[local_u8ColCounter])==PIN_LOW);
                local_u8PressedKey=KeypadArr[local_u8RowCounter][local_u8ColCounter];
                break;
            }
        }
        MDIO_voidSetPinValue(KEYPAD_PORT,keypadRow[local_u8RowCounter],PIN_HIGH);
    1b5a:	8a 89       	ldd	r24, Y+18	; 0x12
    1b5c:	88 2f       	mov	r24, r24
    1b5e:	90 e0       	ldi	r25, 0x00	; 0
    1b60:	fc 01       	movw	r30, r24
    1b62:	e8 58       	subi	r30, 0x88	; 136
    1b64:	ff 4f       	sbci	r31, 0xFF	; 255
    1b66:	90 81       	ld	r25, Z
    1b68:	80 e0       	ldi	r24, 0x00	; 0
    1b6a:	69 2f       	mov	r22, r25
    1b6c:	41 e0       	ldi	r20, 0x01	; 1
    1b6e:	0e 94 32 08 	call	0x1064	; 0x1064 <MDIO_voidSetPinValue>
        if(local_u8Flag)
    1b72:	88 89       	ldd	r24, Y+16	; 0x10
    1b74:	88 23       	and	r24, r24
    1b76:	39 f4       	brne	.+14     	; 0x1b86 <HKEYPAD_u8GetPressedKey+0x1b8>

u8 HKEYPAD_u8GetPressedKey()
{
    u8 local_u8RowCounter,local_u8ColCounter,local_u8Flag=FLAG_DOWN,local_u8PressedKey=KEY_NOT_PRESSED;
    
    for(local_u8RowCounter=0;local_u8RowCounter<ROWS_NUMBER;local_u8RowCounter++)
    1b78:	8a 89       	ldd	r24, Y+18	; 0x12
    1b7a:	8f 5f       	subi	r24, 0xFF	; 255
    1b7c:	8a 8b       	std	Y+18, r24	; 0x12
    1b7e:	8a 89       	ldd	r24, Y+18	; 0x12
    1b80:	84 30       	cpi	r24, 0x04	; 4
    1b82:	08 f4       	brcc	.+2      	; 0x1b86 <HKEYPAD_u8GetPressedKey+0x1b8>
    1b84:	33 cf       	rjmp	.-410    	; 0x19ec <HKEYPAD_u8GetPressedKey+0x1e>
        if(local_u8Flag)
        {
            break;
        }
    }
    return local_u8PressedKey;
    1b86:	8f 85       	ldd	r24, Y+15	; 0x0f
}
    1b88:	62 96       	adiw	r28, 0x12	; 18
    1b8a:	0f b6       	in	r0, 0x3f	; 63
    1b8c:	f8 94       	cli
    1b8e:	de bf       	out	0x3e, r29	; 62
    1b90:	0f be       	out	0x3f, r0	; 63
    1b92:	cd bf       	out	0x3d, r28	; 61
    1b94:	cf 91       	pop	r28
    1b96:	df 91       	pop	r29
    1b98:	08 95       	ret

00001b9a <HLCD4_voidSendCommand>:


static u8 global_u8Init=0;

void HLCD4_voidSendCommand(u8 A_u8Command)
{
    1b9a:	df 93       	push	r29
    1b9c:	cf 93       	push	r28
    1b9e:	cd b7       	in	r28, 0x3d	; 61
    1ba0:	de b7       	in	r29, 0x3e	; 62
    1ba2:	ab 97       	sbiw	r28, 0x2b	; 43
    1ba4:	0f b6       	in	r0, 0x3f	; 63
    1ba6:	f8 94       	cli
    1ba8:	de bf       	out	0x3e, r29	; 62
    1baa:	0f be       	out	0x3f, r0	; 63
    1bac:	cd bf       	out	0x3d, r28	; 61
    1bae:	8b a7       	std	Y+43, r24	; 0x2b
    //RS=0 RW=0
    MDIO_voidSetPinValue(LCD_CONTROL_PORT,RS_PIN,PIN_LOW);
    1bb0:	82 e0       	ldi	r24, 0x02	; 2
    1bb2:	60 e0       	ldi	r22, 0x00	; 0
    1bb4:	40 e0       	ldi	r20, 0x00	; 0
    1bb6:	0e 94 32 08 	call	0x1064	; 0x1064 <MDIO_voidSetPinValue>
    MDIO_voidSetPinValue(LCD_CONTROL_PORT,RW_PIN,PIN_LOW);
    1bba:	82 e0       	ldi	r24, 0x02	; 2
    1bbc:	61 e0       	ldi	r22, 0x01	; 1
    1bbe:	40 e0       	ldi	r20, 0x00	; 0
    1bc0:	0e 94 32 08 	call	0x1064	; 0x1064 <MDIO_voidSetPinValue>

    //send UPPER Bits (B7 to B4)
    MDIO_voidSetPortValue(LCD_DATA_PORT,A_u8Command);
    1bc4:	83 e0       	ldi	r24, 0x03	; 3
    1bc6:	6b a5       	ldd	r22, Y+43	; 0x2b
    1bc8:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_voidSetPortValue>


    //pulse HIGH to LOW to ENABLE PIN
    MDIO_voidSetPinValue(LCD_CONTROL_PORT,E_PIN,PIN_HIGH);
    1bcc:	82 e0       	ldi	r24, 0x02	; 2
    1bce:	62 e0       	ldi	r22, 0x02	; 2
    1bd0:	41 e0       	ldi	r20, 0x01	; 1
    1bd2:	0e 94 32 08 	call	0x1064	; 0x1064 <MDIO_voidSetPinValue>
    1bd6:	80 e0       	ldi	r24, 0x00	; 0
    1bd8:	90 e0       	ldi	r25, 0x00	; 0
    1bda:	a0 e8       	ldi	r26, 0x80	; 128
    1bdc:	bf e3       	ldi	r27, 0x3F	; 63
    1bde:	8f a3       	std	Y+39, r24	; 0x27
    1be0:	98 a7       	std	Y+40, r25	; 0x28
    1be2:	a9 a7       	std	Y+41, r26	; 0x29
    1be4:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1be6:	6f a1       	ldd	r22, Y+39	; 0x27
    1be8:	78 a5       	ldd	r23, Y+40	; 0x28
    1bea:	89 a5       	ldd	r24, Y+41	; 0x29
    1bec:	9a a5       	ldd	r25, Y+42	; 0x2a
    1bee:	20 e0       	ldi	r18, 0x00	; 0
    1bf0:	30 e0       	ldi	r19, 0x00	; 0
    1bf2:	4a ef       	ldi	r20, 0xFA	; 250
    1bf4:	54 e4       	ldi	r21, 0x44	; 68
    1bf6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bfa:	dc 01       	movw	r26, r24
    1bfc:	cb 01       	movw	r24, r22
    1bfe:	8b a3       	std	Y+35, r24	; 0x23
    1c00:	9c a3       	std	Y+36, r25	; 0x24
    1c02:	ad a3       	std	Y+37, r26	; 0x25
    1c04:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1c06:	6b a1       	ldd	r22, Y+35	; 0x23
    1c08:	7c a1       	ldd	r23, Y+36	; 0x24
    1c0a:	8d a1       	ldd	r24, Y+37	; 0x25
    1c0c:	9e a1       	ldd	r25, Y+38	; 0x26
    1c0e:	20 e0       	ldi	r18, 0x00	; 0
    1c10:	30 e0       	ldi	r19, 0x00	; 0
    1c12:	40 e8       	ldi	r20, 0x80	; 128
    1c14:	5f e3       	ldi	r21, 0x3F	; 63
    1c16:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1c1a:	88 23       	and	r24, r24
    1c1c:	2c f4       	brge	.+10     	; 0x1c28 <HLCD4_voidSendCommand+0x8e>
		__ticks = 1;
    1c1e:	81 e0       	ldi	r24, 0x01	; 1
    1c20:	90 e0       	ldi	r25, 0x00	; 0
    1c22:	9a a3       	std	Y+34, r25	; 0x22
    1c24:	89 a3       	std	Y+33, r24	; 0x21
    1c26:	3f c0       	rjmp	.+126    	; 0x1ca6 <HLCD4_voidSendCommand+0x10c>
	else if (__tmp > 65535)
    1c28:	6b a1       	ldd	r22, Y+35	; 0x23
    1c2a:	7c a1       	ldd	r23, Y+36	; 0x24
    1c2c:	8d a1       	ldd	r24, Y+37	; 0x25
    1c2e:	9e a1       	ldd	r25, Y+38	; 0x26
    1c30:	20 e0       	ldi	r18, 0x00	; 0
    1c32:	3f ef       	ldi	r19, 0xFF	; 255
    1c34:	4f e7       	ldi	r20, 0x7F	; 127
    1c36:	57 e4       	ldi	r21, 0x47	; 71
    1c38:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1c3c:	18 16       	cp	r1, r24
    1c3e:	4c f5       	brge	.+82     	; 0x1c92 <HLCD4_voidSendCommand+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c40:	6f a1       	ldd	r22, Y+39	; 0x27
    1c42:	78 a5       	ldd	r23, Y+40	; 0x28
    1c44:	89 a5       	ldd	r24, Y+41	; 0x29
    1c46:	9a a5       	ldd	r25, Y+42	; 0x2a
    1c48:	20 e0       	ldi	r18, 0x00	; 0
    1c4a:	30 e0       	ldi	r19, 0x00	; 0
    1c4c:	40 e2       	ldi	r20, 0x20	; 32
    1c4e:	51 e4       	ldi	r21, 0x41	; 65
    1c50:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c54:	dc 01       	movw	r26, r24
    1c56:	cb 01       	movw	r24, r22
    1c58:	bc 01       	movw	r22, r24
    1c5a:	cd 01       	movw	r24, r26
    1c5c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c60:	dc 01       	movw	r26, r24
    1c62:	cb 01       	movw	r24, r22
    1c64:	9a a3       	std	Y+34, r25	; 0x22
    1c66:	89 a3       	std	Y+33, r24	; 0x21
    1c68:	0f c0       	rjmp	.+30     	; 0x1c88 <HLCD4_voidSendCommand+0xee>
    1c6a:	88 ec       	ldi	r24, 0xC8	; 200
    1c6c:	90 e0       	ldi	r25, 0x00	; 0
    1c6e:	98 a3       	std	Y+32, r25	; 0x20
    1c70:	8f 8f       	std	Y+31, r24	; 0x1f
    1c72:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1c74:	98 a1       	ldd	r25, Y+32	; 0x20
    1c76:	01 97       	sbiw	r24, 0x01	; 1
    1c78:	f1 f7       	brne	.-4      	; 0x1c76 <HLCD4_voidSendCommand+0xdc>
    1c7a:	98 a3       	std	Y+32, r25	; 0x20
    1c7c:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c7e:	89 a1       	ldd	r24, Y+33	; 0x21
    1c80:	9a a1       	ldd	r25, Y+34	; 0x22
    1c82:	01 97       	sbiw	r24, 0x01	; 1
    1c84:	9a a3       	std	Y+34, r25	; 0x22
    1c86:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c88:	89 a1       	ldd	r24, Y+33	; 0x21
    1c8a:	9a a1       	ldd	r25, Y+34	; 0x22
    1c8c:	00 97       	sbiw	r24, 0x00	; 0
    1c8e:	69 f7       	brne	.-38     	; 0x1c6a <HLCD4_voidSendCommand+0xd0>
    1c90:	14 c0       	rjmp	.+40     	; 0x1cba <HLCD4_voidSendCommand+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c92:	6b a1       	ldd	r22, Y+35	; 0x23
    1c94:	7c a1       	ldd	r23, Y+36	; 0x24
    1c96:	8d a1       	ldd	r24, Y+37	; 0x25
    1c98:	9e a1       	ldd	r25, Y+38	; 0x26
    1c9a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c9e:	dc 01       	movw	r26, r24
    1ca0:	cb 01       	movw	r24, r22
    1ca2:	9a a3       	std	Y+34, r25	; 0x22
    1ca4:	89 a3       	std	Y+33, r24	; 0x21
    1ca6:	89 a1       	ldd	r24, Y+33	; 0x21
    1ca8:	9a a1       	ldd	r25, Y+34	; 0x22
    1caa:	9e 8f       	std	Y+30, r25	; 0x1e
    1cac:	8d 8f       	std	Y+29, r24	; 0x1d
    1cae:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1cb0:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1cb2:	01 97       	sbiw	r24, 0x01	; 1
    1cb4:	f1 f7       	brne	.-4      	; 0x1cb2 <HLCD4_voidSendCommand+0x118>
    1cb6:	9e 8f       	std	Y+30, r25	; 0x1e
    1cb8:	8d 8f       	std	Y+29, r24	; 0x1d
    _delay_ms(1);
    MDIO_voidSetPinValue(LCD_CONTROL_PORT,E_PIN,PIN_LOW);
    1cba:	82 e0       	ldi	r24, 0x02	; 2
    1cbc:	62 e0       	ldi	r22, 0x02	; 2
    1cbe:	40 e0       	ldi	r20, 0x00	; 0
    1cc0:	0e 94 32 08 	call	0x1064	; 0x1064 <MDIO_voidSetPinValue>

    if(global_u8Init)
    1cc4:	80 91 9a 00 	lds	r24, 0x009A
    1cc8:	88 23       	and	r24, r24
    1cca:	09 f4       	brne	.+2      	; 0x1cce <HLCD4_voidSendCommand+0x134>
    1ccc:	84 c0       	rjmp	.+264    	; 0x1dd6 <HLCD4_voidSendCommand+0x23c>
    {

        //send LOWR Bits (B3 to B0)
        MDIO_voidSetPortValue(LCD_DATA_PORT,A_u8Command<<4);
    1cce:	8b a5       	ldd	r24, Y+43	; 0x2b
    1cd0:	98 2f       	mov	r25, r24
    1cd2:	92 95       	swap	r25
    1cd4:	90 7f       	andi	r25, 0xF0	; 240
    1cd6:	83 e0       	ldi	r24, 0x03	; 3
    1cd8:	69 2f       	mov	r22, r25
    1cda:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_voidSetPortValue>

        //pulse HIGH to LOW to ENABLE PIN
        MDIO_voidSetPinValue(LCD_CONTROL_PORT,E_PIN,PIN_HIGH);
    1cde:	82 e0       	ldi	r24, 0x02	; 2
    1ce0:	62 e0       	ldi	r22, 0x02	; 2
    1ce2:	41 e0       	ldi	r20, 0x01	; 1
    1ce4:	0e 94 32 08 	call	0x1064	; 0x1064 <MDIO_voidSetPinValue>
    1ce8:	80 e0       	ldi	r24, 0x00	; 0
    1cea:	90 e0       	ldi	r25, 0x00	; 0
    1cec:	a0 e8       	ldi	r26, 0x80	; 128
    1cee:	bf e3       	ldi	r27, 0x3F	; 63
    1cf0:	89 8f       	std	Y+25, r24	; 0x19
    1cf2:	9a 8f       	std	Y+26, r25	; 0x1a
    1cf4:	ab 8f       	std	Y+27, r26	; 0x1b
    1cf6:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1cf8:	69 8d       	ldd	r22, Y+25	; 0x19
    1cfa:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1cfc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1cfe:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1d00:	20 e0       	ldi	r18, 0x00	; 0
    1d02:	30 e0       	ldi	r19, 0x00	; 0
    1d04:	4a ef       	ldi	r20, 0xFA	; 250
    1d06:	54 e4       	ldi	r21, 0x44	; 68
    1d08:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d0c:	dc 01       	movw	r26, r24
    1d0e:	cb 01       	movw	r24, r22
    1d10:	8d 8b       	std	Y+21, r24	; 0x15
    1d12:	9e 8b       	std	Y+22, r25	; 0x16
    1d14:	af 8b       	std	Y+23, r26	; 0x17
    1d16:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1d18:	6d 89       	ldd	r22, Y+21	; 0x15
    1d1a:	7e 89       	ldd	r23, Y+22	; 0x16
    1d1c:	8f 89       	ldd	r24, Y+23	; 0x17
    1d1e:	98 8d       	ldd	r25, Y+24	; 0x18
    1d20:	20 e0       	ldi	r18, 0x00	; 0
    1d22:	30 e0       	ldi	r19, 0x00	; 0
    1d24:	40 e8       	ldi	r20, 0x80	; 128
    1d26:	5f e3       	ldi	r21, 0x3F	; 63
    1d28:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1d2c:	88 23       	and	r24, r24
    1d2e:	2c f4       	brge	.+10     	; 0x1d3a <HLCD4_voidSendCommand+0x1a0>
		__ticks = 1;
    1d30:	81 e0       	ldi	r24, 0x01	; 1
    1d32:	90 e0       	ldi	r25, 0x00	; 0
    1d34:	9c 8b       	std	Y+20, r25	; 0x14
    1d36:	8b 8b       	std	Y+19, r24	; 0x13
    1d38:	3f c0       	rjmp	.+126    	; 0x1db8 <HLCD4_voidSendCommand+0x21e>
	else if (__tmp > 65535)
    1d3a:	6d 89       	ldd	r22, Y+21	; 0x15
    1d3c:	7e 89       	ldd	r23, Y+22	; 0x16
    1d3e:	8f 89       	ldd	r24, Y+23	; 0x17
    1d40:	98 8d       	ldd	r25, Y+24	; 0x18
    1d42:	20 e0       	ldi	r18, 0x00	; 0
    1d44:	3f ef       	ldi	r19, 0xFF	; 255
    1d46:	4f e7       	ldi	r20, 0x7F	; 127
    1d48:	57 e4       	ldi	r21, 0x47	; 71
    1d4a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1d4e:	18 16       	cp	r1, r24
    1d50:	4c f5       	brge	.+82     	; 0x1da4 <HLCD4_voidSendCommand+0x20a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d52:	69 8d       	ldd	r22, Y+25	; 0x19
    1d54:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1d56:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1d58:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1d5a:	20 e0       	ldi	r18, 0x00	; 0
    1d5c:	30 e0       	ldi	r19, 0x00	; 0
    1d5e:	40 e2       	ldi	r20, 0x20	; 32
    1d60:	51 e4       	ldi	r21, 0x41	; 65
    1d62:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d66:	dc 01       	movw	r26, r24
    1d68:	cb 01       	movw	r24, r22
    1d6a:	bc 01       	movw	r22, r24
    1d6c:	cd 01       	movw	r24, r26
    1d6e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d72:	dc 01       	movw	r26, r24
    1d74:	cb 01       	movw	r24, r22
    1d76:	9c 8b       	std	Y+20, r25	; 0x14
    1d78:	8b 8b       	std	Y+19, r24	; 0x13
    1d7a:	0f c0       	rjmp	.+30     	; 0x1d9a <HLCD4_voidSendCommand+0x200>
    1d7c:	88 ec       	ldi	r24, 0xC8	; 200
    1d7e:	90 e0       	ldi	r25, 0x00	; 0
    1d80:	9a 8b       	std	Y+18, r25	; 0x12
    1d82:	89 8b       	std	Y+17, r24	; 0x11
    1d84:	89 89       	ldd	r24, Y+17	; 0x11
    1d86:	9a 89       	ldd	r25, Y+18	; 0x12
    1d88:	01 97       	sbiw	r24, 0x01	; 1
    1d8a:	f1 f7       	brne	.-4      	; 0x1d88 <HLCD4_voidSendCommand+0x1ee>
    1d8c:	9a 8b       	std	Y+18, r25	; 0x12
    1d8e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d90:	8b 89       	ldd	r24, Y+19	; 0x13
    1d92:	9c 89       	ldd	r25, Y+20	; 0x14
    1d94:	01 97       	sbiw	r24, 0x01	; 1
    1d96:	9c 8b       	std	Y+20, r25	; 0x14
    1d98:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d9a:	8b 89       	ldd	r24, Y+19	; 0x13
    1d9c:	9c 89       	ldd	r25, Y+20	; 0x14
    1d9e:	00 97       	sbiw	r24, 0x00	; 0
    1da0:	69 f7       	brne	.-38     	; 0x1d7c <HLCD4_voidSendCommand+0x1e2>
    1da2:	14 c0       	rjmp	.+40     	; 0x1dcc <HLCD4_voidSendCommand+0x232>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1da4:	6d 89       	ldd	r22, Y+21	; 0x15
    1da6:	7e 89       	ldd	r23, Y+22	; 0x16
    1da8:	8f 89       	ldd	r24, Y+23	; 0x17
    1daa:	98 8d       	ldd	r25, Y+24	; 0x18
    1dac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1db0:	dc 01       	movw	r26, r24
    1db2:	cb 01       	movw	r24, r22
    1db4:	9c 8b       	std	Y+20, r25	; 0x14
    1db6:	8b 8b       	std	Y+19, r24	; 0x13
    1db8:	8b 89       	ldd	r24, Y+19	; 0x13
    1dba:	9c 89       	ldd	r25, Y+20	; 0x14
    1dbc:	98 8b       	std	Y+16, r25	; 0x10
    1dbe:	8f 87       	std	Y+15, r24	; 0x0f
    1dc0:	8f 85       	ldd	r24, Y+15	; 0x0f
    1dc2:	98 89       	ldd	r25, Y+16	; 0x10
    1dc4:	01 97       	sbiw	r24, 0x01	; 1
    1dc6:	f1 f7       	brne	.-4      	; 0x1dc4 <HLCD4_voidSendCommand+0x22a>
    1dc8:	98 8b       	std	Y+16, r25	; 0x10
    1dca:	8f 87       	std	Y+15, r24	; 0x0f
        _delay_ms(1);
        MDIO_voidSetPinValue(LCD_CONTROL_PORT,E_PIN,PIN_LOW);
    1dcc:	82 e0       	ldi	r24, 0x02	; 2
    1dce:	62 e0       	ldi	r22, 0x02	; 2
    1dd0:	40 e0       	ldi	r20, 0x00	; 0
    1dd2:	0e 94 32 08 	call	0x1064	; 0x1064 <MDIO_voidSetPinValue>
    1dd6:	80 e0       	ldi	r24, 0x00	; 0
    1dd8:	90 e0       	ldi	r25, 0x00	; 0
    1dda:	a0 e0       	ldi	r26, 0x00	; 0
    1ddc:	b0 e4       	ldi	r27, 0x40	; 64
    1dde:	8b 87       	std	Y+11, r24	; 0x0b
    1de0:	9c 87       	std	Y+12, r25	; 0x0c
    1de2:	ad 87       	std	Y+13, r26	; 0x0d
    1de4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1de6:	6b 85       	ldd	r22, Y+11	; 0x0b
    1de8:	7c 85       	ldd	r23, Y+12	; 0x0c
    1dea:	8d 85       	ldd	r24, Y+13	; 0x0d
    1dec:	9e 85       	ldd	r25, Y+14	; 0x0e
    1dee:	20 e0       	ldi	r18, 0x00	; 0
    1df0:	30 e0       	ldi	r19, 0x00	; 0
    1df2:	4a ef       	ldi	r20, 0xFA	; 250
    1df4:	54 e4       	ldi	r21, 0x44	; 68
    1df6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1dfa:	dc 01       	movw	r26, r24
    1dfc:	cb 01       	movw	r24, r22
    1dfe:	8f 83       	std	Y+7, r24	; 0x07
    1e00:	98 87       	std	Y+8, r25	; 0x08
    1e02:	a9 87       	std	Y+9, r26	; 0x09
    1e04:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1e06:	6f 81       	ldd	r22, Y+7	; 0x07
    1e08:	78 85       	ldd	r23, Y+8	; 0x08
    1e0a:	89 85       	ldd	r24, Y+9	; 0x09
    1e0c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e0e:	20 e0       	ldi	r18, 0x00	; 0
    1e10:	30 e0       	ldi	r19, 0x00	; 0
    1e12:	40 e8       	ldi	r20, 0x80	; 128
    1e14:	5f e3       	ldi	r21, 0x3F	; 63
    1e16:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1e1a:	88 23       	and	r24, r24
    1e1c:	2c f4       	brge	.+10     	; 0x1e28 <HLCD4_voidSendCommand+0x28e>
		__ticks = 1;
    1e1e:	81 e0       	ldi	r24, 0x01	; 1
    1e20:	90 e0       	ldi	r25, 0x00	; 0
    1e22:	9e 83       	std	Y+6, r25	; 0x06
    1e24:	8d 83       	std	Y+5, r24	; 0x05
    1e26:	3f c0       	rjmp	.+126    	; 0x1ea6 <HLCD4_voidSendCommand+0x30c>
	else if (__tmp > 65535)
    1e28:	6f 81       	ldd	r22, Y+7	; 0x07
    1e2a:	78 85       	ldd	r23, Y+8	; 0x08
    1e2c:	89 85       	ldd	r24, Y+9	; 0x09
    1e2e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e30:	20 e0       	ldi	r18, 0x00	; 0
    1e32:	3f ef       	ldi	r19, 0xFF	; 255
    1e34:	4f e7       	ldi	r20, 0x7F	; 127
    1e36:	57 e4       	ldi	r21, 0x47	; 71
    1e38:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1e3c:	18 16       	cp	r1, r24
    1e3e:	4c f5       	brge	.+82     	; 0x1e92 <HLCD4_voidSendCommand+0x2f8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e40:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e42:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e44:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e46:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e48:	20 e0       	ldi	r18, 0x00	; 0
    1e4a:	30 e0       	ldi	r19, 0x00	; 0
    1e4c:	40 e2       	ldi	r20, 0x20	; 32
    1e4e:	51 e4       	ldi	r21, 0x41	; 65
    1e50:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e54:	dc 01       	movw	r26, r24
    1e56:	cb 01       	movw	r24, r22
    1e58:	bc 01       	movw	r22, r24
    1e5a:	cd 01       	movw	r24, r26
    1e5c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e60:	dc 01       	movw	r26, r24
    1e62:	cb 01       	movw	r24, r22
    1e64:	9e 83       	std	Y+6, r25	; 0x06
    1e66:	8d 83       	std	Y+5, r24	; 0x05
    1e68:	0f c0       	rjmp	.+30     	; 0x1e88 <HLCD4_voidSendCommand+0x2ee>
    1e6a:	88 ec       	ldi	r24, 0xC8	; 200
    1e6c:	90 e0       	ldi	r25, 0x00	; 0
    1e6e:	9c 83       	std	Y+4, r25	; 0x04
    1e70:	8b 83       	std	Y+3, r24	; 0x03
    1e72:	8b 81       	ldd	r24, Y+3	; 0x03
    1e74:	9c 81       	ldd	r25, Y+4	; 0x04
    1e76:	01 97       	sbiw	r24, 0x01	; 1
    1e78:	f1 f7       	brne	.-4      	; 0x1e76 <HLCD4_voidSendCommand+0x2dc>
    1e7a:	9c 83       	std	Y+4, r25	; 0x04
    1e7c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e7e:	8d 81       	ldd	r24, Y+5	; 0x05
    1e80:	9e 81       	ldd	r25, Y+6	; 0x06
    1e82:	01 97       	sbiw	r24, 0x01	; 1
    1e84:	9e 83       	std	Y+6, r25	; 0x06
    1e86:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e88:	8d 81       	ldd	r24, Y+5	; 0x05
    1e8a:	9e 81       	ldd	r25, Y+6	; 0x06
    1e8c:	00 97       	sbiw	r24, 0x00	; 0
    1e8e:	69 f7       	brne	.-38     	; 0x1e6a <HLCD4_voidSendCommand+0x2d0>
    1e90:	14 c0       	rjmp	.+40     	; 0x1eba <HLCD4_voidSendCommand+0x320>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e92:	6f 81       	ldd	r22, Y+7	; 0x07
    1e94:	78 85       	ldd	r23, Y+8	; 0x08
    1e96:	89 85       	ldd	r24, Y+9	; 0x09
    1e98:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e9a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e9e:	dc 01       	movw	r26, r24
    1ea0:	cb 01       	movw	r24, r22
    1ea2:	9e 83       	std	Y+6, r25	; 0x06
    1ea4:	8d 83       	std	Y+5, r24	; 0x05
    1ea6:	8d 81       	ldd	r24, Y+5	; 0x05
    1ea8:	9e 81       	ldd	r25, Y+6	; 0x06
    1eaa:	9a 83       	std	Y+2, r25	; 0x02
    1eac:	89 83       	std	Y+1, r24	; 0x01
    1eae:	89 81       	ldd	r24, Y+1	; 0x01
    1eb0:	9a 81       	ldd	r25, Y+2	; 0x02
    1eb2:	01 97       	sbiw	r24, 0x01	; 1
    1eb4:	f1 f7       	brne	.-4      	; 0x1eb2 <HLCD4_voidSendCommand+0x318>
    1eb6:	9a 83       	std	Y+2, r25	; 0x02
    1eb8:	89 83       	std	Y+1, r24	; 0x01
    }
    _delay_ms(2);
}
    1eba:	ab 96       	adiw	r28, 0x2b	; 43
    1ebc:	0f b6       	in	r0, 0x3f	; 63
    1ebe:	f8 94       	cli
    1ec0:	de bf       	out	0x3e, r29	; 62
    1ec2:	0f be       	out	0x3f, r0	; 63
    1ec4:	cd bf       	out	0x3d, r28	; 61
    1ec6:	cf 91       	pop	r28
    1ec8:	df 91       	pop	r29
    1eca:	08 95       	ret

00001ecc <HLCD4_voidSendData>:


void HLCD4_voidSendData(u8 A_u8Data)
{
    1ecc:	df 93       	push	r29
    1ece:	cf 93       	push	r28
    1ed0:	cd b7       	in	r28, 0x3d	; 61
    1ed2:	de b7       	in	r29, 0x3e	; 62
    1ed4:	ab 97       	sbiw	r28, 0x2b	; 43
    1ed6:	0f b6       	in	r0, 0x3f	; 63
    1ed8:	f8 94       	cli
    1eda:	de bf       	out	0x3e, r29	; 62
    1edc:	0f be       	out	0x3f, r0	; 63
    1ede:	cd bf       	out	0x3d, r28	; 61
    1ee0:	8b a7       	std	Y+43, r24	; 0x2b
    //RS=1 RW=0
    MDIO_voidSetPinValue(LCD_CONTROL_PORT,RS_PIN,PIN_HIGH);
    1ee2:	82 e0       	ldi	r24, 0x02	; 2
    1ee4:	60 e0       	ldi	r22, 0x00	; 0
    1ee6:	41 e0       	ldi	r20, 0x01	; 1
    1ee8:	0e 94 32 08 	call	0x1064	; 0x1064 <MDIO_voidSetPinValue>
    MDIO_voidSetPinValue(LCD_CONTROL_PORT,RW_PIN,PIN_LOW);
    1eec:	82 e0       	ldi	r24, 0x02	; 2
    1eee:	61 e0       	ldi	r22, 0x01	; 1
    1ef0:	40 e0       	ldi	r20, 0x00	; 0
    1ef2:	0e 94 32 08 	call	0x1064	; 0x1064 <MDIO_voidSetPinValue>

	MDIO_voidSetPortValue(LCD_DATA_PORT,A_u8Data);
    1ef6:	83 e0       	ldi	r24, 0x03	; 3
    1ef8:	6b a5       	ldd	r22, Y+43	; 0x2b
    1efa:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_voidSetPortValue>


    MDIO_voidSetPinValue(LCD_CONTROL_PORT,E_PIN,PIN_HIGH);
    1efe:	82 e0       	ldi	r24, 0x02	; 2
    1f00:	62 e0       	ldi	r22, 0x02	; 2
    1f02:	41 e0       	ldi	r20, 0x01	; 1
    1f04:	0e 94 32 08 	call	0x1064	; 0x1064 <MDIO_voidSetPinValue>
    1f08:	80 e0       	ldi	r24, 0x00	; 0
    1f0a:	90 e0       	ldi	r25, 0x00	; 0
    1f0c:	a0 e8       	ldi	r26, 0x80	; 128
    1f0e:	bf e3       	ldi	r27, 0x3F	; 63
    1f10:	8f a3       	std	Y+39, r24	; 0x27
    1f12:	98 a7       	std	Y+40, r25	; 0x28
    1f14:	a9 a7       	std	Y+41, r26	; 0x29
    1f16:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f18:	6f a1       	ldd	r22, Y+39	; 0x27
    1f1a:	78 a5       	ldd	r23, Y+40	; 0x28
    1f1c:	89 a5       	ldd	r24, Y+41	; 0x29
    1f1e:	9a a5       	ldd	r25, Y+42	; 0x2a
    1f20:	20 e0       	ldi	r18, 0x00	; 0
    1f22:	30 e0       	ldi	r19, 0x00	; 0
    1f24:	4a ef       	ldi	r20, 0xFA	; 250
    1f26:	54 e4       	ldi	r21, 0x44	; 68
    1f28:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f2c:	dc 01       	movw	r26, r24
    1f2e:	cb 01       	movw	r24, r22
    1f30:	8b a3       	std	Y+35, r24	; 0x23
    1f32:	9c a3       	std	Y+36, r25	; 0x24
    1f34:	ad a3       	std	Y+37, r26	; 0x25
    1f36:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1f38:	6b a1       	ldd	r22, Y+35	; 0x23
    1f3a:	7c a1       	ldd	r23, Y+36	; 0x24
    1f3c:	8d a1       	ldd	r24, Y+37	; 0x25
    1f3e:	9e a1       	ldd	r25, Y+38	; 0x26
    1f40:	20 e0       	ldi	r18, 0x00	; 0
    1f42:	30 e0       	ldi	r19, 0x00	; 0
    1f44:	40 e8       	ldi	r20, 0x80	; 128
    1f46:	5f e3       	ldi	r21, 0x3F	; 63
    1f48:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1f4c:	88 23       	and	r24, r24
    1f4e:	2c f4       	brge	.+10     	; 0x1f5a <HLCD4_voidSendData+0x8e>
		__ticks = 1;
    1f50:	81 e0       	ldi	r24, 0x01	; 1
    1f52:	90 e0       	ldi	r25, 0x00	; 0
    1f54:	9a a3       	std	Y+34, r25	; 0x22
    1f56:	89 a3       	std	Y+33, r24	; 0x21
    1f58:	3f c0       	rjmp	.+126    	; 0x1fd8 <HLCD4_voidSendData+0x10c>
	else if (__tmp > 65535)
    1f5a:	6b a1       	ldd	r22, Y+35	; 0x23
    1f5c:	7c a1       	ldd	r23, Y+36	; 0x24
    1f5e:	8d a1       	ldd	r24, Y+37	; 0x25
    1f60:	9e a1       	ldd	r25, Y+38	; 0x26
    1f62:	20 e0       	ldi	r18, 0x00	; 0
    1f64:	3f ef       	ldi	r19, 0xFF	; 255
    1f66:	4f e7       	ldi	r20, 0x7F	; 127
    1f68:	57 e4       	ldi	r21, 0x47	; 71
    1f6a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1f6e:	18 16       	cp	r1, r24
    1f70:	4c f5       	brge	.+82     	; 0x1fc4 <HLCD4_voidSendData+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f72:	6f a1       	ldd	r22, Y+39	; 0x27
    1f74:	78 a5       	ldd	r23, Y+40	; 0x28
    1f76:	89 a5       	ldd	r24, Y+41	; 0x29
    1f78:	9a a5       	ldd	r25, Y+42	; 0x2a
    1f7a:	20 e0       	ldi	r18, 0x00	; 0
    1f7c:	30 e0       	ldi	r19, 0x00	; 0
    1f7e:	40 e2       	ldi	r20, 0x20	; 32
    1f80:	51 e4       	ldi	r21, 0x41	; 65
    1f82:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f86:	dc 01       	movw	r26, r24
    1f88:	cb 01       	movw	r24, r22
    1f8a:	bc 01       	movw	r22, r24
    1f8c:	cd 01       	movw	r24, r26
    1f8e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f92:	dc 01       	movw	r26, r24
    1f94:	cb 01       	movw	r24, r22
    1f96:	9a a3       	std	Y+34, r25	; 0x22
    1f98:	89 a3       	std	Y+33, r24	; 0x21
    1f9a:	0f c0       	rjmp	.+30     	; 0x1fba <HLCD4_voidSendData+0xee>
    1f9c:	88 ec       	ldi	r24, 0xC8	; 200
    1f9e:	90 e0       	ldi	r25, 0x00	; 0
    1fa0:	98 a3       	std	Y+32, r25	; 0x20
    1fa2:	8f 8f       	std	Y+31, r24	; 0x1f
    1fa4:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1fa6:	98 a1       	ldd	r25, Y+32	; 0x20
    1fa8:	01 97       	sbiw	r24, 0x01	; 1
    1faa:	f1 f7       	brne	.-4      	; 0x1fa8 <HLCD4_voidSendData+0xdc>
    1fac:	98 a3       	std	Y+32, r25	; 0x20
    1fae:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1fb0:	89 a1       	ldd	r24, Y+33	; 0x21
    1fb2:	9a a1       	ldd	r25, Y+34	; 0x22
    1fb4:	01 97       	sbiw	r24, 0x01	; 1
    1fb6:	9a a3       	std	Y+34, r25	; 0x22
    1fb8:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1fba:	89 a1       	ldd	r24, Y+33	; 0x21
    1fbc:	9a a1       	ldd	r25, Y+34	; 0x22
    1fbe:	00 97       	sbiw	r24, 0x00	; 0
    1fc0:	69 f7       	brne	.-38     	; 0x1f9c <HLCD4_voidSendData+0xd0>
    1fc2:	14 c0       	rjmp	.+40     	; 0x1fec <HLCD4_voidSendData+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1fc4:	6b a1       	ldd	r22, Y+35	; 0x23
    1fc6:	7c a1       	ldd	r23, Y+36	; 0x24
    1fc8:	8d a1       	ldd	r24, Y+37	; 0x25
    1fca:	9e a1       	ldd	r25, Y+38	; 0x26
    1fcc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fd0:	dc 01       	movw	r26, r24
    1fd2:	cb 01       	movw	r24, r22
    1fd4:	9a a3       	std	Y+34, r25	; 0x22
    1fd6:	89 a3       	std	Y+33, r24	; 0x21
    1fd8:	89 a1       	ldd	r24, Y+33	; 0x21
    1fda:	9a a1       	ldd	r25, Y+34	; 0x22
    1fdc:	9e 8f       	std	Y+30, r25	; 0x1e
    1fde:	8d 8f       	std	Y+29, r24	; 0x1d
    1fe0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1fe2:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1fe4:	01 97       	sbiw	r24, 0x01	; 1
    1fe6:	f1 f7       	brne	.-4      	; 0x1fe4 <HLCD4_voidSendData+0x118>
    1fe8:	9e 8f       	std	Y+30, r25	; 0x1e
    1fea:	8d 8f       	std	Y+29, r24	; 0x1d
    _delay_ms(1);
    MDIO_voidSetPinValue(LCD_CONTROL_PORT,E_PIN,PIN_LOW);
    1fec:	82 e0       	ldi	r24, 0x02	; 2
    1fee:	62 e0       	ldi	r22, 0x02	; 2
    1ff0:	40 e0       	ldi	r20, 0x00	; 0
    1ff2:	0e 94 32 08 	call	0x1064	; 0x1064 <MDIO_voidSetPinValue>

    MDIO_voidSetPortValue(LCD_DATA_PORT,A_u8Data<<4);
    1ff6:	8b a5       	ldd	r24, Y+43	; 0x2b
    1ff8:	98 2f       	mov	r25, r24
    1ffa:	92 95       	swap	r25
    1ffc:	90 7f       	andi	r25, 0xF0	; 240
    1ffe:	83 e0       	ldi	r24, 0x03	; 3
    2000:	69 2f       	mov	r22, r25
    2002:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_voidSetPortValue>


    MDIO_voidSetPinValue(LCD_CONTROL_PORT,E_PIN,PIN_HIGH);
    2006:	82 e0       	ldi	r24, 0x02	; 2
    2008:	62 e0       	ldi	r22, 0x02	; 2
    200a:	41 e0       	ldi	r20, 0x01	; 1
    200c:	0e 94 32 08 	call	0x1064	; 0x1064 <MDIO_voidSetPinValue>
    2010:	80 e0       	ldi	r24, 0x00	; 0
    2012:	90 e0       	ldi	r25, 0x00	; 0
    2014:	a0 e8       	ldi	r26, 0x80	; 128
    2016:	bf e3       	ldi	r27, 0x3F	; 63
    2018:	89 8f       	std	Y+25, r24	; 0x19
    201a:	9a 8f       	std	Y+26, r25	; 0x1a
    201c:	ab 8f       	std	Y+27, r26	; 0x1b
    201e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2020:	69 8d       	ldd	r22, Y+25	; 0x19
    2022:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2024:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2026:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2028:	20 e0       	ldi	r18, 0x00	; 0
    202a:	30 e0       	ldi	r19, 0x00	; 0
    202c:	4a ef       	ldi	r20, 0xFA	; 250
    202e:	54 e4       	ldi	r21, 0x44	; 68
    2030:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2034:	dc 01       	movw	r26, r24
    2036:	cb 01       	movw	r24, r22
    2038:	8d 8b       	std	Y+21, r24	; 0x15
    203a:	9e 8b       	std	Y+22, r25	; 0x16
    203c:	af 8b       	std	Y+23, r26	; 0x17
    203e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2040:	6d 89       	ldd	r22, Y+21	; 0x15
    2042:	7e 89       	ldd	r23, Y+22	; 0x16
    2044:	8f 89       	ldd	r24, Y+23	; 0x17
    2046:	98 8d       	ldd	r25, Y+24	; 0x18
    2048:	20 e0       	ldi	r18, 0x00	; 0
    204a:	30 e0       	ldi	r19, 0x00	; 0
    204c:	40 e8       	ldi	r20, 0x80	; 128
    204e:	5f e3       	ldi	r21, 0x3F	; 63
    2050:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2054:	88 23       	and	r24, r24
    2056:	2c f4       	brge	.+10     	; 0x2062 <HLCD4_voidSendData+0x196>
		__ticks = 1;
    2058:	81 e0       	ldi	r24, 0x01	; 1
    205a:	90 e0       	ldi	r25, 0x00	; 0
    205c:	9c 8b       	std	Y+20, r25	; 0x14
    205e:	8b 8b       	std	Y+19, r24	; 0x13
    2060:	3f c0       	rjmp	.+126    	; 0x20e0 <HLCD4_voidSendData+0x214>
	else if (__tmp > 65535)
    2062:	6d 89       	ldd	r22, Y+21	; 0x15
    2064:	7e 89       	ldd	r23, Y+22	; 0x16
    2066:	8f 89       	ldd	r24, Y+23	; 0x17
    2068:	98 8d       	ldd	r25, Y+24	; 0x18
    206a:	20 e0       	ldi	r18, 0x00	; 0
    206c:	3f ef       	ldi	r19, 0xFF	; 255
    206e:	4f e7       	ldi	r20, 0x7F	; 127
    2070:	57 e4       	ldi	r21, 0x47	; 71
    2072:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2076:	18 16       	cp	r1, r24
    2078:	4c f5       	brge	.+82     	; 0x20cc <HLCD4_voidSendData+0x200>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    207a:	69 8d       	ldd	r22, Y+25	; 0x19
    207c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    207e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2080:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2082:	20 e0       	ldi	r18, 0x00	; 0
    2084:	30 e0       	ldi	r19, 0x00	; 0
    2086:	40 e2       	ldi	r20, 0x20	; 32
    2088:	51 e4       	ldi	r21, 0x41	; 65
    208a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    208e:	dc 01       	movw	r26, r24
    2090:	cb 01       	movw	r24, r22
    2092:	bc 01       	movw	r22, r24
    2094:	cd 01       	movw	r24, r26
    2096:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    209a:	dc 01       	movw	r26, r24
    209c:	cb 01       	movw	r24, r22
    209e:	9c 8b       	std	Y+20, r25	; 0x14
    20a0:	8b 8b       	std	Y+19, r24	; 0x13
    20a2:	0f c0       	rjmp	.+30     	; 0x20c2 <HLCD4_voidSendData+0x1f6>
    20a4:	88 ec       	ldi	r24, 0xC8	; 200
    20a6:	90 e0       	ldi	r25, 0x00	; 0
    20a8:	9a 8b       	std	Y+18, r25	; 0x12
    20aa:	89 8b       	std	Y+17, r24	; 0x11
    20ac:	89 89       	ldd	r24, Y+17	; 0x11
    20ae:	9a 89       	ldd	r25, Y+18	; 0x12
    20b0:	01 97       	sbiw	r24, 0x01	; 1
    20b2:	f1 f7       	brne	.-4      	; 0x20b0 <HLCD4_voidSendData+0x1e4>
    20b4:	9a 8b       	std	Y+18, r25	; 0x12
    20b6:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    20b8:	8b 89       	ldd	r24, Y+19	; 0x13
    20ba:	9c 89       	ldd	r25, Y+20	; 0x14
    20bc:	01 97       	sbiw	r24, 0x01	; 1
    20be:	9c 8b       	std	Y+20, r25	; 0x14
    20c0:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    20c2:	8b 89       	ldd	r24, Y+19	; 0x13
    20c4:	9c 89       	ldd	r25, Y+20	; 0x14
    20c6:	00 97       	sbiw	r24, 0x00	; 0
    20c8:	69 f7       	brne	.-38     	; 0x20a4 <HLCD4_voidSendData+0x1d8>
    20ca:	14 c0       	rjmp	.+40     	; 0x20f4 <HLCD4_voidSendData+0x228>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    20cc:	6d 89       	ldd	r22, Y+21	; 0x15
    20ce:	7e 89       	ldd	r23, Y+22	; 0x16
    20d0:	8f 89       	ldd	r24, Y+23	; 0x17
    20d2:	98 8d       	ldd	r25, Y+24	; 0x18
    20d4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20d8:	dc 01       	movw	r26, r24
    20da:	cb 01       	movw	r24, r22
    20dc:	9c 8b       	std	Y+20, r25	; 0x14
    20de:	8b 8b       	std	Y+19, r24	; 0x13
    20e0:	8b 89       	ldd	r24, Y+19	; 0x13
    20e2:	9c 89       	ldd	r25, Y+20	; 0x14
    20e4:	98 8b       	std	Y+16, r25	; 0x10
    20e6:	8f 87       	std	Y+15, r24	; 0x0f
    20e8:	8f 85       	ldd	r24, Y+15	; 0x0f
    20ea:	98 89       	ldd	r25, Y+16	; 0x10
    20ec:	01 97       	sbiw	r24, 0x01	; 1
    20ee:	f1 f7       	brne	.-4      	; 0x20ec <HLCD4_voidSendData+0x220>
    20f0:	98 8b       	std	Y+16, r25	; 0x10
    20f2:	8f 87       	std	Y+15, r24	; 0x0f
    _delay_ms(1);
    MDIO_voidSetPinValue(LCD_CONTROL_PORT,E_PIN,PIN_LOW);
    20f4:	82 e0       	ldi	r24, 0x02	; 2
    20f6:	62 e0       	ldi	r22, 0x02	; 2
    20f8:	40 e0       	ldi	r20, 0x00	; 0
    20fa:	0e 94 32 08 	call	0x1064	; 0x1064 <MDIO_voidSetPinValue>
    20fe:	80 e0       	ldi	r24, 0x00	; 0
    2100:	90 e0       	ldi	r25, 0x00	; 0
    2102:	a0 e0       	ldi	r26, 0x00	; 0
    2104:	b0 e4       	ldi	r27, 0x40	; 64
    2106:	8b 87       	std	Y+11, r24	; 0x0b
    2108:	9c 87       	std	Y+12, r25	; 0x0c
    210a:	ad 87       	std	Y+13, r26	; 0x0d
    210c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    210e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2110:	7c 85       	ldd	r23, Y+12	; 0x0c
    2112:	8d 85       	ldd	r24, Y+13	; 0x0d
    2114:	9e 85       	ldd	r25, Y+14	; 0x0e
    2116:	20 e0       	ldi	r18, 0x00	; 0
    2118:	30 e0       	ldi	r19, 0x00	; 0
    211a:	4a ef       	ldi	r20, 0xFA	; 250
    211c:	54 e4       	ldi	r21, 0x44	; 68
    211e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2122:	dc 01       	movw	r26, r24
    2124:	cb 01       	movw	r24, r22
    2126:	8f 83       	std	Y+7, r24	; 0x07
    2128:	98 87       	std	Y+8, r25	; 0x08
    212a:	a9 87       	std	Y+9, r26	; 0x09
    212c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    212e:	6f 81       	ldd	r22, Y+7	; 0x07
    2130:	78 85       	ldd	r23, Y+8	; 0x08
    2132:	89 85       	ldd	r24, Y+9	; 0x09
    2134:	9a 85       	ldd	r25, Y+10	; 0x0a
    2136:	20 e0       	ldi	r18, 0x00	; 0
    2138:	30 e0       	ldi	r19, 0x00	; 0
    213a:	40 e8       	ldi	r20, 0x80	; 128
    213c:	5f e3       	ldi	r21, 0x3F	; 63
    213e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2142:	88 23       	and	r24, r24
    2144:	2c f4       	brge	.+10     	; 0x2150 <HLCD4_voidSendData+0x284>
		__ticks = 1;
    2146:	81 e0       	ldi	r24, 0x01	; 1
    2148:	90 e0       	ldi	r25, 0x00	; 0
    214a:	9e 83       	std	Y+6, r25	; 0x06
    214c:	8d 83       	std	Y+5, r24	; 0x05
    214e:	3f c0       	rjmp	.+126    	; 0x21ce <HLCD4_voidSendData+0x302>
	else if (__tmp > 65535)
    2150:	6f 81       	ldd	r22, Y+7	; 0x07
    2152:	78 85       	ldd	r23, Y+8	; 0x08
    2154:	89 85       	ldd	r24, Y+9	; 0x09
    2156:	9a 85       	ldd	r25, Y+10	; 0x0a
    2158:	20 e0       	ldi	r18, 0x00	; 0
    215a:	3f ef       	ldi	r19, 0xFF	; 255
    215c:	4f e7       	ldi	r20, 0x7F	; 127
    215e:	57 e4       	ldi	r21, 0x47	; 71
    2160:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2164:	18 16       	cp	r1, r24
    2166:	4c f5       	brge	.+82     	; 0x21ba <HLCD4_voidSendData+0x2ee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2168:	6b 85       	ldd	r22, Y+11	; 0x0b
    216a:	7c 85       	ldd	r23, Y+12	; 0x0c
    216c:	8d 85       	ldd	r24, Y+13	; 0x0d
    216e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2170:	20 e0       	ldi	r18, 0x00	; 0
    2172:	30 e0       	ldi	r19, 0x00	; 0
    2174:	40 e2       	ldi	r20, 0x20	; 32
    2176:	51 e4       	ldi	r21, 0x41	; 65
    2178:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    217c:	dc 01       	movw	r26, r24
    217e:	cb 01       	movw	r24, r22
    2180:	bc 01       	movw	r22, r24
    2182:	cd 01       	movw	r24, r26
    2184:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2188:	dc 01       	movw	r26, r24
    218a:	cb 01       	movw	r24, r22
    218c:	9e 83       	std	Y+6, r25	; 0x06
    218e:	8d 83       	std	Y+5, r24	; 0x05
    2190:	0f c0       	rjmp	.+30     	; 0x21b0 <HLCD4_voidSendData+0x2e4>
    2192:	88 ec       	ldi	r24, 0xC8	; 200
    2194:	90 e0       	ldi	r25, 0x00	; 0
    2196:	9c 83       	std	Y+4, r25	; 0x04
    2198:	8b 83       	std	Y+3, r24	; 0x03
    219a:	8b 81       	ldd	r24, Y+3	; 0x03
    219c:	9c 81       	ldd	r25, Y+4	; 0x04
    219e:	01 97       	sbiw	r24, 0x01	; 1
    21a0:	f1 f7       	brne	.-4      	; 0x219e <HLCD4_voidSendData+0x2d2>
    21a2:	9c 83       	std	Y+4, r25	; 0x04
    21a4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21a6:	8d 81       	ldd	r24, Y+5	; 0x05
    21a8:	9e 81       	ldd	r25, Y+6	; 0x06
    21aa:	01 97       	sbiw	r24, 0x01	; 1
    21ac:	9e 83       	std	Y+6, r25	; 0x06
    21ae:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21b0:	8d 81       	ldd	r24, Y+5	; 0x05
    21b2:	9e 81       	ldd	r25, Y+6	; 0x06
    21b4:	00 97       	sbiw	r24, 0x00	; 0
    21b6:	69 f7       	brne	.-38     	; 0x2192 <HLCD4_voidSendData+0x2c6>
    21b8:	14 c0       	rjmp	.+40     	; 0x21e2 <HLCD4_voidSendData+0x316>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    21ba:	6f 81       	ldd	r22, Y+7	; 0x07
    21bc:	78 85       	ldd	r23, Y+8	; 0x08
    21be:	89 85       	ldd	r24, Y+9	; 0x09
    21c0:	9a 85       	ldd	r25, Y+10	; 0x0a
    21c2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21c6:	dc 01       	movw	r26, r24
    21c8:	cb 01       	movw	r24, r22
    21ca:	9e 83       	std	Y+6, r25	; 0x06
    21cc:	8d 83       	std	Y+5, r24	; 0x05
    21ce:	8d 81       	ldd	r24, Y+5	; 0x05
    21d0:	9e 81       	ldd	r25, Y+6	; 0x06
    21d2:	9a 83       	std	Y+2, r25	; 0x02
    21d4:	89 83       	std	Y+1, r24	; 0x01
    21d6:	89 81       	ldd	r24, Y+1	; 0x01
    21d8:	9a 81       	ldd	r25, Y+2	; 0x02
    21da:	01 97       	sbiw	r24, 0x01	; 1
    21dc:	f1 f7       	brne	.-4      	; 0x21da <HLCD4_voidSendData+0x30e>
    21de:	9a 83       	std	Y+2, r25	; 0x02
    21e0:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(2);
}
    21e2:	ab 96       	adiw	r28, 0x2b	; 43
    21e4:	0f b6       	in	r0, 0x3f	; 63
    21e6:	f8 94       	cli
    21e8:	de bf       	out	0x3e, r29	; 62
    21ea:	0f be       	out	0x3f, r0	; 63
    21ec:	cd bf       	out	0x3d, r28	; 61
    21ee:	cf 91       	pop	r28
    21f0:	df 91       	pop	r29
    21f2:	08 95       	ret

000021f4 <HLCD4_voidInit>:



void HLCD4_voidInit()
{
    21f4:	0f 93       	push	r16
    21f6:	1f 93       	push	r17
    21f8:	df 93       	push	r29
    21fa:	cf 93       	push	r28
    21fc:	cd b7       	in	r28, 0x3d	; 61
    21fe:	de b7       	in	r29, 0x3e	; 62
    2200:	cc 54       	subi	r28, 0x4C	; 76
    2202:	d0 40       	sbci	r29, 0x00	; 0
    2204:	0f b6       	in	r0, 0x3f	; 63
    2206:	f8 94       	cli
    2208:	de bf       	out	0x3e, r29	; 62
    220a:	0f be       	out	0x3f, r0	; 63
    220c:	cd bf       	out	0x3d, r28	; 61
    220e:	fe 01       	movw	r30, r28
    2210:	e7 5b       	subi	r30, 0xB7	; 183
    2212:	ff 4f       	sbci	r31, 0xFF	; 255
    2214:	80 e0       	ldi	r24, 0x00	; 0
    2216:	90 e0       	ldi	r25, 0x00	; 0
    2218:	a0 ef       	ldi	r26, 0xF0	; 240
    221a:	b1 e4       	ldi	r27, 0x41	; 65
    221c:	80 83       	st	Z, r24
    221e:	91 83       	std	Z+1, r25	; 0x01
    2220:	a2 83       	std	Z+2, r26	; 0x02
    2222:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2224:	8e 01       	movw	r16, r28
    2226:	0b 5b       	subi	r16, 0xBB	; 187
    2228:	1f 4f       	sbci	r17, 0xFF	; 255
    222a:	fe 01       	movw	r30, r28
    222c:	e7 5b       	subi	r30, 0xB7	; 183
    222e:	ff 4f       	sbci	r31, 0xFF	; 255
    2230:	60 81       	ld	r22, Z
    2232:	71 81       	ldd	r23, Z+1	; 0x01
    2234:	82 81       	ldd	r24, Z+2	; 0x02
    2236:	93 81       	ldd	r25, Z+3	; 0x03
    2238:	20 e0       	ldi	r18, 0x00	; 0
    223a:	30 e0       	ldi	r19, 0x00	; 0
    223c:	4a ef       	ldi	r20, 0xFA	; 250
    223e:	54 e4       	ldi	r21, 0x44	; 68
    2240:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2244:	dc 01       	movw	r26, r24
    2246:	cb 01       	movw	r24, r22
    2248:	f8 01       	movw	r30, r16
    224a:	80 83       	st	Z, r24
    224c:	91 83       	std	Z+1, r25	; 0x01
    224e:	a2 83       	std	Z+2, r26	; 0x02
    2250:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2252:	fe 01       	movw	r30, r28
    2254:	eb 5b       	subi	r30, 0xBB	; 187
    2256:	ff 4f       	sbci	r31, 0xFF	; 255
    2258:	60 81       	ld	r22, Z
    225a:	71 81       	ldd	r23, Z+1	; 0x01
    225c:	82 81       	ldd	r24, Z+2	; 0x02
    225e:	93 81       	ldd	r25, Z+3	; 0x03
    2260:	20 e0       	ldi	r18, 0x00	; 0
    2262:	30 e0       	ldi	r19, 0x00	; 0
    2264:	40 e8       	ldi	r20, 0x80	; 128
    2266:	5f e3       	ldi	r21, 0x3F	; 63
    2268:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    226c:	88 23       	and	r24, r24
    226e:	44 f4       	brge	.+16     	; 0x2280 <HLCD4_voidInit+0x8c>
		__ticks = 1;
    2270:	fe 01       	movw	r30, r28
    2272:	ed 5b       	subi	r30, 0xBD	; 189
    2274:	ff 4f       	sbci	r31, 0xFF	; 255
    2276:	81 e0       	ldi	r24, 0x01	; 1
    2278:	90 e0       	ldi	r25, 0x00	; 0
    227a:	91 83       	std	Z+1, r25	; 0x01
    227c:	80 83       	st	Z, r24
    227e:	64 c0       	rjmp	.+200    	; 0x2348 <HLCD4_voidInit+0x154>
	else if (__tmp > 65535)
    2280:	fe 01       	movw	r30, r28
    2282:	eb 5b       	subi	r30, 0xBB	; 187
    2284:	ff 4f       	sbci	r31, 0xFF	; 255
    2286:	60 81       	ld	r22, Z
    2288:	71 81       	ldd	r23, Z+1	; 0x01
    228a:	82 81       	ldd	r24, Z+2	; 0x02
    228c:	93 81       	ldd	r25, Z+3	; 0x03
    228e:	20 e0       	ldi	r18, 0x00	; 0
    2290:	3f ef       	ldi	r19, 0xFF	; 255
    2292:	4f e7       	ldi	r20, 0x7F	; 127
    2294:	57 e4       	ldi	r21, 0x47	; 71
    2296:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    229a:	18 16       	cp	r1, r24
    229c:	0c f0       	brlt	.+2      	; 0x22a0 <HLCD4_voidInit+0xac>
    229e:	43 c0       	rjmp	.+134    	; 0x2326 <HLCD4_voidInit+0x132>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    22a0:	fe 01       	movw	r30, r28
    22a2:	e7 5b       	subi	r30, 0xB7	; 183
    22a4:	ff 4f       	sbci	r31, 0xFF	; 255
    22a6:	60 81       	ld	r22, Z
    22a8:	71 81       	ldd	r23, Z+1	; 0x01
    22aa:	82 81       	ldd	r24, Z+2	; 0x02
    22ac:	93 81       	ldd	r25, Z+3	; 0x03
    22ae:	20 e0       	ldi	r18, 0x00	; 0
    22b0:	30 e0       	ldi	r19, 0x00	; 0
    22b2:	40 e2       	ldi	r20, 0x20	; 32
    22b4:	51 e4       	ldi	r21, 0x41	; 65
    22b6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22ba:	dc 01       	movw	r26, r24
    22bc:	cb 01       	movw	r24, r22
    22be:	8e 01       	movw	r16, r28
    22c0:	0d 5b       	subi	r16, 0xBD	; 189
    22c2:	1f 4f       	sbci	r17, 0xFF	; 255
    22c4:	bc 01       	movw	r22, r24
    22c6:	cd 01       	movw	r24, r26
    22c8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22cc:	dc 01       	movw	r26, r24
    22ce:	cb 01       	movw	r24, r22
    22d0:	f8 01       	movw	r30, r16
    22d2:	91 83       	std	Z+1, r25	; 0x01
    22d4:	80 83       	st	Z, r24
    22d6:	1f c0       	rjmp	.+62     	; 0x2316 <HLCD4_voidInit+0x122>
    22d8:	fe 01       	movw	r30, r28
    22da:	ef 5b       	subi	r30, 0xBF	; 191
    22dc:	ff 4f       	sbci	r31, 0xFF	; 255
    22de:	88 ec       	ldi	r24, 0xC8	; 200
    22e0:	90 e0       	ldi	r25, 0x00	; 0
    22e2:	91 83       	std	Z+1, r25	; 0x01
    22e4:	80 83       	st	Z, r24
    22e6:	fe 01       	movw	r30, r28
    22e8:	ef 5b       	subi	r30, 0xBF	; 191
    22ea:	ff 4f       	sbci	r31, 0xFF	; 255
    22ec:	80 81       	ld	r24, Z
    22ee:	91 81       	ldd	r25, Z+1	; 0x01
    22f0:	01 97       	sbiw	r24, 0x01	; 1
    22f2:	f1 f7       	brne	.-4      	; 0x22f0 <HLCD4_voidInit+0xfc>
    22f4:	fe 01       	movw	r30, r28
    22f6:	ef 5b       	subi	r30, 0xBF	; 191
    22f8:	ff 4f       	sbci	r31, 0xFF	; 255
    22fa:	91 83       	std	Z+1, r25	; 0x01
    22fc:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    22fe:	de 01       	movw	r26, r28
    2300:	ad 5b       	subi	r26, 0xBD	; 189
    2302:	bf 4f       	sbci	r27, 0xFF	; 255
    2304:	fe 01       	movw	r30, r28
    2306:	ed 5b       	subi	r30, 0xBD	; 189
    2308:	ff 4f       	sbci	r31, 0xFF	; 255
    230a:	80 81       	ld	r24, Z
    230c:	91 81       	ldd	r25, Z+1	; 0x01
    230e:	01 97       	sbiw	r24, 0x01	; 1
    2310:	11 96       	adiw	r26, 0x01	; 1
    2312:	9c 93       	st	X, r25
    2314:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2316:	fe 01       	movw	r30, r28
    2318:	ed 5b       	subi	r30, 0xBD	; 189
    231a:	ff 4f       	sbci	r31, 0xFF	; 255
    231c:	80 81       	ld	r24, Z
    231e:	91 81       	ldd	r25, Z+1	; 0x01
    2320:	00 97       	sbiw	r24, 0x00	; 0
    2322:	d1 f6       	brne	.-76     	; 0x22d8 <HLCD4_voidInit+0xe4>
    2324:	24 c0       	rjmp	.+72     	; 0x236e <HLCD4_voidInit+0x17a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2326:	8e 01       	movw	r16, r28
    2328:	0d 5b       	subi	r16, 0xBD	; 189
    232a:	1f 4f       	sbci	r17, 0xFF	; 255
    232c:	fe 01       	movw	r30, r28
    232e:	eb 5b       	subi	r30, 0xBB	; 187
    2330:	ff 4f       	sbci	r31, 0xFF	; 255
    2332:	60 81       	ld	r22, Z
    2334:	71 81       	ldd	r23, Z+1	; 0x01
    2336:	82 81       	ldd	r24, Z+2	; 0x02
    2338:	93 81       	ldd	r25, Z+3	; 0x03
    233a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    233e:	dc 01       	movw	r26, r24
    2340:	cb 01       	movw	r24, r22
    2342:	f8 01       	movw	r30, r16
    2344:	91 83       	std	Z+1, r25	; 0x01
    2346:	80 83       	st	Z, r24
    2348:	fe 01       	movw	r30, r28
    234a:	ed 5b       	subi	r30, 0xBD	; 189
    234c:	ff 4f       	sbci	r31, 0xFF	; 255
    234e:	80 81       	ld	r24, Z
    2350:	91 81       	ldd	r25, Z+1	; 0x01
    2352:	fe 01       	movw	r30, r28
    2354:	ff 96       	adiw	r30, 0x3f	; 63
    2356:	91 83       	std	Z+1, r25	; 0x01
    2358:	80 83       	st	Z, r24
    235a:	fe 01       	movw	r30, r28
    235c:	ff 96       	adiw	r30, 0x3f	; 63
    235e:	80 81       	ld	r24, Z
    2360:	91 81       	ldd	r25, Z+1	; 0x01
    2362:	01 97       	sbiw	r24, 0x01	; 1
    2364:	f1 f7       	brne	.-4      	; 0x2362 <HLCD4_voidInit+0x16e>
    2366:	fe 01       	movw	r30, r28
    2368:	ff 96       	adiw	r30, 0x3f	; 63
    236a:	91 83       	std	Z+1, r25	; 0x01
    236c:	80 83       	st	Z, r24
    _delay_ms(30);
    HLCD4_voidSendCommand(FUNCTION_SET1);
    236e:	80 e2       	ldi	r24, 0x20	; 32
    2370:	0e 94 cd 0d 	call	0x1b9a	; 0x1b9a <HLCD4_voidSendCommand>
    HLCD4_voidSendCommand(FUNCTION_SET2);
    2374:	80 e2       	ldi	r24, 0x20	; 32
    2376:	0e 94 cd 0d 	call	0x1b9a	; 0x1b9a <HLCD4_voidSendCommand>
    HLCD4_voidSendCommand(FUNCTION_SET3);
    237a:	80 e8       	ldi	r24, 0x80	; 128
    237c:	0e 94 cd 0d 	call	0x1b9a	; 0x1b9a <HLCD4_voidSendCommand>
    2380:	80 e0       	ldi	r24, 0x00	; 0
    2382:	90 e0       	ldi	r25, 0x00	; 0
    2384:	a0 e2       	ldi	r26, 0x20	; 32
    2386:	b2 e4       	ldi	r27, 0x42	; 66
    2388:	8b af       	std	Y+59, r24	; 0x3b
    238a:	9c af       	std	Y+60, r25	; 0x3c
    238c:	ad af       	std	Y+61, r26	; 0x3d
    238e:	be af       	std	Y+62, r27	; 0x3e
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2390:	6b ad       	ldd	r22, Y+59	; 0x3b
    2392:	7c ad       	ldd	r23, Y+60	; 0x3c
    2394:	8d ad       	ldd	r24, Y+61	; 0x3d
    2396:	9e ad       	ldd	r25, Y+62	; 0x3e
    2398:	2b ea       	ldi	r18, 0xAB	; 171
    239a:	3a ea       	ldi	r19, 0xAA	; 170
    239c:	4a e2       	ldi	r20, 0x2A	; 42
    239e:	50 e4       	ldi	r21, 0x40	; 64
    23a0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23a4:	dc 01       	movw	r26, r24
    23a6:	cb 01       	movw	r24, r22
    23a8:	8f ab       	std	Y+55, r24	; 0x37
    23aa:	98 af       	std	Y+56, r25	; 0x38
    23ac:	a9 af       	std	Y+57, r26	; 0x39
    23ae:	ba af       	std	Y+58, r27	; 0x3a
	if (__tmp < 1.0)
    23b0:	6f a9       	ldd	r22, Y+55	; 0x37
    23b2:	78 ad       	ldd	r23, Y+56	; 0x38
    23b4:	89 ad       	ldd	r24, Y+57	; 0x39
    23b6:	9a ad       	ldd	r25, Y+58	; 0x3a
    23b8:	20 e0       	ldi	r18, 0x00	; 0
    23ba:	30 e0       	ldi	r19, 0x00	; 0
    23bc:	40 e8       	ldi	r20, 0x80	; 128
    23be:	5f e3       	ldi	r21, 0x3F	; 63
    23c0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    23c4:	88 23       	and	r24, r24
    23c6:	1c f4       	brge	.+6      	; 0x23ce <HLCD4_voidInit+0x1da>
		__ticks = 1;
    23c8:	81 e0       	ldi	r24, 0x01	; 1
    23ca:	8e ab       	std	Y+54, r24	; 0x36
    23cc:	91 c0       	rjmp	.+290    	; 0x24f0 <HLCD4_voidInit+0x2fc>
	else if (__tmp > 255)
    23ce:	6f a9       	ldd	r22, Y+55	; 0x37
    23d0:	78 ad       	ldd	r23, Y+56	; 0x38
    23d2:	89 ad       	ldd	r24, Y+57	; 0x39
    23d4:	9a ad       	ldd	r25, Y+58	; 0x3a
    23d6:	20 e0       	ldi	r18, 0x00	; 0
    23d8:	30 e0       	ldi	r19, 0x00	; 0
    23da:	4f e7       	ldi	r20, 0x7F	; 127
    23dc:	53 e4       	ldi	r21, 0x43	; 67
    23de:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    23e2:	18 16       	cp	r1, r24
    23e4:	0c f0       	brlt	.+2      	; 0x23e8 <HLCD4_voidInit+0x1f4>
    23e6:	7b c0       	rjmp	.+246    	; 0x24de <HLCD4_voidInit+0x2ea>
	{
		_delay_ms(__us / 1000.0);
    23e8:	6b ad       	ldd	r22, Y+59	; 0x3b
    23ea:	7c ad       	ldd	r23, Y+60	; 0x3c
    23ec:	8d ad       	ldd	r24, Y+61	; 0x3d
    23ee:	9e ad       	ldd	r25, Y+62	; 0x3e
    23f0:	20 e0       	ldi	r18, 0x00	; 0
    23f2:	30 e0       	ldi	r19, 0x00	; 0
    23f4:	4a e7       	ldi	r20, 0x7A	; 122
    23f6:	54 e4       	ldi	r21, 0x44	; 68
    23f8:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    23fc:	dc 01       	movw	r26, r24
    23fe:	cb 01       	movw	r24, r22
    2400:	8a ab       	std	Y+50, r24	; 0x32
    2402:	9b ab       	std	Y+51, r25	; 0x33
    2404:	ac ab       	std	Y+52, r26	; 0x34
    2406:	bd ab       	std	Y+53, r27	; 0x35
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2408:	6a a9       	ldd	r22, Y+50	; 0x32
    240a:	7b a9       	ldd	r23, Y+51	; 0x33
    240c:	8c a9       	ldd	r24, Y+52	; 0x34
    240e:	9d a9       	ldd	r25, Y+53	; 0x35
    2410:	20 e0       	ldi	r18, 0x00	; 0
    2412:	30 e0       	ldi	r19, 0x00	; 0
    2414:	4a ef       	ldi	r20, 0xFA	; 250
    2416:	54 e4       	ldi	r21, 0x44	; 68
    2418:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    241c:	dc 01       	movw	r26, r24
    241e:	cb 01       	movw	r24, r22
    2420:	8e a7       	std	Y+46, r24	; 0x2e
    2422:	9f a7       	std	Y+47, r25	; 0x2f
    2424:	a8 ab       	std	Y+48, r26	; 0x30
    2426:	b9 ab       	std	Y+49, r27	; 0x31
	if (__tmp < 1.0)
    2428:	6e a5       	ldd	r22, Y+46	; 0x2e
    242a:	7f a5       	ldd	r23, Y+47	; 0x2f
    242c:	88 a9       	ldd	r24, Y+48	; 0x30
    242e:	99 a9       	ldd	r25, Y+49	; 0x31
    2430:	20 e0       	ldi	r18, 0x00	; 0
    2432:	30 e0       	ldi	r19, 0x00	; 0
    2434:	40 e8       	ldi	r20, 0x80	; 128
    2436:	5f e3       	ldi	r21, 0x3F	; 63
    2438:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    243c:	88 23       	and	r24, r24
    243e:	2c f4       	brge	.+10     	; 0x244a <HLCD4_voidInit+0x256>
		__ticks = 1;
    2440:	81 e0       	ldi	r24, 0x01	; 1
    2442:	90 e0       	ldi	r25, 0x00	; 0
    2444:	9d a7       	std	Y+45, r25	; 0x2d
    2446:	8c a7       	std	Y+44, r24	; 0x2c
    2448:	3f c0       	rjmp	.+126    	; 0x24c8 <HLCD4_voidInit+0x2d4>
	else if (__tmp > 65535)
    244a:	6e a5       	ldd	r22, Y+46	; 0x2e
    244c:	7f a5       	ldd	r23, Y+47	; 0x2f
    244e:	88 a9       	ldd	r24, Y+48	; 0x30
    2450:	99 a9       	ldd	r25, Y+49	; 0x31
    2452:	20 e0       	ldi	r18, 0x00	; 0
    2454:	3f ef       	ldi	r19, 0xFF	; 255
    2456:	4f e7       	ldi	r20, 0x7F	; 127
    2458:	57 e4       	ldi	r21, 0x47	; 71
    245a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    245e:	18 16       	cp	r1, r24
    2460:	4c f5       	brge	.+82     	; 0x24b4 <HLCD4_voidInit+0x2c0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2462:	6a a9       	ldd	r22, Y+50	; 0x32
    2464:	7b a9       	ldd	r23, Y+51	; 0x33
    2466:	8c a9       	ldd	r24, Y+52	; 0x34
    2468:	9d a9       	ldd	r25, Y+53	; 0x35
    246a:	20 e0       	ldi	r18, 0x00	; 0
    246c:	30 e0       	ldi	r19, 0x00	; 0
    246e:	40 e2       	ldi	r20, 0x20	; 32
    2470:	51 e4       	ldi	r21, 0x41	; 65
    2472:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2476:	dc 01       	movw	r26, r24
    2478:	cb 01       	movw	r24, r22
    247a:	bc 01       	movw	r22, r24
    247c:	cd 01       	movw	r24, r26
    247e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2482:	dc 01       	movw	r26, r24
    2484:	cb 01       	movw	r24, r22
    2486:	9d a7       	std	Y+45, r25	; 0x2d
    2488:	8c a7       	std	Y+44, r24	; 0x2c
    248a:	0f c0       	rjmp	.+30     	; 0x24aa <HLCD4_voidInit+0x2b6>
    248c:	88 ec       	ldi	r24, 0xC8	; 200
    248e:	90 e0       	ldi	r25, 0x00	; 0
    2490:	9b a7       	std	Y+43, r25	; 0x2b
    2492:	8a a7       	std	Y+42, r24	; 0x2a
    2494:	8a a5       	ldd	r24, Y+42	; 0x2a
    2496:	9b a5       	ldd	r25, Y+43	; 0x2b
    2498:	01 97       	sbiw	r24, 0x01	; 1
    249a:	f1 f7       	brne	.-4      	; 0x2498 <HLCD4_voidInit+0x2a4>
    249c:	9b a7       	std	Y+43, r25	; 0x2b
    249e:	8a a7       	std	Y+42, r24	; 0x2a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    24a0:	8c a5       	ldd	r24, Y+44	; 0x2c
    24a2:	9d a5       	ldd	r25, Y+45	; 0x2d
    24a4:	01 97       	sbiw	r24, 0x01	; 1
    24a6:	9d a7       	std	Y+45, r25	; 0x2d
    24a8:	8c a7       	std	Y+44, r24	; 0x2c
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    24aa:	8c a5       	ldd	r24, Y+44	; 0x2c
    24ac:	9d a5       	ldd	r25, Y+45	; 0x2d
    24ae:	00 97       	sbiw	r24, 0x00	; 0
    24b0:	69 f7       	brne	.-38     	; 0x248c <HLCD4_voidInit+0x298>
    24b2:	24 c0       	rjmp	.+72     	; 0x24fc <HLCD4_voidInit+0x308>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    24b4:	6e a5       	ldd	r22, Y+46	; 0x2e
    24b6:	7f a5       	ldd	r23, Y+47	; 0x2f
    24b8:	88 a9       	ldd	r24, Y+48	; 0x30
    24ba:	99 a9       	ldd	r25, Y+49	; 0x31
    24bc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24c0:	dc 01       	movw	r26, r24
    24c2:	cb 01       	movw	r24, r22
    24c4:	9d a7       	std	Y+45, r25	; 0x2d
    24c6:	8c a7       	std	Y+44, r24	; 0x2c
    24c8:	8c a5       	ldd	r24, Y+44	; 0x2c
    24ca:	9d a5       	ldd	r25, Y+45	; 0x2d
    24cc:	99 a7       	std	Y+41, r25	; 0x29
    24ce:	88 a7       	std	Y+40, r24	; 0x28
    24d0:	88 a5       	ldd	r24, Y+40	; 0x28
    24d2:	99 a5       	ldd	r25, Y+41	; 0x29
    24d4:	01 97       	sbiw	r24, 0x01	; 1
    24d6:	f1 f7       	brne	.-4      	; 0x24d4 <HLCD4_voidInit+0x2e0>
    24d8:	99 a7       	std	Y+41, r25	; 0x29
    24da:	88 a7       	std	Y+40, r24	; 0x28
    24dc:	0f c0       	rjmp	.+30     	; 0x24fc <HLCD4_voidInit+0x308>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    24de:	6f a9       	ldd	r22, Y+55	; 0x37
    24e0:	78 ad       	ldd	r23, Y+56	; 0x38
    24e2:	89 ad       	ldd	r24, Y+57	; 0x39
    24e4:	9a ad       	ldd	r25, Y+58	; 0x3a
    24e6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24ea:	dc 01       	movw	r26, r24
    24ec:	cb 01       	movw	r24, r22
    24ee:	8e ab       	std	Y+54, r24	; 0x36
    24f0:	8e a9       	ldd	r24, Y+54	; 0x36
    24f2:	8f a3       	std	Y+39, r24	; 0x27
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    24f4:	8f a1       	ldd	r24, Y+39	; 0x27
    24f6:	8a 95       	dec	r24
    24f8:	f1 f7       	brne	.-4      	; 0x24f6 <HLCD4_voidInit+0x302>
    24fa:	8f a3       	std	Y+39, r24	; 0x27
    _delay_us(40);
    HLCD4_voidSendCommand(ON_OFF_CONTROL1);
    24fc:	80 e0       	ldi	r24, 0x00	; 0
    24fe:	0e 94 cd 0d 	call	0x1b9a	; 0x1b9a <HLCD4_voidSendCommand>
    HLCD4_voidSendCommand(ON_OFF_CONTROL2);
    2502:	80 ec       	ldi	r24, 0xC0	; 192
    2504:	0e 94 cd 0d 	call	0x1b9a	; 0x1b9a <HLCD4_voidSendCommand>
    2508:	80 e0       	ldi	r24, 0x00	; 0
    250a:	90 e0       	ldi	r25, 0x00	; 0
    250c:	a0 e2       	ldi	r26, 0x20	; 32
    250e:	b2 e4       	ldi	r27, 0x42	; 66
    2510:	8b a3       	std	Y+35, r24	; 0x23
    2512:	9c a3       	std	Y+36, r25	; 0x24
    2514:	ad a3       	std	Y+37, r26	; 0x25
    2516:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2518:	6b a1       	ldd	r22, Y+35	; 0x23
    251a:	7c a1       	ldd	r23, Y+36	; 0x24
    251c:	8d a1       	ldd	r24, Y+37	; 0x25
    251e:	9e a1       	ldd	r25, Y+38	; 0x26
    2520:	2b ea       	ldi	r18, 0xAB	; 171
    2522:	3a ea       	ldi	r19, 0xAA	; 170
    2524:	4a e2       	ldi	r20, 0x2A	; 42
    2526:	50 e4       	ldi	r21, 0x40	; 64
    2528:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    252c:	dc 01       	movw	r26, r24
    252e:	cb 01       	movw	r24, r22
    2530:	8f 8f       	std	Y+31, r24	; 0x1f
    2532:	98 a3       	std	Y+32, r25	; 0x20
    2534:	a9 a3       	std	Y+33, r26	; 0x21
    2536:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    2538:	6f 8d       	ldd	r22, Y+31	; 0x1f
    253a:	78 a1       	ldd	r23, Y+32	; 0x20
    253c:	89 a1       	ldd	r24, Y+33	; 0x21
    253e:	9a a1       	ldd	r25, Y+34	; 0x22
    2540:	20 e0       	ldi	r18, 0x00	; 0
    2542:	30 e0       	ldi	r19, 0x00	; 0
    2544:	40 e8       	ldi	r20, 0x80	; 128
    2546:	5f e3       	ldi	r21, 0x3F	; 63
    2548:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    254c:	88 23       	and	r24, r24
    254e:	1c f4       	brge	.+6      	; 0x2556 <HLCD4_voidInit+0x362>
		__ticks = 1;
    2550:	81 e0       	ldi	r24, 0x01	; 1
    2552:	8e 8f       	std	Y+30, r24	; 0x1e
    2554:	91 c0       	rjmp	.+290    	; 0x2678 <HLCD4_voidInit+0x484>
	else if (__tmp > 255)
    2556:	6f 8d       	ldd	r22, Y+31	; 0x1f
    2558:	78 a1       	ldd	r23, Y+32	; 0x20
    255a:	89 a1       	ldd	r24, Y+33	; 0x21
    255c:	9a a1       	ldd	r25, Y+34	; 0x22
    255e:	20 e0       	ldi	r18, 0x00	; 0
    2560:	30 e0       	ldi	r19, 0x00	; 0
    2562:	4f e7       	ldi	r20, 0x7F	; 127
    2564:	53 e4       	ldi	r21, 0x43	; 67
    2566:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    256a:	18 16       	cp	r1, r24
    256c:	0c f0       	brlt	.+2      	; 0x2570 <HLCD4_voidInit+0x37c>
    256e:	7b c0       	rjmp	.+246    	; 0x2666 <HLCD4_voidInit+0x472>
	{
		_delay_ms(__us / 1000.0);
    2570:	6b a1       	ldd	r22, Y+35	; 0x23
    2572:	7c a1       	ldd	r23, Y+36	; 0x24
    2574:	8d a1       	ldd	r24, Y+37	; 0x25
    2576:	9e a1       	ldd	r25, Y+38	; 0x26
    2578:	20 e0       	ldi	r18, 0x00	; 0
    257a:	30 e0       	ldi	r19, 0x00	; 0
    257c:	4a e7       	ldi	r20, 0x7A	; 122
    257e:	54 e4       	ldi	r21, 0x44	; 68
    2580:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2584:	dc 01       	movw	r26, r24
    2586:	cb 01       	movw	r24, r22
    2588:	8a 8f       	std	Y+26, r24	; 0x1a
    258a:	9b 8f       	std	Y+27, r25	; 0x1b
    258c:	ac 8f       	std	Y+28, r26	; 0x1c
    258e:	bd 8f       	std	Y+29, r27	; 0x1d
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2590:	6a 8d       	ldd	r22, Y+26	; 0x1a
    2592:	7b 8d       	ldd	r23, Y+27	; 0x1b
    2594:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2596:	9d 8d       	ldd	r25, Y+29	; 0x1d
    2598:	20 e0       	ldi	r18, 0x00	; 0
    259a:	30 e0       	ldi	r19, 0x00	; 0
    259c:	4a ef       	ldi	r20, 0xFA	; 250
    259e:	54 e4       	ldi	r21, 0x44	; 68
    25a0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25a4:	dc 01       	movw	r26, r24
    25a6:	cb 01       	movw	r24, r22
    25a8:	8e 8b       	std	Y+22, r24	; 0x16
    25aa:	9f 8b       	std	Y+23, r25	; 0x17
    25ac:	a8 8f       	std	Y+24, r26	; 0x18
    25ae:	b9 8f       	std	Y+25, r27	; 0x19
	if (__tmp < 1.0)
    25b0:	6e 89       	ldd	r22, Y+22	; 0x16
    25b2:	7f 89       	ldd	r23, Y+23	; 0x17
    25b4:	88 8d       	ldd	r24, Y+24	; 0x18
    25b6:	99 8d       	ldd	r25, Y+25	; 0x19
    25b8:	20 e0       	ldi	r18, 0x00	; 0
    25ba:	30 e0       	ldi	r19, 0x00	; 0
    25bc:	40 e8       	ldi	r20, 0x80	; 128
    25be:	5f e3       	ldi	r21, 0x3F	; 63
    25c0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    25c4:	88 23       	and	r24, r24
    25c6:	2c f4       	brge	.+10     	; 0x25d2 <HLCD4_voidInit+0x3de>
		__ticks = 1;
    25c8:	81 e0       	ldi	r24, 0x01	; 1
    25ca:	90 e0       	ldi	r25, 0x00	; 0
    25cc:	9d 8b       	std	Y+21, r25	; 0x15
    25ce:	8c 8b       	std	Y+20, r24	; 0x14
    25d0:	3f c0       	rjmp	.+126    	; 0x2650 <HLCD4_voidInit+0x45c>
	else if (__tmp > 65535)
    25d2:	6e 89       	ldd	r22, Y+22	; 0x16
    25d4:	7f 89       	ldd	r23, Y+23	; 0x17
    25d6:	88 8d       	ldd	r24, Y+24	; 0x18
    25d8:	99 8d       	ldd	r25, Y+25	; 0x19
    25da:	20 e0       	ldi	r18, 0x00	; 0
    25dc:	3f ef       	ldi	r19, 0xFF	; 255
    25de:	4f e7       	ldi	r20, 0x7F	; 127
    25e0:	57 e4       	ldi	r21, 0x47	; 71
    25e2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    25e6:	18 16       	cp	r1, r24
    25e8:	4c f5       	brge	.+82     	; 0x263c <HLCD4_voidInit+0x448>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    25ea:	6a 8d       	ldd	r22, Y+26	; 0x1a
    25ec:	7b 8d       	ldd	r23, Y+27	; 0x1b
    25ee:	8c 8d       	ldd	r24, Y+28	; 0x1c
    25f0:	9d 8d       	ldd	r25, Y+29	; 0x1d
    25f2:	20 e0       	ldi	r18, 0x00	; 0
    25f4:	30 e0       	ldi	r19, 0x00	; 0
    25f6:	40 e2       	ldi	r20, 0x20	; 32
    25f8:	51 e4       	ldi	r21, 0x41	; 65
    25fa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25fe:	dc 01       	movw	r26, r24
    2600:	cb 01       	movw	r24, r22
    2602:	bc 01       	movw	r22, r24
    2604:	cd 01       	movw	r24, r26
    2606:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    260a:	dc 01       	movw	r26, r24
    260c:	cb 01       	movw	r24, r22
    260e:	9d 8b       	std	Y+21, r25	; 0x15
    2610:	8c 8b       	std	Y+20, r24	; 0x14
    2612:	0f c0       	rjmp	.+30     	; 0x2632 <HLCD4_voidInit+0x43e>
    2614:	88 ec       	ldi	r24, 0xC8	; 200
    2616:	90 e0       	ldi	r25, 0x00	; 0
    2618:	9b 8b       	std	Y+19, r25	; 0x13
    261a:	8a 8b       	std	Y+18, r24	; 0x12
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    261c:	8a 89       	ldd	r24, Y+18	; 0x12
    261e:	9b 89       	ldd	r25, Y+19	; 0x13
    2620:	01 97       	sbiw	r24, 0x01	; 1
    2622:	f1 f7       	brne	.-4      	; 0x2620 <HLCD4_voidInit+0x42c>
    2624:	9b 8b       	std	Y+19, r25	; 0x13
    2626:	8a 8b       	std	Y+18, r24	; 0x12
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2628:	8c 89       	ldd	r24, Y+20	; 0x14
    262a:	9d 89       	ldd	r25, Y+21	; 0x15
    262c:	01 97       	sbiw	r24, 0x01	; 1
    262e:	9d 8b       	std	Y+21, r25	; 0x15
    2630:	8c 8b       	std	Y+20, r24	; 0x14
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2632:	8c 89       	ldd	r24, Y+20	; 0x14
    2634:	9d 89       	ldd	r25, Y+21	; 0x15
    2636:	00 97       	sbiw	r24, 0x00	; 0
    2638:	69 f7       	brne	.-38     	; 0x2614 <HLCD4_voidInit+0x420>
    263a:	24 c0       	rjmp	.+72     	; 0x2684 <HLCD4_voidInit+0x490>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    263c:	6e 89       	ldd	r22, Y+22	; 0x16
    263e:	7f 89       	ldd	r23, Y+23	; 0x17
    2640:	88 8d       	ldd	r24, Y+24	; 0x18
    2642:	99 8d       	ldd	r25, Y+25	; 0x19
    2644:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2648:	dc 01       	movw	r26, r24
    264a:	cb 01       	movw	r24, r22
    264c:	9d 8b       	std	Y+21, r25	; 0x15
    264e:	8c 8b       	std	Y+20, r24	; 0x14
    2650:	8c 89       	ldd	r24, Y+20	; 0x14
    2652:	9d 89       	ldd	r25, Y+21	; 0x15
    2654:	99 8b       	std	Y+17, r25	; 0x11
    2656:	88 8b       	std	Y+16, r24	; 0x10
    2658:	88 89       	ldd	r24, Y+16	; 0x10
    265a:	99 89       	ldd	r25, Y+17	; 0x11
    265c:	01 97       	sbiw	r24, 0x01	; 1
    265e:	f1 f7       	brne	.-4      	; 0x265c <HLCD4_voidInit+0x468>
    2660:	99 8b       	std	Y+17, r25	; 0x11
    2662:	88 8b       	std	Y+16, r24	; 0x10
    2664:	0f c0       	rjmp	.+30     	; 0x2684 <HLCD4_voidInit+0x490>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2666:	6f 8d       	ldd	r22, Y+31	; 0x1f
    2668:	78 a1       	ldd	r23, Y+32	; 0x20
    266a:	89 a1       	ldd	r24, Y+33	; 0x21
    266c:	9a a1       	ldd	r25, Y+34	; 0x22
    266e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2672:	dc 01       	movw	r26, r24
    2674:	cb 01       	movw	r24, r22
    2676:	8e 8f       	std	Y+30, r24	; 0x1e
    2678:	8e 8d       	ldd	r24, Y+30	; 0x1e
    267a:	8f 87       	std	Y+15, r24	; 0x0f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    267c:	8f 85       	ldd	r24, Y+15	; 0x0f
    267e:	8a 95       	dec	r24
    2680:	f1 f7       	brne	.-4      	; 0x267e <HLCD4_voidInit+0x48a>
    2682:	8f 87       	std	Y+15, r24	; 0x0f
    _delay_us(40);
    HLCD4_voidSendCommand(DISPLAY_CLEAR1);
    2684:	80 e0       	ldi	r24, 0x00	; 0
    2686:	0e 94 cd 0d 	call	0x1b9a	; 0x1b9a <HLCD4_voidSendCommand>
    HLCD4_voidSendCommand(DISPLAY_CLEAR2);
    268a:	80 e1       	ldi	r24, 0x10	; 16
    268c:	0e 94 cd 0d 	call	0x1b9a	; 0x1b9a <HLCD4_voidSendCommand>
    2690:	80 e0       	ldi	r24, 0x00	; 0
    2692:	90 e0       	ldi	r25, 0x00	; 0
    2694:	a0 e0       	ldi	r26, 0x00	; 0
    2696:	b0 e4       	ldi	r27, 0x40	; 64
    2698:	8b 87       	std	Y+11, r24	; 0x0b
    269a:	9c 87       	std	Y+12, r25	; 0x0c
    269c:	ad 87       	std	Y+13, r26	; 0x0d
    269e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    26a0:	6b 85       	ldd	r22, Y+11	; 0x0b
    26a2:	7c 85       	ldd	r23, Y+12	; 0x0c
    26a4:	8d 85       	ldd	r24, Y+13	; 0x0d
    26a6:	9e 85       	ldd	r25, Y+14	; 0x0e
    26a8:	20 e0       	ldi	r18, 0x00	; 0
    26aa:	30 e0       	ldi	r19, 0x00	; 0
    26ac:	4a ef       	ldi	r20, 0xFA	; 250
    26ae:	54 e4       	ldi	r21, 0x44	; 68
    26b0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26b4:	dc 01       	movw	r26, r24
    26b6:	cb 01       	movw	r24, r22
    26b8:	8f 83       	std	Y+7, r24	; 0x07
    26ba:	98 87       	std	Y+8, r25	; 0x08
    26bc:	a9 87       	std	Y+9, r26	; 0x09
    26be:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    26c0:	6f 81       	ldd	r22, Y+7	; 0x07
    26c2:	78 85       	ldd	r23, Y+8	; 0x08
    26c4:	89 85       	ldd	r24, Y+9	; 0x09
    26c6:	9a 85       	ldd	r25, Y+10	; 0x0a
    26c8:	20 e0       	ldi	r18, 0x00	; 0
    26ca:	30 e0       	ldi	r19, 0x00	; 0
    26cc:	40 e8       	ldi	r20, 0x80	; 128
    26ce:	5f e3       	ldi	r21, 0x3F	; 63
    26d0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    26d4:	88 23       	and	r24, r24
    26d6:	2c f4       	brge	.+10     	; 0x26e2 <HLCD4_voidInit+0x4ee>
		__ticks = 1;
    26d8:	81 e0       	ldi	r24, 0x01	; 1
    26da:	90 e0       	ldi	r25, 0x00	; 0
    26dc:	9e 83       	std	Y+6, r25	; 0x06
    26de:	8d 83       	std	Y+5, r24	; 0x05
    26e0:	3f c0       	rjmp	.+126    	; 0x2760 <HLCD4_voidInit+0x56c>
	else if (__tmp > 65535)
    26e2:	6f 81       	ldd	r22, Y+7	; 0x07
    26e4:	78 85       	ldd	r23, Y+8	; 0x08
    26e6:	89 85       	ldd	r24, Y+9	; 0x09
    26e8:	9a 85       	ldd	r25, Y+10	; 0x0a
    26ea:	20 e0       	ldi	r18, 0x00	; 0
    26ec:	3f ef       	ldi	r19, 0xFF	; 255
    26ee:	4f e7       	ldi	r20, 0x7F	; 127
    26f0:	57 e4       	ldi	r21, 0x47	; 71
    26f2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    26f6:	18 16       	cp	r1, r24
    26f8:	4c f5       	brge	.+82     	; 0x274c <HLCD4_voidInit+0x558>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    26fa:	6b 85       	ldd	r22, Y+11	; 0x0b
    26fc:	7c 85       	ldd	r23, Y+12	; 0x0c
    26fe:	8d 85       	ldd	r24, Y+13	; 0x0d
    2700:	9e 85       	ldd	r25, Y+14	; 0x0e
    2702:	20 e0       	ldi	r18, 0x00	; 0
    2704:	30 e0       	ldi	r19, 0x00	; 0
    2706:	40 e2       	ldi	r20, 0x20	; 32
    2708:	51 e4       	ldi	r21, 0x41	; 65
    270a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    270e:	dc 01       	movw	r26, r24
    2710:	cb 01       	movw	r24, r22
    2712:	bc 01       	movw	r22, r24
    2714:	cd 01       	movw	r24, r26
    2716:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    271a:	dc 01       	movw	r26, r24
    271c:	cb 01       	movw	r24, r22
    271e:	9e 83       	std	Y+6, r25	; 0x06
    2720:	8d 83       	std	Y+5, r24	; 0x05
    2722:	0f c0       	rjmp	.+30     	; 0x2742 <HLCD4_voidInit+0x54e>
    2724:	88 ec       	ldi	r24, 0xC8	; 200
    2726:	90 e0       	ldi	r25, 0x00	; 0
    2728:	9c 83       	std	Y+4, r25	; 0x04
    272a:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    272c:	8b 81       	ldd	r24, Y+3	; 0x03
    272e:	9c 81       	ldd	r25, Y+4	; 0x04
    2730:	01 97       	sbiw	r24, 0x01	; 1
    2732:	f1 f7       	brne	.-4      	; 0x2730 <HLCD4_voidInit+0x53c>
    2734:	9c 83       	std	Y+4, r25	; 0x04
    2736:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2738:	8d 81       	ldd	r24, Y+5	; 0x05
    273a:	9e 81       	ldd	r25, Y+6	; 0x06
    273c:	01 97       	sbiw	r24, 0x01	; 1
    273e:	9e 83       	std	Y+6, r25	; 0x06
    2740:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2742:	8d 81       	ldd	r24, Y+5	; 0x05
    2744:	9e 81       	ldd	r25, Y+6	; 0x06
    2746:	00 97       	sbiw	r24, 0x00	; 0
    2748:	69 f7       	brne	.-38     	; 0x2724 <HLCD4_voidInit+0x530>
    274a:	14 c0       	rjmp	.+40     	; 0x2774 <HLCD4_voidInit+0x580>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    274c:	6f 81       	ldd	r22, Y+7	; 0x07
    274e:	78 85       	ldd	r23, Y+8	; 0x08
    2750:	89 85       	ldd	r24, Y+9	; 0x09
    2752:	9a 85       	ldd	r25, Y+10	; 0x0a
    2754:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2758:	dc 01       	movw	r26, r24
    275a:	cb 01       	movw	r24, r22
    275c:	9e 83       	std	Y+6, r25	; 0x06
    275e:	8d 83       	std	Y+5, r24	; 0x05
    2760:	8d 81       	ldd	r24, Y+5	; 0x05
    2762:	9e 81       	ldd	r25, Y+6	; 0x06
    2764:	9a 83       	std	Y+2, r25	; 0x02
    2766:	89 83       	std	Y+1, r24	; 0x01
    2768:	89 81       	ldd	r24, Y+1	; 0x01
    276a:	9a 81       	ldd	r25, Y+2	; 0x02
    276c:	01 97       	sbiw	r24, 0x01	; 1
    276e:	f1 f7       	brne	.-4      	; 0x276c <HLCD4_voidInit+0x578>
    2770:	9a 83       	std	Y+2, r25	; 0x02
    2772:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(2);
    HLCD4_voidSendCommand(ENTRY_MODE_SET1);
    2774:	80 e0       	ldi	r24, 0x00	; 0
    2776:	0e 94 cd 0d 	call	0x1b9a	; 0x1b9a <HLCD4_voidSendCommand>
    HLCD4_voidSendCommand(ENTRY_MODE_SET2);
    277a:	80 e6       	ldi	r24, 0x60	; 96
    277c:	0e 94 cd 0d 	call	0x1b9a	; 0x1b9a <HLCD4_voidSendCommand>
    global_u8Init=1;
    2780:	81 e0       	ldi	r24, 0x01	; 1
    2782:	80 93 9a 00 	sts	0x009A, r24
} 
    2786:	c4 5b       	subi	r28, 0xB4	; 180
    2788:	df 4f       	sbci	r29, 0xFF	; 255
    278a:	0f b6       	in	r0, 0x3f	; 63
    278c:	f8 94       	cli
    278e:	de bf       	out	0x3e, r29	; 62
    2790:	0f be       	out	0x3f, r0	; 63
    2792:	cd bf       	out	0x3d, r28	; 61
    2794:	cf 91       	pop	r28
    2796:	df 91       	pop	r29
    2798:	1f 91       	pop	r17
    279a:	0f 91       	pop	r16
    279c:	08 95       	ret

0000279e <HLCD4_voidClearDisplay>:

void HLCD4_voidClearDisplay(void)
{
    279e:	df 93       	push	r29
    27a0:	cf 93       	push	r28
    27a2:	cd b7       	in	r28, 0x3d	; 61
    27a4:	de b7       	in	r29, 0x3e	; 62
    27a6:	2e 97       	sbiw	r28, 0x0e	; 14
    27a8:	0f b6       	in	r0, 0x3f	; 63
    27aa:	f8 94       	cli
    27ac:	de bf       	out	0x3e, r29	; 62
    27ae:	0f be       	out	0x3f, r0	; 63
    27b0:	cd bf       	out	0x3d, r28	; 61
    HLCD4_voidSendCommand(DISPLAY_CLEAR1);
    27b2:	80 e0       	ldi	r24, 0x00	; 0
    27b4:	0e 94 cd 0d 	call	0x1b9a	; 0x1b9a <HLCD4_voidSendCommand>
    HLCD4_voidSendCommand(DISPLAY_CLEAR2);
    27b8:	80 e1       	ldi	r24, 0x10	; 16
    27ba:	0e 94 cd 0d 	call	0x1b9a	; 0x1b9a <HLCD4_voidSendCommand>
    27be:	80 e0       	ldi	r24, 0x00	; 0
    27c0:	90 e0       	ldi	r25, 0x00	; 0
    27c2:	a0 e0       	ldi	r26, 0x00	; 0
    27c4:	b0 e4       	ldi	r27, 0x40	; 64
    27c6:	8b 87       	std	Y+11, r24	; 0x0b
    27c8:	9c 87       	std	Y+12, r25	; 0x0c
    27ca:	ad 87       	std	Y+13, r26	; 0x0d
    27cc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    27ce:	6b 85       	ldd	r22, Y+11	; 0x0b
    27d0:	7c 85       	ldd	r23, Y+12	; 0x0c
    27d2:	8d 85       	ldd	r24, Y+13	; 0x0d
    27d4:	9e 85       	ldd	r25, Y+14	; 0x0e
    27d6:	20 e0       	ldi	r18, 0x00	; 0
    27d8:	30 e0       	ldi	r19, 0x00	; 0
    27da:	4a ef       	ldi	r20, 0xFA	; 250
    27dc:	54 e4       	ldi	r21, 0x44	; 68
    27de:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27e2:	dc 01       	movw	r26, r24
    27e4:	cb 01       	movw	r24, r22
    27e6:	8f 83       	std	Y+7, r24	; 0x07
    27e8:	98 87       	std	Y+8, r25	; 0x08
    27ea:	a9 87       	std	Y+9, r26	; 0x09
    27ec:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    27ee:	6f 81       	ldd	r22, Y+7	; 0x07
    27f0:	78 85       	ldd	r23, Y+8	; 0x08
    27f2:	89 85       	ldd	r24, Y+9	; 0x09
    27f4:	9a 85       	ldd	r25, Y+10	; 0x0a
    27f6:	20 e0       	ldi	r18, 0x00	; 0
    27f8:	30 e0       	ldi	r19, 0x00	; 0
    27fa:	40 e8       	ldi	r20, 0x80	; 128
    27fc:	5f e3       	ldi	r21, 0x3F	; 63
    27fe:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2802:	88 23       	and	r24, r24
    2804:	2c f4       	brge	.+10     	; 0x2810 <HLCD4_voidClearDisplay+0x72>
		__ticks = 1;
    2806:	81 e0       	ldi	r24, 0x01	; 1
    2808:	90 e0       	ldi	r25, 0x00	; 0
    280a:	9e 83       	std	Y+6, r25	; 0x06
    280c:	8d 83       	std	Y+5, r24	; 0x05
    280e:	3f c0       	rjmp	.+126    	; 0x288e <HLCD4_voidClearDisplay+0xf0>
	else if (__tmp > 65535)
    2810:	6f 81       	ldd	r22, Y+7	; 0x07
    2812:	78 85       	ldd	r23, Y+8	; 0x08
    2814:	89 85       	ldd	r24, Y+9	; 0x09
    2816:	9a 85       	ldd	r25, Y+10	; 0x0a
    2818:	20 e0       	ldi	r18, 0x00	; 0
    281a:	3f ef       	ldi	r19, 0xFF	; 255
    281c:	4f e7       	ldi	r20, 0x7F	; 127
    281e:	57 e4       	ldi	r21, 0x47	; 71
    2820:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2824:	18 16       	cp	r1, r24
    2826:	4c f5       	brge	.+82     	; 0x287a <HLCD4_voidClearDisplay+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2828:	6b 85       	ldd	r22, Y+11	; 0x0b
    282a:	7c 85       	ldd	r23, Y+12	; 0x0c
    282c:	8d 85       	ldd	r24, Y+13	; 0x0d
    282e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2830:	20 e0       	ldi	r18, 0x00	; 0
    2832:	30 e0       	ldi	r19, 0x00	; 0
    2834:	40 e2       	ldi	r20, 0x20	; 32
    2836:	51 e4       	ldi	r21, 0x41	; 65
    2838:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    283c:	dc 01       	movw	r26, r24
    283e:	cb 01       	movw	r24, r22
    2840:	bc 01       	movw	r22, r24
    2842:	cd 01       	movw	r24, r26
    2844:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2848:	dc 01       	movw	r26, r24
    284a:	cb 01       	movw	r24, r22
    284c:	9e 83       	std	Y+6, r25	; 0x06
    284e:	8d 83       	std	Y+5, r24	; 0x05
    2850:	0f c0       	rjmp	.+30     	; 0x2870 <HLCD4_voidClearDisplay+0xd2>
    2852:	88 ec       	ldi	r24, 0xC8	; 200
    2854:	90 e0       	ldi	r25, 0x00	; 0
    2856:	9c 83       	std	Y+4, r25	; 0x04
    2858:	8b 83       	std	Y+3, r24	; 0x03
    285a:	8b 81       	ldd	r24, Y+3	; 0x03
    285c:	9c 81       	ldd	r25, Y+4	; 0x04
    285e:	01 97       	sbiw	r24, 0x01	; 1
    2860:	f1 f7       	brne	.-4      	; 0x285e <HLCD4_voidClearDisplay+0xc0>
    2862:	9c 83       	std	Y+4, r25	; 0x04
    2864:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2866:	8d 81       	ldd	r24, Y+5	; 0x05
    2868:	9e 81       	ldd	r25, Y+6	; 0x06
    286a:	01 97       	sbiw	r24, 0x01	; 1
    286c:	9e 83       	std	Y+6, r25	; 0x06
    286e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2870:	8d 81       	ldd	r24, Y+5	; 0x05
    2872:	9e 81       	ldd	r25, Y+6	; 0x06
    2874:	00 97       	sbiw	r24, 0x00	; 0
    2876:	69 f7       	brne	.-38     	; 0x2852 <HLCD4_voidClearDisplay+0xb4>
    2878:	14 c0       	rjmp	.+40     	; 0x28a2 <HLCD4_voidClearDisplay+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    287a:	6f 81       	ldd	r22, Y+7	; 0x07
    287c:	78 85       	ldd	r23, Y+8	; 0x08
    287e:	89 85       	ldd	r24, Y+9	; 0x09
    2880:	9a 85       	ldd	r25, Y+10	; 0x0a
    2882:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2886:	dc 01       	movw	r26, r24
    2888:	cb 01       	movw	r24, r22
    288a:	9e 83       	std	Y+6, r25	; 0x06
    288c:	8d 83       	std	Y+5, r24	; 0x05
    288e:	8d 81       	ldd	r24, Y+5	; 0x05
    2890:	9e 81       	ldd	r25, Y+6	; 0x06
    2892:	9a 83       	std	Y+2, r25	; 0x02
    2894:	89 83       	std	Y+1, r24	; 0x01
    2896:	89 81       	ldd	r24, Y+1	; 0x01
    2898:	9a 81       	ldd	r25, Y+2	; 0x02
    289a:	01 97       	sbiw	r24, 0x01	; 1
    289c:	f1 f7       	brne	.-4      	; 0x289a <HLCD4_voidClearDisplay+0xfc>
    289e:	9a 83       	std	Y+2, r25	; 0x02
    28a0:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(2);
}
    28a2:	2e 96       	adiw	r28, 0x0e	; 14
    28a4:	0f b6       	in	r0, 0x3f	; 63
    28a6:	f8 94       	cli
    28a8:	de bf       	out	0x3e, r29	; 62
    28aa:	0f be       	out	0x3f, r0	; 63
    28ac:	cd bf       	out	0x3d, r28	; 61
    28ae:	cf 91       	pop	r28
    28b0:	df 91       	pop	r29
    28b2:	08 95       	ret

000028b4 <HLCD4_voidSendString>:

void HLCD4_voidSendString(u8 * A_Pu8String)
{
    28b4:	df 93       	push	r29
    28b6:	cf 93       	push	r28
    28b8:	00 d0       	rcall	.+0      	; 0x28ba <HLCD4_voidSendString+0x6>
    28ba:	0f 92       	push	r0
    28bc:	cd b7       	in	r28, 0x3d	; 61
    28be:	de b7       	in	r29, 0x3e	; 62
    28c0:	9b 83       	std	Y+3, r25	; 0x03
    28c2:	8a 83       	std	Y+2, r24	; 0x02
    u8 local_u8Couter=0;
    28c4:	19 82       	std	Y+1, r1	; 0x01
    28c6:	0e c0       	rjmp	.+28     	; 0x28e4 <HLCD4_voidSendString+0x30>
    while (A_Pu8String[local_u8Couter]!='\0')
    {
        HLCD4_voidSendData(A_Pu8String[local_u8Couter]);
    28c8:	89 81       	ldd	r24, Y+1	; 0x01
    28ca:	28 2f       	mov	r18, r24
    28cc:	30 e0       	ldi	r19, 0x00	; 0
    28ce:	8a 81       	ldd	r24, Y+2	; 0x02
    28d0:	9b 81       	ldd	r25, Y+3	; 0x03
    28d2:	fc 01       	movw	r30, r24
    28d4:	e2 0f       	add	r30, r18
    28d6:	f3 1f       	adc	r31, r19
    28d8:	80 81       	ld	r24, Z
    28da:	0e 94 66 0f 	call	0x1ecc	; 0x1ecc <HLCD4_voidSendData>
        local_u8Couter++;
    28de:	89 81       	ldd	r24, Y+1	; 0x01
    28e0:	8f 5f       	subi	r24, 0xFF	; 255
    28e2:	89 83       	std	Y+1, r24	; 0x01
}

void HLCD4_voidSendString(u8 * A_Pu8String)
{
    u8 local_u8Couter=0;
    while (A_Pu8String[local_u8Couter]!='\0')
    28e4:	89 81       	ldd	r24, Y+1	; 0x01
    28e6:	28 2f       	mov	r18, r24
    28e8:	30 e0       	ldi	r19, 0x00	; 0
    28ea:	8a 81       	ldd	r24, Y+2	; 0x02
    28ec:	9b 81       	ldd	r25, Y+3	; 0x03
    28ee:	fc 01       	movw	r30, r24
    28f0:	e2 0f       	add	r30, r18
    28f2:	f3 1f       	adc	r31, r19
    28f4:	80 81       	ld	r24, Z
    28f6:	88 23       	and	r24, r24
    28f8:	39 f7       	brne	.-50     	; 0x28c8 <HLCD4_voidSendString+0x14>
    {
        HLCD4_voidSendData(A_Pu8String[local_u8Couter]);
        local_u8Couter++;
    }
    
}
    28fa:	0f 90       	pop	r0
    28fc:	0f 90       	pop	r0
    28fe:	0f 90       	pop	r0
    2900:	cf 91       	pop	r28
    2902:	df 91       	pop	r29
    2904:	08 95       	ret

00002906 <HLCD4_voidGoToPos>:

void HLCD4_voidGoToPos(u8 A_u8RowNum,u8 A_u8ColNum)
{
    2906:	df 93       	push	r29
    2908:	cf 93       	push	r28
    290a:	cd b7       	in	r28, 0x3d	; 61
    290c:	de b7       	in	r29, 0x3e	; 62
    290e:	63 97       	sbiw	r28, 0x13	; 19
    2910:	0f b6       	in	r0, 0x3f	; 63
    2912:	f8 94       	cli
    2914:	de bf       	out	0x3e, r29	; 62
    2916:	0f be       	out	0x3f, r0	; 63
    2918:	cd bf       	out	0x3d, r28	; 61
    291a:	88 8b       	std	Y+16, r24	; 0x10
    291c:	69 8b       	std	Y+17, r22	; 0x11
    // _delay_ms(1);

    //*******************************//
    //Second method
	u8 local_u8Address;
    switch(A_u8RowNum)
    291e:	88 89       	ldd	r24, Y+16	; 0x10
    2920:	28 2f       	mov	r18, r24
    2922:	30 e0       	ldi	r19, 0x00	; 0
    2924:	3b 8b       	std	Y+19, r19	; 0x13
    2926:	2a 8b       	std	Y+18, r18	; 0x12
    2928:	8a 89       	ldd	r24, Y+18	; 0x12
    292a:	9b 89       	ldd	r25, Y+19	; 0x13
    292c:	81 30       	cpi	r24, 0x01	; 1
    292e:	91 05       	cpc	r25, r1
    2930:	31 f0       	breq	.+12     	; 0x293e <HLCD4_voidGoToPos+0x38>
    2932:	2a 89       	ldd	r18, Y+18	; 0x12
    2934:	3b 89       	ldd	r19, Y+19	; 0x13
    2936:	22 30       	cpi	r18, 0x02	; 2
    2938:	31 05       	cpc	r19, r1
    293a:	59 f0       	breq	.+22     	; 0x2952 <HLCD4_voidGoToPos+0x4c>
    293c:	13 c0       	rjmp	.+38     	; 0x2964 <HLCD4_voidGoToPos+0x5e>
    {
        case LCD_ROW_ONE:
        local_u8Address=FIRST_ROW_ADDRESS + A_u8ColNum -1;
    293e:	89 89       	ldd	r24, Y+17	; 0x11
    2940:	81 50       	subi	r24, 0x01	; 1
    2942:	8f 87       	std	Y+15, r24	; 0x0f
        SET_BIT(local_u8Address,PIN7);
    2944:	8f 85       	ldd	r24, Y+15	; 0x0f
    2946:	80 68       	ori	r24, 0x80	; 128
    2948:	8f 87       	std	Y+15, r24	; 0x0f
        HLCD4_voidSendCommand(local_u8Address);
    294a:	8f 85       	ldd	r24, Y+15	; 0x0f
    294c:	0e 94 cd 0d 	call	0x1b9a	; 0x1b9a <HLCD4_voidSendCommand>
    2950:	09 c0       	rjmp	.+18     	; 0x2964 <HLCD4_voidGoToPos+0x5e>
        break;

        case LCD_ROW_TWO:
        local_u8Address=SECOND_ROW_ADDRESS + A_u8ColNum;
    2952:	89 89       	ldd	r24, Y+17	; 0x11
    2954:	81 5c       	subi	r24, 0xC1	; 193
    2956:	8f 87       	std	Y+15, r24	; 0x0f
        SET_BIT(local_u8Address,PIN7);
    2958:	8f 85       	ldd	r24, Y+15	; 0x0f
    295a:	80 68       	ori	r24, 0x80	; 128
    295c:	8f 87       	std	Y+15, r24	; 0x0f
        HLCD4_voidSendCommand(local_u8Address);
    295e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2960:	0e 94 cd 0d 	call	0x1b9a	; 0x1b9a <HLCD4_voidSendCommand>
    2964:	80 e0       	ldi	r24, 0x00	; 0
    2966:	90 e0       	ldi	r25, 0x00	; 0
    2968:	a0 e8       	ldi	r26, 0x80	; 128
    296a:	bf e3       	ldi	r27, 0x3F	; 63
    296c:	8b 87       	std	Y+11, r24	; 0x0b
    296e:	9c 87       	std	Y+12, r25	; 0x0c
    2970:	ad 87       	std	Y+13, r26	; 0x0d
    2972:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2974:	6b 85       	ldd	r22, Y+11	; 0x0b
    2976:	7c 85       	ldd	r23, Y+12	; 0x0c
    2978:	8d 85       	ldd	r24, Y+13	; 0x0d
    297a:	9e 85       	ldd	r25, Y+14	; 0x0e
    297c:	20 e0       	ldi	r18, 0x00	; 0
    297e:	30 e0       	ldi	r19, 0x00	; 0
    2980:	4a ef       	ldi	r20, 0xFA	; 250
    2982:	54 e4       	ldi	r21, 0x44	; 68
    2984:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2988:	dc 01       	movw	r26, r24
    298a:	cb 01       	movw	r24, r22
    298c:	8f 83       	std	Y+7, r24	; 0x07
    298e:	98 87       	std	Y+8, r25	; 0x08
    2990:	a9 87       	std	Y+9, r26	; 0x09
    2992:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2994:	6f 81       	ldd	r22, Y+7	; 0x07
    2996:	78 85       	ldd	r23, Y+8	; 0x08
    2998:	89 85       	ldd	r24, Y+9	; 0x09
    299a:	9a 85       	ldd	r25, Y+10	; 0x0a
    299c:	20 e0       	ldi	r18, 0x00	; 0
    299e:	30 e0       	ldi	r19, 0x00	; 0
    29a0:	40 e8       	ldi	r20, 0x80	; 128
    29a2:	5f e3       	ldi	r21, 0x3F	; 63
    29a4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    29a8:	88 23       	and	r24, r24
    29aa:	2c f4       	brge	.+10     	; 0x29b6 <HLCD4_voidGoToPos+0xb0>
		__ticks = 1;
    29ac:	81 e0       	ldi	r24, 0x01	; 1
    29ae:	90 e0       	ldi	r25, 0x00	; 0
    29b0:	9e 83       	std	Y+6, r25	; 0x06
    29b2:	8d 83       	std	Y+5, r24	; 0x05
    29b4:	3f c0       	rjmp	.+126    	; 0x2a34 <HLCD4_voidGoToPos+0x12e>
	else if (__tmp > 65535)
    29b6:	6f 81       	ldd	r22, Y+7	; 0x07
    29b8:	78 85       	ldd	r23, Y+8	; 0x08
    29ba:	89 85       	ldd	r24, Y+9	; 0x09
    29bc:	9a 85       	ldd	r25, Y+10	; 0x0a
    29be:	20 e0       	ldi	r18, 0x00	; 0
    29c0:	3f ef       	ldi	r19, 0xFF	; 255
    29c2:	4f e7       	ldi	r20, 0x7F	; 127
    29c4:	57 e4       	ldi	r21, 0x47	; 71
    29c6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    29ca:	18 16       	cp	r1, r24
    29cc:	4c f5       	brge	.+82     	; 0x2a20 <HLCD4_voidGoToPos+0x11a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    29ce:	6b 85       	ldd	r22, Y+11	; 0x0b
    29d0:	7c 85       	ldd	r23, Y+12	; 0x0c
    29d2:	8d 85       	ldd	r24, Y+13	; 0x0d
    29d4:	9e 85       	ldd	r25, Y+14	; 0x0e
    29d6:	20 e0       	ldi	r18, 0x00	; 0
    29d8:	30 e0       	ldi	r19, 0x00	; 0
    29da:	40 e2       	ldi	r20, 0x20	; 32
    29dc:	51 e4       	ldi	r21, 0x41	; 65
    29de:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29e2:	dc 01       	movw	r26, r24
    29e4:	cb 01       	movw	r24, r22
    29e6:	bc 01       	movw	r22, r24
    29e8:	cd 01       	movw	r24, r26
    29ea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29ee:	dc 01       	movw	r26, r24
    29f0:	cb 01       	movw	r24, r22
    29f2:	9e 83       	std	Y+6, r25	; 0x06
    29f4:	8d 83       	std	Y+5, r24	; 0x05
    29f6:	0f c0       	rjmp	.+30     	; 0x2a16 <HLCD4_voidGoToPos+0x110>
    29f8:	88 ec       	ldi	r24, 0xC8	; 200
    29fa:	90 e0       	ldi	r25, 0x00	; 0
    29fc:	9c 83       	std	Y+4, r25	; 0x04
    29fe:	8b 83       	std	Y+3, r24	; 0x03
    2a00:	8b 81       	ldd	r24, Y+3	; 0x03
    2a02:	9c 81       	ldd	r25, Y+4	; 0x04
    2a04:	01 97       	sbiw	r24, 0x01	; 1
    2a06:	f1 f7       	brne	.-4      	; 0x2a04 <HLCD4_voidGoToPos+0xfe>
    2a08:	9c 83       	std	Y+4, r25	; 0x04
    2a0a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a0c:	8d 81       	ldd	r24, Y+5	; 0x05
    2a0e:	9e 81       	ldd	r25, Y+6	; 0x06
    2a10:	01 97       	sbiw	r24, 0x01	; 1
    2a12:	9e 83       	std	Y+6, r25	; 0x06
    2a14:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a16:	8d 81       	ldd	r24, Y+5	; 0x05
    2a18:	9e 81       	ldd	r25, Y+6	; 0x06
    2a1a:	00 97       	sbiw	r24, 0x00	; 0
    2a1c:	69 f7       	brne	.-38     	; 0x29f8 <HLCD4_voidGoToPos+0xf2>
    2a1e:	14 c0       	rjmp	.+40     	; 0x2a48 <HLCD4_voidGoToPos+0x142>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a20:	6f 81       	ldd	r22, Y+7	; 0x07
    2a22:	78 85       	ldd	r23, Y+8	; 0x08
    2a24:	89 85       	ldd	r24, Y+9	; 0x09
    2a26:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a28:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a2c:	dc 01       	movw	r26, r24
    2a2e:	cb 01       	movw	r24, r22
    2a30:	9e 83       	std	Y+6, r25	; 0x06
    2a32:	8d 83       	std	Y+5, r24	; 0x05
    2a34:	8d 81       	ldd	r24, Y+5	; 0x05
    2a36:	9e 81       	ldd	r25, Y+6	; 0x06
    2a38:	9a 83       	std	Y+2, r25	; 0x02
    2a3a:	89 83       	std	Y+1, r24	; 0x01
    2a3c:	89 81       	ldd	r24, Y+1	; 0x01
    2a3e:	9a 81       	ldd	r25, Y+2	; 0x02
    2a40:	01 97       	sbiw	r24, 0x01	; 1
    2a42:	f1 f7       	brne	.-4      	; 0x2a40 <HLCD4_voidGoToPos+0x13a>
    2a44:	9a 83       	std	Y+2, r25	; 0x02
    2a46:	89 83       	std	Y+1, r24	; 0x01
        break;

    }
    _delay_ms(1);

}
    2a48:	63 96       	adiw	r28, 0x13	; 19
    2a4a:	0f b6       	in	r0, 0x3f	; 63
    2a4c:	f8 94       	cli
    2a4e:	de bf       	out	0x3e, r29	; 62
    2a50:	0f be       	out	0x3f, r0	; 63
    2a52:	cd bf       	out	0x3d, r28	; 61
    2a54:	cf 91       	pop	r28
    2a56:	df 91       	pop	r29
    2a58:	08 95       	ret

00002a5a <HLCD4_voidDisplayNumber>:

void HLCD4_voidDisplayNumber(u32 A_u32Number)
{
    2a5a:	df 93       	push	r29
    2a5c:	cf 93       	push	r28
    2a5e:	00 d0       	rcall	.+0      	; 0x2a60 <HLCD4_voidDisplayNumber+0x6>
    2a60:	00 d0       	rcall	.+0      	; 0x2a62 <HLCD4_voidDisplayNumber+0x8>
    2a62:	cd b7       	in	r28, 0x3d	; 61
    2a64:	de b7       	in	r29, 0x3e	; 62
    2a66:	9c 83       	std	Y+4, r25	; 0x04
    2a68:	8b 83       	std	Y+3, r24	; 0x03
    // u8 local_u8NumToStr[100];
    // itoa(A_u32Number,local_u8NumToStr,10);
    // HLCD4_voidSendString(local_u8NumToStr);
    //****************************************************//
    //third method: it will deal with zero unlike the first method so it's not problem here
    u32 local_u32Number=1;
    2a6a:	81 e0       	ldi	r24, 0x01	; 1
    2a6c:	90 e0       	ldi	r25, 0x00	; 0
    2a6e:	9a 83       	std	Y+2, r25	; 0x02
    2a70:	89 83       	std	Y+1, r24	; 0x01
    if(A_u32Number==0)
    2a72:	8b 81       	ldd	r24, Y+3	; 0x03
    2a74:	9c 81       	ldd	r25, Y+4	; 0x04
    2a76:	00 97       	sbiw	r24, 0x00	; 0
    2a78:	31 f5       	brne	.+76     	; 0x2ac6 <HLCD4_voidDisplayNumber+0x6c>
    {
        HLCD4_voidSendData('0');
    2a7a:	80 e3       	ldi	r24, 0x30	; 48
    2a7c:	0e 94 66 0f 	call	0x1ecc	; 0x1ecc <HLCD4_voidSendData>
    2a80:	22 c0       	rjmp	.+68     	; 0x2ac6 <HLCD4_voidDisplayNumber+0x6c>
    }   
    while(A_u32Number !=0)
    {
            local_u32Number=((local_u32Number * 10)+(A_u32Number%10));
    2a82:	89 81       	ldd	r24, Y+1	; 0x01
    2a84:	9a 81       	ldd	r25, Y+2	; 0x02
    2a86:	9c 01       	movw	r18, r24
    2a88:	22 0f       	add	r18, r18
    2a8a:	33 1f       	adc	r19, r19
    2a8c:	c9 01       	movw	r24, r18
    2a8e:	88 0f       	add	r24, r24
    2a90:	99 1f       	adc	r25, r25
    2a92:	88 0f       	add	r24, r24
    2a94:	99 1f       	adc	r25, r25
    2a96:	f9 01       	movw	r30, r18
    2a98:	e8 0f       	add	r30, r24
    2a9a:	f9 1f       	adc	r31, r25
    2a9c:	8b 81       	ldd	r24, Y+3	; 0x03
    2a9e:	9c 81       	ldd	r25, Y+4	; 0x04
    2aa0:	2a e0       	ldi	r18, 0x0A	; 10
    2aa2:	30 e0       	ldi	r19, 0x00	; 0
    2aa4:	b9 01       	movw	r22, r18
    2aa6:	0e 94 14 25 	call	0x4a28	; 0x4a28 <__udivmodhi4>
    2aaa:	8e 0f       	add	r24, r30
    2aac:	9f 1f       	adc	r25, r31
    2aae:	9a 83       	std	Y+2, r25	; 0x02
    2ab0:	89 83       	std	Y+1, r24	; 0x01
            A_u32Number=A_u32Number/10;
    2ab2:	8b 81       	ldd	r24, Y+3	; 0x03
    2ab4:	9c 81       	ldd	r25, Y+4	; 0x04
    2ab6:	2a e0       	ldi	r18, 0x0A	; 10
    2ab8:	30 e0       	ldi	r19, 0x00	; 0
    2aba:	b9 01       	movw	r22, r18
    2abc:	0e 94 14 25 	call	0x4a28	; 0x4a28 <__udivmodhi4>
    2ac0:	cb 01       	movw	r24, r22
    2ac2:	9c 83       	std	Y+4, r25	; 0x04
    2ac4:	8b 83       	std	Y+3, r24	; 0x03
    u32 local_u32Number=1;
    if(A_u32Number==0)
    {
        HLCD4_voidSendData('0');
    }   
    while(A_u32Number !=0)
    2ac6:	8b 81       	ldd	r24, Y+3	; 0x03
    2ac8:	9c 81       	ldd	r25, Y+4	; 0x04
    2aca:	00 97       	sbiw	r24, 0x00	; 0
    2acc:	d1 f6       	brne	.-76     	; 0x2a82 <HLCD4_voidDisplayNumber+0x28>
    2ace:	14 c0       	rjmp	.+40     	; 0x2af8 <HLCD4_voidDisplayNumber+0x9e>
            A_u32Number=A_u32Number/10;

    }
    while (local_u32Number!=1)
    {
        HLCD4_voidSendData((local_u32Number%10)+48);
    2ad0:	89 81       	ldd	r24, Y+1	; 0x01
    2ad2:	9a 81       	ldd	r25, Y+2	; 0x02
    2ad4:	2a e0       	ldi	r18, 0x0A	; 10
    2ad6:	30 e0       	ldi	r19, 0x00	; 0
    2ad8:	b9 01       	movw	r22, r18
    2ada:	0e 94 14 25 	call	0x4a28	; 0x4a28 <__udivmodhi4>
    2ade:	80 5d       	subi	r24, 0xD0	; 208
    2ae0:	0e 94 66 0f 	call	0x1ecc	; 0x1ecc <HLCD4_voidSendData>
        local_u32Number=local_u32Number/10;
    2ae4:	89 81       	ldd	r24, Y+1	; 0x01
    2ae6:	9a 81       	ldd	r25, Y+2	; 0x02
    2ae8:	2a e0       	ldi	r18, 0x0A	; 10
    2aea:	30 e0       	ldi	r19, 0x00	; 0
    2aec:	b9 01       	movw	r22, r18
    2aee:	0e 94 14 25 	call	0x4a28	; 0x4a28 <__udivmodhi4>
    2af2:	cb 01       	movw	r24, r22
    2af4:	9a 83       	std	Y+2, r25	; 0x02
    2af6:	89 83       	std	Y+1, r24	; 0x01
    {
            local_u32Number=((local_u32Number * 10)+(A_u32Number%10));
            A_u32Number=A_u32Number/10;

    }
    while (local_u32Number!=1)
    2af8:	89 81       	ldd	r24, Y+1	; 0x01
    2afa:	9a 81       	ldd	r25, Y+2	; 0x02
    2afc:	81 30       	cpi	r24, 0x01	; 1
    2afe:	91 05       	cpc	r25, r1
    2b00:	39 f7       	brne	.-50     	; 0x2ad0 <HLCD4_voidDisplayNumber+0x76>
    {
        HLCD4_voidSendData((local_u32Number%10)+48);
        local_u32Number=local_u32Number/10;
    }
}
    2b02:	0f 90       	pop	r0
    2b04:	0f 90       	pop	r0
    2b06:	0f 90       	pop	r0
    2b08:	0f 90       	pop	r0
    2b0a:	cf 91       	pop	r28
    2b0c:	df 91       	pop	r29
    2b0e:	08 95       	ret

00002b10 <HLCD4_voidStoreCustomChar>:

void HLCD4_voidStoreCustomChar(u8 * A_u8Pattern,u8 A_u8CGRAMIndex)
{
    2b10:	df 93       	push	r29
    2b12:	cf 93       	push	r28
    2b14:	cd b7       	in	r28, 0x3d	; 61
    2b16:	de b7       	in	r29, 0x3e	; 62
    2b18:	ab 97       	sbiw	r28, 0x2b	; 43
    2b1a:	0f b6       	in	r0, 0x3f	; 63
    2b1c:	f8 94       	cli
    2b1e:	de bf       	out	0x3e, r29	; 62
    2b20:	0f be       	out	0x3f, r0	; 63
    2b22:	cd bf       	out	0x3d, r28	; 61
    2b24:	9a a7       	std	Y+42, r25	; 0x2a
    2b26:	89 a7       	std	Y+41, r24	; 0x29
    2b28:	6b a7       	std	Y+43, r22	; 0x2b
    u8 local_u8Address;
    if(A_u8CGRAMIndex<8)
    2b2a:	8b a5       	ldd	r24, Y+43	; 0x2b
    2b2c:	88 30       	cpi	r24, 0x08	; 8
    2b2e:	08 f0       	brcs	.+2      	; 0x2b32 <HLCD4_voidStoreCustomChar+0x22>
    2b30:	e5 c0       	rjmp	.+458    	; 0x2cfc <HLCD4_voidStoreCustomChar+0x1ec>
    {
        A_u8CGRAMIndex=A_u8CGRAMIndex*8;
    2b32:	8b a5       	ldd	r24, Y+43	; 0x2b
    2b34:	88 2f       	mov	r24, r24
    2b36:	90 e0       	ldi	r25, 0x00	; 0
    2b38:	88 0f       	add	r24, r24
    2b3a:	99 1f       	adc	r25, r25
    2b3c:	88 0f       	add	r24, r24
    2b3e:	99 1f       	adc	r25, r25
    2b40:	88 0f       	add	r24, r24
    2b42:	99 1f       	adc	r25, r25
    2b44:	8b a7       	std	Y+43, r24	; 0x2b
        SET_BIT(A_u8CGRAMIndex,PIN6);
    2b46:	8b a5       	ldd	r24, Y+43	; 0x2b
    2b48:	80 64       	ori	r24, 0x40	; 64
    2b4a:	8b a7       	std	Y+43, r24	; 0x2b
        CLR_BIT(A_u8CGRAMIndex,PIN7);
    2b4c:	8b a5       	ldd	r24, Y+43	; 0x2b
    2b4e:	8f 77       	andi	r24, 0x7F	; 127
    2b50:	8b a7       	std	Y+43, r24	; 0x2b
        HLCD4_voidSendCommand(A_u8CGRAMIndex);
    2b52:	8b a5       	ldd	r24, Y+43	; 0x2b
    2b54:	0e 94 cd 0d 	call	0x1b9a	; 0x1b9a <HLCD4_voidSendCommand>
        for(u8 i=0;i<8;i++)
    2b58:	1f a2       	std	Y+39, r1	; 0x27
    2b5a:	cc c0       	rjmp	.+408    	; 0x2cf4 <HLCD4_voidStoreCustomChar+0x1e4>
        {
            HLCD4_voidSendData(A_u8Pattern[i]);
    2b5c:	8f a1       	ldd	r24, Y+39	; 0x27
    2b5e:	28 2f       	mov	r18, r24
    2b60:	30 e0       	ldi	r19, 0x00	; 0
    2b62:	89 a5       	ldd	r24, Y+41	; 0x29
    2b64:	9a a5       	ldd	r25, Y+42	; 0x2a
    2b66:	fc 01       	movw	r30, r24
    2b68:	e2 0f       	add	r30, r18
    2b6a:	f3 1f       	adc	r31, r19
    2b6c:	80 81       	ld	r24, Z
    2b6e:	0e 94 66 0f 	call	0x1ecc	; 0x1ecc <HLCD4_voidSendData>
    2b72:	80 e0       	ldi	r24, 0x00	; 0
    2b74:	90 e0       	ldi	r25, 0x00	; 0
    2b76:	a0 e7       	ldi	r26, 0x70	; 112
    2b78:	b2 e4       	ldi	r27, 0x42	; 66
    2b7a:	8b a3       	std	Y+35, r24	; 0x23
    2b7c:	9c a3       	std	Y+36, r25	; 0x24
    2b7e:	ad a3       	std	Y+37, r26	; 0x25
    2b80:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2b82:	6b a1       	ldd	r22, Y+35	; 0x23
    2b84:	7c a1       	ldd	r23, Y+36	; 0x24
    2b86:	8d a1       	ldd	r24, Y+37	; 0x25
    2b88:	9e a1       	ldd	r25, Y+38	; 0x26
    2b8a:	2b ea       	ldi	r18, 0xAB	; 171
    2b8c:	3a ea       	ldi	r19, 0xAA	; 170
    2b8e:	4a e2       	ldi	r20, 0x2A	; 42
    2b90:	50 e4       	ldi	r21, 0x40	; 64
    2b92:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b96:	dc 01       	movw	r26, r24
    2b98:	cb 01       	movw	r24, r22
    2b9a:	8f 8f       	std	Y+31, r24	; 0x1f
    2b9c:	98 a3       	std	Y+32, r25	; 0x20
    2b9e:	a9 a3       	std	Y+33, r26	; 0x21
    2ba0:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    2ba2:	6f 8d       	ldd	r22, Y+31	; 0x1f
    2ba4:	78 a1       	ldd	r23, Y+32	; 0x20
    2ba6:	89 a1       	ldd	r24, Y+33	; 0x21
    2ba8:	9a a1       	ldd	r25, Y+34	; 0x22
    2baa:	20 e0       	ldi	r18, 0x00	; 0
    2bac:	30 e0       	ldi	r19, 0x00	; 0
    2bae:	40 e8       	ldi	r20, 0x80	; 128
    2bb0:	5f e3       	ldi	r21, 0x3F	; 63
    2bb2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2bb6:	88 23       	and	r24, r24
    2bb8:	1c f4       	brge	.+6      	; 0x2bc0 <HLCD4_voidStoreCustomChar+0xb0>
		__ticks = 1;
    2bba:	81 e0       	ldi	r24, 0x01	; 1
    2bbc:	8e 8f       	std	Y+30, r24	; 0x1e
    2bbe:	91 c0       	rjmp	.+290    	; 0x2ce2 <HLCD4_voidStoreCustomChar+0x1d2>
	else if (__tmp > 255)
    2bc0:	6f 8d       	ldd	r22, Y+31	; 0x1f
    2bc2:	78 a1       	ldd	r23, Y+32	; 0x20
    2bc4:	89 a1       	ldd	r24, Y+33	; 0x21
    2bc6:	9a a1       	ldd	r25, Y+34	; 0x22
    2bc8:	20 e0       	ldi	r18, 0x00	; 0
    2bca:	30 e0       	ldi	r19, 0x00	; 0
    2bcc:	4f e7       	ldi	r20, 0x7F	; 127
    2bce:	53 e4       	ldi	r21, 0x43	; 67
    2bd0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2bd4:	18 16       	cp	r1, r24
    2bd6:	0c f0       	brlt	.+2      	; 0x2bda <HLCD4_voidStoreCustomChar+0xca>
    2bd8:	7b c0       	rjmp	.+246    	; 0x2cd0 <HLCD4_voidStoreCustomChar+0x1c0>
	{
		_delay_ms(__us / 1000.0);
    2bda:	6b a1       	ldd	r22, Y+35	; 0x23
    2bdc:	7c a1       	ldd	r23, Y+36	; 0x24
    2bde:	8d a1       	ldd	r24, Y+37	; 0x25
    2be0:	9e a1       	ldd	r25, Y+38	; 0x26
    2be2:	20 e0       	ldi	r18, 0x00	; 0
    2be4:	30 e0       	ldi	r19, 0x00	; 0
    2be6:	4a e7       	ldi	r20, 0x7A	; 122
    2be8:	54 e4       	ldi	r21, 0x44	; 68
    2bea:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2bee:	dc 01       	movw	r26, r24
    2bf0:	cb 01       	movw	r24, r22
    2bf2:	8a 8f       	std	Y+26, r24	; 0x1a
    2bf4:	9b 8f       	std	Y+27, r25	; 0x1b
    2bf6:	ac 8f       	std	Y+28, r26	; 0x1c
    2bf8:	bd 8f       	std	Y+29, r27	; 0x1d
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2bfa:	6a 8d       	ldd	r22, Y+26	; 0x1a
    2bfc:	7b 8d       	ldd	r23, Y+27	; 0x1b
    2bfe:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2c00:	9d 8d       	ldd	r25, Y+29	; 0x1d
    2c02:	20 e0       	ldi	r18, 0x00	; 0
    2c04:	30 e0       	ldi	r19, 0x00	; 0
    2c06:	4a ef       	ldi	r20, 0xFA	; 250
    2c08:	54 e4       	ldi	r21, 0x44	; 68
    2c0a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c0e:	dc 01       	movw	r26, r24
    2c10:	cb 01       	movw	r24, r22
    2c12:	8e 8b       	std	Y+22, r24	; 0x16
    2c14:	9f 8b       	std	Y+23, r25	; 0x17
    2c16:	a8 8f       	std	Y+24, r26	; 0x18
    2c18:	b9 8f       	std	Y+25, r27	; 0x19
	if (__tmp < 1.0)
    2c1a:	6e 89       	ldd	r22, Y+22	; 0x16
    2c1c:	7f 89       	ldd	r23, Y+23	; 0x17
    2c1e:	88 8d       	ldd	r24, Y+24	; 0x18
    2c20:	99 8d       	ldd	r25, Y+25	; 0x19
    2c22:	20 e0       	ldi	r18, 0x00	; 0
    2c24:	30 e0       	ldi	r19, 0x00	; 0
    2c26:	40 e8       	ldi	r20, 0x80	; 128
    2c28:	5f e3       	ldi	r21, 0x3F	; 63
    2c2a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2c2e:	88 23       	and	r24, r24
    2c30:	2c f4       	brge	.+10     	; 0x2c3c <HLCD4_voidStoreCustomChar+0x12c>
		__ticks = 1;
    2c32:	81 e0       	ldi	r24, 0x01	; 1
    2c34:	90 e0       	ldi	r25, 0x00	; 0
    2c36:	9d 8b       	std	Y+21, r25	; 0x15
    2c38:	8c 8b       	std	Y+20, r24	; 0x14
    2c3a:	3f c0       	rjmp	.+126    	; 0x2cba <HLCD4_voidStoreCustomChar+0x1aa>
	else if (__tmp > 65535)
    2c3c:	6e 89       	ldd	r22, Y+22	; 0x16
    2c3e:	7f 89       	ldd	r23, Y+23	; 0x17
    2c40:	88 8d       	ldd	r24, Y+24	; 0x18
    2c42:	99 8d       	ldd	r25, Y+25	; 0x19
    2c44:	20 e0       	ldi	r18, 0x00	; 0
    2c46:	3f ef       	ldi	r19, 0xFF	; 255
    2c48:	4f e7       	ldi	r20, 0x7F	; 127
    2c4a:	57 e4       	ldi	r21, 0x47	; 71
    2c4c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2c50:	18 16       	cp	r1, r24
    2c52:	4c f5       	brge	.+82     	; 0x2ca6 <HLCD4_voidStoreCustomChar+0x196>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c54:	6a 8d       	ldd	r22, Y+26	; 0x1a
    2c56:	7b 8d       	ldd	r23, Y+27	; 0x1b
    2c58:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2c5a:	9d 8d       	ldd	r25, Y+29	; 0x1d
    2c5c:	20 e0       	ldi	r18, 0x00	; 0
    2c5e:	30 e0       	ldi	r19, 0x00	; 0
    2c60:	40 e2       	ldi	r20, 0x20	; 32
    2c62:	51 e4       	ldi	r21, 0x41	; 65
    2c64:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c68:	dc 01       	movw	r26, r24
    2c6a:	cb 01       	movw	r24, r22
    2c6c:	bc 01       	movw	r22, r24
    2c6e:	cd 01       	movw	r24, r26
    2c70:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c74:	dc 01       	movw	r26, r24
    2c76:	cb 01       	movw	r24, r22
    2c78:	9d 8b       	std	Y+21, r25	; 0x15
    2c7a:	8c 8b       	std	Y+20, r24	; 0x14
    2c7c:	0f c0       	rjmp	.+30     	; 0x2c9c <HLCD4_voidStoreCustomChar+0x18c>
    2c7e:	88 ec       	ldi	r24, 0xC8	; 200
    2c80:	90 e0       	ldi	r25, 0x00	; 0
    2c82:	9b 8b       	std	Y+19, r25	; 0x13
    2c84:	8a 8b       	std	Y+18, r24	; 0x12
    2c86:	8a 89       	ldd	r24, Y+18	; 0x12
    2c88:	9b 89       	ldd	r25, Y+19	; 0x13
    2c8a:	01 97       	sbiw	r24, 0x01	; 1
    2c8c:	f1 f7       	brne	.-4      	; 0x2c8a <HLCD4_voidStoreCustomChar+0x17a>
    2c8e:	9b 8b       	std	Y+19, r25	; 0x13
    2c90:	8a 8b       	std	Y+18, r24	; 0x12
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c92:	8c 89       	ldd	r24, Y+20	; 0x14
    2c94:	9d 89       	ldd	r25, Y+21	; 0x15
    2c96:	01 97       	sbiw	r24, 0x01	; 1
    2c98:	9d 8b       	std	Y+21, r25	; 0x15
    2c9a:	8c 8b       	std	Y+20, r24	; 0x14
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c9c:	8c 89       	ldd	r24, Y+20	; 0x14
    2c9e:	9d 89       	ldd	r25, Y+21	; 0x15
    2ca0:	00 97       	sbiw	r24, 0x00	; 0
    2ca2:	69 f7       	brne	.-38     	; 0x2c7e <HLCD4_voidStoreCustomChar+0x16e>
    2ca4:	24 c0       	rjmp	.+72     	; 0x2cee <HLCD4_voidStoreCustomChar+0x1de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ca6:	6e 89       	ldd	r22, Y+22	; 0x16
    2ca8:	7f 89       	ldd	r23, Y+23	; 0x17
    2caa:	88 8d       	ldd	r24, Y+24	; 0x18
    2cac:	99 8d       	ldd	r25, Y+25	; 0x19
    2cae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2cb2:	dc 01       	movw	r26, r24
    2cb4:	cb 01       	movw	r24, r22
    2cb6:	9d 8b       	std	Y+21, r25	; 0x15
    2cb8:	8c 8b       	std	Y+20, r24	; 0x14
    2cba:	8c 89       	ldd	r24, Y+20	; 0x14
    2cbc:	9d 89       	ldd	r25, Y+21	; 0x15
    2cbe:	99 8b       	std	Y+17, r25	; 0x11
    2cc0:	88 8b       	std	Y+16, r24	; 0x10
    2cc2:	88 89       	ldd	r24, Y+16	; 0x10
    2cc4:	99 89       	ldd	r25, Y+17	; 0x11
    2cc6:	01 97       	sbiw	r24, 0x01	; 1
    2cc8:	f1 f7       	brne	.-4      	; 0x2cc6 <HLCD4_voidStoreCustomChar+0x1b6>
    2cca:	99 8b       	std	Y+17, r25	; 0x11
    2ccc:	88 8b       	std	Y+16, r24	; 0x10
    2cce:	0f c0       	rjmp	.+30     	; 0x2cee <HLCD4_voidStoreCustomChar+0x1de>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2cd0:	6f 8d       	ldd	r22, Y+31	; 0x1f
    2cd2:	78 a1       	ldd	r23, Y+32	; 0x20
    2cd4:	89 a1       	ldd	r24, Y+33	; 0x21
    2cd6:	9a a1       	ldd	r25, Y+34	; 0x22
    2cd8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2cdc:	dc 01       	movw	r26, r24
    2cde:	cb 01       	movw	r24, r22
    2ce0:	8e 8f       	std	Y+30, r24	; 0x1e
    2ce2:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2ce4:	8f 87       	std	Y+15, r24	; 0x0f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2ce6:	8f 85       	ldd	r24, Y+15	; 0x0f
    2ce8:	8a 95       	dec	r24
    2cea:	f1 f7       	brne	.-4      	; 0x2ce8 <HLCD4_voidStoreCustomChar+0x1d8>
    2cec:	8f 87       	std	Y+15, r24	; 0x0f
    {
        A_u8CGRAMIndex=A_u8CGRAMIndex*8;
        SET_BIT(A_u8CGRAMIndex,PIN6);
        CLR_BIT(A_u8CGRAMIndex,PIN7);
        HLCD4_voidSendCommand(A_u8CGRAMIndex);
        for(u8 i=0;i<8;i++)
    2cee:	8f a1       	ldd	r24, Y+39	; 0x27
    2cf0:	8f 5f       	subi	r24, 0xFF	; 255
    2cf2:	8f a3       	std	Y+39, r24	; 0x27
    2cf4:	8f a1       	ldd	r24, Y+39	; 0x27
    2cf6:	88 30       	cpi	r24, 0x08	; 8
    2cf8:	08 f4       	brcc	.+2      	; 0x2cfc <HLCD4_voidStoreCustomChar+0x1ec>
    2cfa:	30 cf       	rjmp	.-416    	; 0x2b5c <HLCD4_voidStoreCustomChar+0x4c>
        {
            HLCD4_voidSendData(A_u8Pattern[i]);
            _delay_us(60);
        }
    }
    HLCD4_voidSendCommand(RETURN_HOME);
    2cfc:	82 e0       	ldi	r24, 0x02	; 2
    2cfe:	0e 94 cd 0d 	call	0x1b9a	; 0x1b9a <HLCD4_voidSendCommand>
    2d02:	80 e0       	ldi	r24, 0x00	; 0
    2d04:	90 e0       	ldi	r25, 0x00	; 0
    2d06:	a0 e0       	ldi	r26, 0x00	; 0
    2d08:	b0 e4       	ldi	r27, 0x40	; 64
    2d0a:	8b 87       	std	Y+11, r24	; 0x0b
    2d0c:	9c 87       	std	Y+12, r25	; 0x0c
    2d0e:	ad 87       	std	Y+13, r26	; 0x0d
    2d10:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2d12:	6b 85       	ldd	r22, Y+11	; 0x0b
    2d14:	7c 85       	ldd	r23, Y+12	; 0x0c
    2d16:	8d 85       	ldd	r24, Y+13	; 0x0d
    2d18:	9e 85       	ldd	r25, Y+14	; 0x0e
    2d1a:	20 e0       	ldi	r18, 0x00	; 0
    2d1c:	30 e0       	ldi	r19, 0x00	; 0
    2d1e:	4a ef       	ldi	r20, 0xFA	; 250
    2d20:	54 e4       	ldi	r21, 0x44	; 68
    2d22:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d26:	dc 01       	movw	r26, r24
    2d28:	cb 01       	movw	r24, r22
    2d2a:	8f 83       	std	Y+7, r24	; 0x07
    2d2c:	98 87       	std	Y+8, r25	; 0x08
    2d2e:	a9 87       	std	Y+9, r26	; 0x09
    2d30:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2d32:	6f 81       	ldd	r22, Y+7	; 0x07
    2d34:	78 85       	ldd	r23, Y+8	; 0x08
    2d36:	89 85       	ldd	r24, Y+9	; 0x09
    2d38:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d3a:	20 e0       	ldi	r18, 0x00	; 0
    2d3c:	30 e0       	ldi	r19, 0x00	; 0
    2d3e:	40 e8       	ldi	r20, 0x80	; 128
    2d40:	5f e3       	ldi	r21, 0x3F	; 63
    2d42:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2d46:	88 23       	and	r24, r24
    2d48:	2c f4       	brge	.+10     	; 0x2d54 <HLCD4_voidStoreCustomChar+0x244>
		__ticks = 1;
    2d4a:	81 e0       	ldi	r24, 0x01	; 1
    2d4c:	90 e0       	ldi	r25, 0x00	; 0
    2d4e:	9e 83       	std	Y+6, r25	; 0x06
    2d50:	8d 83       	std	Y+5, r24	; 0x05
    2d52:	3f c0       	rjmp	.+126    	; 0x2dd2 <HLCD4_voidStoreCustomChar+0x2c2>
	else if (__tmp > 65535)
    2d54:	6f 81       	ldd	r22, Y+7	; 0x07
    2d56:	78 85       	ldd	r23, Y+8	; 0x08
    2d58:	89 85       	ldd	r24, Y+9	; 0x09
    2d5a:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d5c:	20 e0       	ldi	r18, 0x00	; 0
    2d5e:	3f ef       	ldi	r19, 0xFF	; 255
    2d60:	4f e7       	ldi	r20, 0x7F	; 127
    2d62:	57 e4       	ldi	r21, 0x47	; 71
    2d64:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2d68:	18 16       	cp	r1, r24
    2d6a:	4c f5       	brge	.+82     	; 0x2dbe <HLCD4_voidStoreCustomChar+0x2ae>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d6c:	6b 85       	ldd	r22, Y+11	; 0x0b
    2d6e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2d70:	8d 85       	ldd	r24, Y+13	; 0x0d
    2d72:	9e 85       	ldd	r25, Y+14	; 0x0e
    2d74:	20 e0       	ldi	r18, 0x00	; 0
    2d76:	30 e0       	ldi	r19, 0x00	; 0
    2d78:	40 e2       	ldi	r20, 0x20	; 32
    2d7a:	51 e4       	ldi	r21, 0x41	; 65
    2d7c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d80:	dc 01       	movw	r26, r24
    2d82:	cb 01       	movw	r24, r22
    2d84:	bc 01       	movw	r22, r24
    2d86:	cd 01       	movw	r24, r26
    2d88:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d8c:	dc 01       	movw	r26, r24
    2d8e:	cb 01       	movw	r24, r22
    2d90:	9e 83       	std	Y+6, r25	; 0x06
    2d92:	8d 83       	std	Y+5, r24	; 0x05
    2d94:	0f c0       	rjmp	.+30     	; 0x2db4 <HLCD4_voidStoreCustomChar+0x2a4>
    2d96:	88 ec       	ldi	r24, 0xC8	; 200
    2d98:	90 e0       	ldi	r25, 0x00	; 0
    2d9a:	9c 83       	std	Y+4, r25	; 0x04
    2d9c:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2d9e:	8b 81       	ldd	r24, Y+3	; 0x03
    2da0:	9c 81       	ldd	r25, Y+4	; 0x04
    2da2:	01 97       	sbiw	r24, 0x01	; 1
    2da4:	f1 f7       	brne	.-4      	; 0x2da2 <HLCD4_voidStoreCustomChar+0x292>
    2da6:	9c 83       	std	Y+4, r25	; 0x04
    2da8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2daa:	8d 81       	ldd	r24, Y+5	; 0x05
    2dac:	9e 81       	ldd	r25, Y+6	; 0x06
    2dae:	01 97       	sbiw	r24, 0x01	; 1
    2db0:	9e 83       	std	Y+6, r25	; 0x06
    2db2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2db4:	8d 81       	ldd	r24, Y+5	; 0x05
    2db6:	9e 81       	ldd	r25, Y+6	; 0x06
    2db8:	00 97       	sbiw	r24, 0x00	; 0
    2dba:	69 f7       	brne	.-38     	; 0x2d96 <HLCD4_voidStoreCustomChar+0x286>
    2dbc:	14 c0       	rjmp	.+40     	; 0x2de6 <HLCD4_voidStoreCustomChar+0x2d6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2dbe:	6f 81       	ldd	r22, Y+7	; 0x07
    2dc0:	78 85       	ldd	r23, Y+8	; 0x08
    2dc2:	89 85       	ldd	r24, Y+9	; 0x09
    2dc4:	9a 85       	ldd	r25, Y+10	; 0x0a
    2dc6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2dca:	dc 01       	movw	r26, r24
    2dcc:	cb 01       	movw	r24, r22
    2dce:	9e 83       	std	Y+6, r25	; 0x06
    2dd0:	8d 83       	std	Y+5, r24	; 0x05
    2dd2:	8d 81       	ldd	r24, Y+5	; 0x05
    2dd4:	9e 81       	ldd	r25, Y+6	; 0x06
    2dd6:	9a 83       	std	Y+2, r25	; 0x02
    2dd8:	89 83       	std	Y+1, r24	; 0x01
    2dda:	89 81       	ldd	r24, Y+1	; 0x01
    2ddc:	9a 81       	ldd	r25, Y+2	; 0x02
    2dde:	01 97       	sbiw	r24, 0x01	; 1
    2de0:	f1 f7       	brne	.-4      	; 0x2dde <HLCD4_voidStoreCustomChar+0x2ce>
    2de2:	9a 83       	std	Y+2, r25	; 0x02
    2de4:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(2);

}
    2de6:	ab 96       	adiw	r28, 0x2b	; 43
    2de8:	0f b6       	in	r0, 0x3f	; 63
    2dea:	f8 94       	cli
    2dec:	de bf       	out	0x3e, r29	; 62
    2dee:	0f be       	out	0x3f, r0	; 63
    2df0:	cd bf       	out	0x3d, r28	; 61
    2df2:	cf 91       	pop	r28
    2df4:	df 91       	pop	r29
    2df6:	08 95       	ret

00002df8 <HLCD4_voidDisplayCustomChar>:

void HLCD4_voidDisplayCustomChar(u8 A_u8CGRAMIndex,u8 A_u8Row,u8 A_u8Col)
{
    2df8:	df 93       	push	r29
    2dfa:	cf 93       	push	r28
    2dfc:	00 d0       	rcall	.+0      	; 0x2dfe <HLCD4_voidDisplayCustomChar+0x6>
    2dfe:	0f 92       	push	r0
    2e00:	cd b7       	in	r28, 0x3d	; 61
    2e02:	de b7       	in	r29, 0x3e	; 62
    2e04:	89 83       	std	Y+1, r24	; 0x01
    2e06:	6a 83       	std	Y+2, r22	; 0x02
    2e08:	4b 83       	std	Y+3, r20	; 0x03
    HLCD4_voidGoToPos(A_u8Row,A_u8Col);
    2e0a:	8a 81       	ldd	r24, Y+2	; 0x02
    2e0c:	6b 81       	ldd	r22, Y+3	; 0x03
    2e0e:	0e 94 83 14 	call	0x2906	; 0x2906 <HLCD4_voidGoToPos>
    HLCD4_voidSendData(A_u8CGRAMIndex);
    2e12:	89 81       	ldd	r24, Y+1	; 0x01
    2e14:	0e 94 66 0f 	call	0x1ecc	; 0x1ecc <HLCD4_voidSendData>
    2e18:	0f 90       	pop	r0
    2e1a:	0f 90       	pop	r0
    2e1c:	0f 90       	pop	r0
    2e1e:	cf 91       	pop	r28
    2e20:	df 91       	pop	r29
    2e22:	08 95       	ret

00002e24 <HLCD8_voidSendCommand>:
#define F_CPU 8000000UL
#include <math.h>
#include <stdlib.h>

void HLCD8_voidSendCommand(u8 A_u8Command)
{
    2e24:	df 93       	push	r29
    2e26:	cf 93       	push	r28
    2e28:	cd b7       	in	r28, 0x3d	; 61
    2e2a:	de b7       	in	r29, 0x3e	; 62
    2e2c:	2f 97       	sbiw	r28, 0x0f	; 15
    2e2e:	0f b6       	in	r0, 0x3f	; 63
    2e30:	f8 94       	cli
    2e32:	de bf       	out	0x3e, r29	; 62
    2e34:	0f be       	out	0x3f, r0	; 63
    2e36:	cd bf       	out	0x3d, r28	; 61
    2e38:	8f 87       	std	Y+15, r24	; 0x0f
    //RS=0 RW=0
    MDIO_voidSetPinValue(LCD_CONTROL_PORT,RS_PIN,PIN_LOW);
    2e3a:	82 e0       	ldi	r24, 0x02	; 2
    2e3c:	60 e0       	ldi	r22, 0x00	; 0
    2e3e:	40 e0       	ldi	r20, 0x00	; 0
    2e40:	0e 94 32 08 	call	0x1064	; 0x1064 <MDIO_voidSetPinValue>
    MDIO_voidSetPinValue(LCD_CONTROL_PORT,RW_PIN,PIN_LOW);
    2e44:	82 e0       	ldi	r24, 0x02	; 2
    2e46:	61 e0       	ldi	r22, 0x01	; 1
    2e48:	40 e0       	ldi	r20, 0x00	; 0
    2e4a:	0e 94 32 08 	call	0x1064	; 0x1064 <MDIO_voidSetPinValue>

    MDIO_voidSetPortValue(LCD_DATA_PORT,A_u8Command);
    2e4e:	83 e0       	ldi	r24, 0x03	; 3
    2e50:	6f 85       	ldd	r22, Y+15	; 0x0f
    2e52:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_voidSetPortValue>
    MDIO_voidSetPinValue(LCD_CONTROL_PORT,E_PIN,PIN_HIGH);
    2e56:	82 e0       	ldi	r24, 0x02	; 2
    2e58:	62 e0       	ldi	r22, 0x02	; 2
    2e5a:	41 e0       	ldi	r20, 0x01	; 1
    2e5c:	0e 94 32 08 	call	0x1064	; 0x1064 <MDIO_voidSetPinValue>
    2e60:	80 e0       	ldi	r24, 0x00	; 0
    2e62:	90 e0       	ldi	r25, 0x00	; 0
    2e64:	a0 e0       	ldi	r26, 0x00	; 0
    2e66:	b0 e4       	ldi	r27, 0x40	; 64
    2e68:	8b 87       	std	Y+11, r24	; 0x0b
    2e6a:	9c 87       	std	Y+12, r25	; 0x0c
    2e6c:	ad 87       	std	Y+13, r26	; 0x0d
    2e6e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2e70:	6b 85       	ldd	r22, Y+11	; 0x0b
    2e72:	7c 85       	ldd	r23, Y+12	; 0x0c
    2e74:	8d 85       	ldd	r24, Y+13	; 0x0d
    2e76:	9e 85       	ldd	r25, Y+14	; 0x0e
    2e78:	20 e0       	ldi	r18, 0x00	; 0
    2e7a:	30 e0       	ldi	r19, 0x00	; 0
    2e7c:	4a ef       	ldi	r20, 0xFA	; 250
    2e7e:	54 e4       	ldi	r21, 0x44	; 68
    2e80:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e84:	dc 01       	movw	r26, r24
    2e86:	cb 01       	movw	r24, r22
    2e88:	8f 83       	std	Y+7, r24	; 0x07
    2e8a:	98 87       	std	Y+8, r25	; 0x08
    2e8c:	a9 87       	std	Y+9, r26	; 0x09
    2e8e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2e90:	6f 81       	ldd	r22, Y+7	; 0x07
    2e92:	78 85       	ldd	r23, Y+8	; 0x08
    2e94:	89 85       	ldd	r24, Y+9	; 0x09
    2e96:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e98:	20 e0       	ldi	r18, 0x00	; 0
    2e9a:	30 e0       	ldi	r19, 0x00	; 0
    2e9c:	40 e8       	ldi	r20, 0x80	; 128
    2e9e:	5f e3       	ldi	r21, 0x3F	; 63
    2ea0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2ea4:	88 23       	and	r24, r24
    2ea6:	2c f4       	brge	.+10     	; 0x2eb2 <HLCD8_voidSendCommand+0x8e>
		__ticks = 1;
    2ea8:	81 e0       	ldi	r24, 0x01	; 1
    2eaa:	90 e0       	ldi	r25, 0x00	; 0
    2eac:	9e 83       	std	Y+6, r25	; 0x06
    2eae:	8d 83       	std	Y+5, r24	; 0x05
    2eb0:	3f c0       	rjmp	.+126    	; 0x2f30 <HLCD8_voidSendCommand+0x10c>
	else if (__tmp > 65535)
    2eb2:	6f 81       	ldd	r22, Y+7	; 0x07
    2eb4:	78 85       	ldd	r23, Y+8	; 0x08
    2eb6:	89 85       	ldd	r24, Y+9	; 0x09
    2eb8:	9a 85       	ldd	r25, Y+10	; 0x0a
    2eba:	20 e0       	ldi	r18, 0x00	; 0
    2ebc:	3f ef       	ldi	r19, 0xFF	; 255
    2ebe:	4f e7       	ldi	r20, 0x7F	; 127
    2ec0:	57 e4       	ldi	r21, 0x47	; 71
    2ec2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2ec6:	18 16       	cp	r1, r24
    2ec8:	4c f5       	brge	.+82     	; 0x2f1c <HLCD8_voidSendCommand+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2eca:	6b 85       	ldd	r22, Y+11	; 0x0b
    2ecc:	7c 85       	ldd	r23, Y+12	; 0x0c
    2ece:	8d 85       	ldd	r24, Y+13	; 0x0d
    2ed0:	9e 85       	ldd	r25, Y+14	; 0x0e
    2ed2:	20 e0       	ldi	r18, 0x00	; 0
    2ed4:	30 e0       	ldi	r19, 0x00	; 0
    2ed6:	40 e2       	ldi	r20, 0x20	; 32
    2ed8:	51 e4       	ldi	r21, 0x41	; 65
    2eda:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ede:	dc 01       	movw	r26, r24
    2ee0:	cb 01       	movw	r24, r22
    2ee2:	bc 01       	movw	r22, r24
    2ee4:	cd 01       	movw	r24, r26
    2ee6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2eea:	dc 01       	movw	r26, r24
    2eec:	cb 01       	movw	r24, r22
    2eee:	9e 83       	std	Y+6, r25	; 0x06
    2ef0:	8d 83       	std	Y+5, r24	; 0x05
    2ef2:	0f c0       	rjmp	.+30     	; 0x2f12 <HLCD8_voidSendCommand+0xee>
    2ef4:	88 ec       	ldi	r24, 0xC8	; 200
    2ef6:	90 e0       	ldi	r25, 0x00	; 0
    2ef8:	9c 83       	std	Y+4, r25	; 0x04
    2efa:	8b 83       	std	Y+3, r24	; 0x03
    2efc:	8b 81       	ldd	r24, Y+3	; 0x03
    2efe:	9c 81       	ldd	r25, Y+4	; 0x04
    2f00:	01 97       	sbiw	r24, 0x01	; 1
    2f02:	f1 f7       	brne	.-4      	; 0x2f00 <HLCD8_voidSendCommand+0xdc>
    2f04:	9c 83       	std	Y+4, r25	; 0x04
    2f06:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2f08:	8d 81       	ldd	r24, Y+5	; 0x05
    2f0a:	9e 81       	ldd	r25, Y+6	; 0x06
    2f0c:	01 97       	sbiw	r24, 0x01	; 1
    2f0e:	9e 83       	std	Y+6, r25	; 0x06
    2f10:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2f12:	8d 81       	ldd	r24, Y+5	; 0x05
    2f14:	9e 81       	ldd	r25, Y+6	; 0x06
    2f16:	00 97       	sbiw	r24, 0x00	; 0
    2f18:	69 f7       	brne	.-38     	; 0x2ef4 <HLCD8_voidSendCommand+0xd0>
    2f1a:	14 c0       	rjmp	.+40     	; 0x2f44 <HLCD8_voidSendCommand+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2f1c:	6f 81       	ldd	r22, Y+7	; 0x07
    2f1e:	78 85       	ldd	r23, Y+8	; 0x08
    2f20:	89 85       	ldd	r24, Y+9	; 0x09
    2f22:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f24:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f28:	dc 01       	movw	r26, r24
    2f2a:	cb 01       	movw	r24, r22
    2f2c:	9e 83       	std	Y+6, r25	; 0x06
    2f2e:	8d 83       	std	Y+5, r24	; 0x05
    2f30:	8d 81       	ldd	r24, Y+5	; 0x05
    2f32:	9e 81       	ldd	r25, Y+6	; 0x06
    2f34:	9a 83       	std	Y+2, r25	; 0x02
    2f36:	89 83       	std	Y+1, r24	; 0x01
    2f38:	89 81       	ldd	r24, Y+1	; 0x01
    2f3a:	9a 81       	ldd	r25, Y+2	; 0x02
    2f3c:	01 97       	sbiw	r24, 0x01	; 1
    2f3e:	f1 f7       	brne	.-4      	; 0x2f3c <HLCD8_voidSendCommand+0x118>
    2f40:	9a 83       	std	Y+2, r25	; 0x02
    2f42:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(2);
    MDIO_voidSetPinValue(LCD_CONTROL_PORT,E_PIN,PIN_LOW);
    2f44:	82 e0       	ldi	r24, 0x02	; 2
    2f46:	62 e0       	ldi	r22, 0x02	; 2
    2f48:	40 e0       	ldi	r20, 0x00	; 0
    2f4a:	0e 94 32 08 	call	0x1064	; 0x1064 <MDIO_voidSetPinValue>
}
    2f4e:	2f 96       	adiw	r28, 0x0f	; 15
    2f50:	0f b6       	in	r0, 0x3f	; 63
    2f52:	f8 94       	cli
    2f54:	de bf       	out	0x3e, r29	; 62
    2f56:	0f be       	out	0x3f, r0	; 63
    2f58:	cd bf       	out	0x3d, r28	; 61
    2f5a:	cf 91       	pop	r28
    2f5c:	df 91       	pop	r29
    2f5e:	08 95       	ret

00002f60 <HLCD8_voidSendData>:


void HLCD8_voidSendData(u8 A_u8Data)
{
    2f60:	df 93       	push	r29
    2f62:	cf 93       	push	r28
    2f64:	cd b7       	in	r28, 0x3d	; 61
    2f66:	de b7       	in	r29, 0x3e	; 62
    2f68:	2f 97       	sbiw	r28, 0x0f	; 15
    2f6a:	0f b6       	in	r0, 0x3f	; 63
    2f6c:	f8 94       	cli
    2f6e:	de bf       	out	0x3e, r29	; 62
    2f70:	0f be       	out	0x3f, r0	; 63
    2f72:	cd bf       	out	0x3d, r28	; 61
    2f74:	8f 87       	std	Y+15, r24	; 0x0f
    //RS=1 RW=0
    MDIO_voidSetPinValue(LCD_CONTROL_PORT,RS_PIN,PIN_HIGH);
    2f76:	82 e0       	ldi	r24, 0x02	; 2
    2f78:	60 e0       	ldi	r22, 0x00	; 0
    2f7a:	41 e0       	ldi	r20, 0x01	; 1
    2f7c:	0e 94 32 08 	call	0x1064	; 0x1064 <MDIO_voidSetPinValue>
    MDIO_voidSetPinValue(LCD_CONTROL_PORT,RW_PIN,PIN_LOW);
    2f80:	82 e0       	ldi	r24, 0x02	; 2
    2f82:	61 e0       	ldi	r22, 0x01	; 1
    2f84:	40 e0       	ldi	r20, 0x00	; 0
    2f86:	0e 94 32 08 	call	0x1064	; 0x1064 <MDIO_voidSetPinValue>

    MDIO_voidSetPortValue(LCD_DATA_PORT,A_u8Data);
    2f8a:	83 e0       	ldi	r24, 0x03	; 3
    2f8c:	6f 85       	ldd	r22, Y+15	; 0x0f
    2f8e:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_voidSetPortValue>

    MDIO_voidSetPinValue(LCD_CONTROL_PORT,E_PIN,PIN_HIGH);
    2f92:	82 e0       	ldi	r24, 0x02	; 2
    2f94:	62 e0       	ldi	r22, 0x02	; 2
    2f96:	41 e0       	ldi	r20, 0x01	; 1
    2f98:	0e 94 32 08 	call	0x1064	; 0x1064 <MDIO_voidSetPinValue>
    2f9c:	80 e0       	ldi	r24, 0x00	; 0
    2f9e:	90 e0       	ldi	r25, 0x00	; 0
    2fa0:	a0 e0       	ldi	r26, 0x00	; 0
    2fa2:	b0 e4       	ldi	r27, 0x40	; 64
    2fa4:	8b 87       	std	Y+11, r24	; 0x0b
    2fa6:	9c 87       	std	Y+12, r25	; 0x0c
    2fa8:	ad 87       	std	Y+13, r26	; 0x0d
    2faa:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2fac:	6b 85       	ldd	r22, Y+11	; 0x0b
    2fae:	7c 85       	ldd	r23, Y+12	; 0x0c
    2fb0:	8d 85       	ldd	r24, Y+13	; 0x0d
    2fb2:	9e 85       	ldd	r25, Y+14	; 0x0e
    2fb4:	20 e0       	ldi	r18, 0x00	; 0
    2fb6:	30 e0       	ldi	r19, 0x00	; 0
    2fb8:	4a ef       	ldi	r20, 0xFA	; 250
    2fba:	54 e4       	ldi	r21, 0x44	; 68
    2fbc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2fc0:	dc 01       	movw	r26, r24
    2fc2:	cb 01       	movw	r24, r22
    2fc4:	8f 83       	std	Y+7, r24	; 0x07
    2fc6:	98 87       	std	Y+8, r25	; 0x08
    2fc8:	a9 87       	std	Y+9, r26	; 0x09
    2fca:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2fcc:	6f 81       	ldd	r22, Y+7	; 0x07
    2fce:	78 85       	ldd	r23, Y+8	; 0x08
    2fd0:	89 85       	ldd	r24, Y+9	; 0x09
    2fd2:	9a 85       	ldd	r25, Y+10	; 0x0a
    2fd4:	20 e0       	ldi	r18, 0x00	; 0
    2fd6:	30 e0       	ldi	r19, 0x00	; 0
    2fd8:	40 e8       	ldi	r20, 0x80	; 128
    2fda:	5f e3       	ldi	r21, 0x3F	; 63
    2fdc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2fe0:	88 23       	and	r24, r24
    2fe2:	2c f4       	brge	.+10     	; 0x2fee <HLCD8_voidSendData+0x8e>
		__ticks = 1;
    2fe4:	81 e0       	ldi	r24, 0x01	; 1
    2fe6:	90 e0       	ldi	r25, 0x00	; 0
    2fe8:	9e 83       	std	Y+6, r25	; 0x06
    2fea:	8d 83       	std	Y+5, r24	; 0x05
    2fec:	3f c0       	rjmp	.+126    	; 0x306c <HLCD8_voidSendData+0x10c>
	else if (__tmp > 65535)
    2fee:	6f 81       	ldd	r22, Y+7	; 0x07
    2ff0:	78 85       	ldd	r23, Y+8	; 0x08
    2ff2:	89 85       	ldd	r24, Y+9	; 0x09
    2ff4:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ff6:	20 e0       	ldi	r18, 0x00	; 0
    2ff8:	3f ef       	ldi	r19, 0xFF	; 255
    2ffa:	4f e7       	ldi	r20, 0x7F	; 127
    2ffc:	57 e4       	ldi	r21, 0x47	; 71
    2ffe:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3002:	18 16       	cp	r1, r24
    3004:	4c f5       	brge	.+82     	; 0x3058 <HLCD8_voidSendData+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3006:	6b 85       	ldd	r22, Y+11	; 0x0b
    3008:	7c 85       	ldd	r23, Y+12	; 0x0c
    300a:	8d 85       	ldd	r24, Y+13	; 0x0d
    300c:	9e 85       	ldd	r25, Y+14	; 0x0e
    300e:	20 e0       	ldi	r18, 0x00	; 0
    3010:	30 e0       	ldi	r19, 0x00	; 0
    3012:	40 e2       	ldi	r20, 0x20	; 32
    3014:	51 e4       	ldi	r21, 0x41	; 65
    3016:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    301a:	dc 01       	movw	r26, r24
    301c:	cb 01       	movw	r24, r22
    301e:	bc 01       	movw	r22, r24
    3020:	cd 01       	movw	r24, r26
    3022:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3026:	dc 01       	movw	r26, r24
    3028:	cb 01       	movw	r24, r22
    302a:	9e 83       	std	Y+6, r25	; 0x06
    302c:	8d 83       	std	Y+5, r24	; 0x05
    302e:	0f c0       	rjmp	.+30     	; 0x304e <HLCD8_voidSendData+0xee>
    3030:	88 ec       	ldi	r24, 0xC8	; 200
    3032:	90 e0       	ldi	r25, 0x00	; 0
    3034:	9c 83       	std	Y+4, r25	; 0x04
    3036:	8b 83       	std	Y+3, r24	; 0x03
    3038:	8b 81       	ldd	r24, Y+3	; 0x03
    303a:	9c 81       	ldd	r25, Y+4	; 0x04
    303c:	01 97       	sbiw	r24, 0x01	; 1
    303e:	f1 f7       	brne	.-4      	; 0x303c <HLCD8_voidSendData+0xdc>
    3040:	9c 83       	std	Y+4, r25	; 0x04
    3042:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3044:	8d 81       	ldd	r24, Y+5	; 0x05
    3046:	9e 81       	ldd	r25, Y+6	; 0x06
    3048:	01 97       	sbiw	r24, 0x01	; 1
    304a:	9e 83       	std	Y+6, r25	; 0x06
    304c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    304e:	8d 81       	ldd	r24, Y+5	; 0x05
    3050:	9e 81       	ldd	r25, Y+6	; 0x06
    3052:	00 97       	sbiw	r24, 0x00	; 0
    3054:	69 f7       	brne	.-38     	; 0x3030 <HLCD8_voidSendData+0xd0>
    3056:	14 c0       	rjmp	.+40     	; 0x3080 <HLCD8_voidSendData+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3058:	6f 81       	ldd	r22, Y+7	; 0x07
    305a:	78 85       	ldd	r23, Y+8	; 0x08
    305c:	89 85       	ldd	r24, Y+9	; 0x09
    305e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3060:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3064:	dc 01       	movw	r26, r24
    3066:	cb 01       	movw	r24, r22
    3068:	9e 83       	std	Y+6, r25	; 0x06
    306a:	8d 83       	std	Y+5, r24	; 0x05
    306c:	8d 81       	ldd	r24, Y+5	; 0x05
    306e:	9e 81       	ldd	r25, Y+6	; 0x06
    3070:	9a 83       	std	Y+2, r25	; 0x02
    3072:	89 83       	std	Y+1, r24	; 0x01
    3074:	89 81       	ldd	r24, Y+1	; 0x01
    3076:	9a 81       	ldd	r25, Y+2	; 0x02
    3078:	01 97       	sbiw	r24, 0x01	; 1
    307a:	f1 f7       	brne	.-4      	; 0x3078 <HLCD8_voidSendData+0x118>
    307c:	9a 83       	std	Y+2, r25	; 0x02
    307e:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(2);
    MDIO_voidSetPinValue(LCD_CONTROL_PORT,E_PIN,PIN_LOW);
    3080:	82 e0       	ldi	r24, 0x02	; 2
    3082:	62 e0       	ldi	r22, 0x02	; 2
    3084:	40 e0       	ldi	r20, 0x00	; 0
    3086:	0e 94 32 08 	call	0x1064	; 0x1064 <MDIO_voidSetPinValue>
}
    308a:	2f 96       	adiw	r28, 0x0f	; 15
    308c:	0f b6       	in	r0, 0x3f	; 63
    308e:	f8 94       	cli
    3090:	de bf       	out	0x3e, r29	; 62
    3092:	0f be       	out	0x3f, r0	; 63
    3094:	cd bf       	out	0x3d, r28	; 61
    3096:	cf 91       	pop	r28
    3098:	df 91       	pop	r29
    309a:	08 95       	ret

0000309c <HLCD8_voidInit>:


void HLCD8_voidInit()
{
    309c:	df 93       	push	r29
    309e:	cf 93       	push	r28
    30a0:	cd b7       	in	r28, 0x3d	; 61
    30a2:	de b7       	in	r29, 0x3e	; 62
    30a4:	e8 97       	sbiw	r28, 0x38	; 56
    30a6:	0f b6       	in	r0, 0x3f	; 63
    30a8:	f8 94       	cli
    30aa:	de bf       	out	0x3e, r29	; 62
    30ac:	0f be       	out	0x3f, r0	; 63
    30ae:	cd bf       	out	0x3d, r28	; 61
    30b0:	80 e0       	ldi	r24, 0x00	; 0
    30b2:	90 e0       	ldi	r25, 0x00	; 0
    30b4:	a0 ef       	ldi	r26, 0xF0	; 240
    30b6:	b1 e4       	ldi	r27, 0x41	; 65
    30b8:	8d ab       	std	Y+53, r24	; 0x35
    30ba:	9e ab       	std	Y+54, r25	; 0x36
    30bc:	af ab       	std	Y+55, r26	; 0x37
    30be:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    30c0:	6d a9       	ldd	r22, Y+53	; 0x35
    30c2:	7e a9       	ldd	r23, Y+54	; 0x36
    30c4:	8f a9       	ldd	r24, Y+55	; 0x37
    30c6:	98 ad       	ldd	r25, Y+56	; 0x38
    30c8:	20 e0       	ldi	r18, 0x00	; 0
    30ca:	30 e0       	ldi	r19, 0x00	; 0
    30cc:	4a ef       	ldi	r20, 0xFA	; 250
    30ce:	54 e4       	ldi	r21, 0x44	; 68
    30d0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    30d4:	dc 01       	movw	r26, r24
    30d6:	cb 01       	movw	r24, r22
    30d8:	89 ab       	std	Y+49, r24	; 0x31
    30da:	9a ab       	std	Y+50, r25	; 0x32
    30dc:	ab ab       	std	Y+51, r26	; 0x33
    30de:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    30e0:	69 a9       	ldd	r22, Y+49	; 0x31
    30e2:	7a a9       	ldd	r23, Y+50	; 0x32
    30e4:	8b a9       	ldd	r24, Y+51	; 0x33
    30e6:	9c a9       	ldd	r25, Y+52	; 0x34
    30e8:	20 e0       	ldi	r18, 0x00	; 0
    30ea:	30 e0       	ldi	r19, 0x00	; 0
    30ec:	40 e8       	ldi	r20, 0x80	; 128
    30ee:	5f e3       	ldi	r21, 0x3F	; 63
    30f0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    30f4:	88 23       	and	r24, r24
    30f6:	2c f4       	brge	.+10     	; 0x3102 <HLCD8_voidInit+0x66>
		__ticks = 1;
    30f8:	81 e0       	ldi	r24, 0x01	; 1
    30fa:	90 e0       	ldi	r25, 0x00	; 0
    30fc:	98 ab       	std	Y+48, r25	; 0x30
    30fe:	8f a7       	std	Y+47, r24	; 0x2f
    3100:	3f c0       	rjmp	.+126    	; 0x3180 <HLCD8_voidInit+0xe4>
	else if (__tmp > 65535)
    3102:	69 a9       	ldd	r22, Y+49	; 0x31
    3104:	7a a9       	ldd	r23, Y+50	; 0x32
    3106:	8b a9       	ldd	r24, Y+51	; 0x33
    3108:	9c a9       	ldd	r25, Y+52	; 0x34
    310a:	20 e0       	ldi	r18, 0x00	; 0
    310c:	3f ef       	ldi	r19, 0xFF	; 255
    310e:	4f e7       	ldi	r20, 0x7F	; 127
    3110:	57 e4       	ldi	r21, 0x47	; 71
    3112:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3116:	18 16       	cp	r1, r24
    3118:	4c f5       	brge	.+82     	; 0x316c <HLCD8_voidInit+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    311a:	6d a9       	ldd	r22, Y+53	; 0x35
    311c:	7e a9       	ldd	r23, Y+54	; 0x36
    311e:	8f a9       	ldd	r24, Y+55	; 0x37
    3120:	98 ad       	ldd	r25, Y+56	; 0x38
    3122:	20 e0       	ldi	r18, 0x00	; 0
    3124:	30 e0       	ldi	r19, 0x00	; 0
    3126:	40 e2       	ldi	r20, 0x20	; 32
    3128:	51 e4       	ldi	r21, 0x41	; 65
    312a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    312e:	dc 01       	movw	r26, r24
    3130:	cb 01       	movw	r24, r22
    3132:	bc 01       	movw	r22, r24
    3134:	cd 01       	movw	r24, r26
    3136:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    313a:	dc 01       	movw	r26, r24
    313c:	cb 01       	movw	r24, r22
    313e:	98 ab       	std	Y+48, r25	; 0x30
    3140:	8f a7       	std	Y+47, r24	; 0x2f
    3142:	0f c0       	rjmp	.+30     	; 0x3162 <HLCD8_voidInit+0xc6>
    3144:	88 ec       	ldi	r24, 0xC8	; 200
    3146:	90 e0       	ldi	r25, 0x00	; 0
    3148:	9e a7       	std	Y+46, r25	; 0x2e
    314a:	8d a7       	std	Y+45, r24	; 0x2d
    314c:	8d a5       	ldd	r24, Y+45	; 0x2d
    314e:	9e a5       	ldd	r25, Y+46	; 0x2e
    3150:	01 97       	sbiw	r24, 0x01	; 1
    3152:	f1 f7       	brne	.-4      	; 0x3150 <HLCD8_voidInit+0xb4>
    3154:	9e a7       	std	Y+46, r25	; 0x2e
    3156:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3158:	8f a5       	ldd	r24, Y+47	; 0x2f
    315a:	98 a9       	ldd	r25, Y+48	; 0x30
    315c:	01 97       	sbiw	r24, 0x01	; 1
    315e:	98 ab       	std	Y+48, r25	; 0x30
    3160:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3162:	8f a5       	ldd	r24, Y+47	; 0x2f
    3164:	98 a9       	ldd	r25, Y+48	; 0x30
    3166:	00 97       	sbiw	r24, 0x00	; 0
    3168:	69 f7       	brne	.-38     	; 0x3144 <HLCD8_voidInit+0xa8>
    316a:	14 c0       	rjmp	.+40     	; 0x3194 <HLCD8_voidInit+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    316c:	69 a9       	ldd	r22, Y+49	; 0x31
    316e:	7a a9       	ldd	r23, Y+50	; 0x32
    3170:	8b a9       	ldd	r24, Y+51	; 0x33
    3172:	9c a9       	ldd	r25, Y+52	; 0x34
    3174:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3178:	dc 01       	movw	r26, r24
    317a:	cb 01       	movw	r24, r22
    317c:	98 ab       	std	Y+48, r25	; 0x30
    317e:	8f a7       	std	Y+47, r24	; 0x2f
    3180:	8f a5       	ldd	r24, Y+47	; 0x2f
    3182:	98 a9       	ldd	r25, Y+48	; 0x30
    3184:	9c a7       	std	Y+44, r25	; 0x2c
    3186:	8b a7       	std	Y+43, r24	; 0x2b
    3188:	8b a5       	ldd	r24, Y+43	; 0x2b
    318a:	9c a5       	ldd	r25, Y+44	; 0x2c
    318c:	01 97       	sbiw	r24, 0x01	; 1
    318e:	f1 f7       	brne	.-4      	; 0x318c <HLCD8_voidInit+0xf0>
    3190:	9c a7       	std	Y+44, r25	; 0x2c
    3192:	8b a7       	std	Y+43, r24	; 0x2b
    _delay_ms(30);
    HLCD8_voidSendCommand(FUNCTION_SET);
    3194:	88 e3       	ldi	r24, 0x38	; 56
    3196:	0e 94 12 17 	call	0x2e24	; 0x2e24 <HLCD8_voidSendCommand>
    319a:	80 e0       	ldi	r24, 0x00	; 0
    319c:	90 e0       	ldi	r25, 0x00	; 0
    319e:	a0 e8       	ldi	r26, 0x80	; 128
    31a0:	bf e3       	ldi	r27, 0x3F	; 63
    31a2:	8f a3       	std	Y+39, r24	; 0x27
    31a4:	98 a7       	std	Y+40, r25	; 0x28
    31a6:	a9 a7       	std	Y+41, r26	; 0x29
    31a8:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    31aa:	6f a1       	ldd	r22, Y+39	; 0x27
    31ac:	78 a5       	ldd	r23, Y+40	; 0x28
    31ae:	89 a5       	ldd	r24, Y+41	; 0x29
    31b0:	9a a5       	ldd	r25, Y+42	; 0x2a
    31b2:	20 e0       	ldi	r18, 0x00	; 0
    31b4:	30 e0       	ldi	r19, 0x00	; 0
    31b6:	4a ef       	ldi	r20, 0xFA	; 250
    31b8:	54 e4       	ldi	r21, 0x44	; 68
    31ba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    31be:	dc 01       	movw	r26, r24
    31c0:	cb 01       	movw	r24, r22
    31c2:	8b a3       	std	Y+35, r24	; 0x23
    31c4:	9c a3       	std	Y+36, r25	; 0x24
    31c6:	ad a3       	std	Y+37, r26	; 0x25
    31c8:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    31ca:	6b a1       	ldd	r22, Y+35	; 0x23
    31cc:	7c a1       	ldd	r23, Y+36	; 0x24
    31ce:	8d a1       	ldd	r24, Y+37	; 0x25
    31d0:	9e a1       	ldd	r25, Y+38	; 0x26
    31d2:	20 e0       	ldi	r18, 0x00	; 0
    31d4:	30 e0       	ldi	r19, 0x00	; 0
    31d6:	40 e8       	ldi	r20, 0x80	; 128
    31d8:	5f e3       	ldi	r21, 0x3F	; 63
    31da:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    31de:	88 23       	and	r24, r24
    31e0:	2c f4       	brge	.+10     	; 0x31ec <HLCD8_voidInit+0x150>
		__ticks = 1;
    31e2:	81 e0       	ldi	r24, 0x01	; 1
    31e4:	90 e0       	ldi	r25, 0x00	; 0
    31e6:	9a a3       	std	Y+34, r25	; 0x22
    31e8:	89 a3       	std	Y+33, r24	; 0x21
    31ea:	3f c0       	rjmp	.+126    	; 0x326a <HLCD8_voidInit+0x1ce>
	else if (__tmp > 65535)
    31ec:	6b a1       	ldd	r22, Y+35	; 0x23
    31ee:	7c a1       	ldd	r23, Y+36	; 0x24
    31f0:	8d a1       	ldd	r24, Y+37	; 0x25
    31f2:	9e a1       	ldd	r25, Y+38	; 0x26
    31f4:	20 e0       	ldi	r18, 0x00	; 0
    31f6:	3f ef       	ldi	r19, 0xFF	; 255
    31f8:	4f e7       	ldi	r20, 0x7F	; 127
    31fa:	57 e4       	ldi	r21, 0x47	; 71
    31fc:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3200:	18 16       	cp	r1, r24
    3202:	4c f5       	brge	.+82     	; 0x3256 <HLCD8_voidInit+0x1ba>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3204:	6f a1       	ldd	r22, Y+39	; 0x27
    3206:	78 a5       	ldd	r23, Y+40	; 0x28
    3208:	89 a5       	ldd	r24, Y+41	; 0x29
    320a:	9a a5       	ldd	r25, Y+42	; 0x2a
    320c:	20 e0       	ldi	r18, 0x00	; 0
    320e:	30 e0       	ldi	r19, 0x00	; 0
    3210:	40 e2       	ldi	r20, 0x20	; 32
    3212:	51 e4       	ldi	r21, 0x41	; 65
    3214:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3218:	dc 01       	movw	r26, r24
    321a:	cb 01       	movw	r24, r22
    321c:	bc 01       	movw	r22, r24
    321e:	cd 01       	movw	r24, r26
    3220:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3224:	dc 01       	movw	r26, r24
    3226:	cb 01       	movw	r24, r22
    3228:	9a a3       	std	Y+34, r25	; 0x22
    322a:	89 a3       	std	Y+33, r24	; 0x21
    322c:	0f c0       	rjmp	.+30     	; 0x324c <HLCD8_voidInit+0x1b0>
    322e:	88 ec       	ldi	r24, 0xC8	; 200
    3230:	90 e0       	ldi	r25, 0x00	; 0
    3232:	98 a3       	std	Y+32, r25	; 0x20
    3234:	8f 8f       	std	Y+31, r24	; 0x1f
    3236:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3238:	98 a1       	ldd	r25, Y+32	; 0x20
    323a:	01 97       	sbiw	r24, 0x01	; 1
    323c:	f1 f7       	brne	.-4      	; 0x323a <HLCD8_voidInit+0x19e>
    323e:	98 a3       	std	Y+32, r25	; 0x20
    3240:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3242:	89 a1       	ldd	r24, Y+33	; 0x21
    3244:	9a a1       	ldd	r25, Y+34	; 0x22
    3246:	01 97       	sbiw	r24, 0x01	; 1
    3248:	9a a3       	std	Y+34, r25	; 0x22
    324a:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    324c:	89 a1       	ldd	r24, Y+33	; 0x21
    324e:	9a a1       	ldd	r25, Y+34	; 0x22
    3250:	00 97       	sbiw	r24, 0x00	; 0
    3252:	69 f7       	brne	.-38     	; 0x322e <HLCD8_voidInit+0x192>
    3254:	14 c0       	rjmp	.+40     	; 0x327e <HLCD8_voidInit+0x1e2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3256:	6b a1       	ldd	r22, Y+35	; 0x23
    3258:	7c a1       	ldd	r23, Y+36	; 0x24
    325a:	8d a1       	ldd	r24, Y+37	; 0x25
    325c:	9e a1       	ldd	r25, Y+38	; 0x26
    325e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3262:	dc 01       	movw	r26, r24
    3264:	cb 01       	movw	r24, r22
    3266:	9a a3       	std	Y+34, r25	; 0x22
    3268:	89 a3       	std	Y+33, r24	; 0x21
    326a:	89 a1       	ldd	r24, Y+33	; 0x21
    326c:	9a a1       	ldd	r25, Y+34	; 0x22
    326e:	9e 8f       	std	Y+30, r25	; 0x1e
    3270:	8d 8f       	std	Y+29, r24	; 0x1d
    3272:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3274:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3276:	01 97       	sbiw	r24, 0x01	; 1
    3278:	f1 f7       	brne	.-4      	; 0x3276 <HLCD8_voidInit+0x1da>
    327a:	9e 8f       	std	Y+30, r25	; 0x1e
    327c:	8d 8f       	std	Y+29, r24	; 0x1d
    _delay_ms(1);
    HLCD8_voidSendCommand(ON_OFF_CONTROL);
    327e:	8c e0       	ldi	r24, 0x0C	; 12
    3280:	0e 94 12 17 	call	0x2e24	; 0x2e24 <HLCD8_voidSendCommand>
    3284:	80 e0       	ldi	r24, 0x00	; 0
    3286:	90 e0       	ldi	r25, 0x00	; 0
    3288:	a0 e8       	ldi	r26, 0x80	; 128
    328a:	bf e3       	ldi	r27, 0x3F	; 63
    328c:	89 8f       	std	Y+25, r24	; 0x19
    328e:	9a 8f       	std	Y+26, r25	; 0x1a
    3290:	ab 8f       	std	Y+27, r26	; 0x1b
    3292:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3294:	69 8d       	ldd	r22, Y+25	; 0x19
    3296:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3298:	8b 8d       	ldd	r24, Y+27	; 0x1b
    329a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    329c:	20 e0       	ldi	r18, 0x00	; 0
    329e:	30 e0       	ldi	r19, 0x00	; 0
    32a0:	4a ef       	ldi	r20, 0xFA	; 250
    32a2:	54 e4       	ldi	r21, 0x44	; 68
    32a4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    32a8:	dc 01       	movw	r26, r24
    32aa:	cb 01       	movw	r24, r22
    32ac:	8d 8b       	std	Y+21, r24	; 0x15
    32ae:	9e 8b       	std	Y+22, r25	; 0x16
    32b0:	af 8b       	std	Y+23, r26	; 0x17
    32b2:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    32b4:	6d 89       	ldd	r22, Y+21	; 0x15
    32b6:	7e 89       	ldd	r23, Y+22	; 0x16
    32b8:	8f 89       	ldd	r24, Y+23	; 0x17
    32ba:	98 8d       	ldd	r25, Y+24	; 0x18
    32bc:	20 e0       	ldi	r18, 0x00	; 0
    32be:	30 e0       	ldi	r19, 0x00	; 0
    32c0:	40 e8       	ldi	r20, 0x80	; 128
    32c2:	5f e3       	ldi	r21, 0x3F	; 63
    32c4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    32c8:	88 23       	and	r24, r24
    32ca:	2c f4       	brge	.+10     	; 0x32d6 <HLCD8_voidInit+0x23a>
		__ticks = 1;
    32cc:	81 e0       	ldi	r24, 0x01	; 1
    32ce:	90 e0       	ldi	r25, 0x00	; 0
    32d0:	9c 8b       	std	Y+20, r25	; 0x14
    32d2:	8b 8b       	std	Y+19, r24	; 0x13
    32d4:	3f c0       	rjmp	.+126    	; 0x3354 <HLCD8_voidInit+0x2b8>
	else if (__tmp > 65535)
    32d6:	6d 89       	ldd	r22, Y+21	; 0x15
    32d8:	7e 89       	ldd	r23, Y+22	; 0x16
    32da:	8f 89       	ldd	r24, Y+23	; 0x17
    32dc:	98 8d       	ldd	r25, Y+24	; 0x18
    32de:	20 e0       	ldi	r18, 0x00	; 0
    32e0:	3f ef       	ldi	r19, 0xFF	; 255
    32e2:	4f e7       	ldi	r20, 0x7F	; 127
    32e4:	57 e4       	ldi	r21, 0x47	; 71
    32e6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    32ea:	18 16       	cp	r1, r24
    32ec:	4c f5       	brge	.+82     	; 0x3340 <HLCD8_voidInit+0x2a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    32ee:	69 8d       	ldd	r22, Y+25	; 0x19
    32f0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    32f2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    32f4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    32f6:	20 e0       	ldi	r18, 0x00	; 0
    32f8:	30 e0       	ldi	r19, 0x00	; 0
    32fa:	40 e2       	ldi	r20, 0x20	; 32
    32fc:	51 e4       	ldi	r21, 0x41	; 65
    32fe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3302:	dc 01       	movw	r26, r24
    3304:	cb 01       	movw	r24, r22
    3306:	bc 01       	movw	r22, r24
    3308:	cd 01       	movw	r24, r26
    330a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    330e:	dc 01       	movw	r26, r24
    3310:	cb 01       	movw	r24, r22
    3312:	9c 8b       	std	Y+20, r25	; 0x14
    3314:	8b 8b       	std	Y+19, r24	; 0x13
    3316:	0f c0       	rjmp	.+30     	; 0x3336 <HLCD8_voidInit+0x29a>
    3318:	88 ec       	ldi	r24, 0xC8	; 200
    331a:	90 e0       	ldi	r25, 0x00	; 0
    331c:	9a 8b       	std	Y+18, r25	; 0x12
    331e:	89 8b       	std	Y+17, r24	; 0x11
    3320:	89 89       	ldd	r24, Y+17	; 0x11
    3322:	9a 89       	ldd	r25, Y+18	; 0x12
    3324:	01 97       	sbiw	r24, 0x01	; 1
    3326:	f1 f7       	brne	.-4      	; 0x3324 <HLCD8_voidInit+0x288>
    3328:	9a 8b       	std	Y+18, r25	; 0x12
    332a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    332c:	8b 89       	ldd	r24, Y+19	; 0x13
    332e:	9c 89       	ldd	r25, Y+20	; 0x14
    3330:	01 97       	sbiw	r24, 0x01	; 1
    3332:	9c 8b       	std	Y+20, r25	; 0x14
    3334:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3336:	8b 89       	ldd	r24, Y+19	; 0x13
    3338:	9c 89       	ldd	r25, Y+20	; 0x14
    333a:	00 97       	sbiw	r24, 0x00	; 0
    333c:	69 f7       	brne	.-38     	; 0x3318 <HLCD8_voidInit+0x27c>
    333e:	14 c0       	rjmp	.+40     	; 0x3368 <HLCD8_voidInit+0x2cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3340:	6d 89       	ldd	r22, Y+21	; 0x15
    3342:	7e 89       	ldd	r23, Y+22	; 0x16
    3344:	8f 89       	ldd	r24, Y+23	; 0x17
    3346:	98 8d       	ldd	r25, Y+24	; 0x18
    3348:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    334c:	dc 01       	movw	r26, r24
    334e:	cb 01       	movw	r24, r22
    3350:	9c 8b       	std	Y+20, r25	; 0x14
    3352:	8b 8b       	std	Y+19, r24	; 0x13
    3354:	8b 89       	ldd	r24, Y+19	; 0x13
    3356:	9c 89       	ldd	r25, Y+20	; 0x14
    3358:	98 8b       	std	Y+16, r25	; 0x10
    335a:	8f 87       	std	Y+15, r24	; 0x0f
    335c:	8f 85       	ldd	r24, Y+15	; 0x0f
    335e:	98 89       	ldd	r25, Y+16	; 0x10
    3360:	01 97       	sbiw	r24, 0x01	; 1
    3362:	f1 f7       	brne	.-4      	; 0x3360 <HLCD8_voidInit+0x2c4>
    3364:	98 8b       	std	Y+16, r25	; 0x10
    3366:	8f 87       	std	Y+15, r24	; 0x0f
    _delay_ms(1);
    HLCD8_voidSendCommand(DISPLAY_CLEAR);
    3368:	81 e0       	ldi	r24, 0x01	; 1
    336a:	0e 94 12 17 	call	0x2e24	; 0x2e24 <HLCD8_voidSendCommand>
    336e:	80 e0       	ldi	r24, 0x00	; 0
    3370:	90 e0       	ldi	r25, 0x00	; 0
    3372:	a0 e0       	ldi	r26, 0x00	; 0
    3374:	b0 e4       	ldi	r27, 0x40	; 64
    3376:	8b 87       	std	Y+11, r24	; 0x0b
    3378:	9c 87       	std	Y+12, r25	; 0x0c
    337a:	ad 87       	std	Y+13, r26	; 0x0d
    337c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    337e:	6b 85       	ldd	r22, Y+11	; 0x0b
    3380:	7c 85       	ldd	r23, Y+12	; 0x0c
    3382:	8d 85       	ldd	r24, Y+13	; 0x0d
    3384:	9e 85       	ldd	r25, Y+14	; 0x0e
    3386:	20 e0       	ldi	r18, 0x00	; 0
    3388:	30 e0       	ldi	r19, 0x00	; 0
    338a:	4a ef       	ldi	r20, 0xFA	; 250
    338c:	54 e4       	ldi	r21, 0x44	; 68
    338e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3392:	dc 01       	movw	r26, r24
    3394:	cb 01       	movw	r24, r22
    3396:	8f 83       	std	Y+7, r24	; 0x07
    3398:	98 87       	std	Y+8, r25	; 0x08
    339a:	a9 87       	std	Y+9, r26	; 0x09
    339c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    339e:	6f 81       	ldd	r22, Y+7	; 0x07
    33a0:	78 85       	ldd	r23, Y+8	; 0x08
    33a2:	89 85       	ldd	r24, Y+9	; 0x09
    33a4:	9a 85       	ldd	r25, Y+10	; 0x0a
    33a6:	20 e0       	ldi	r18, 0x00	; 0
    33a8:	30 e0       	ldi	r19, 0x00	; 0
    33aa:	40 e8       	ldi	r20, 0x80	; 128
    33ac:	5f e3       	ldi	r21, 0x3F	; 63
    33ae:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    33b2:	88 23       	and	r24, r24
    33b4:	2c f4       	brge	.+10     	; 0x33c0 <HLCD8_voidInit+0x324>
		__ticks = 1;
    33b6:	81 e0       	ldi	r24, 0x01	; 1
    33b8:	90 e0       	ldi	r25, 0x00	; 0
    33ba:	9e 83       	std	Y+6, r25	; 0x06
    33bc:	8d 83       	std	Y+5, r24	; 0x05
    33be:	3f c0       	rjmp	.+126    	; 0x343e <HLCD8_voidInit+0x3a2>
	else if (__tmp > 65535)
    33c0:	6f 81       	ldd	r22, Y+7	; 0x07
    33c2:	78 85       	ldd	r23, Y+8	; 0x08
    33c4:	89 85       	ldd	r24, Y+9	; 0x09
    33c6:	9a 85       	ldd	r25, Y+10	; 0x0a
    33c8:	20 e0       	ldi	r18, 0x00	; 0
    33ca:	3f ef       	ldi	r19, 0xFF	; 255
    33cc:	4f e7       	ldi	r20, 0x7F	; 127
    33ce:	57 e4       	ldi	r21, 0x47	; 71
    33d0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    33d4:	18 16       	cp	r1, r24
    33d6:	4c f5       	brge	.+82     	; 0x342a <HLCD8_voidInit+0x38e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    33d8:	6b 85       	ldd	r22, Y+11	; 0x0b
    33da:	7c 85       	ldd	r23, Y+12	; 0x0c
    33dc:	8d 85       	ldd	r24, Y+13	; 0x0d
    33de:	9e 85       	ldd	r25, Y+14	; 0x0e
    33e0:	20 e0       	ldi	r18, 0x00	; 0
    33e2:	30 e0       	ldi	r19, 0x00	; 0
    33e4:	40 e2       	ldi	r20, 0x20	; 32
    33e6:	51 e4       	ldi	r21, 0x41	; 65
    33e8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    33ec:	dc 01       	movw	r26, r24
    33ee:	cb 01       	movw	r24, r22
    33f0:	bc 01       	movw	r22, r24
    33f2:	cd 01       	movw	r24, r26
    33f4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    33f8:	dc 01       	movw	r26, r24
    33fa:	cb 01       	movw	r24, r22
    33fc:	9e 83       	std	Y+6, r25	; 0x06
    33fe:	8d 83       	std	Y+5, r24	; 0x05
    3400:	0f c0       	rjmp	.+30     	; 0x3420 <HLCD8_voidInit+0x384>
    3402:	88 ec       	ldi	r24, 0xC8	; 200
    3404:	90 e0       	ldi	r25, 0x00	; 0
    3406:	9c 83       	std	Y+4, r25	; 0x04
    3408:	8b 83       	std	Y+3, r24	; 0x03
    340a:	8b 81       	ldd	r24, Y+3	; 0x03
    340c:	9c 81       	ldd	r25, Y+4	; 0x04
    340e:	01 97       	sbiw	r24, 0x01	; 1
    3410:	f1 f7       	brne	.-4      	; 0x340e <HLCD8_voidInit+0x372>
    3412:	9c 83       	std	Y+4, r25	; 0x04
    3414:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3416:	8d 81       	ldd	r24, Y+5	; 0x05
    3418:	9e 81       	ldd	r25, Y+6	; 0x06
    341a:	01 97       	sbiw	r24, 0x01	; 1
    341c:	9e 83       	std	Y+6, r25	; 0x06
    341e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3420:	8d 81       	ldd	r24, Y+5	; 0x05
    3422:	9e 81       	ldd	r25, Y+6	; 0x06
    3424:	00 97       	sbiw	r24, 0x00	; 0
    3426:	69 f7       	brne	.-38     	; 0x3402 <HLCD8_voidInit+0x366>
    3428:	14 c0       	rjmp	.+40     	; 0x3452 <HLCD8_voidInit+0x3b6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    342a:	6f 81       	ldd	r22, Y+7	; 0x07
    342c:	78 85       	ldd	r23, Y+8	; 0x08
    342e:	89 85       	ldd	r24, Y+9	; 0x09
    3430:	9a 85       	ldd	r25, Y+10	; 0x0a
    3432:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3436:	dc 01       	movw	r26, r24
    3438:	cb 01       	movw	r24, r22
    343a:	9e 83       	std	Y+6, r25	; 0x06
    343c:	8d 83       	std	Y+5, r24	; 0x05
    343e:	8d 81       	ldd	r24, Y+5	; 0x05
    3440:	9e 81       	ldd	r25, Y+6	; 0x06
    3442:	9a 83       	std	Y+2, r25	; 0x02
    3444:	89 83       	std	Y+1, r24	; 0x01
    3446:	89 81       	ldd	r24, Y+1	; 0x01
    3448:	9a 81       	ldd	r25, Y+2	; 0x02
    344a:	01 97       	sbiw	r24, 0x01	; 1
    344c:	f1 f7       	brne	.-4      	; 0x344a <HLCD8_voidInit+0x3ae>
    344e:	9a 83       	std	Y+2, r25	; 0x02
    3450:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(2);
    HLCD8_voidSendCommand(ENTRY_MODE_SET);
    3452:	86 e0       	ldi	r24, 0x06	; 6
    3454:	0e 94 12 17 	call	0x2e24	; 0x2e24 <HLCD8_voidSendCommand>
}
    3458:	e8 96       	adiw	r28, 0x38	; 56
    345a:	0f b6       	in	r0, 0x3f	; 63
    345c:	f8 94       	cli
    345e:	de bf       	out	0x3e, r29	; 62
    3460:	0f be       	out	0x3f, r0	; 63
    3462:	cd bf       	out	0x3d, r28	; 61
    3464:	cf 91       	pop	r28
    3466:	df 91       	pop	r29
    3468:	08 95       	ret

0000346a <HLCD8_voidClearDisplay>:

void HLCD8_voidClearDisplay(void)
{
    346a:	df 93       	push	r29
    346c:	cf 93       	push	r28
    346e:	cd b7       	in	r28, 0x3d	; 61
    3470:	de b7       	in	r29, 0x3e	; 62
    3472:	2e 97       	sbiw	r28, 0x0e	; 14
    3474:	0f b6       	in	r0, 0x3f	; 63
    3476:	f8 94       	cli
    3478:	de bf       	out	0x3e, r29	; 62
    347a:	0f be       	out	0x3f, r0	; 63
    347c:	cd bf       	out	0x3d, r28	; 61
    HLCD8_voidSendCommand(DISPLAY_CLEAR);
    347e:	81 e0       	ldi	r24, 0x01	; 1
    3480:	0e 94 12 17 	call	0x2e24	; 0x2e24 <HLCD8_voidSendCommand>
    3484:	80 e0       	ldi	r24, 0x00	; 0
    3486:	90 e0       	ldi	r25, 0x00	; 0
    3488:	a0 e0       	ldi	r26, 0x00	; 0
    348a:	b0 e4       	ldi	r27, 0x40	; 64
    348c:	8b 87       	std	Y+11, r24	; 0x0b
    348e:	9c 87       	std	Y+12, r25	; 0x0c
    3490:	ad 87       	std	Y+13, r26	; 0x0d
    3492:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3494:	6b 85       	ldd	r22, Y+11	; 0x0b
    3496:	7c 85       	ldd	r23, Y+12	; 0x0c
    3498:	8d 85       	ldd	r24, Y+13	; 0x0d
    349a:	9e 85       	ldd	r25, Y+14	; 0x0e
    349c:	20 e0       	ldi	r18, 0x00	; 0
    349e:	30 e0       	ldi	r19, 0x00	; 0
    34a0:	4a ef       	ldi	r20, 0xFA	; 250
    34a2:	54 e4       	ldi	r21, 0x44	; 68
    34a4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    34a8:	dc 01       	movw	r26, r24
    34aa:	cb 01       	movw	r24, r22
    34ac:	8f 83       	std	Y+7, r24	; 0x07
    34ae:	98 87       	std	Y+8, r25	; 0x08
    34b0:	a9 87       	std	Y+9, r26	; 0x09
    34b2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    34b4:	6f 81       	ldd	r22, Y+7	; 0x07
    34b6:	78 85       	ldd	r23, Y+8	; 0x08
    34b8:	89 85       	ldd	r24, Y+9	; 0x09
    34ba:	9a 85       	ldd	r25, Y+10	; 0x0a
    34bc:	20 e0       	ldi	r18, 0x00	; 0
    34be:	30 e0       	ldi	r19, 0x00	; 0
    34c0:	40 e8       	ldi	r20, 0x80	; 128
    34c2:	5f e3       	ldi	r21, 0x3F	; 63
    34c4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    34c8:	88 23       	and	r24, r24
    34ca:	2c f4       	brge	.+10     	; 0x34d6 <HLCD8_voidClearDisplay+0x6c>
		__ticks = 1;
    34cc:	81 e0       	ldi	r24, 0x01	; 1
    34ce:	90 e0       	ldi	r25, 0x00	; 0
    34d0:	9e 83       	std	Y+6, r25	; 0x06
    34d2:	8d 83       	std	Y+5, r24	; 0x05
    34d4:	3f c0       	rjmp	.+126    	; 0x3554 <HLCD8_voidClearDisplay+0xea>
	else if (__tmp > 65535)
    34d6:	6f 81       	ldd	r22, Y+7	; 0x07
    34d8:	78 85       	ldd	r23, Y+8	; 0x08
    34da:	89 85       	ldd	r24, Y+9	; 0x09
    34dc:	9a 85       	ldd	r25, Y+10	; 0x0a
    34de:	20 e0       	ldi	r18, 0x00	; 0
    34e0:	3f ef       	ldi	r19, 0xFF	; 255
    34e2:	4f e7       	ldi	r20, 0x7F	; 127
    34e4:	57 e4       	ldi	r21, 0x47	; 71
    34e6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    34ea:	18 16       	cp	r1, r24
    34ec:	4c f5       	brge	.+82     	; 0x3540 <HLCD8_voidClearDisplay+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    34ee:	6b 85       	ldd	r22, Y+11	; 0x0b
    34f0:	7c 85       	ldd	r23, Y+12	; 0x0c
    34f2:	8d 85       	ldd	r24, Y+13	; 0x0d
    34f4:	9e 85       	ldd	r25, Y+14	; 0x0e
    34f6:	20 e0       	ldi	r18, 0x00	; 0
    34f8:	30 e0       	ldi	r19, 0x00	; 0
    34fa:	40 e2       	ldi	r20, 0x20	; 32
    34fc:	51 e4       	ldi	r21, 0x41	; 65
    34fe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3502:	dc 01       	movw	r26, r24
    3504:	cb 01       	movw	r24, r22
    3506:	bc 01       	movw	r22, r24
    3508:	cd 01       	movw	r24, r26
    350a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    350e:	dc 01       	movw	r26, r24
    3510:	cb 01       	movw	r24, r22
    3512:	9e 83       	std	Y+6, r25	; 0x06
    3514:	8d 83       	std	Y+5, r24	; 0x05
    3516:	0f c0       	rjmp	.+30     	; 0x3536 <HLCD8_voidClearDisplay+0xcc>
    3518:	88 ec       	ldi	r24, 0xC8	; 200
    351a:	90 e0       	ldi	r25, 0x00	; 0
    351c:	9c 83       	std	Y+4, r25	; 0x04
    351e:	8b 83       	std	Y+3, r24	; 0x03
    3520:	8b 81       	ldd	r24, Y+3	; 0x03
    3522:	9c 81       	ldd	r25, Y+4	; 0x04
    3524:	01 97       	sbiw	r24, 0x01	; 1
    3526:	f1 f7       	brne	.-4      	; 0x3524 <HLCD8_voidClearDisplay+0xba>
    3528:	9c 83       	std	Y+4, r25	; 0x04
    352a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    352c:	8d 81       	ldd	r24, Y+5	; 0x05
    352e:	9e 81       	ldd	r25, Y+6	; 0x06
    3530:	01 97       	sbiw	r24, 0x01	; 1
    3532:	9e 83       	std	Y+6, r25	; 0x06
    3534:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3536:	8d 81       	ldd	r24, Y+5	; 0x05
    3538:	9e 81       	ldd	r25, Y+6	; 0x06
    353a:	00 97       	sbiw	r24, 0x00	; 0
    353c:	69 f7       	brne	.-38     	; 0x3518 <HLCD8_voidClearDisplay+0xae>
    353e:	14 c0       	rjmp	.+40     	; 0x3568 <HLCD8_voidClearDisplay+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3540:	6f 81       	ldd	r22, Y+7	; 0x07
    3542:	78 85       	ldd	r23, Y+8	; 0x08
    3544:	89 85       	ldd	r24, Y+9	; 0x09
    3546:	9a 85       	ldd	r25, Y+10	; 0x0a
    3548:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    354c:	dc 01       	movw	r26, r24
    354e:	cb 01       	movw	r24, r22
    3550:	9e 83       	std	Y+6, r25	; 0x06
    3552:	8d 83       	std	Y+5, r24	; 0x05
    3554:	8d 81       	ldd	r24, Y+5	; 0x05
    3556:	9e 81       	ldd	r25, Y+6	; 0x06
    3558:	9a 83       	std	Y+2, r25	; 0x02
    355a:	89 83       	std	Y+1, r24	; 0x01
    355c:	89 81       	ldd	r24, Y+1	; 0x01
    355e:	9a 81       	ldd	r25, Y+2	; 0x02
    3560:	01 97       	sbiw	r24, 0x01	; 1
    3562:	f1 f7       	brne	.-4      	; 0x3560 <HLCD8_voidClearDisplay+0xf6>
    3564:	9a 83       	std	Y+2, r25	; 0x02
    3566:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(2);
}
    3568:	2e 96       	adiw	r28, 0x0e	; 14
    356a:	0f b6       	in	r0, 0x3f	; 63
    356c:	f8 94       	cli
    356e:	de bf       	out	0x3e, r29	; 62
    3570:	0f be       	out	0x3f, r0	; 63
    3572:	cd bf       	out	0x3d, r28	; 61
    3574:	cf 91       	pop	r28
    3576:	df 91       	pop	r29
    3578:	08 95       	ret

0000357a <HLCD8_voidSendString>:


void HLCD8_voidSendString(u8 * A_Pu8String)
{
    357a:	df 93       	push	r29
    357c:	cf 93       	push	r28
    357e:	00 d0       	rcall	.+0      	; 0x3580 <HLCD8_voidSendString+0x6>
    3580:	0f 92       	push	r0
    3582:	cd b7       	in	r28, 0x3d	; 61
    3584:	de b7       	in	r29, 0x3e	; 62
    3586:	9b 83       	std	Y+3, r25	; 0x03
    3588:	8a 83       	std	Y+2, r24	; 0x02
    u8 local_u8Couter=0;
    358a:	19 82       	std	Y+1, r1	; 0x01
    358c:	0e c0       	rjmp	.+28     	; 0x35aa <HLCD8_voidSendString+0x30>
    while (A_Pu8String[local_u8Couter]!='\0')
    {
        HLCD8_voidSendData(A_Pu8String[local_u8Couter]);
    358e:	89 81       	ldd	r24, Y+1	; 0x01
    3590:	28 2f       	mov	r18, r24
    3592:	30 e0       	ldi	r19, 0x00	; 0
    3594:	8a 81       	ldd	r24, Y+2	; 0x02
    3596:	9b 81       	ldd	r25, Y+3	; 0x03
    3598:	fc 01       	movw	r30, r24
    359a:	e2 0f       	add	r30, r18
    359c:	f3 1f       	adc	r31, r19
    359e:	80 81       	ld	r24, Z
    35a0:	0e 94 b0 17 	call	0x2f60	; 0x2f60 <HLCD8_voidSendData>
        local_u8Couter++;
    35a4:	89 81       	ldd	r24, Y+1	; 0x01
    35a6:	8f 5f       	subi	r24, 0xFF	; 255
    35a8:	89 83       	std	Y+1, r24	; 0x01


void HLCD8_voidSendString(u8 * A_Pu8String)
{
    u8 local_u8Couter=0;
    while (A_Pu8String[local_u8Couter]!='\0')
    35aa:	89 81       	ldd	r24, Y+1	; 0x01
    35ac:	28 2f       	mov	r18, r24
    35ae:	30 e0       	ldi	r19, 0x00	; 0
    35b0:	8a 81       	ldd	r24, Y+2	; 0x02
    35b2:	9b 81       	ldd	r25, Y+3	; 0x03
    35b4:	fc 01       	movw	r30, r24
    35b6:	e2 0f       	add	r30, r18
    35b8:	f3 1f       	adc	r31, r19
    35ba:	80 81       	ld	r24, Z
    35bc:	88 23       	and	r24, r24
    35be:	39 f7       	brne	.-50     	; 0x358e <HLCD8_voidSendString+0x14>
    {
        HLCD8_voidSendData(A_Pu8String[local_u8Couter]);
        local_u8Couter++;
    }
    
}
    35c0:	0f 90       	pop	r0
    35c2:	0f 90       	pop	r0
    35c4:	0f 90       	pop	r0
    35c6:	cf 91       	pop	r28
    35c8:	df 91       	pop	r29
    35ca:	08 95       	ret

000035cc <HLCD8_voidGoToPos>:

void HLCD8_voidGoToPos(u8 A_u8RowNum,u8 A_u8ColNum)
{
    35cc:	df 93       	push	r29
    35ce:	cf 93       	push	r28
    35d0:	cd b7       	in	r28, 0x3d	; 61
    35d2:	de b7       	in	r29, 0x3e	; 62
    35d4:	63 97       	sbiw	r28, 0x13	; 19
    35d6:	0f b6       	in	r0, 0x3f	; 63
    35d8:	f8 94       	cli
    35da:	de bf       	out	0x3e, r29	; 62
    35dc:	0f be       	out	0x3f, r0	; 63
    35de:	cd bf       	out	0x3d, r28	; 61
    35e0:	88 8b       	std	Y+16, r24	; 0x10
    35e2:	69 8b       	std	Y+17, r22	; 0x11
    // }
    // _delay_ms(1);
    /************************************************************/ 
    //Second method
	u8 local_u8Address;
    switch(A_u8RowNum)
    35e4:	88 89       	ldd	r24, Y+16	; 0x10
    35e6:	28 2f       	mov	r18, r24
    35e8:	30 e0       	ldi	r19, 0x00	; 0
    35ea:	3b 8b       	std	Y+19, r19	; 0x13
    35ec:	2a 8b       	std	Y+18, r18	; 0x12
    35ee:	8a 89       	ldd	r24, Y+18	; 0x12
    35f0:	9b 89       	ldd	r25, Y+19	; 0x13
    35f2:	81 30       	cpi	r24, 0x01	; 1
    35f4:	91 05       	cpc	r25, r1
    35f6:	31 f0       	breq	.+12     	; 0x3604 <HLCD8_voidGoToPos+0x38>
    35f8:	2a 89       	ldd	r18, Y+18	; 0x12
    35fa:	3b 89       	ldd	r19, Y+19	; 0x13
    35fc:	22 30       	cpi	r18, 0x02	; 2
    35fe:	31 05       	cpc	r19, r1
    3600:	59 f0       	breq	.+22     	; 0x3618 <HLCD8_voidGoToPos+0x4c>
    3602:	13 c0       	rjmp	.+38     	; 0x362a <HLCD8_voidGoToPos+0x5e>
    {
        case LCD_ROW_ONE:
        local_u8Address=FIRST_ROW_ADDRESS + A_u8ColNum -1;
    3604:	89 89       	ldd	r24, Y+17	; 0x11
    3606:	81 50       	subi	r24, 0x01	; 1
    3608:	8f 87       	std	Y+15, r24	; 0x0f
        SET_BIT(local_u8Address,PIN7);
    360a:	8f 85       	ldd	r24, Y+15	; 0x0f
    360c:	80 68       	ori	r24, 0x80	; 128
    360e:	8f 87       	std	Y+15, r24	; 0x0f
        HLCD8_voidSendCommand(local_u8Address);
    3610:	8f 85       	ldd	r24, Y+15	; 0x0f
    3612:	0e 94 12 17 	call	0x2e24	; 0x2e24 <HLCD8_voidSendCommand>
    3616:	09 c0       	rjmp	.+18     	; 0x362a <HLCD8_voidGoToPos+0x5e>
        break;

        case LCD_ROW_TWO:
        local_u8Address=SECOND_ROW_ADDRESS + A_u8ColNum;
    3618:	89 89       	ldd	r24, Y+17	; 0x11
    361a:	81 5c       	subi	r24, 0xC1	; 193
    361c:	8f 87       	std	Y+15, r24	; 0x0f
        SET_BIT(local_u8Address,PIN7);
    361e:	8f 85       	ldd	r24, Y+15	; 0x0f
    3620:	80 68       	ori	r24, 0x80	; 128
    3622:	8f 87       	std	Y+15, r24	; 0x0f
        HLCD8_voidSendCommand(local_u8Address);
    3624:	8f 85       	ldd	r24, Y+15	; 0x0f
    3626:	0e 94 12 17 	call	0x2e24	; 0x2e24 <HLCD8_voidSendCommand>
    362a:	80 e0       	ldi	r24, 0x00	; 0
    362c:	90 e0       	ldi	r25, 0x00	; 0
    362e:	a0 e8       	ldi	r26, 0x80	; 128
    3630:	bf e3       	ldi	r27, 0x3F	; 63
    3632:	8b 87       	std	Y+11, r24	; 0x0b
    3634:	9c 87       	std	Y+12, r25	; 0x0c
    3636:	ad 87       	std	Y+13, r26	; 0x0d
    3638:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    363a:	6b 85       	ldd	r22, Y+11	; 0x0b
    363c:	7c 85       	ldd	r23, Y+12	; 0x0c
    363e:	8d 85       	ldd	r24, Y+13	; 0x0d
    3640:	9e 85       	ldd	r25, Y+14	; 0x0e
    3642:	20 e0       	ldi	r18, 0x00	; 0
    3644:	30 e0       	ldi	r19, 0x00	; 0
    3646:	4a ef       	ldi	r20, 0xFA	; 250
    3648:	54 e4       	ldi	r21, 0x44	; 68
    364a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    364e:	dc 01       	movw	r26, r24
    3650:	cb 01       	movw	r24, r22
    3652:	8f 83       	std	Y+7, r24	; 0x07
    3654:	98 87       	std	Y+8, r25	; 0x08
    3656:	a9 87       	std	Y+9, r26	; 0x09
    3658:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    365a:	6f 81       	ldd	r22, Y+7	; 0x07
    365c:	78 85       	ldd	r23, Y+8	; 0x08
    365e:	89 85       	ldd	r24, Y+9	; 0x09
    3660:	9a 85       	ldd	r25, Y+10	; 0x0a
    3662:	20 e0       	ldi	r18, 0x00	; 0
    3664:	30 e0       	ldi	r19, 0x00	; 0
    3666:	40 e8       	ldi	r20, 0x80	; 128
    3668:	5f e3       	ldi	r21, 0x3F	; 63
    366a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    366e:	88 23       	and	r24, r24
    3670:	2c f4       	brge	.+10     	; 0x367c <HLCD8_voidGoToPos+0xb0>
		__ticks = 1;
    3672:	81 e0       	ldi	r24, 0x01	; 1
    3674:	90 e0       	ldi	r25, 0x00	; 0
    3676:	9e 83       	std	Y+6, r25	; 0x06
    3678:	8d 83       	std	Y+5, r24	; 0x05
    367a:	3f c0       	rjmp	.+126    	; 0x36fa <HLCD8_voidGoToPos+0x12e>
	else if (__tmp > 65535)
    367c:	6f 81       	ldd	r22, Y+7	; 0x07
    367e:	78 85       	ldd	r23, Y+8	; 0x08
    3680:	89 85       	ldd	r24, Y+9	; 0x09
    3682:	9a 85       	ldd	r25, Y+10	; 0x0a
    3684:	20 e0       	ldi	r18, 0x00	; 0
    3686:	3f ef       	ldi	r19, 0xFF	; 255
    3688:	4f e7       	ldi	r20, 0x7F	; 127
    368a:	57 e4       	ldi	r21, 0x47	; 71
    368c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3690:	18 16       	cp	r1, r24
    3692:	4c f5       	brge	.+82     	; 0x36e6 <HLCD8_voidGoToPos+0x11a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3694:	6b 85       	ldd	r22, Y+11	; 0x0b
    3696:	7c 85       	ldd	r23, Y+12	; 0x0c
    3698:	8d 85       	ldd	r24, Y+13	; 0x0d
    369a:	9e 85       	ldd	r25, Y+14	; 0x0e
    369c:	20 e0       	ldi	r18, 0x00	; 0
    369e:	30 e0       	ldi	r19, 0x00	; 0
    36a0:	40 e2       	ldi	r20, 0x20	; 32
    36a2:	51 e4       	ldi	r21, 0x41	; 65
    36a4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    36a8:	dc 01       	movw	r26, r24
    36aa:	cb 01       	movw	r24, r22
    36ac:	bc 01       	movw	r22, r24
    36ae:	cd 01       	movw	r24, r26
    36b0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    36b4:	dc 01       	movw	r26, r24
    36b6:	cb 01       	movw	r24, r22
    36b8:	9e 83       	std	Y+6, r25	; 0x06
    36ba:	8d 83       	std	Y+5, r24	; 0x05
    36bc:	0f c0       	rjmp	.+30     	; 0x36dc <HLCD8_voidGoToPos+0x110>
    36be:	88 ec       	ldi	r24, 0xC8	; 200
    36c0:	90 e0       	ldi	r25, 0x00	; 0
    36c2:	9c 83       	std	Y+4, r25	; 0x04
    36c4:	8b 83       	std	Y+3, r24	; 0x03
    36c6:	8b 81       	ldd	r24, Y+3	; 0x03
    36c8:	9c 81       	ldd	r25, Y+4	; 0x04
    36ca:	01 97       	sbiw	r24, 0x01	; 1
    36cc:	f1 f7       	brne	.-4      	; 0x36ca <HLCD8_voidGoToPos+0xfe>
    36ce:	9c 83       	std	Y+4, r25	; 0x04
    36d0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    36d2:	8d 81       	ldd	r24, Y+5	; 0x05
    36d4:	9e 81       	ldd	r25, Y+6	; 0x06
    36d6:	01 97       	sbiw	r24, 0x01	; 1
    36d8:	9e 83       	std	Y+6, r25	; 0x06
    36da:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    36dc:	8d 81       	ldd	r24, Y+5	; 0x05
    36de:	9e 81       	ldd	r25, Y+6	; 0x06
    36e0:	00 97       	sbiw	r24, 0x00	; 0
    36e2:	69 f7       	brne	.-38     	; 0x36be <HLCD8_voidGoToPos+0xf2>
    36e4:	14 c0       	rjmp	.+40     	; 0x370e <HLCD8_voidGoToPos+0x142>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    36e6:	6f 81       	ldd	r22, Y+7	; 0x07
    36e8:	78 85       	ldd	r23, Y+8	; 0x08
    36ea:	89 85       	ldd	r24, Y+9	; 0x09
    36ec:	9a 85       	ldd	r25, Y+10	; 0x0a
    36ee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    36f2:	dc 01       	movw	r26, r24
    36f4:	cb 01       	movw	r24, r22
    36f6:	9e 83       	std	Y+6, r25	; 0x06
    36f8:	8d 83       	std	Y+5, r24	; 0x05
    36fa:	8d 81       	ldd	r24, Y+5	; 0x05
    36fc:	9e 81       	ldd	r25, Y+6	; 0x06
    36fe:	9a 83       	std	Y+2, r25	; 0x02
    3700:	89 83       	std	Y+1, r24	; 0x01
    3702:	89 81       	ldd	r24, Y+1	; 0x01
    3704:	9a 81       	ldd	r25, Y+2	; 0x02
    3706:	01 97       	sbiw	r24, 0x01	; 1
    3708:	f1 f7       	brne	.-4      	; 0x3706 <HLCD8_voidGoToPos+0x13a>
    370a:	9a 83       	std	Y+2, r25	; 0x02
    370c:	89 83       	std	Y+1, r24	; 0x01
        break;

    }
    _delay_ms(1);

}
    370e:	63 96       	adiw	r28, 0x13	; 19
    3710:	0f b6       	in	r0, 0x3f	; 63
    3712:	f8 94       	cli
    3714:	de bf       	out	0x3e, r29	; 62
    3716:	0f be       	out	0x3f, r0	; 63
    3718:	cd bf       	out	0x3d, r28	; 61
    371a:	cf 91       	pop	r28
    371c:	df 91       	pop	r29
    371e:	08 95       	ret

00003720 <HLCD8_voidDisplayNumber>:

void HLCD8_voidDisplayNumber(u32 A_u32Number)
{
    3720:	df 93       	push	r29
    3722:	cf 93       	push	r28
    3724:	00 d0       	rcall	.+0      	; 0x3726 <HLCD8_voidDisplayNumber+0x6>
    3726:	00 d0       	rcall	.+0      	; 0x3728 <HLCD8_voidDisplayNumber+0x8>
    3728:	cd b7       	in	r28, 0x3d	; 61
    372a:	de b7       	in	r29, 0x3e	; 62
    372c:	9c 83       	std	Y+4, r25	; 0x04
    372e:	8b 83       	std	Y+3, r24	; 0x03
    // u8 local_u8NumToStr[100];
    // itoa(A_u32Number,local_u8NumToStr,10);
    // HLCD8_voidSendString(local_u8NumToStr);
    //****************************************************//
    //third method: it will deal with zero unlike the first method so it's not problem here
    u32 local_u32Number=1;
    3730:	81 e0       	ldi	r24, 0x01	; 1
    3732:	90 e0       	ldi	r25, 0x00	; 0
    3734:	9a 83       	std	Y+2, r25	; 0x02
    3736:	89 83       	std	Y+1, r24	; 0x01
    if(A_u32Number==0)
    3738:	8b 81       	ldd	r24, Y+3	; 0x03
    373a:	9c 81       	ldd	r25, Y+4	; 0x04
    373c:	00 97       	sbiw	r24, 0x00	; 0
    373e:	31 f5       	brne	.+76     	; 0x378c <HLCD8_voidDisplayNumber+0x6c>
    {
        HLCD8_voidSendData('0');
    3740:	80 e3       	ldi	r24, 0x30	; 48
    3742:	0e 94 b0 17 	call	0x2f60	; 0x2f60 <HLCD8_voidSendData>
    3746:	22 c0       	rjmp	.+68     	; 0x378c <HLCD8_voidDisplayNumber+0x6c>
    }   
    while(A_u32Number !=0)
    {
            local_u32Number=((local_u32Number * 10)+(A_u32Number%10));
    3748:	89 81       	ldd	r24, Y+1	; 0x01
    374a:	9a 81       	ldd	r25, Y+2	; 0x02
    374c:	9c 01       	movw	r18, r24
    374e:	22 0f       	add	r18, r18
    3750:	33 1f       	adc	r19, r19
    3752:	c9 01       	movw	r24, r18
    3754:	88 0f       	add	r24, r24
    3756:	99 1f       	adc	r25, r25
    3758:	88 0f       	add	r24, r24
    375a:	99 1f       	adc	r25, r25
    375c:	f9 01       	movw	r30, r18
    375e:	e8 0f       	add	r30, r24
    3760:	f9 1f       	adc	r31, r25
    3762:	8b 81       	ldd	r24, Y+3	; 0x03
    3764:	9c 81       	ldd	r25, Y+4	; 0x04
    3766:	2a e0       	ldi	r18, 0x0A	; 10
    3768:	30 e0       	ldi	r19, 0x00	; 0
    376a:	b9 01       	movw	r22, r18
    376c:	0e 94 14 25 	call	0x4a28	; 0x4a28 <__udivmodhi4>
    3770:	8e 0f       	add	r24, r30
    3772:	9f 1f       	adc	r25, r31
    3774:	9a 83       	std	Y+2, r25	; 0x02
    3776:	89 83       	std	Y+1, r24	; 0x01
            A_u32Number=A_u32Number/10;
    3778:	8b 81       	ldd	r24, Y+3	; 0x03
    377a:	9c 81       	ldd	r25, Y+4	; 0x04
    377c:	2a e0       	ldi	r18, 0x0A	; 10
    377e:	30 e0       	ldi	r19, 0x00	; 0
    3780:	b9 01       	movw	r22, r18
    3782:	0e 94 14 25 	call	0x4a28	; 0x4a28 <__udivmodhi4>
    3786:	cb 01       	movw	r24, r22
    3788:	9c 83       	std	Y+4, r25	; 0x04
    378a:	8b 83       	std	Y+3, r24	; 0x03
    u32 local_u32Number=1;
    if(A_u32Number==0)
    {
        HLCD8_voidSendData('0');
    }   
    while(A_u32Number !=0)
    378c:	8b 81       	ldd	r24, Y+3	; 0x03
    378e:	9c 81       	ldd	r25, Y+4	; 0x04
    3790:	00 97       	sbiw	r24, 0x00	; 0
    3792:	d1 f6       	brne	.-76     	; 0x3748 <HLCD8_voidDisplayNumber+0x28>
    3794:	14 c0       	rjmp	.+40     	; 0x37be <HLCD8_voidDisplayNumber+0x9e>
            A_u32Number=A_u32Number/10;

    }
    while (local_u32Number!=1)
    {
        HLCD8_voidSendData((local_u32Number%10)+48);
    3796:	89 81       	ldd	r24, Y+1	; 0x01
    3798:	9a 81       	ldd	r25, Y+2	; 0x02
    379a:	2a e0       	ldi	r18, 0x0A	; 10
    379c:	30 e0       	ldi	r19, 0x00	; 0
    379e:	b9 01       	movw	r22, r18
    37a0:	0e 94 14 25 	call	0x4a28	; 0x4a28 <__udivmodhi4>
    37a4:	80 5d       	subi	r24, 0xD0	; 208
    37a6:	0e 94 b0 17 	call	0x2f60	; 0x2f60 <HLCD8_voidSendData>
        local_u32Number=local_u32Number/10;
    37aa:	89 81       	ldd	r24, Y+1	; 0x01
    37ac:	9a 81       	ldd	r25, Y+2	; 0x02
    37ae:	2a e0       	ldi	r18, 0x0A	; 10
    37b0:	30 e0       	ldi	r19, 0x00	; 0
    37b2:	b9 01       	movw	r22, r18
    37b4:	0e 94 14 25 	call	0x4a28	; 0x4a28 <__udivmodhi4>
    37b8:	cb 01       	movw	r24, r22
    37ba:	9a 83       	std	Y+2, r25	; 0x02
    37bc:	89 83       	std	Y+1, r24	; 0x01
    {
            local_u32Number=((local_u32Number * 10)+(A_u32Number%10));
            A_u32Number=A_u32Number/10;

    }
    while (local_u32Number!=1)
    37be:	89 81       	ldd	r24, Y+1	; 0x01
    37c0:	9a 81       	ldd	r25, Y+2	; 0x02
    37c2:	81 30       	cpi	r24, 0x01	; 1
    37c4:	91 05       	cpc	r25, r1
    37c6:	39 f7       	brne	.-50     	; 0x3796 <HLCD8_voidDisplayNumber+0x76>
    {
        HLCD8_voidSendData((local_u32Number%10)+48);
        local_u32Number=local_u32Number/10;
    }
}
    37c8:	0f 90       	pop	r0
    37ca:	0f 90       	pop	r0
    37cc:	0f 90       	pop	r0
    37ce:	0f 90       	pop	r0
    37d0:	cf 91       	pop	r28
    37d2:	df 91       	pop	r29
    37d4:	08 95       	ret

000037d6 <HLCD8_voidStoreCustomChar>:

void HLCD8_voidStoreCustomChar(u8 * A_u8Pattern,u8 A_u8CGRAMIndex)
{
    37d6:	df 93       	push	r29
    37d8:	cf 93       	push	r28
    37da:	cd b7       	in	r28, 0x3d	; 61
    37dc:	de b7       	in	r29, 0x3e	; 62
    37de:	ab 97       	sbiw	r28, 0x2b	; 43
    37e0:	0f b6       	in	r0, 0x3f	; 63
    37e2:	f8 94       	cli
    37e4:	de bf       	out	0x3e, r29	; 62
    37e6:	0f be       	out	0x3f, r0	; 63
    37e8:	cd bf       	out	0x3d, r28	; 61
    37ea:	9a a7       	std	Y+42, r25	; 0x2a
    37ec:	89 a7       	std	Y+41, r24	; 0x29
    37ee:	6b a7       	std	Y+43, r22	; 0x2b
    u8 local_u8Address;
    if(A_u8CGRAMIndex<8)
    37f0:	8b a5       	ldd	r24, Y+43	; 0x2b
    37f2:	88 30       	cpi	r24, 0x08	; 8
    37f4:	08 f0       	brcs	.+2      	; 0x37f8 <HLCD8_voidStoreCustomChar+0x22>
    37f6:	e5 c0       	rjmp	.+458    	; 0x39c2 <HLCD8_voidStoreCustomChar+0x1ec>
    {
        A_u8CGRAMIndex=A_u8CGRAMIndex*8;
    37f8:	8b a5       	ldd	r24, Y+43	; 0x2b
    37fa:	88 2f       	mov	r24, r24
    37fc:	90 e0       	ldi	r25, 0x00	; 0
    37fe:	88 0f       	add	r24, r24
    3800:	99 1f       	adc	r25, r25
    3802:	88 0f       	add	r24, r24
    3804:	99 1f       	adc	r25, r25
    3806:	88 0f       	add	r24, r24
    3808:	99 1f       	adc	r25, r25
    380a:	8b a7       	std	Y+43, r24	; 0x2b
        SET_BIT(A_u8CGRAMIndex,PIN6);
    380c:	8b a5       	ldd	r24, Y+43	; 0x2b
    380e:	80 64       	ori	r24, 0x40	; 64
    3810:	8b a7       	std	Y+43, r24	; 0x2b
        CLR_BIT(A_u8CGRAMIndex,PIN7);
    3812:	8b a5       	ldd	r24, Y+43	; 0x2b
    3814:	8f 77       	andi	r24, 0x7F	; 127
    3816:	8b a7       	std	Y+43, r24	; 0x2b
        HLCD8_voidSendCommand(A_u8CGRAMIndex);
    3818:	8b a5       	ldd	r24, Y+43	; 0x2b
    381a:	0e 94 12 17 	call	0x2e24	; 0x2e24 <HLCD8_voidSendCommand>
        for(u8 i=0;i<8;i++)
    381e:	1f a2       	std	Y+39, r1	; 0x27
    3820:	cc c0       	rjmp	.+408    	; 0x39ba <HLCD8_voidStoreCustomChar+0x1e4>
        {
            HLCD8_voidSendData(A_u8Pattern[i]);
    3822:	8f a1       	ldd	r24, Y+39	; 0x27
    3824:	28 2f       	mov	r18, r24
    3826:	30 e0       	ldi	r19, 0x00	; 0
    3828:	89 a5       	ldd	r24, Y+41	; 0x29
    382a:	9a a5       	ldd	r25, Y+42	; 0x2a
    382c:	fc 01       	movw	r30, r24
    382e:	e2 0f       	add	r30, r18
    3830:	f3 1f       	adc	r31, r19
    3832:	80 81       	ld	r24, Z
    3834:	0e 94 b0 17 	call	0x2f60	; 0x2f60 <HLCD8_voidSendData>
    3838:	80 e0       	ldi	r24, 0x00	; 0
    383a:	90 e0       	ldi	r25, 0x00	; 0
    383c:	a0 e7       	ldi	r26, 0x70	; 112
    383e:	b2 e4       	ldi	r27, 0x42	; 66
    3840:	8b a3       	std	Y+35, r24	; 0x23
    3842:	9c a3       	std	Y+36, r25	; 0x24
    3844:	ad a3       	std	Y+37, r26	; 0x25
    3846:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    3848:	6b a1       	ldd	r22, Y+35	; 0x23
    384a:	7c a1       	ldd	r23, Y+36	; 0x24
    384c:	8d a1       	ldd	r24, Y+37	; 0x25
    384e:	9e a1       	ldd	r25, Y+38	; 0x26
    3850:	2b ea       	ldi	r18, 0xAB	; 171
    3852:	3a ea       	ldi	r19, 0xAA	; 170
    3854:	4a e2       	ldi	r20, 0x2A	; 42
    3856:	50 e4       	ldi	r21, 0x40	; 64
    3858:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    385c:	dc 01       	movw	r26, r24
    385e:	cb 01       	movw	r24, r22
    3860:	8f 8f       	std	Y+31, r24	; 0x1f
    3862:	98 a3       	std	Y+32, r25	; 0x20
    3864:	a9 a3       	std	Y+33, r26	; 0x21
    3866:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    3868:	6f 8d       	ldd	r22, Y+31	; 0x1f
    386a:	78 a1       	ldd	r23, Y+32	; 0x20
    386c:	89 a1       	ldd	r24, Y+33	; 0x21
    386e:	9a a1       	ldd	r25, Y+34	; 0x22
    3870:	20 e0       	ldi	r18, 0x00	; 0
    3872:	30 e0       	ldi	r19, 0x00	; 0
    3874:	40 e8       	ldi	r20, 0x80	; 128
    3876:	5f e3       	ldi	r21, 0x3F	; 63
    3878:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    387c:	88 23       	and	r24, r24
    387e:	1c f4       	brge	.+6      	; 0x3886 <HLCD8_voidStoreCustomChar+0xb0>
		__ticks = 1;
    3880:	81 e0       	ldi	r24, 0x01	; 1
    3882:	8e 8f       	std	Y+30, r24	; 0x1e
    3884:	91 c0       	rjmp	.+290    	; 0x39a8 <HLCD8_voidStoreCustomChar+0x1d2>
	else if (__tmp > 255)
    3886:	6f 8d       	ldd	r22, Y+31	; 0x1f
    3888:	78 a1       	ldd	r23, Y+32	; 0x20
    388a:	89 a1       	ldd	r24, Y+33	; 0x21
    388c:	9a a1       	ldd	r25, Y+34	; 0x22
    388e:	20 e0       	ldi	r18, 0x00	; 0
    3890:	30 e0       	ldi	r19, 0x00	; 0
    3892:	4f e7       	ldi	r20, 0x7F	; 127
    3894:	53 e4       	ldi	r21, 0x43	; 67
    3896:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    389a:	18 16       	cp	r1, r24
    389c:	0c f0       	brlt	.+2      	; 0x38a0 <HLCD8_voidStoreCustomChar+0xca>
    389e:	7b c0       	rjmp	.+246    	; 0x3996 <HLCD8_voidStoreCustomChar+0x1c0>
	{
		_delay_ms(__us / 1000.0);
    38a0:	6b a1       	ldd	r22, Y+35	; 0x23
    38a2:	7c a1       	ldd	r23, Y+36	; 0x24
    38a4:	8d a1       	ldd	r24, Y+37	; 0x25
    38a6:	9e a1       	ldd	r25, Y+38	; 0x26
    38a8:	20 e0       	ldi	r18, 0x00	; 0
    38aa:	30 e0       	ldi	r19, 0x00	; 0
    38ac:	4a e7       	ldi	r20, 0x7A	; 122
    38ae:	54 e4       	ldi	r21, 0x44	; 68
    38b0:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    38b4:	dc 01       	movw	r26, r24
    38b6:	cb 01       	movw	r24, r22
    38b8:	8a 8f       	std	Y+26, r24	; 0x1a
    38ba:	9b 8f       	std	Y+27, r25	; 0x1b
    38bc:	ac 8f       	std	Y+28, r26	; 0x1c
    38be:	bd 8f       	std	Y+29, r27	; 0x1d
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    38c0:	6a 8d       	ldd	r22, Y+26	; 0x1a
    38c2:	7b 8d       	ldd	r23, Y+27	; 0x1b
    38c4:	8c 8d       	ldd	r24, Y+28	; 0x1c
    38c6:	9d 8d       	ldd	r25, Y+29	; 0x1d
    38c8:	20 e0       	ldi	r18, 0x00	; 0
    38ca:	30 e0       	ldi	r19, 0x00	; 0
    38cc:	4a ef       	ldi	r20, 0xFA	; 250
    38ce:	54 e4       	ldi	r21, 0x44	; 68
    38d0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    38d4:	dc 01       	movw	r26, r24
    38d6:	cb 01       	movw	r24, r22
    38d8:	8e 8b       	std	Y+22, r24	; 0x16
    38da:	9f 8b       	std	Y+23, r25	; 0x17
    38dc:	a8 8f       	std	Y+24, r26	; 0x18
    38de:	b9 8f       	std	Y+25, r27	; 0x19
	if (__tmp < 1.0)
    38e0:	6e 89       	ldd	r22, Y+22	; 0x16
    38e2:	7f 89       	ldd	r23, Y+23	; 0x17
    38e4:	88 8d       	ldd	r24, Y+24	; 0x18
    38e6:	99 8d       	ldd	r25, Y+25	; 0x19
    38e8:	20 e0       	ldi	r18, 0x00	; 0
    38ea:	30 e0       	ldi	r19, 0x00	; 0
    38ec:	40 e8       	ldi	r20, 0x80	; 128
    38ee:	5f e3       	ldi	r21, 0x3F	; 63
    38f0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    38f4:	88 23       	and	r24, r24
    38f6:	2c f4       	brge	.+10     	; 0x3902 <HLCD8_voidStoreCustomChar+0x12c>
		__ticks = 1;
    38f8:	81 e0       	ldi	r24, 0x01	; 1
    38fa:	90 e0       	ldi	r25, 0x00	; 0
    38fc:	9d 8b       	std	Y+21, r25	; 0x15
    38fe:	8c 8b       	std	Y+20, r24	; 0x14
    3900:	3f c0       	rjmp	.+126    	; 0x3980 <HLCD8_voidStoreCustomChar+0x1aa>
	else if (__tmp > 65535)
    3902:	6e 89       	ldd	r22, Y+22	; 0x16
    3904:	7f 89       	ldd	r23, Y+23	; 0x17
    3906:	88 8d       	ldd	r24, Y+24	; 0x18
    3908:	99 8d       	ldd	r25, Y+25	; 0x19
    390a:	20 e0       	ldi	r18, 0x00	; 0
    390c:	3f ef       	ldi	r19, 0xFF	; 255
    390e:	4f e7       	ldi	r20, 0x7F	; 127
    3910:	57 e4       	ldi	r21, 0x47	; 71
    3912:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3916:	18 16       	cp	r1, r24
    3918:	4c f5       	brge	.+82     	; 0x396c <HLCD8_voidStoreCustomChar+0x196>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    391a:	6a 8d       	ldd	r22, Y+26	; 0x1a
    391c:	7b 8d       	ldd	r23, Y+27	; 0x1b
    391e:	8c 8d       	ldd	r24, Y+28	; 0x1c
    3920:	9d 8d       	ldd	r25, Y+29	; 0x1d
    3922:	20 e0       	ldi	r18, 0x00	; 0
    3924:	30 e0       	ldi	r19, 0x00	; 0
    3926:	40 e2       	ldi	r20, 0x20	; 32
    3928:	51 e4       	ldi	r21, 0x41	; 65
    392a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    392e:	dc 01       	movw	r26, r24
    3930:	cb 01       	movw	r24, r22
    3932:	bc 01       	movw	r22, r24
    3934:	cd 01       	movw	r24, r26
    3936:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    393a:	dc 01       	movw	r26, r24
    393c:	cb 01       	movw	r24, r22
    393e:	9d 8b       	std	Y+21, r25	; 0x15
    3940:	8c 8b       	std	Y+20, r24	; 0x14
    3942:	0f c0       	rjmp	.+30     	; 0x3962 <HLCD8_voidStoreCustomChar+0x18c>
    3944:	88 ec       	ldi	r24, 0xC8	; 200
    3946:	90 e0       	ldi	r25, 0x00	; 0
    3948:	9b 8b       	std	Y+19, r25	; 0x13
    394a:	8a 8b       	std	Y+18, r24	; 0x12
    394c:	8a 89       	ldd	r24, Y+18	; 0x12
    394e:	9b 89       	ldd	r25, Y+19	; 0x13
    3950:	01 97       	sbiw	r24, 0x01	; 1
    3952:	f1 f7       	brne	.-4      	; 0x3950 <HLCD8_voidStoreCustomChar+0x17a>
    3954:	9b 8b       	std	Y+19, r25	; 0x13
    3956:	8a 8b       	std	Y+18, r24	; 0x12
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3958:	8c 89       	ldd	r24, Y+20	; 0x14
    395a:	9d 89       	ldd	r25, Y+21	; 0x15
    395c:	01 97       	sbiw	r24, 0x01	; 1
    395e:	9d 8b       	std	Y+21, r25	; 0x15
    3960:	8c 8b       	std	Y+20, r24	; 0x14
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3962:	8c 89       	ldd	r24, Y+20	; 0x14
    3964:	9d 89       	ldd	r25, Y+21	; 0x15
    3966:	00 97       	sbiw	r24, 0x00	; 0
    3968:	69 f7       	brne	.-38     	; 0x3944 <HLCD8_voidStoreCustomChar+0x16e>
    396a:	24 c0       	rjmp	.+72     	; 0x39b4 <HLCD8_voidStoreCustomChar+0x1de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    396c:	6e 89       	ldd	r22, Y+22	; 0x16
    396e:	7f 89       	ldd	r23, Y+23	; 0x17
    3970:	88 8d       	ldd	r24, Y+24	; 0x18
    3972:	99 8d       	ldd	r25, Y+25	; 0x19
    3974:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3978:	dc 01       	movw	r26, r24
    397a:	cb 01       	movw	r24, r22
    397c:	9d 8b       	std	Y+21, r25	; 0x15
    397e:	8c 8b       	std	Y+20, r24	; 0x14
    3980:	8c 89       	ldd	r24, Y+20	; 0x14
    3982:	9d 89       	ldd	r25, Y+21	; 0x15
    3984:	99 8b       	std	Y+17, r25	; 0x11
    3986:	88 8b       	std	Y+16, r24	; 0x10
    3988:	88 89       	ldd	r24, Y+16	; 0x10
    398a:	99 89       	ldd	r25, Y+17	; 0x11
    398c:	01 97       	sbiw	r24, 0x01	; 1
    398e:	f1 f7       	brne	.-4      	; 0x398c <HLCD8_voidStoreCustomChar+0x1b6>
    3990:	99 8b       	std	Y+17, r25	; 0x11
    3992:	88 8b       	std	Y+16, r24	; 0x10
    3994:	0f c0       	rjmp	.+30     	; 0x39b4 <HLCD8_voidStoreCustomChar+0x1de>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    3996:	6f 8d       	ldd	r22, Y+31	; 0x1f
    3998:	78 a1       	ldd	r23, Y+32	; 0x20
    399a:	89 a1       	ldd	r24, Y+33	; 0x21
    399c:	9a a1       	ldd	r25, Y+34	; 0x22
    399e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    39a2:	dc 01       	movw	r26, r24
    39a4:	cb 01       	movw	r24, r22
    39a6:	8e 8f       	std	Y+30, r24	; 0x1e
    39a8:	8e 8d       	ldd	r24, Y+30	; 0x1e
    39aa:	8f 87       	std	Y+15, r24	; 0x0f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    39ac:	8f 85       	ldd	r24, Y+15	; 0x0f
    39ae:	8a 95       	dec	r24
    39b0:	f1 f7       	brne	.-4      	; 0x39ae <HLCD8_voidStoreCustomChar+0x1d8>
    39b2:	8f 87       	std	Y+15, r24	; 0x0f
    {
        A_u8CGRAMIndex=A_u8CGRAMIndex*8;
        SET_BIT(A_u8CGRAMIndex,PIN6);
        CLR_BIT(A_u8CGRAMIndex,PIN7);
        HLCD8_voidSendCommand(A_u8CGRAMIndex);
        for(u8 i=0;i<8;i++)
    39b4:	8f a1       	ldd	r24, Y+39	; 0x27
    39b6:	8f 5f       	subi	r24, 0xFF	; 255
    39b8:	8f a3       	std	Y+39, r24	; 0x27
    39ba:	8f a1       	ldd	r24, Y+39	; 0x27
    39bc:	88 30       	cpi	r24, 0x08	; 8
    39be:	08 f4       	brcc	.+2      	; 0x39c2 <HLCD8_voidStoreCustomChar+0x1ec>
    39c0:	30 cf       	rjmp	.-416    	; 0x3822 <HLCD8_voidStoreCustomChar+0x4c>
        {
            HLCD8_voidSendData(A_u8Pattern[i]);
            _delay_us(60);
        }
    }
    HLCD8_voidSendCommand(RETURN_HOME);
    39c2:	82 e0       	ldi	r24, 0x02	; 2
    39c4:	0e 94 12 17 	call	0x2e24	; 0x2e24 <HLCD8_voidSendCommand>
    39c8:	80 e0       	ldi	r24, 0x00	; 0
    39ca:	90 e0       	ldi	r25, 0x00	; 0
    39cc:	a0 e0       	ldi	r26, 0x00	; 0
    39ce:	b0 e4       	ldi	r27, 0x40	; 64
    39d0:	8b 87       	std	Y+11, r24	; 0x0b
    39d2:	9c 87       	std	Y+12, r25	; 0x0c
    39d4:	ad 87       	std	Y+13, r26	; 0x0d
    39d6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    39d8:	6b 85       	ldd	r22, Y+11	; 0x0b
    39da:	7c 85       	ldd	r23, Y+12	; 0x0c
    39dc:	8d 85       	ldd	r24, Y+13	; 0x0d
    39de:	9e 85       	ldd	r25, Y+14	; 0x0e
    39e0:	20 e0       	ldi	r18, 0x00	; 0
    39e2:	30 e0       	ldi	r19, 0x00	; 0
    39e4:	4a ef       	ldi	r20, 0xFA	; 250
    39e6:	54 e4       	ldi	r21, 0x44	; 68
    39e8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    39ec:	dc 01       	movw	r26, r24
    39ee:	cb 01       	movw	r24, r22
    39f0:	8f 83       	std	Y+7, r24	; 0x07
    39f2:	98 87       	std	Y+8, r25	; 0x08
    39f4:	a9 87       	std	Y+9, r26	; 0x09
    39f6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    39f8:	6f 81       	ldd	r22, Y+7	; 0x07
    39fa:	78 85       	ldd	r23, Y+8	; 0x08
    39fc:	89 85       	ldd	r24, Y+9	; 0x09
    39fe:	9a 85       	ldd	r25, Y+10	; 0x0a
    3a00:	20 e0       	ldi	r18, 0x00	; 0
    3a02:	30 e0       	ldi	r19, 0x00	; 0
    3a04:	40 e8       	ldi	r20, 0x80	; 128
    3a06:	5f e3       	ldi	r21, 0x3F	; 63
    3a08:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3a0c:	88 23       	and	r24, r24
    3a0e:	2c f4       	brge	.+10     	; 0x3a1a <HLCD8_voidStoreCustomChar+0x244>
		__ticks = 1;
    3a10:	81 e0       	ldi	r24, 0x01	; 1
    3a12:	90 e0       	ldi	r25, 0x00	; 0
    3a14:	9e 83       	std	Y+6, r25	; 0x06
    3a16:	8d 83       	std	Y+5, r24	; 0x05
    3a18:	3f c0       	rjmp	.+126    	; 0x3a98 <HLCD8_voidStoreCustomChar+0x2c2>
	else if (__tmp > 65535)
    3a1a:	6f 81       	ldd	r22, Y+7	; 0x07
    3a1c:	78 85       	ldd	r23, Y+8	; 0x08
    3a1e:	89 85       	ldd	r24, Y+9	; 0x09
    3a20:	9a 85       	ldd	r25, Y+10	; 0x0a
    3a22:	20 e0       	ldi	r18, 0x00	; 0
    3a24:	3f ef       	ldi	r19, 0xFF	; 255
    3a26:	4f e7       	ldi	r20, 0x7F	; 127
    3a28:	57 e4       	ldi	r21, 0x47	; 71
    3a2a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3a2e:	18 16       	cp	r1, r24
    3a30:	4c f5       	brge	.+82     	; 0x3a84 <HLCD8_voidStoreCustomChar+0x2ae>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3a32:	6b 85       	ldd	r22, Y+11	; 0x0b
    3a34:	7c 85       	ldd	r23, Y+12	; 0x0c
    3a36:	8d 85       	ldd	r24, Y+13	; 0x0d
    3a38:	9e 85       	ldd	r25, Y+14	; 0x0e
    3a3a:	20 e0       	ldi	r18, 0x00	; 0
    3a3c:	30 e0       	ldi	r19, 0x00	; 0
    3a3e:	40 e2       	ldi	r20, 0x20	; 32
    3a40:	51 e4       	ldi	r21, 0x41	; 65
    3a42:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a46:	dc 01       	movw	r26, r24
    3a48:	cb 01       	movw	r24, r22
    3a4a:	bc 01       	movw	r22, r24
    3a4c:	cd 01       	movw	r24, r26
    3a4e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3a52:	dc 01       	movw	r26, r24
    3a54:	cb 01       	movw	r24, r22
    3a56:	9e 83       	std	Y+6, r25	; 0x06
    3a58:	8d 83       	std	Y+5, r24	; 0x05
    3a5a:	0f c0       	rjmp	.+30     	; 0x3a7a <HLCD8_voidStoreCustomChar+0x2a4>
    3a5c:	88 ec       	ldi	r24, 0xC8	; 200
    3a5e:	90 e0       	ldi	r25, 0x00	; 0
    3a60:	9c 83       	std	Y+4, r25	; 0x04
    3a62:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3a64:	8b 81       	ldd	r24, Y+3	; 0x03
    3a66:	9c 81       	ldd	r25, Y+4	; 0x04
    3a68:	01 97       	sbiw	r24, 0x01	; 1
    3a6a:	f1 f7       	brne	.-4      	; 0x3a68 <HLCD8_voidStoreCustomChar+0x292>
    3a6c:	9c 83       	std	Y+4, r25	; 0x04
    3a6e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3a70:	8d 81       	ldd	r24, Y+5	; 0x05
    3a72:	9e 81       	ldd	r25, Y+6	; 0x06
    3a74:	01 97       	sbiw	r24, 0x01	; 1
    3a76:	9e 83       	std	Y+6, r25	; 0x06
    3a78:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3a7a:	8d 81       	ldd	r24, Y+5	; 0x05
    3a7c:	9e 81       	ldd	r25, Y+6	; 0x06
    3a7e:	00 97       	sbiw	r24, 0x00	; 0
    3a80:	69 f7       	brne	.-38     	; 0x3a5c <HLCD8_voidStoreCustomChar+0x286>
    3a82:	14 c0       	rjmp	.+40     	; 0x3aac <HLCD8_voidStoreCustomChar+0x2d6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3a84:	6f 81       	ldd	r22, Y+7	; 0x07
    3a86:	78 85       	ldd	r23, Y+8	; 0x08
    3a88:	89 85       	ldd	r24, Y+9	; 0x09
    3a8a:	9a 85       	ldd	r25, Y+10	; 0x0a
    3a8c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3a90:	dc 01       	movw	r26, r24
    3a92:	cb 01       	movw	r24, r22
    3a94:	9e 83       	std	Y+6, r25	; 0x06
    3a96:	8d 83       	std	Y+5, r24	; 0x05
    3a98:	8d 81       	ldd	r24, Y+5	; 0x05
    3a9a:	9e 81       	ldd	r25, Y+6	; 0x06
    3a9c:	9a 83       	std	Y+2, r25	; 0x02
    3a9e:	89 83       	std	Y+1, r24	; 0x01
    3aa0:	89 81       	ldd	r24, Y+1	; 0x01
    3aa2:	9a 81       	ldd	r25, Y+2	; 0x02
    3aa4:	01 97       	sbiw	r24, 0x01	; 1
    3aa6:	f1 f7       	brne	.-4      	; 0x3aa4 <HLCD8_voidStoreCustomChar+0x2ce>
    3aa8:	9a 83       	std	Y+2, r25	; 0x02
    3aaa:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(2);

}
    3aac:	ab 96       	adiw	r28, 0x2b	; 43
    3aae:	0f b6       	in	r0, 0x3f	; 63
    3ab0:	f8 94       	cli
    3ab2:	de bf       	out	0x3e, r29	; 62
    3ab4:	0f be       	out	0x3f, r0	; 63
    3ab6:	cd bf       	out	0x3d, r28	; 61
    3ab8:	cf 91       	pop	r28
    3aba:	df 91       	pop	r29
    3abc:	08 95       	ret

00003abe <HLCD8_voidDisplayCustomChar>:

void HLCD8_voidDisplayCustomChar(u8 A_u8CGRAMIndex,u8 A_u8Row,u8 A_u8Col)
{
    3abe:	df 93       	push	r29
    3ac0:	cf 93       	push	r28
    3ac2:	00 d0       	rcall	.+0      	; 0x3ac4 <HLCD8_voidDisplayCustomChar+0x6>
    3ac4:	0f 92       	push	r0
    3ac6:	cd b7       	in	r28, 0x3d	; 61
    3ac8:	de b7       	in	r29, 0x3e	; 62
    3aca:	89 83       	std	Y+1, r24	; 0x01
    3acc:	6a 83       	std	Y+2, r22	; 0x02
    3ace:	4b 83       	std	Y+3, r20	; 0x03
    HLCD8_voidGoToPos(A_u8Row,A_u8Col);
    3ad0:	8a 81       	ldd	r24, Y+2	; 0x02
    3ad2:	6b 81       	ldd	r22, Y+3	; 0x03
    3ad4:	0e 94 e6 1a 	call	0x35cc	; 0x35cc <HLCD8_voidGoToPos>
    HLCD8_voidSendData(A_u8CGRAMIndex);
    3ad8:	89 81       	ldd	r24, Y+1	; 0x01
    3ada:	0e 94 b0 17 	call	0x2f60	; 0x2f60 <HLCD8_voidSendData>
    3ade:	0f 90       	pop	r0
    3ae0:	0f 90       	pop	r0
    3ae2:	0f 90       	pop	r0
    3ae4:	cf 91       	pop	r28
    3ae6:	df 91       	pop	r29
    3ae8:	08 95       	ret

00003aea <HSSD_voidDisplay>:
#include "../Include/HAL/SSD/SSD_Private.h"
#include "../Include/HAL/SSD/SSD_Configuration.h"

#include <util/delay.h>
void HSSD_voidDisplay(u8 A_u8Number,u8 A_u8PortId)
{
    3aea:	df 93       	push	r29
    3aec:	cf 93       	push	r28
    3aee:	00 d0       	rcall	.+0      	; 0x3af0 <HSSD_voidDisplay+0x6>
    3af0:	00 d0       	rcall	.+0      	; 0x3af2 <HSSD_voidDisplay+0x8>
    3af2:	cd b7       	in	r28, 0x3d	; 61
    3af4:	de b7       	in	r29, 0x3e	; 62
    3af6:	89 83       	std	Y+1, r24	; 0x01
    3af8:	6a 83       	std	Y+2, r22	; 0x02
	switch(A_u8Number)
    3afa:	89 81       	ldd	r24, Y+1	; 0x01
    3afc:	28 2f       	mov	r18, r24
    3afe:	30 e0       	ldi	r19, 0x00	; 0
    3b00:	3c 83       	std	Y+4, r19	; 0x04
    3b02:	2b 83       	std	Y+3, r18	; 0x03
    3b04:	8b 81       	ldd	r24, Y+3	; 0x03
    3b06:	9c 81       	ldd	r25, Y+4	; 0x04
    3b08:	8b 35       	cpi	r24, 0x5B	; 91
    3b0a:	91 05       	cpc	r25, r1
    3b0c:	09 f4       	brne	.+2      	; 0x3b10 <HSSD_voidDisplay+0x26>
    3b0e:	4c c0       	rjmp	.+152    	; 0x3ba8 <HSSD_voidDisplay+0xbe>
    3b10:	2b 81       	ldd	r18, Y+3	; 0x03
    3b12:	3c 81       	ldd	r19, Y+4	; 0x04
    3b14:	2c 35       	cpi	r18, 0x5C	; 92
    3b16:	31 05       	cpc	r19, r1
    3b18:	e4 f4       	brge	.+56     	; 0x3b52 <HSSD_voidDisplay+0x68>
    3b1a:	8b 81       	ldd	r24, Y+3	; 0x03
    3b1c:	9c 81       	ldd	r25, Y+4	; 0x04
    3b1e:	87 30       	cpi	r24, 0x07	; 7
    3b20:	91 05       	cpc	r25, r1
    3b22:	09 f4       	brne	.+2      	; 0x3b26 <HSSD_voidDisplay+0x3c>
    3b24:	5a c0       	rjmp	.+180    	; 0x3bda <HSSD_voidDisplay+0xf0>
    3b26:	2b 81       	ldd	r18, Y+3	; 0x03
    3b28:	3c 81       	ldd	r19, Y+4	; 0x04
    3b2a:	28 30       	cpi	r18, 0x08	; 8
    3b2c:	31 05       	cpc	r19, r1
    3b2e:	34 f4       	brge	.+12     	; 0x3b3c <HSSD_voidDisplay+0x52>
    3b30:	8b 81       	ldd	r24, Y+3	; 0x03
    3b32:	9c 81       	ldd	r25, Y+4	; 0x04
    3b34:	86 30       	cpi	r24, 0x06	; 6
    3b36:	91 05       	cpc	r25, r1
    3b38:	91 f1       	breq	.+100    	; 0x3b9e <HSSD_voidDisplay+0xb4>
    3b3a:	5d c0       	rjmp	.+186    	; 0x3bf6 <HSSD_voidDisplay+0x10c>
    3b3c:	2b 81       	ldd	r18, Y+3	; 0x03
    3b3e:	3c 81       	ldd	r19, Y+4	; 0x04
    3b40:	2f 33       	cpi	r18, 0x3F	; 63
    3b42:	31 05       	cpc	r19, r1
    3b44:	39 f1       	breq	.+78     	; 0x3b94 <HSSD_voidDisplay+0xaa>
    3b46:	8b 81       	ldd	r24, Y+3	; 0x03
    3b48:	9c 81       	ldd	r25, Y+4	; 0x04
    3b4a:	8f 34       	cpi	r24, 0x4F	; 79
    3b4c:	91 05       	cpc	r25, r1
    3b4e:	89 f1       	breq	.+98     	; 0x3bb2 <HSSD_voidDisplay+0xc8>
    3b50:	52 c0       	rjmp	.+164    	; 0x3bf6 <HSSD_voidDisplay+0x10c>
    3b52:	2b 81       	ldd	r18, Y+3	; 0x03
    3b54:	3c 81       	ldd	r19, Y+4	; 0x04
    3b56:	2f 36       	cpi	r18, 0x6F	; 111
    3b58:	31 05       	cpc	r19, r1
    3b5a:	09 f4       	brne	.+2      	; 0x3b5e <HSSD_voidDisplay+0x74>
    3b5c:	48 c0       	rjmp	.+144    	; 0x3bee <HSSD_voidDisplay+0x104>
    3b5e:	8b 81       	ldd	r24, Y+3	; 0x03
    3b60:	9c 81       	ldd	r25, Y+4	; 0x04
    3b62:	80 37       	cpi	r24, 0x70	; 112
    3b64:	91 05       	cpc	r25, r1
    3b66:	5c f4       	brge	.+22     	; 0x3b7e <HSSD_voidDisplay+0x94>
    3b68:	2b 81       	ldd	r18, Y+3	; 0x03
    3b6a:	3c 81       	ldd	r19, Y+4	; 0x04
    3b6c:	26 36       	cpi	r18, 0x66	; 102
    3b6e:	31 05       	cpc	r19, r1
    3b70:	29 f1       	breq	.+74     	; 0x3bbc <HSSD_voidDisplay+0xd2>
    3b72:	8b 81       	ldd	r24, Y+3	; 0x03
    3b74:	9c 81       	ldd	r25, Y+4	; 0x04
    3b76:	8d 36       	cpi	r24, 0x6D	; 109
    3b78:	91 05       	cpc	r25, r1
    3b7a:	29 f1       	breq	.+74     	; 0x3bc6 <HSSD_voidDisplay+0xdc>
    3b7c:	3c c0       	rjmp	.+120    	; 0x3bf6 <HSSD_voidDisplay+0x10c>
    3b7e:	2b 81       	ldd	r18, Y+3	; 0x03
    3b80:	3c 81       	ldd	r19, Y+4	; 0x04
    3b82:	2d 37       	cpi	r18, 0x7D	; 125
    3b84:	31 05       	cpc	r19, r1
    3b86:	21 f1       	breq	.+72     	; 0x3bd0 <HSSD_voidDisplay+0xe6>
    3b88:	8b 81       	ldd	r24, Y+3	; 0x03
    3b8a:	9c 81       	ldd	r25, Y+4	; 0x04
    3b8c:	8f 37       	cpi	r24, 0x7F	; 127
    3b8e:	91 05       	cpc	r25, r1
    3b90:	49 f1       	breq	.+82     	; 0x3be4 <HSSD_voidDisplay+0xfa>
    3b92:	31 c0       	rjmp	.+98     	; 0x3bf6 <HSSD_voidDisplay+0x10c>
	{
	case ZERO:
		MDIO_voidSetPortValue(A_u8PortId,ZERO);
    3b94:	8a 81       	ldd	r24, Y+2	; 0x02
    3b96:	6f e3       	ldi	r22, 0x3F	; 63
    3b98:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_voidSetPortValue>
    3b9c:	2c c0       	rjmp	.+88     	; 0x3bf6 <HSSD_voidDisplay+0x10c>
		break;
	case ONE:
		MDIO_voidSetPortValue(A_u8PortId,ONE);
    3b9e:	8a 81       	ldd	r24, Y+2	; 0x02
    3ba0:	66 e0       	ldi	r22, 0x06	; 6
    3ba2:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_voidSetPortValue>
    3ba6:	27 c0       	rjmp	.+78     	; 0x3bf6 <HSSD_voidDisplay+0x10c>
		break;
	case TWO:
		MDIO_voidSetPortValue(A_u8PortId,TWO);
    3ba8:	8a 81       	ldd	r24, Y+2	; 0x02
    3baa:	6b e5       	ldi	r22, 0x5B	; 91
    3bac:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_voidSetPortValue>
    3bb0:	22 c0       	rjmp	.+68     	; 0x3bf6 <HSSD_voidDisplay+0x10c>
		break;
	case THREE:
		MDIO_voidSetPortValue(A_u8PortId,THREE);
    3bb2:	8a 81       	ldd	r24, Y+2	; 0x02
    3bb4:	6f e4       	ldi	r22, 0x4F	; 79
    3bb6:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_voidSetPortValue>
    3bba:	1d c0       	rjmp	.+58     	; 0x3bf6 <HSSD_voidDisplay+0x10c>
		break;
	case FOUR:
		MDIO_voidSetPortValue(A_u8PortId,FOUR);
    3bbc:	8a 81       	ldd	r24, Y+2	; 0x02
    3bbe:	66 e6       	ldi	r22, 0x66	; 102
    3bc0:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_voidSetPortValue>
    3bc4:	18 c0       	rjmp	.+48     	; 0x3bf6 <HSSD_voidDisplay+0x10c>
		break;
	case FIVE:
		MDIO_voidSetPortValue(A_u8PortId,FIVE);
    3bc6:	8a 81       	ldd	r24, Y+2	; 0x02
    3bc8:	6d e6       	ldi	r22, 0x6D	; 109
    3bca:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_voidSetPortValue>
    3bce:	13 c0       	rjmp	.+38     	; 0x3bf6 <HSSD_voidDisplay+0x10c>
		break;
	case SIX:
		MDIO_voidSetPortValue(A_u8PortId,SIX);
    3bd0:	8a 81       	ldd	r24, Y+2	; 0x02
    3bd2:	6d e7       	ldi	r22, 0x7D	; 125
    3bd4:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_voidSetPortValue>
    3bd8:	0e c0       	rjmp	.+28     	; 0x3bf6 <HSSD_voidDisplay+0x10c>
		break;
	case SEVEN:
		MDIO_voidSetPortValue(A_u8PortId,SEVEN);
    3bda:	8a 81       	ldd	r24, Y+2	; 0x02
    3bdc:	67 e0       	ldi	r22, 0x07	; 7
    3bde:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_voidSetPortValue>
    3be2:	09 c0       	rjmp	.+18     	; 0x3bf6 <HSSD_voidDisplay+0x10c>
		break;
	case EIGHT:
		MDIO_voidSetPortValue(A_u8PortId,EIGHT);
    3be4:	8a 81       	ldd	r24, Y+2	; 0x02
    3be6:	6f e7       	ldi	r22, 0x7F	; 127
    3be8:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_voidSetPortValue>
    3bec:	04 c0       	rjmp	.+8      	; 0x3bf6 <HSSD_voidDisplay+0x10c>
		break;
	case NINE:
		MDIO_voidSetPortValue(A_u8PortId,NINE);
    3bee:	8a 81       	ldd	r24, Y+2	; 0x02
    3bf0:	6f e6       	ldi	r22, 0x6F	; 111
    3bf2:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <MDIO_voidSetPortValue>
		break;
	}
}
    3bf6:	0f 90       	pop	r0
    3bf8:	0f 90       	pop	r0
    3bfa:	0f 90       	pop	r0
    3bfc:	0f 90       	pop	r0
    3bfe:	cf 91       	pop	r28
    3c00:	df 91       	pop	r29
    3c02:	08 95       	ret

00003c04 <HSSD_voidDisplayAscending>:

void HSSD_voidDisplayAscending(u8 A_u8PortId)
{
    3c04:	df 93       	push	r29
    3c06:	cf 93       	push	r28
    3c08:	cd b7       	in	r28, 0x3d	; 61
    3c0a:	de b7       	in	r29, 0x3e	; 62
    3c0c:	6f 97       	sbiw	r28, 0x1f	; 31
    3c0e:	0f b6       	in	r0, 0x3f	; 63
    3c10:	f8 94       	cli
    3c12:	de bf       	out	0x3e, r29	; 62
    3c14:	0f be       	out	0x3f, r0	; 63
    3c16:	cd bf       	out	0x3d, r28	; 61
    3c18:	8a 8f       	std	Y+26, r24	; 0x1a
u8 arr[]={ZERO,ONE,TWO,THREE,FOUR,FIVE,SIX,SEVEN,EIGHT,NINE};
    3c1a:	ce 01       	movw	r24, r28
    3c1c:	40 96       	adiw	r24, 0x10	; 16
    3c1e:	9c 8f       	std	Y+28, r25	; 0x1c
    3c20:	8b 8f       	std	Y+27, r24	; 0x1b
    3c22:	e0 e8       	ldi	r30, 0x80	; 128
    3c24:	f0 e0       	ldi	r31, 0x00	; 0
    3c26:	fe 8f       	std	Y+30, r31	; 0x1e
    3c28:	ed 8f       	std	Y+29, r30	; 0x1d
    3c2a:	fa e0       	ldi	r31, 0x0A	; 10
    3c2c:	ff 8f       	std	Y+31, r31	; 0x1f
    3c2e:	ed 8d       	ldd	r30, Y+29	; 0x1d
    3c30:	fe 8d       	ldd	r31, Y+30	; 0x1e
    3c32:	00 80       	ld	r0, Z
    3c34:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3c36:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3c38:	01 96       	adiw	r24, 0x01	; 1
    3c3a:	9e 8f       	std	Y+30, r25	; 0x1e
    3c3c:	8d 8f       	std	Y+29, r24	; 0x1d
    3c3e:	eb 8d       	ldd	r30, Y+27	; 0x1b
    3c40:	fc 8d       	ldd	r31, Y+28	; 0x1c
    3c42:	00 82       	st	Z, r0
    3c44:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3c46:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3c48:	01 96       	adiw	r24, 0x01	; 1
    3c4a:	9c 8f       	std	Y+28, r25	; 0x1c
    3c4c:	8b 8f       	std	Y+27, r24	; 0x1b
    3c4e:	9f 8d       	ldd	r25, Y+31	; 0x1f
    3c50:	91 50       	subi	r25, 0x01	; 1
    3c52:	9f 8f       	std	Y+31, r25	; 0x1f
    3c54:	ef 8d       	ldd	r30, Y+31	; 0x1f
    3c56:	ee 23       	and	r30, r30
    3c58:	51 f7       	brne	.-44     	; 0x3c2e <HSSD_voidDisplayAscending+0x2a>
	for(u8 i=0;i<10;i++)
    3c5a:	1f 86       	std	Y+15, r1	; 0x0f
    3c5c:	81 c0       	rjmp	.+258    	; 0x3d60 <HSSD_voidDisplayAscending+0x15c>
	{
		HSSD_voidDisplay(arr[i],A_u8PortId);
    3c5e:	8f 85       	ldd	r24, Y+15	; 0x0f
    3c60:	28 2f       	mov	r18, r24
    3c62:	30 e0       	ldi	r19, 0x00	; 0
    3c64:	ce 01       	movw	r24, r28
    3c66:	40 96       	adiw	r24, 0x10	; 16
    3c68:	fc 01       	movw	r30, r24
    3c6a:	e2 0f       	add	r30, r18
    3c6c:	f3 1f       	adc	r31, r19
    3c6e:	80 81       	ld	r24, Z
    3c70:	6a 8d       	ldd	r22, Y+26	; 0x1a
    3c72:	0e 94 75 1d 	call	0x3aea	; 0x3aea <HSSD_voidDisplay>
    3c76:	80 e0       	ldi	r24, 0x00	; 0
    3c78:	90 e0       	ldi	r25, 0x00	; 0
    3c7a:	aa e7       	ldi	r26, 0x7A	; 122
    3c7c:	b4 e4       	ldi	r27, 0x44	; 68
    3c7e:	8b 87       	std	Y+11, r24	; 0x0b
    3c80:	9c 87       	std	Y+12, r25	; 0x0c
    3c82:	ad 87       	std	Y+13, r26	; 0x0d
    3c84:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3c86:	6b 85       	ldd	r22, Y+11	; 0x0b
    3c88:	7c 85       	ldd	r23, Y+12	; 0x0c
    3c8a:	8d 85       	ldd	r24, Y+13	; 0x0d
    3c8c:	9e 85       	ldd	r25, Y+14	; 0x0e
    3c8e:	20 e0       	ldi	r18, 0x00	; 0
    3c90:	30 e0       	ldi	r19, 0x00	; 0
    3c92:	4a ef       	ldi	r20, 0xFA	; 250
    3c94:	54 e4       	ldi	r21, 0x44	; 68
    3c96:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3c9a:	dc 01       	movw	r26, r24
    3c9c:	cb 01       	movw	r24, r22
    3c9e:	8f 83       	std	Y+7, r24	; 0x07
    3ca0:	98 87       	std	Y+8, r25	; 0x08
    3ca2:	a9 87       	std	Y+9, r26	; 0x09
    3ca4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3ca6:	6f 81       	ldd	r22, Y+7	; 0x07
    3ca8:	78 85       	ldd	r23, Y+8	; 0x08
    3caa:	89 85       	ldd	r24, Y+9	; 0x09
    3cac:	9a 85       	ldd	r25, Y+10	; 0x0a
    3cae:	20 e0       	ldi	r18, 0x00	; 0
    3cb0:	30 e0       	ldi	r19, 0x00	; 0
    3cb2:	40 e8       	ldi	r20, 0x80	; 128
    3cb4:	5f e3       	ldi	r21, 0x3F	; 63
    3cb6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3cba:	88 23       	and	r24, r24
    3cbc:	2c f4       	brge	.+10     	; 0x3cc8 <HSSD_voidDisplayAscending+0xc4>
		__ticks = 1;
    3cbe:	81 e0       	ldi	r24, 0x01	; 1
    3cc0:	90 e0       	ldi	r25, 0x00	; 0
    3cc2:	9e 83       	std	Y+6, r25	; 0x06
    3cc4:	8d 83       	std	Y+5, r24	; 0x05
    3cc6:	3f c0       	rjmp	.+126    	; 0x3d46 <HSSD_voidDisplayAscending+0x142>
	else if (__tmp > 65535)
    3cc8:	6f 81       	ldd	r22, Y+7	; 0x07
    3cca:	78 85       	ldd	r23, Y+8	; 0x08
    3ccc:	89 85       	ldd	r24, Y+9	; 0x09
    3cce:	9a 85       	ldd	r25, Y+10	; 0x0a
    3cd0:	20 e0       	ldi	r18, 0x00	; 0
    3cd2:	3f ef       	ldi	r19, 0xFF	; 255
    3cd4:	4f e7       	ldi	r20, 0x7F	; 127
    3cd6:	57 e4       	ldi	r21, 0x47	; 71
    3cd8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3cdc:	18 16       	cp	r1, r24
    3cde:	4c f5       	brge	.+82     	; 0x3d32 <HSSD_voidDisplayAscending+0x12e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3ce0:	6b 85       	ldd	r22, Y+11	; 0x0b
    3ce2:	7c 85       	ldd	r23, Y+12	; 0x0c
    3ce4:	8d 85       	ldd	r24, Y+13	; 0x0d
    3ce6:	9e 85       	ldd	r25, Y+14	; 0x0e
    3ce8:	20 e0       	ldi	r18, 0x00	; 0
    3cea:	30 e0       	ldi	r19, 0x00	; 0
    3cec:	40 e2       	ldi	r20, 0x20	; 32
    3cee:	51 e4       	ldi	r21, 0x41	; 65
    3cf0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3cf4:	dc 01       	movw	r26, r24
    3cf6:	cb 01       	movw	r24, r22
    3cf8:	bc 01       	movw	r22, r24
    3cfa:	cd 01       	movw	r24, r26
    3cfc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3d00:	dc 01       	movw	r26, r24
    3d02:	cb 01       	movw	r24, r22
    3d04:	9e 83       	std	Y+6, r25	; 0x06
    3d06:	8d 83       	std	Y+5, r24	; 0x05
    3d08:	0f c0       	rjmp	.+30     	; 0x3d28 <HSSD_voidDisplayAscending+0x124>
    3d0a:	88 ec       	ldi	r24, 0xC8	; 200
    3d0c:	90 e0       	ldi	r25, 0x00	; 0
    3d0e:	9c 83       	std	Y+4, r25	; 0x04
    3d10:	8b 83       	std	Y+3, r24	; 0x03
    3d12:	8b 81       	ldd	r24, Y+3	; 0x03
    3d14:	9c 81       	ldd	r25, Y+4	; 0x04
    3d16:	01 97       	sbiw	r24, 0x01	; 1
    3d18:	f1 f7       	brne	.-4      	; 0x3d16 <HSSD_voidDisplayAscending+0x112>
    3d1a:	9c 83       	std	Y+4, r25	; 0x04
    3d1c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3d1e:	8d 81       	ldd	r24, Y+5	; 0x05
    3d20:	9e 81       	ldd	r25, Y+6	; 0x06
    3d22:	01 97       	sbiw	r24, 0x01	; 1
    3d24:	9e 83       	std	Y+6, r25	; 0x06
    3d26:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3d28:	8d 81       	ldd	r24, Y+5	; 0x05
    3d2a:	9e 81       	ldd	r25, Y+6	; 0x06
    3d2c:	00 97       	sbiw	r24, 0x00	; 0
    3d2e:	69 f7       	brne	.-38     	; 0x3d0a <HSSD_voidDisplayAscending+0x106>
    3d30:	14 c0       	rjmp	.+40     	; 0x3d5a <HSSD_voidDisplayAscending+0x156>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3d32:	6f 81       	ldd	r22, Y+7	; 0x07
    3d34:	78 85       	ldd	r23, Y+8	; 0x08
    3d36:	89 85       	ldd	r24, Y+9	; 0x09
    3d38:	9a 85       	ldd	r25, Y+10	; 0x0a
    3d3a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3d3e:	dc 01       	movw	r26, r24
    3d40:	cb 01       	movw	r24, r22
    3d42:	9e 83       	std	Y+6, r25	; 0x06
    3d44:	8d 83       	std	Y+5, r24	; 0x05
    3d46:	8d 81       	ldd	r24, Y+5	; 0x05
    3d48:	9e 81       	ldd	r25, Y+6	; 0x06
    3d4a:	9a 83       	std	Y+2, r25	; 0x02
    3d4c:	89 83       	std	Y+1, r24	; 0x01
    3d4e:	89 81       	ldd	r24, Y+1	; 0x01
    3d50:	9a 81       	ldd	r25, Y+2	; 0x02
    3d52:	01 97       	sbiw	r24, 0x01	; 1
    3d54:	f1 f7       	brne	.-4      	; 0x3d52 <HSSD_voidDisplayAscending+0x14e>
    3d56:	9a 83       	std	Y+2, r25	; 0x02
    3d58:	89 83       	std	Y+1, r24	; 0x01
}

void HSSD_voidDisplayAscending(u8 A_u8PortId)
{
u8 arr[]={ZERO,ONE,TWO,THREE,FOUR,FIVE,SIX,SEVEN,EIGHT,NINE};
	for(u8 i=0;i<10;i++)
    3d5a:	8f 85       	ldd	r24, Y+15	; 0x0f
    3d5c:	8f 5f       	subi	r24, 0xFF	; 255
    3d5e:	8f 87       	std	Y+15, r24	; 0x0f
    3d60:	8f 85       	ldd	r24, Y+15	; 0x0f
    3d62:	8a 30       	cpi	r24, 0x0A	; 10
    3d64:	08 f4       	brcc	.+2      	; 0x3d68 <HSSD_voidDisplayAscending+0x164>
    3d66:	7b cf       	rjmp	.-266    	; 0x3c5e <HSSD_voidDisplayAscending+0x5a>
	{
		HSSD_voidDisplay(arr[i],A_u8PortId);
		_delay_ms(SSD_DELAY);
	}
}
    3d68:	6f 96       	adiw	r28, 0x1f	; 31
    3d6a:	0f b6       	in	r0, 0x3f	; 63
    3d6c:	f8 94       	cli
    3d6e:	de bf       	out	0x3e, r29	; 62
    3d70:	0f be       	out	0x3f, r0	; 63
    3d72:	cd bf       	out	0x3d, r28	; 61
    3d74:	cf 91       	pop	r28
    3d76:	df 91       	pop	r29
    3d78:	08 95       	ret

00003d7a <HSSD_voidDisplayDescending>:

void HSSD_voidDisplayDescending(u8 A_u8PortId)
{
    3d7a:	df 93       	push	r29
    3d7c:	cf 93       	push	r28
    3d7e:	cd b7       	in	r28, 0x3d	; 61
    3d80:	de b7       	in	r29, 0x3e	; 62
    3d82:	6f 97       	sbiw	r28, 0x1f	; 31
    3d84:	0f b6       	in	r0, 0x3f	; 63
    3d86:	f8 94       	cli
    3d88:	de bf       	out	0x3e, r29	; 62
    3d8a:	0f be       	out	0x3f, r0	; 63
    3d8c:	cd bf       	out	0x3d, r28	; 61
    3d8e:	8a 8f       	std	Y+26, r24	; 0x1a
u8 arr[]={ZERO,ONE,TWO,THREE,FOUR,FIVE,SIX,SEVEN,EIGHT,NINE};
    3d90:	ce 01       	movw	r24, r28
    3d92:	40 96       	adiw	r24, 0x10	; 16
    3d94:	9c 8f       	std	Y+28, r25	; 0x1c
    3d96:	8b 8f       	std	Y+27, r24	; 0x1b
    3d98:	ea e8       	ldi	r30, 0x8A	; 138
    3d9a:	f0 e0       	ldi	r31, 0x00	; 0
    3d9c:	fe 8f       	std	Y+30, r31	; 0x1e
    3d9e:	ed 8f       	std	Y+29, r30	; 0x1d
    3da0:	fa e0       	ldi	r31, 0x0A	; 10
    3da2:	ff 8f       	std	Y+31, r31	; 0x1f
    3da4:	ed 8d       	ldd	r30, Y+29	; 0x1d
    3da6:	fe 8d       	ldd	r31, Y+30	; 0x1e
    3da8:	00 80       	ld	r0, Z
    3daa:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3dac:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3dae:	01 96       	adiw	r24, 0x01	; 1
    3db0:	9e 8f       	std	Y+30, r25	; 0x1e
    3db2:	8d 8f       	std	Y+29, r24	; 0x1d
    3db4:	eb 8d       	ldd	r30, Y+27	; 0x1b
    3db6:	fc 8d       	ldd	r31, Y+28	; 0x1c
    3db8:	00 82       	st	Z, r0
    3dba:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3dbc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3dbe:	01 96       	adiw	r24, 0x01	; 1
    3dc0:	9c 8f       	std	Y+28, r25	; 0x1c
    3dc2:	8b 8f       	std	Y+27, r24	; 0x1b
    3dc4:	9f 8d       	ldd	r25, Y+31	; 0x1f
    3dc6:	91 50       	subi	r25, 0x01	; 1
    3dc8:	9f 8f       	std	Y+31, r25	; 0x1f
    3dca:	ef 8d       	ldd	r30, Y+31	; 0x1f
    3dcc:	ee 23       	and	r30, r30
    3dce:	51 f7       	brne	.-44     	; 0x3da4 <HSSD_voidDisplayDescending+0x2a>
	for(u8 j=9;j>=0;j--)
    3dd0:	89 e0       	ldi	r24, 0x09	; 9
    3dd2:	8f 87       	std	Y+15, r24	; 0x0f
	{
		HSSD_voidDisplay(arr[j],A_u8PortId);
    3dd4:	8f 85       	ldd	r24, Y+15	; 0x0f
    3dd6:	28 2f       	mov	r18, r24
    3dd8:	30 e0       	ldi	r19, 0x00	; 0
    3dda:	ce 01       	movw	r24, r28
    3ddc:	40 96       	adiw	r24, 0x10	; 16
    3dde:	fc 01       	movw	r30, r24
    3de0:	e2 0f       	add	r30, r18
    3de2:	f3 1f       	adc	r31, r19
    3de4:	80 81       	ld	r24, Z
    3de6:	6a 8d       	ldd	r22, Y+26	; 0x1a
    3de8:	0e 94 75 1d 	call	0x3aea	; 0x3aea <HSSD_voidDisplay>
    3dec:	80 e0       	ldi	r24, 0x00	; 0
    3dee:	90 e0       	ldi	r25, 0x00	; 0
    3df0:	aa e7       	ldi	r26, 0x7A	; 122
    3df2:	b4 e4       	ldi	r27, 0x44	; 68
    3df4:	8b 87       	std	Y+11, r24	; 0x0b
    3df6:	9c 87       	std	Y+12, r25	; 0x0c
    3df8:	ad 87       	std	Y+13, r26	; 0x0d
    3dfa:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3dfc:	6b 85       	ldd	r22, Y+11	; 0x0b
    3dfe:	7c 85       	ldd	r23, Y+12	; 0x0c
    3e00:	8d 85       	ldd	r24, Y+13	; 0x0d
    3e02:	9e 85       	ldd	r25, Y+14	; 0x0e
    3e04:	20 e0       	ldi	r18, 0x00	; 0
    3e06:	30 e0       	ldi	r19, 0x00	; 0
    3e08:	4a ef       	ldi	r20, 0xFA	; 250
    3e0a:	54 e4       	ldi	r21, 0x44	; 68
    3e0c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3e10:	dc 01       	movw	r26, r24
    3e12:	cb 01       	movw	r24, r22
    3e14:	8f 83       	std	Y+7, r24	; 0x07
    3e16:	98 87       	std	Y+8, r25	; 0x08
    3e18:	a9 87       	std	Y+9, r26	; 0x09
    3e1a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3e1c:	6f 81       	ldd	r22, Y+7	; 0x07
    3e1e:	78 85       	ldd	r23, Y+8	; 0x08
    3e20:	89 85       	ldd	r24, Y+9	; 0x09
    3e22:	9a 85       	ldd	r25, Y+10	; 0x0a
    3e24:	20 e0       	ldi	r18, 0x00	; 0
    3e26:	30 e0       	ldi	r19, 0x00	; 0
    3e28:	40 e8       	ldi	r20, 0x80	; 128
    3e2a:	5f e3       	ldi	r21, 0x3F	; 63
    3e2c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3e30:	88 23       	and	r24, r24
    3e32:	2c f4       	brge	.+10     	; 0x3e3e <HSSD_voidDisplayDescending+0xc4>
		__ticks = 1;
    3e34:	81 e0       	ldi	r24, 0x01	; 1
    3e36:	90 e0       	ldi	r25, 0x00	; 0
    3e38:	9e 83       	std	Y+6, r25	; 0x06
    3e3a:	8d 83       	std	Y+5, r24	; 0x05
    3e3c:	3f c0       	rjmp	.+126    	; 0x3ebc <HSSD_voidDisplayDescending+0x142>
	else if (__tmp > 65535)
    3e3e:	6f 81       	ldd	r22, Y+7	; 0x07
    3e40:	78 85       	ldd	r23, Y+8	; 0x08
    3e42:	89 85       	ldd	r24, Y+9	; 0x09
    3e44:	9a 85       	ldd	r25, Y+10	; 0x0a
    3e46:	20 e0       	ldi	r18, 0x00	; 0
    3e48:	3f ef       	ldi	r19, 0xFF	; 255
    3e4a:	4f e7       	ldi	r20, 0x7F	; 127
    3e4c:	57 e4       	ldi	r21, 0x47	; 71
    3e4e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3e52:	18 16       	cp	r1, r24
    3e54:	4c f5       	brge	.+82     	; 0x3ea8 <HSSD_voidDisplayDescending+0x12e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3e56:	6b 85       	ldd	r22, Y+11	; 0x0b
    3e58:	7c 85       	ldd	r23, Y+12	; 0x0c
    3e5a:	8d 85       	ldd	r24, Y+13	; 0x0d
    3e5c:	9e 85       	ldd	r25, Y+14	; 0x0e
    3e5e:	20 e0       	ldi	r18, 0x00	; 0
    3e60:	30 e0       	ldi	r19, 0x00	; 0
    3e62:	40 e2       	ldi	r20, 0x20	; 32
    3e64:	51 e4       	ldi	r21, 0x41	; 65
    3e66:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3e6a:	dc 01       	movw	r26, r24
    3e6c:	cb 01       	movw	r24, r22
    3e6e:	bc 01       	movw	r22, r24
    3e70:	cd 01       	movw	r24, r26
    3e72:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3e76:	dc 01       	movw	r26, r24
    3e78:	cb 01       	movw	r24, r22
    3e7a:	9e 83       	std	Y+6, r25	; 0x06
    3e7c:	8d 83       	std	Y+5, r24	; 0x05
    3e7e:	0f c0       	rjmp	.+30     	; 0x3e9e <HSSD_voidDisplayDescending+0x124>
    3e80:	88 ec       	ldi	r24, 0xC8	; 200
    3e82:	90 e0       	ldi	r25, 0x00	; 0
    3e84:	9c 83       	std	Y+4, r25	; 0x04
    3e86:	8b 83       	std	Y+3, r24	; 0x03
    3e88:	8b 81       	ldd	r24, Y+3	; 0x03
    3e8a:	9c 81       	ldd	r25, Y+4	; 0x04
    3e8c:	01 97       	sbiw	r24, 0x01	; 1
    3e8e:	f1 f7       	brne	.-4      	; 0x3e8c <HSSD_voidDisplayDescending+0x112>
    3e90:	9c 83       	std	Y+4, r25	; 0x04
    3e92:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3e94:	8d 81       	ldd	r24, Y+5	; 0x05
    3e96:	9e 81       	ldd	r25, Y+6	; 0x06
    3e98:	01 97       	sbiw	r24, 0x01	; 1
    3e9a:	9e 83       	std	Y+6, r25	; 0x06
    3e9c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3e9e:	8d 81       	ldd	r24, Y+5	; 0x05
    3ea0:	9e 81       	ldd	r25, Y+6	; 0x06
    3ea2:	00 97       	sbiw	r24, 0x00	; 0
    3ea4:	69 f7       	brne	.-38     	; 0x3e80 <HSSD_voidDisplayDescending+0x106>
    3ea6:	14 c0       	rjmp	.+40     	; 0x3ed0 <HSSD_voidDisplayDescending+0x156>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3ea8:	6f 81       	ldd	r22, Y+7	; 0x07
    3eaa:	78 85       	ldd	r23, Y+8	; 0x08
    3eac:	89 85       	ldd	r24, Y+9	; 0x09
    3eae:	9a 85       	ldd	r25, Y+10	; 0x0a
    3eb0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3eb4:	dc 01       	movw	r26, r24
    3eb6:	cb 01       	movw	r24, r22
    3eb8:	9e 83       	std	Y+6, r25	; 0x06
    3eba:	8d 83       	std	Y+5, r24	; 0x05
    3ebc:	8d 81       	ldd	r24, Y+5	; 0x05
    3ebe:	9e 81       	ldd	r25, Y+6	; 0x06
    3ec0:	9a 83       	std	Y+2, r25	; 0x02
    3ec2:	89 83       	std	Y+1, r24	; 0x01
    3ec4:	89 81       	ldd	r24, Y+1	; 0x01
    3ec6:	9a 81       	ldd	r25, Y+2	; 0x02
    3ec8:	01 97       	sbiw	r24, 0x01	; 1
    3eca:	f1 f7       	brne	.-4      	; 0x3ec8 <HSSD_voidDisplayDescending+0x14e>
    3ecc:	9a 83       	std	Y+2, r25	; 0x02
    3ece:	89 83       	std	Y+1, r24	; 0x01
}

void HSSD_voidDisplayDescending(u8 A_u8PortId)
{
u8 arr[]={ZERO,ONE,TWO,THREE,FOUR,FIVE,SIX,SEVEN,EIGHT,NINE};
	for(u8 j=9;j>=0;j--)
    3ed0:	8f 85       	ldd	r24, Y+15	; 0x0f
    3ed2:	81 50       	subi	r24, 0x01	; 1
    3ed4:	8f 87       	std	Y+15, r24	; 0x0f
    3ed6:	7e cf       	rjmp	.-260    	; 0x3dd4 <HSSD_voidDisplayDescending+0x5a>

00003ed8 <HSTEP_voidFullStep>:
#include "../Include/HAL/STEPPER/STEPPER_Private.h"

#include <util/delay.h>

void HSTEP_voidFullStep()
{
    3ed8:	df 93       	push	r29
    3eda:	cf 93       	push	r28
    3edc:	cd b7       	in	r28, 0x3d	; 61
    3ede:	de b7       	in	r29, 0x3e	; 62
    3ee0:	e8 97       	sbiw	r28, 0x38	; 56
    3ee2:	0f b6       	in	r0, 0x3f	; 63
    3ee4:	f8 94       	cli
    3ee6:	de bf       	out	0x3e, r29	; 62
    3ee8:	0f be       	out	0x3f, r0	; 63
    3eea:	cd bf       	out	0x3d, r28	; 61
    MDIO_voidSetPinValue(STEPPER_PORT,BLUE_COIL_PIN,PIN_HIGH);
    3eec:	80 e0       	ldi	r24, 0x00	; 0
    3eee:	60 e0       	ldi	r22, 0x00	; 0
    3ef0:	41 e0       	ldi	r20, 0x01	; 1
    3ef2:	0e 94 32 08 	call	0x1064	; 0x1064 <MDIO_voidSetPinValue>
    MDIO_voidSetPinValue(STEPPER_PORT,PINK_COIL_PIN,PIN_LOW);
    3ef6:	80 e0       	ldi	r24, 0x00	; 0
    3ef8:	61 e0       	ldi	r22, 0x01	; 1
    3efa:	40 e0       	ldi	r20, 0x00	; 0
    3efc:	0e 94 32 08 	call	0x1064	; 0x1064 <MDIO_voidSetPinValue>
    MDIO_voidSetPinValue(STEPPER_PORT,YELLOW_COIL_PIN,PIN_HIGH);
    3f00:	80 e0       	ldi	r24, 0x00	; 0
    3f02:	62 e0       	ldi	r22, 0x02	; 2
    3f04:	41 e0       	ldi	r20, 0x01	; 1
    3f06:	0e 94 32 08 	call	0x1064	; 0x1064 <MDIO_voidSetPinValue>
    MDIO_voidSetPinValue(STEPPER_PORT,ORANGE_COIL_PIN,PIN_HIGH);
    3f0a:	80 e0       	ldi	r24, 0x00	; 0
    3f0c:	63 e0       	ldi	r22, 0x03	; 3
    3f0e:	41 e0       	ldi	r20, 0x01	; 1
    3f10:	0e 94 32 08 	call	0x1064	; 0x1064 <MDIO_voidSetPinValue>
    3f14:	80 e0       	ldi	r24, 0x00	; 0
    3f16:	90 e0       	ldi	r25, 0x00	; 0
    3f18:	a0 e2       	ldi	r26, 0x20	; 32
    3f1a:	b1 e4       	ldi	r27, 0x41	; 65
    3f1c:	8d ab       	std	Y+53, r24	; 0x35
    3f1e:	9e ab       	std	Y+54, r25	; 0x36
    3f20:	af ab       	std	Y+55, r26	; 0x37
    3f22:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3f24:	6d a9       	ldd	r22, Y+53	; 0x35
    3f26:	7e a9       	ldd	r23, Y+54	; 0x36
    3f28:	8f a9       	ldd	r24, Y+55	; 0x37
    3f2a:	98 ad       	ldd	r25, Y+56	; 0x38
    3f2c:	20 e0       	ldi	r18, 0x00	; 0
    3f2e:	30 e0       	ldi	r19, 0x00	; 0
    3f30:	4a ef       	ldi	r20, 0xFA	; 250
    3f32:	54 e4       	ldi	r21, 0x44	; 68
    3f34:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3f38:	dc 01       	movw	r26, r24
    3f3a:	cb 01       	movw	r24, r22
    3f3c:	89 ab       	std	Y+49, r24	; 0x31
    3f3e:	9a ab       	std	Y+50, r25	; 0x32
    3f40:	ab ab       	std	Y+51, r26	; 0x33
    3f42:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    3f44:	69 a9       	ldd	r22, Y+49	; 0x31
    3f46:	7a a9       	ldd	r23, Y+50	; 0x32
    3f48:	8b a9       	ldd	r24, Y+51	; 0x33
    3f4a:	9c a9       	ldd	r25, Y+52	; 0x34
    3f4c:	20 e0       	ldi	r18, 0x00	; 0
    3f4e:	30 e0       	ldi	r19, 0x00	; 0
    3f50:	40 e8       	ldi	r20, 0x80	; 128
    3f52:	5f e3       	ldi	r21, 0x3F	; 63
    3f54:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3f58:	88 23       	and	r24, r24
    3f5a:	2c f4       	brge	.+10     	; 0x3f66 <HSTEP_voidFullStep+0x8e>
		__ticks = 1;
    3f5c:	81 e0       	ldi	r24, 0x01	; 1
    3f5e:	90 e0       	ldi	r25, 0x00	; 0
    3f60:	98 ab       	std	Y+48, r25	; 0x30
    3f62:	8f a7       	std	Y+47, r24	; 0x2f
    3f64:	3f c0       	rjmp	.+126    	; 0x3fe4 <HSTEP_voidFullStep+0x10c>
	else if (__tmp > 65535)
    3f66:	69 a9       	ldd	r22, Y+49	; 0x31
    3f68:	7a a9       	ldd	r23, Y+50	; 0x32
    3f6a:	8b a9       	ldd	r24, Y+51	; 0x33
    3f6c:	9c a9       	ldd	r25, Y+52	; 0x34
    3f6e:	20 e0       	ldi	r18, 0x00	; 0
    3f70:	3f ef       	ldi	r19, 0xFF	; 255
    3f72:	4f e7       	ldi	r20, 0x7F	; 127
    3f74:	57 e4       	ldi	r21, 0x47	; 71
    3f76:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3f7a:	18 16       	cp	r1, r24
    3f7c:	4c f5       	brge	.+82     	; 0x3fd0 <HSTEP_voidFullStep+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3f7e:	6d a9       	ldd	r22, Y+53	; 0x35
    3f80:	7e a9       	ldd	r23, Y+54	; 0x36
    3f82:	8f a9       	ldd	r24, Y+55	; 0x37
    3f84:	98 ad       	ldd	r25, Y+56	; 0x38
    3f86:	20 e0       	ldi	r18, 0x00	; 0
    3f88:	30 e0       	ldi	r19, 0x00	; 0
    3f8a:	40 e2       	ldi	r20, 0x20	; 32
    3f8c:	51 e4       	ldi	r21, 0x41	; 65
    3f8e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3f92:	dc 01       	movw	r26, r24
    3f94:	cb 01       	movw	r24, r22
    3f96:	bc 01       	movw	r22, r24
    3f98:	cd 01       	movw	r24, r26
    3f9a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3f9e:	dc 01       	movw	r26, r24
    3fa0:	cb 01       	movw	r24, r22
    3fa2:	98 ab       	std	Y+48, r25	; 0x30
    3fa4:	8f a7       	std	Y+47, r24	; 0x2f
    3fa6:	0f c0       	rjmp	.+30     	; 0x3fc6 <HSTEP_voidFullStep+0xee>
    3fa8:	88 ec       	ldi	r24, 0xC8	; 200
    3faa:	90 e0       	ldi	r25, 0x00	; 0
    3fac:	9e a7       	std	Y+46, r25	; 0x2e
    3fae:	8d a7       	std	Y+45, r24	; 0x2d
    3fb0:	8d a5       	ldd	r24, Y+45	; 0x2d
    3fb2:	9e a5       	ldd	r25, Y+46	; 0x2e
    3fb4:	01 97       	sbiw	r24, 0x01	; 1
    3fb6:	f1 f7       	brne	.-4      	; 0x3fb4 <HSTEP_voidFullStep+0xdc>
    3fb8:	9e a7       	std	Y+46, r25	; 0x2e
    3fba:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3fbc:	8f a5       	ldd	r24, Y+47	; 0x2f
    3fbe:	98 a9       	ldd	r25, Y+48	; 0x30
    3fc0:	01 97       	sbiw	r24, 0x01	; 1
    3fc2:	98 ab       	std	Y+48, r25	; 0x30
    3fc4:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3fc6:	8f a5       	ldd	r24, Y+47	; 0x2f
    3fc8:	98 a9       	ldd	r25, Y+48	; 0x30
    3fca:	00 97       	sbiw	r24, 0x00	; 0
    3fcc:	69 f7       	brne	.-38     	; 0x3fa8 <HSTEP_voidFullStep+0xd0>
    3fce:	14 c0       	rjmp	.+40     	; 0x3ff8 <HSTEP_voidFullStep+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3fd0:	69 a9       	ldd	r22, Y+49	; 0x31
    3fd2:	7a a9       	ldd	r23, Y+50	; 0x32
    3fd4:	8b a9       	ldd	r24, Y+51	; 0x33
    3fd6:	9c a9       	ldd	r25, Y+52	; 0x34
    3fd8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3fdc:	dc 01       	movw	r26, r24
    3fde:	cb 01       	movw	r24, r22
    3fe0:	98 ab       	std	Y+48, r25	; 0x30
    3fe2:	8f a7       	std	Y+47, r24	; 0x2f
    3fe4:	8f a5       	ldd	r24, Y+47	; 0x2f
    3fe6:	98 a9       	ldd	r25, Y+48	; 0x30
    3fe8:	9c a7       	std	Y+44, r25	; 0x2c
    3fea:	8b a7       	std	Y+43, r24	; 0x2b
    3fec:	8b a5       	ldd	r24, Y+43	; 0x2b
    3fee:	9c a5       	ldd	r25, Y+44	; 0x2c
    3ff0:	01 97       	sbiw	r24, 0x01	; 1
    3ff2:	f1 f7       	brne	.-4      	; 0x3ff0 <HSTEP_voidFullStep+0x118>
    3ff4:	9c a7       	std	Y+44, r25	; 0x2c
    3ff6:	8b a7       	std	Y+43, r24	; 0x2b
    _delay_ms(10);
    MDIO_voidSetPinValue(STEPPER_PORT,BLUE_COIL_PIN,PIN_HIGH);
    3ff8:	80 e0       	ldi	r24, 0x00	; 0
    3ffa:	60 e0       	ldi	r22, 0x00	; 0
    3ffc:	41 e0       	ldi	r20, 0x01	; 1
    3ffe:	0e 94 32 08 	call	0x1064	; 0x1064 <MDIO_voidSetPinValue>
    MDIO_voidSetPinValue(STEPPER_PORT,PINK_COIL_PIN,PIN_HIGH);
    4002:	80 e0       	ldi	r24, 0x00	; 0
    4004:	61 e0       	ldi	r22, 0x01	; 1
    4006:	41 e0       	ldi	r20, 0x01	; 1
    4008:	0e 94 32 08 	call	0x1064	; 0x1064 <MDIO_voidSetPinValue>
    MDIO_voidSetPinValue(STEPPER_PORT,YELLOW_COIL_PIN,PIN_LOW);
    400c:	80 e0       	ldi	r24, 0x00	; 0
    400e:	62 e0       	ldi	r22, 0x02	; 2
    4010:	40 e0       	ldi	r20, 0x00	; 0
    4012:	0e 94 32 08 	call	0x1064	; 0x1064 <MDIO_voidSetPinValue>
    MDIO_voidSetPinValue(STEPPER_PORT,ORANGE_COIL_PIN,PIN_HIGH);
    4016:	80 e0       	ldi	r24, 0x00	; 0
    4018:	63 e0       	ldi	r22, 0x03	; 3
    401a:	41 e0       	ldi	r20, 0x01	; 1
    401c:	0e 94 32 08 	call	0x1064	; 0x1064 <MDIO_voidSetPinValue>
    4020:	80 e0       	ldi	r24, 0x00	; 0
    4022:	90 e0       	ldi	r25, 0x00	; 0
    4024:	a0 e2       	ldi	r26, 0x20	; 32
    4026:	b1 e4       	ldi	r27, 0x41	; 65
    4028:	8f a3       	std	Y+39, r24	; 0x27
    402a:	98 a7       	std	Y+40, r25	; 0x28
    402c:	a9 a7       	std	Y+41, r26	; 0x29
    402e:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4030:	6f a1       	ldd	r22, Y+39	; 0x27
    4032:	78 a5       	ldd	r23, Y+40	; 0x28
    4034:	89 a5       	ldd	r24, Y+41	; 0x29
    4036:	9a a5       	ldd	r25, Y+42	; 0x2a
    4038:	20 e0       	ldi	r18, 0x00	; 0
    403a:	30 e0       	ldi	r19, 0x00	; 0
    403c:	4a ef       	ldi	r20, 0xFA	; 250
    403e:	54 e4       	ldi	r21, 0x44	; 68
    4040:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4044:	dc 01       	movw	r26, r24
    4046:	cb 01       	movw	r24, r22
    4048:	8b a3       	std	Y+35, r24	; 0x23
    404a:	9c a3       	std	Y+36, r25	; 0x24
    404c:	ad a3       	std	Y+37, r26	; 0x25
    404e:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    4050:	6b a1       	ldd	r22, Y+35	; 0x23
    4052:	7c a1       	ldd	r23, Y+36	; 0x24
    4054:	8d a1       	ldd	r24, Y+37	; 0x25
    4056:	9e a1       	ldd	r25, Y+38	; 0x26
    4058:	20 e0       	ldi	r18, 0x00	; 0
    405a:	30 e0       	ldi	r19, 0x00	; 0
    405c:	40 e8       	ldi	r20, 0x80	; 128
    405e:	5f e3       	ldi	r21, 0x3F	; 63
    4060:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4064:	88 23       	and	r24, r24
    4066:	2c f4       	brge	.+10     	; 0x4072 <HSTEP_voidFullStep+0x19a>
		__ticks = 1;
    4068:	81 e0       	ldi	r24, 0x01	; 1
    406a:	90 e0       	ldi	r25, 0x00	; 0
    406c:	9a a3       	std	Y+34, r25	; 0x22
    406e:	89 a3       	std	Y+33, r24	; 0x21
    4070:	3f c0       	rjmp	.+126    	; 0x40f0 <HSTEP_voidFullStep+0x218>
	else if (__tmp > 65535)
    4072:	6b a1       	ldd	r22, Y+35	; 0x23
    4074:	7c a1       	ldd	r23, Y+36	; 0x24
    4076:	8d a1       	ldd	r24, Y+37	; 0x25
    4078:	9e a1       	ldd	r25, Y+38	; 0x26
    407a:	20 e0       	ldi	r18, 0x00	; 0
    407c:	3f ef       	ldi	r19, 0xFF	; 255
    407e:	4f e7       	ldi	r20, 0x7F	; 127
    4080:	57 e4       	ldi	r21, 0x47	; 71
    4082:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4086:	18 16       	cp	r1, r24
    4088:	4c f5       	brge	.+82     	; 0x40dc <HSTEP_voidFullStep+0x204>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    408a:	6f a1       	ldd	r22, Y+39	; 0x27
    408c:	78 a5       	ldd	r23, Y+40	; 0x28
    408e:	89 a5       	ldd	r24, Y+41	; 0x29
    4090:	9a a5       	ldd	r25, Y+42	; 0x2a
    4092:	20 e0       	ldi	r18, 0x00	; 0
    4094:	30 e0       	ldi	r19, 0x00	; 0
    4096:	40 e2       	ldi	r20, 0x20	; 32
    4098:	51 e4       	ldi	r21, 0x41	; 65
    409a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    409e:	dc 01       	movw	r26, r24
    40a0:	cb 01       	movw	r24, r22
    40a2:	bc 01       	movw	r22, r24
    40a4:	cd 01       	movw	r24, r26
    40a6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    40aa:	dc 01       	movw	r26, r24
    40ac:	cb 01       	movw	r24, r22
    40ae:	9a a3       	std	Y+34, r25	; 0x22
    40b0:	89 a3       	std	Y+33, r24	; 0x21
    40b2:	0f c0       	rjmp	.+30     	; 0x40d2 <HSTEP_voidFullStep+0x1fa>
    40b4:	88 ec       	ldi	r24, 0xC8	; 200
    40b6:	90 e0       	ldi	r25, 0x00	; 0
    40b8:	98 a3       	std	Y+32, r25	; 0x20
    40ba:	8f 8f       	std	Y+31, r24	; 0x1f
    40bc:	8f 8d       	ldd	r24, Y+31	; 0x1f
    40be:	98 a1       	ldd	r25, Y+32	; 0x20
    40c0:	01 97       	sbiw	r24, 0x01	; 1
    40c2:	f1 f7       	brne	.-4      	; 0x40c0 <HSTEP_voidFullStep+0x1e8>
    40c4:	98 a3       	std	Y+32, r25	; 0x20
    40c6:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    40c8:	89 a1       	ldd	r24, Y+33	; 0x21
    40ca:	9a a1       	ldd	r25, Y+34	; 0x22
    40cc:	01 97       	sbiw	r24, 0x01	; 1
    40ce:	9a a3       	std	Y+34, r25	; 0x22
    40d0:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    40d2:	89 a1       	ldd	r24, Y+33	; 0x21
    40d4:	9a a1       	ldd	r25, Y+34	; 0x22
    40d6:	00 97       	sbiw	r24, 0x00	; 0
    40d8:	69 f7       	brne	.-38     	; 0x40b4 <HSTEP_voidFullStep+0x1dc>
    40da:	14 c0       	rjmp	.+40     	; 0x4104 <HSTEP_voidFullStep+0x22c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    40dc:	6b a1       	ldd	r22, Y+35	; 0x23
    40de:	7c a1       	ldd	r23, Y+36	; 0x24
    40e0:	8d a1       	ldd	r24, Y+37	; 0x25
    40e2:	9e a1       	ldd	r25, Y+38	; 0x26
    40e4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    40e8:	dc 01       	movw	r26, r24
    40ea:	cb 01       	movw	r24, r22
    40ec:	9a a3       	std	Y+34, r25	; 0x22
    40ee:	89 a3       	std	Y+33, r24	; 0x21
    40f0:	89 a1       	ldd	r24, Y+33	; 0x21
    40f2:	9a a1       	ldd	r25, Y+34	; 0x22
    40f4:	9e 8f       	std	Y+30, r25	; 0x1e
    40f6:	8d 8f       	std	Y+29, r24	; 0x1d
    40f8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    40fa:	9e 8d       	ldd	r25, Y+30	; 0x1e
    40fc:	01 97       	sbiw	r24, 0x01	; 1
    40fe:	f1 f7       	brne	.-4      	; 0x40fc <HSTEP_voidFullStep+0x224>
    4100:	9e 8f       	std	Y+30, r25	; 0x1e
    4102:	8d 8f       	std	Y+29, r24	; 0x1d
    _delay_ms(10);
    MDIO_voidSetPinValue(STEPPER_PORT,BLUE_COIL_PIN,PIN_HIGH);
    4104:	80 e0       	ldi	r24, 0x00	; 0
    4106:	60 e0       	ldi	r22, 0x00	; 0
    4108:	41 e0       	ldi	r20, 0x01	; 1
    410a:	0e 94 32 08 	call	0x1064	; 0x1064 <MDIO_voidSetPinValue>
    MDIO_voidSetPinValue(STEPPER_PORT,PINK_COIL_PIN,PIN_HIGH);
    410e:	80 e0       	ldi	r24, 0x00	; 0
    4110:	61 e0       	ldi	r22, 0x01	; 1
    4112:	41 e0       	ldi	r20, 0x01	; 1
    4114:	0e 94 32 08 	call	0x1064	; 0x1064 <MDIO_voidSetPinValue>
    MDIO_voidSetPinValue(STEPPER_PORT,YELLOW_COIL_PIN,PIN_HIGH);
    4118:	80 e0       	ldi	r24, 0x00	; 0
    411a:	62 e0       	ldi	r22, 0x02	; 2
    411c:	41 e0       	ldi	r20, 0x01	; 1
    411e:	0e 94 32 08 	call	0x1064	; 0x1064 <MDIO_voidSetPinValue>
    MDIO_voidSetPinValue(STEPPER_PORT,ORANGE_COIL_PIN,PIN_LOW);
    4122:	80 e0       	ldi	r24, 0x00	; 0
    4124:	63 e0       	ldi	r22, 0x03	; 3
    4126:	40 e0       	ldi	r20, 0x00	; 0
    4128:	0e 94 32 08 	call	0x1064	; 0x1064 <MDIO_voidSetPinValue>
    412c:	80 e0       	ldi	r24, 0x00	; 0
    412e:	90 e0       	ldi	r25, 0x00	; 0
    4130:	a0 e2       	ldi	r26, 0x20	; 32
    4132:	b1 e4       	ldi	r27, 0x41	; 65
    4134:	89 8f       	std	Y+25, r24	; 0x19
    4136:	9a 8f       	std	Y+26, r25	; 0x1a
    4138:	ab 8f       	std	Y+27, r26	; 0x1b
    413a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    413c:	69 8d       	ldd	r22, Y+25	; 0x19
    413e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4140:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4142:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4144:	20 e0       	ldi	r18, 0x00	; 0
    4146:	30 e0       	ldi	r19, 0x00	; 0
    4148:	4a ef       	ldi	r20, 0xFA	; 250
    414a:	54 e4       	ldi	r21, 0x44	; 68
    414c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4150:	dc 01       	movw	r26, r24
    4152:	cb 01       	movw	r24, r22
    4154:	8d 8b       	std	Y+21, r24	; 0x15
    4156:	9e 8b       	std	Y+22, r25	; 0x16
    4158:	af 8b       	std	Y+23, r26	; 0x17
    415a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    415c:	6d 89       	ldd	r22, Y+21	; 0x15
    415e:	7e 89       	ldd	r23, Y+22	; 0x16
    4160:	8f 89       	ldd	r24, Y+23	; 0x17
    4162:	98 8d       	ldd	r25, Y+24	; 0x18
    4164:	20 e0       	ldi	r18, 0x00	; 0
    4166:	30 e0       	ldi	r19, 0x00	; 0
    4168:	40 e8       	ldi	r20, 0x80	; 128
    416a:	5f e3       	ldi	r21, 0x3F	; 63
    416c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4170:	88 23       	and	r24, r24
    4172:	2c f4       	brge	.+10     	; 0x417e <HSTEP_voidFullStep+0x2a6>
		__ticks = 1;
    4174:	81 e0       	ldi	r24, 0x01	; 1
    4176:	90 e0       	ldi	r25, 0x00	; 0
    4178:	9c 8b       	std	Y+20, r25	; 0x14
    417a:	8b 8b       	std	Y+19, r24	; 0x13
    417c:	3f c0       	rjmp	.+126    	; 0x41fc <HSTEP_voidFullStep+0x324>
	else if (__tmp > 65535)
    417e:	6d 89       	ldd	r22, Y+21	; 0x15
    4180:	7e 89       	ldd	r23, Y+22	; 0x16
    4182:	8f 89       	ldd	r24, Y+23	; 0x17
    4184:	98 8d       	ldd	r25, Y+24	; 0x18
    4186:	20 e0       	ldi	r18, 0x00	; 0
    4188:	3f ef       	ldi	r19, 0xFF	; 255
    418a:	4f e7       	ldi	r20, 0x7F	; 127
    418c:	57 e4       	ldi	r21, 0x47	; 71
    418e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4192:	18 16       	cp	r1, r24
    4194:	4c f5       	brge	.+82     	; 0x41e8 <HSTEP_voidFullStep+0x310>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4196:	69 8d       	ldd	r22, Y+25	; 0x19
    4198:	7a 8d       	ldd	r23, Y+26	; 0x1a
    419a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    419c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    419e:	20 e0       	ldi	r18, 0x00	; 0
    41a0:	30 e0       	ldi	r19, 0x00	; 0
    41a2:	40 e2       	ldi	r20, 0x20	; 32
    41a4:	51 e4       	ldi	r21, 0x41	; 65
    41a6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    41aa:	dc 01       	movw	r26, r24
    41ac:	cb 01       	movw	r24, r22
    41ae:	bc 01       	movw	r22, r24
    41b0:	cd 01       	movw	r24, r26
    41b2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    41b6:	dc 01       	movw	r26, r24
    41b8:	cb 01       	movw	r24, r22
    41ba:	9c 8b       	std	Y+20, r25	; 0x14
    41bc:	8b 8b       	std	Y+19, r24	; 0x13
    41be:	0f c0       	rjmp	.+30     	; 0x41de <HSTEP_voidFullStep+0x306>
    41c0:	88 ec       	ldi	r24, 0xC8	; 200
    41c2:	90 e0       	ldi	r25, 0x00	; 0
    41c4:	9a 8b       	std	Y+18, r25	; 0x12
    41c6:	89 8b       	std	Y+17, r24	; 0x11
    41c8:	89 89       	ldd	r24, Y+17	; 0x11
    41ca:	9a 89       	ldd	r25, Y+18	; 0x12
    41cc:	01 97       	sbiw	r24, 0x01	; 1
    41ce:	f1 f7       	brne	.-4      	; 0x41cc <HSTEP_voidFullStep+0x2f4>
    41d0:	9a 8b       	std	Y+18, r25	; 0x12
    41d2:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    41d4:	8b 89       	ldd	r24, Y+19	; 0x13
    41d6:	9c 89       	ldd	r25, Y+20	; 0x14
    41d8:	01 97       	sbiw	r24, 0x01	; 1
    41da:	9c 8b       	std	Y+20, r25	; 0x14
    41dc:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    41de:	8b 89       	ldd	r24, Y+19	; 0x13
    41e0:	9c 89       	ldd	r25, Y+20	; 0x14
    41e2:	00 97       	sbiw	r24, 0x00	; 0
    41e4:	69 f7       	brne	.-38     	; 0x41c0 <HSTEP_voidFullStep+0x2e8>
    41e6:	14 c0       	rjmp	.+40     	; 0x4210 <HSTEP_voidFullStep+0x338>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    41e8:	6d 89       	ldd	r22, Y+21	; 0x15
    41ea:	7e 89       	ldd	r23, Y+22	; 0x16
    41ec:	8f 89       	ldd	r24, Y+23	; 0x17
    41ee:	98 8d       	ldd	r25, Y+24	; 0x18
    41f0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    41f4:	dc 01       	movw	r26, r24
    41f6:	cb 01       	movw	r24, r22
    41f8:	9c 8b       	std	Y+20, r25	; 0x14
    41fa:	8b 8b       	std	Y+19, r24	; 0x13
    41fc:	8b 89       	ldd	r24, Y+19	; 0x13
    41fe:	9c 89       	ldd	r25, Y+20	; 0x14
    4200:	98 8b       	std	Y+16, r25	; 0x10
    4202:	8f 87       	std	Y+15, r24	; 0x0f
    4204:	8f 85       	ldd	r24, Y+15	; 0x0f
    4206:	98 89       	ldd	r25, Y+16	; 0x10
    4208:	01 97       	sbiw	r24, 0x01	; 1
    420a:	f1 f7       	brne	.-4      	; 0x4208 <HSTEP_voidFullStep+0x330>
    420c:	98 8b       	std	Y+16, r25	; 0x10
    420e:	8f 87       	std	Y+15, r24	; 0x0f
    _delay_ms(10);
    MDIO_voidSetPinValue(STEPPER_PORT,BLUE_COIL_PIN,PIN_LOW);
    4210:	80 e0       	ldi	r24, 0x00	; 0
    4212:	60 e0       	ldi	r22, 0x00	; 0
    4214:	40 e0       	ldi	r20, 0x00	; 0
    4216:	0e 94 32 08 	call	0x1064	; 0x1064 <MDIO_voidSetPinValue>
    MDIO_voidSetPinValue(STEPPER_PORT,PINK_COIL_PIN,PIN_HIGH);
    421a:	80 e0       	ldi	r24, 0x00	; 0
    421c:	61 e0       	ldi	r22, 0x01	; 1
    421e:	41 e0       	ldi	r20, 0x01	; 1
    4220:	0e 94 32 08 	call	0x1064	; 0x1064 <MDIO_voidSetPinValue>
    MDIO_voidSetPinValue(STEPPER_PORT,YELLOW_COIL_PIN,PIN_HIGH);
    4224:	80 e0       	ldi	r24, 0x00	; 0
    4226:	62 e0       	ldi	r22, 0x02	; 2
    4228:	41 e0       	ldi	r20, 0x01	; 1
    422a:	0e 94 32 08 	call	0x1064	; 0x1064 <MDIO_voidSetPinValue>
    MDIO_voidSetPinValue(STEPPER_PORT,ORANGE_COIL_PIN,PIN_HIGH);
    422e:	80 e0       	ldi	r24, 0x00	; 0
    4230:	63 e0       	ldi	r22, 0x03	; 3
    4232:	41 e0       	ldi	r20, 0x01	; 1
    4234:	0e 94 32 08 	call	0x1064	; 0x1064 <MDIO_voidSetPinValue>
    4238:	80 e0       	ldi	r24, 0x00	; 0
    423a:	90 e0       	ldi	r25, 0x00	; 0
    423c:	a0 e2       	ldi	r26, 0x20	; 32
    423e:	b1 e4       	ldi	r27, 0x41	; 65
    4240:	8b 87       	std	Y+11, r24	; 0x0b
    4242:	9c 87       	std	Y+12, r25	; 0x0c
    4244:	ad 87       	std	Y+13, r26	; 0x0d
    4246:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4248:	6b 85       	ldd	r22, Y+11	; 0x0b
    424a:	7c 85       	ldd	r23, Y+12	; 0x0c
    424c:	8d 85       	ldd	r24, Y+13	; 0x0d
    424e:	9e 85       	ldd	r25, Y+14	; 0x0e
    4250:	20 e0       	ldi	r18, 0x00	; 0
    4252:	30 e0       	ldi	r19, 0x00	; 0
    4254:	4a ef       	ldi	r20, 0xFA	; 250
    4256:	54 e4       	ldi	r21, 0x44	; 68
    4258:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    425c:	dc 01       	movw	r26, r24
    425e:	cb 01       	movw	r24, r22
    4260:	8f 83       	std	Y+7, r24	; 0x07
    4262:	98 87       	std	Y+8, r25	; 0x08
    4264:	a9 87       	std	Y+9, r26	; 0x09
    4266:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4268:	6f 81       	ldd	r22, Y+7	; 0x07
    426a:	78 85       	ldd	r23, Y+8	; 0x08
    426c:	89 85       	ldd	r24, Y+9	; 0x09
    426e:	9a 85       	ldd	r25, Y+10	; 0x0a
    4270:	20 e0       	ldi	r18, 0x00	; 0
    4272:	30 e0       	ldi	r19, 0x00	; 0
    4274:	40 e8       	ldi	r20, 0x80	; 128
    4276:	5f e3       	ldi	r21, 0x3F	; 63
    4278:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    427c:	88 23       	and	r24, r24
    427e:	2c f4       	brge	.+10     	; 0x428a <HSTEP_voidFullStep+0x3b2>
		__ticks = 1;
    4280:	81 e0       	ldi	r24, 0x01	; 1
    4282:	90 e0       	ldi	r25, 0x00	; 0
    4284:	9e 83       	std	Y+6, r25	; 0x06
    4286:	8d 83       	std	Y+5, r24	; 0x05
    4288:	3f c0       	rjmp	.+126    	; 0x4308 <HSTEP_voidFullStep+0x430>
	else if (__tmp > 65535)
    428a:	6f 81       	ldd	r22, Y+7	; 0x07
    428c:	78 85       	ldd	r23, Y+8	; 0x08
    428e:	89 85       	ldd	r24, Y+9	; 0x09
    4290:	9a 85       	ldd	r25, Y+10	; 0x0a
    4292:	20 e0       	ldi	r18, 0x00	; 0
    4294:	3f ef       	ldi	r19, 0xFF	; 255
    4296:	4f e7       	ldi	r20, 0x7F	; 127
    4298:	57 e4       	ldi	r21, 0x47	; 71
    429a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    429e:	18 16       	cp	r1, r24
    42a0:	4c f5       	brge	.+82     	; 0x42f4 <HSTEP_voidFullStep+0x41c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    42a2:	6b 85       	ldd	r22, Y+11	; 0x0b
    42a4:	7c 85       	ldd	r23, Y+12	; 0x0c
    42a6:	8d 85       	ldd	r24, Y+13	; 0x0d
    42a8:	9e 85       	ldd	r25, Y+14	; 0x0e
    42aa:	20 e0       	ldi	r18, 0x00	; 0
    42ac:	30 e0       	ldi	r19, 0x00	; 0
    42ae:	40 e2       	ldi	r20, 0x20	; 32
    42b0:	51 e4       	ldi	r21, 0x41	; 65
    42b2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    42b6:	dc 01       	movw	r26, r24
    42b8:	cb 01       	movw	r24, r22
    42ba:	bc 01       	movw	r22, r24
    42bc:	cd 01       	movw	r24, r26
    42be:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    42c2:	dc 01       	movw	r26, r24
    42c4:	cb 01       	movw	r24, r22
    42c6:	9e 83       	std	Y+6, r25	; 0x06
    42c8:	8d 83       	std	Y+5, r24	; 0x05
    42ca:	0f c0       	rjmp	.+30     	; 0x42ea <HSTEP_voidFullStep+0x412>
    42cc:	88 ec       	ldi	r24, 0xC8	; 200
    42ce:	90 e0       	ldi	r25, 0x00	; 0
    42d0:	9c 83       	std	Y+4, r25	; 0x04
    42d2:	8b 83       	std	Y+3, r24	; 0x03
    42d4:	8b 81       	ldd	r24, Y+3	; 0x03
    42d6:	9c 81       	ldd	r25, Y+4	; 0x04
    42d8:	01 97       	sbiw	r24, 0x01	; 1
    42da:	f1 f7       	brne	.-4      	; 0x42d8 <HSTEP_voidFullStep+0x400>
    42dc:	9c 83       	std	Y+4, r25	; 0x04
    42de:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    42e0:	8d 81       	ldd	r24, Y+5	; 0x05
    42e2:	9e 81       	ldd	r25, Y+6	; 0x06
    42e4:	01 97       	sbiw	r24, 0x01	; 1
    42e6:	9e 83       	std	Y+6, r25	; 0x06
    42e8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    42ea:	8d 81       	ldd	r24, Y+5	; 0x05
    42ec:	9e 81       	ldd	r25, Y+6	; 0x06
    42ee:	00 97       	sbiw	r24, 0x00	; 0
    42f0:	69 f7       	brne	.-38     	; 0x42cc <HSTEP_voidFullStep+0x3f4>
    42f2:	14 c0       	rjmp	.+40     	; 0x431c <HSTEP_voidFullStep+0x444>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    42f4:	6f 81       	ldd	r22, Y+7	; 0x07
    42f6:	78 85       	ldd	r23, Y+8	; 0x08
    42f8:	89 85       	ldd	r24, Y+9	; 0x09
    42fa:	9a 85       	ldd	r25, Y+10	; 0x0a
    42fc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4300:	dc 01       	movw	r26, r24
    4302:	cb 01       	movw	r24, r22
    4304:	9e 83       	std	Y+6, r25	; 0x06
    4306:	8d 83       	std	Y+5, r24	; 0x05
    4308:	8d 81       	ldd	r24, Y+5	; 0x05
    430a:	9e 81       	ldd	r25, Y+6	; 0x06
    430c:	9a 83       	std	Y+2, r25	; 0x02
    430e:	89 83       	std	Y+1, r24	; 0x01
    4310:	89 81       	ldd	r24, Y+1	; 0x01
    4312:	9a 81       	ldd	r25, Y+2	; 0x02
    4314:	01 97       	sbiw	r24, 0x01	; 1
    4316:	f1 f7       	brne	.-4      	; 0x4314 <HSTEP_voidFullStep+0x43c>
    4318:	9a 83       	std	Y+2, r25	; 0x02
    431a:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(10);
}
    431c:	e8 96       	adiw	r28, 0x38	; 56
    431e:	0f b6       	in	r0, 0x3f	; 63
    4320:	f8 94       	cli
    4322:	de bf       	out	0x3e, r29	; 62
    4324:	0f be       	out	0x3f, r0	; 63
    4326:	cd bf       	out	0x3d, r28	; 61
    4328:	cf 91       	pop	r28
    432a:	df 91       	pop	r29
    432c:	08 95       	ret

0000432e <HSTEP_voidMotorAngle>:

void HSTEP_voidMotorAngle(u32 A_u32Angle)
{
    432e:	df 93       	push	r29
    4330:	cf 93       	push	r28
    4332:	cd b7       	in	r28, 0x3d	; 61
    4334:	de b7       	in	r29, 0x3e	; 62
    4336:	c0 54       	subi	r28, 0x40	; 64
    4338:	d0 40       	sbci	r29, 0x00	; 0
    433a:	0f b6       	in	r0, 0x3f	; 63
    433c:	f8 94       	cli
    433e:	de bf       	out	0x3e, r29	; 62
    4340:	0f be       	out	0x3f, r0	; 63
    4342:	cd bf       	out	0x3d, r28	; 61
    4344:	fe 01       	movw	r30, r28
    4346:	ff 96       	adiw	r30, 0x3f	; 63
    4348:	91 83       	std	Z+1, r25	; 0x01
    434a:	80 83       	st	Z, r24
    u32 local_u32Angle=((NO_OF_STEPS_FOR_360*A_u32Angle)/CIRCLE_ANGLE);
    434c:	fe 01       	movw	r30, r28
    434e:	ff 96       	adiw	r30, 0x3f	; 63
    4350:	80 81       	ld	r24, Z
    4352:	91 81       	ldd	r25, Z+1	; 0x01
    4354:	98 2f       	mov	r25, r24
    4356:	88 27       	eor	r24, r24
    4358:	99 0f       	add	r25, r25
    435a:	99 0f       	add	r25, r25
    435c:	99 0f       	add	r25, r25
    435e:	28 e6       	ldi	r18, 0x68	; 104
    4360:	31 e0       	ldi	r19, 0x01	; 1
    4362:	b9 01       	movw	r22, r18
    4364:	0e 94 14 25 	call	0x4a28	; 0x4a28 <__udivmodhi4>
    4368:	cb 01       	movw	r24, r22
    436a:	9e af       	std	Y+62, r25	; 0x3e
    436c:	8d af       	std	Y+61, r24	; 0x3d
    u32 local_u32Steps=local_u32Angle/NO_OF_COILS; 
    436e:	8d ad       	ldd	r24, Y+61	; 0x3d
    4370:	9e ad       	ldd	r25, Y+62	; 0x3e
    4372:	96 95       	lsr	r25
    4374:	87 95       	ror	r24
    4376:	96 95       	lsr	r25
    4378:	87 95       	ror	r24
    437a:	9c af       	std	Y+60, r25	; 0x3c
    437c:	8b af       	std	Y+59, r24	; 0x3b
    for(u16 i =0;i<local_u32Steps;i++)
    437e:	1a ae       	std	Y+58, r1	; 0x3a
    4380:	19 ae       	std	Y+57, r1	; 0x39
    4382:	1d c2       	rjmp	.+1082   	; 0x47be <HSTEP_voidMotorAngle+0x490>
	{
    MDIO_voidSetPinValue(STEPPER_PORT,BLUE_COIL_PIN,PIN_HIGH);
    4384:	80 e0       	ldi	r24, 0x00	; 0
    4386:	60 e0       	ldi	r22, 0x00	; 0
    4388:	41 e0       	ldi	r20, 0x01	; 1
    438a:	0e 94 32 08 	call	0x1064	; 0x1064 <MDIO_voidSetPinValue>
    MDIO_voidSetPinValue(STEPPER_PORT,PINK_COIL_PIN,PIN_LOW);
    438e:	80 e0       	ldi	r24, 0x00	; 0
    4390:	61 e0       	ldi	r22, 0x01	; 1
    4392:	40 e0       	ldi	r20, 0x00	; 0
    4394:	0e 94 32 08 	call	0x1064	; 0x1064 <MDIO_voidSetPinValue>
    MDIO_voidSetPinValue(STEPPER_PORT,YELLOW_COIL_PIN,PIN_HIGH);
    4398:	80 e0       	ldi	r24, 0x00	; 0
    439a:	62 e0       	ldi	r22, 0x02	; 2
    439c:	41 e0       	ldi	r20, 0x01	; 1
    439e:	0e 94 32 08 	call	0x1064	; 0x1064 <MDIO_voidSetPinValue>
    MDIO_voidSetPinValue(STEPPER_PORT,ORANGE_COIL_PIN,PIN_HIGH);
    43a2:	80 e0       	ldi	r24, 0x00	; 0
    43a4:	63 e0       	ldi	r22, 0x03	; 3
    43a6:	41 e0       	ldi	r20, 0x01	; 1
    43a8:	0e 94 32 08 	call	0x1064	; 0x1064 <MDIO_voidSetPinValue>
    43ac:	80 e0       	ldi	r24, 0x00	; 0
    43ae:	90 e0       	ldi	r25, 0x00	; 0
    43b0:	a0 e2       	ldi	r26, 0x20	; 32
    43b2:	b1 e4       	ldi	r27, 0x41	; 65
    43b4:	8d ab       	std	Y+53, r24	; 0x35
    43b6:	9e ab       	std	Y+54, r25	; 0x36
    43b8:	af ab       	std	Y+55, r26	; 0x37
    43ba:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    43bc:	6d a9       	ldd	r22, Y+53	; 0x35
    43be:	7e a9       	ldd	r23, Y+54	; 0x36
    43c0:	8f a9       	ldd	r24, Y+55	; 0x37
    43c2:	98 ad       	ldd	r25, Y+56	; 0x38
    43c4:	20 e0       	ldi	r18, 0x00	; 0
    43c6:	30 e0       	ldi	r19, 0x00	; 0
    43c8:	4a ef       	ldi	r20, 0xFA	; 250
    43ca:	54 e4       	ldi	r21, 0x44	; 68
    43cc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    43d0:	dc 01       	movw	r26, r24
    43d2:	cb 01       	movw	r24, r22
    43d4:	89 ab       	std	Y+49, r24	; 0x31
    43d6:	9a ab       	std	Y+50, r25	; 0x32
    43d8:	ab ab       	std	Y+51, r26	; 0x33
    43da:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    43dc:	69 a9       	ldd	r22, Y+49	; 0x31
    43de:	7a a9       	ldd	r23, Y+50	; 0x32
    43e0:	8b a9       	ldd	r24, Y+51	; 0x33
    43e2:	9c a9       	ldd	r25, Y+52	; 0x34
    43e4:	20 e0       	ldi	r18, 0x00	; 0
    43e6:	30 e0       	ldi	r19, 0x00	; 0
    43e8:	40 e8       	ldi	r20, 0x80	; 128
    43ea:	5f e3       	ldi	r21, 0x3F	; 63
    43ec:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    43f0:	88 23       	and	r24, r24
    43f2:	2c f4       	brge	.+10     	; 0x43fe <HSTEP_voidMotorAngle+0xd0>
		__ticks = 1;
    43f4:	81 e0       	ldi	r24, 0x01	; 1
    43f6:	90 e0       	ldi	r25, 0x00	; 0
    43f8:	98 ab       	std	Y+48, r25	; 0x30
    43fa:	8f a7       	std	Y+47, r24	; 0x2f
    43fc:	3f c0       	rjmp	.+126    	; 0x447c <HSTEP_voidMotorAngle+0x14e>
	else if (__tmp > 65535)
    43fe:	69 a9       	ldd	r22, Y+49	; 0x31
    4400:	7a a9       	ldd	r23, Y+50	; 0x32
    4402:	8b a9       	ldd	r24, Y+51	; 0x33
    4404:	9c a9       	ldd	r25, Y+52	; 0x34
    4406:	20 e0       	ldi	r18, 0x00	; 0
    4408:	3f ef       	ldi	r19, 0xFF	; 255
    440a:	4f e7       	ldi	r20, 0x7F	; 127
    440c:	57 e4       	ldi	r21, 0x47	; 71
    440e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4412:	18 16       	cp	r1, r24
    4414:	4c f5       	brge	.+82     	; 0x4468 <HSTEP_voidMotorAngle+0x13a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4416:	6d a9       	ldd	r22, Y+53	; 0x35
    4418:	7e a9       	ldd	r23, Y+54	; 0x36
    441a:	8f a9       	ldd	r24, Y+55	; 0x37
    441c:	98 ad       	ldd	r25, Y+56	; 0x38
    441e:	20 e0       	ldi	r18, 0x00	; 0
    4420:	30 e0       	ldi	r19, 0x00	; 0
    4422:	40 e2       	ldi	r20, 0x20	; 32
    4424:	51 e4       	ldi	r21, 0x41	; 65
    4426:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    442a:	dc 01       	movw	r26, r24
    442c:	cb 01       	movw	r24, r22
    442e:	bc 01       	movw	r22, r24
    4430:	cd 01       	movw	r24, r26
    4432:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4436:	dc 01       	movw	r26, r24
    4438:	cb 01       	movw	r24, r22
    443a:	98 ab       	std	Y+48, r25	; 0x30
    443c:	8f a7       	std	Y+47, r24	; 0x2f
    443e:	0f c0       	rjmp	.+30     	; 0x445e <HSTEP_voidMotorAngle+0x130>
    4440:	88 ec       	ldi	r24, 0xC8	; 200
    4442:	90 e0       	ldi	r25, 0x00	; 0
    4444:	9e a7       	std	Y+46, r25	; 0x2e
    4446:	8d a7       	std	Y+45, r24	; 0x2d
    4448:	8d a5       	ldd	r24, Y+45	; 0x2d
    444a:	9e a5       	ldd	r25, Y+46	; 0x2e
    444c:	01 97       	sbiw	r24, 0x01	; 1
    444e:	f1 f7       	brne	.-4      	; 0x444c <HSTEP_voidMotorAngle+0x11e>
    4450:	9e a7       	std	Y+46, r25	; 0x2e
    4452:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4454:	8f a5       	ldd	r24, Y+47	; 0x2f
    4456:	98 a9       	ldd	r25, Y+48	; 0x30
    4458:	01 97       	sbiw	r24, 0x01	; 1
    445a:	98 ab       	std	Y+48, r25	; 0x30
    445c:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    445e:	8f a5       	ldd	r24, Y+47	; 0x2f
    4460:	98 a9       	ldd	r25, Y+48	; 0x30
    4462:	00 97       	sbiw	r24, 0x00	; 0
    4464:	69 f7       	brne	.-38     	; 0x4440 <HSTEP_voidMotorAngle+0x112>
    4466:	14 c0       	rjmp	.+40     	; 0x4490 <HSTEP_voidMotorAngle+0x162>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4468:	69 a9       	ldd	r22, Y+49	; 0x31
    446a:	7a a9       	ldd	r23, Y+50	; 0x32
    446c:	8b a9       	ldd	r24, Y+51	; 0x33
    446e:	9c a9       	ldd	r25, Y+52	; 0x34
    4470:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4474:	dc 01       	movw	r26, r24
    4476:	cb 01       	movw	r24, r22
    4478:	98 ab       	std	Y+48, r25	; 0x30
    447a:	8f a7       	std	Y+47, r24	; 0x2f
    447c:	8f a5       	ldd	r24, Y+47	; 0x2f
    447e:	98 a9       	ldd	r25, Y+48	; 0x30
    4480:	9c a7       	std	Y+44, r25	; 0x2c
    4482:	8b a7       	std	Y+43, r24	; 0x2b
    4484:	8b a5       	ldd	r24, Y+43	; 0x2b
    4486:	9c a5       	ldd	r25, Y+44	; 0x2c
    4488:	01 97       	sbiw	r24, 0x01	; 1
    448a:	f1 f7       	brne	.-4      	; 0x4488 <HSTEP_voidMotorAngle+0x15a>
    448c:	9c a7       	std	Y+44, r25	; 0x2c
    448e:	8b a7       	std	Y+43, r24	; 0x2b
    _delay_ms(10);
    MDIO_voidSetPinValue(STEPPER_PORT,BLUE_COIL_PIN,PIN_HIGH);
    4490:	80 e0       	ldi	r24, 0x00	; 0
    4492:	60 e0       	ldi	r22, 0x00	; 0
    4494:	41 e0       	ldi	r20, 0x01	; 1
    4496:	0e 94 32 08 	call	0x1064	; 0x1064 <MDIO_voidSetPinValue>
    MDIO_voidSetPinValue(STEPPER_PORT,PINK_COIL_PIN,PIN_HIGH);
    449a:	80 e0       	ldi	r24, 0x00	; 0
    449c:	61 e0       	ldi	r22, 0x01	; 1
    449e:	41 e0       	ldi	r20, 0x01	; 1
    44a0:	0e 94 32 08 	call	0x1064	; 0x1064 <MDIO_voidSetPinValue>
    MDIO_voidSetPinValue(STEPPER_PORT,YELLOW_COIL_PIN,PIN_LOW);
    44a4:	80 e0       	ldi	r24, 0x00	; 0
    44a6:	62 e0       	ldi	r22, 0x02	; 2
    44a8:	40 e0       	ldi	r20, 0x00	; 0
    44aa:	0e 94 32 08 	call	0x1064	; 0x1064 <MDIO_voidSetPinValue>
    MDIO_voidSetPinValue(STEPPER_PORT,ORANGE_COIL_PIN,PIN_HIGH);
    44ae:	80 e0       	ldi	r24, 0x00	; 0
    44b0:	63 e0       	ldi	r22, 0x03	; 3
    44b2:	41 e0       	ldi	r20, 0x01	; 1
    44b4:	0e 94 32 08 	call	0x1064	; 0x1064 <MDIO_voidSetPinValue>
    44b8:	80 e0       	ldi	r24, 0x00	; 0
    44ba:	90 e0       	ldi	r25, 0x00	; 0
    44bc:	a0 e2       	ldi	r26, 0x20	; 32
    44be:	b1 e4       	ldi	r27, 0x41	; 65
    44c0:	8f a3       	std	Y+39, r24	; 0x27
    44c2:	98 a7       	std	Y+40, r25	; 0x28
    44c4:	a9 a7       	std	Y+41, r26	; 0x29
    44c6:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    44c8:	6f a1       	ldd	r22, Y+39	; 0x27
    44ca:	78 a5       	ldd	r23, Y+40	; 0x28
    44cc:	89 a5       	ldd	r24, Y+41	; 0x29
    44ce:	9a a5       	ldd	r25, Y+42	; 0x2a
    44d0:	20 e0       	ldi	r18, 0x00	; 0
    44d2:	30 e0       	ldi	r19, 0x00	; 0
    44d4:	4a ef       	ldi	r20, 0xFA	; 250
    44d6:	54 e4       	ldi	r21, 0x44	; 68
    44d8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    44dc:	dc 01       	movw	r26, r24
    44de:	cb 01       	movw	r24, r22
    44e0:	8b a3       	std	Y+35, r24	; 0x23
    44e2:	9c a3       	std	Y+36, r25	; 0x24
    44e4:	ad a3       	std	Y+37, r26	; 0x25
    44e6:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    44e8:	6b a1       	ldd	r22, Y+35	; 0x23
    44ea:	7c a1       	ldd	r23, Y+36	; 0x24
    44ec:	8d a1       	ldd	r24, Y+37	; 0x25
    44ee:	9e a1       	ldd	r25, Y+38	; 0x26
    44f0:	20 e0       	ldi	r18, 0x00	; 0
    44f2:	30 e0       	ldi	r19, 0x00	; 0
    44f4:	40 e8       	ldi	r20, 0x80	; 128
    44f6:	5f e3       	ldi	r21, 0x3F	; 63
    44f8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    44fc:	88 23       	and	r24, r24
    44fe:	2c f4       	brge	.+10     	; 0x450a <HSTEP_voidMotorAngle+0x1dc>
		__ticks = 1;
    4500:	81 e0       	ldi	r24, 0x01	; 1
    4502:	90 e0       	ldi	r25, 0x00	; 0
    4504:	9a a3       	std	Y+34, r25	; 0x22
    4506:	89 a3       	std	Y+33, r24	; 0x21
    4508:	3f c0       	rjmp	.+126    	; 0x4588 <HSTEP_voidMotorAngle+0x25a>
	else if (__tmp > 65535)
    450a:	6b a1       	ldd	r22, Y+35	; 0x23
    450c:	7c a1       	ldd	r23, Y+36	; 0x24
    450e:	8d a1       	ldd	r24, Y+37	; 0x25
    4510:	9e a1       	ldd	r25, Y+38	; 0x26
    4512:	20 e0       	ldi	r18, 0x00	; 0
    4514:	3f ef       	ldi	r19, 0xFF	; 255
    4516:	4f e7       	ldi	r20, 0x7F	; 127
    4518:	57 e4       	ldi	r21, 0x47	; 71
    451a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    451e:	18 16       	cp	r1, r24
    4520:	4c f5       	brge	.+82     	; 0x4574 <HSTEP_voidMotorAngle+0x246>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4522:	6f a1       	ldd	r22, Y+39	; 0x27
    4524:	78 a5       	ldd	r23, Y+40	; 0x28
    4526:	89 a5       	ldd	r24, Y+41	; 0x29
    4528:	9a a5       	ldd	r25, Y+42	; 0x2a
    452a:	20 e0       	ldi	r18, 0x00	; 0
    452c:	30 e0       	ldi	r19, 0x00	; 0
    452e:	40 e2       	ldi	r20, 0x20	; 32
    4530:	51 e4       	ldi	r21, 0x41	; 65
    4532:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4536:	dc 01       	movw	r26, r24
    4538:	cb 01       	movw	r24, r22
    453a:	bc 01       	movw	r22, r24
    453c:	cd 01       	movw	r24, r26
    453e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4542:	dc 01       	movw	r26, r24
    4544:	cb 01       	movw	r24, r22
    4546:	9a a3       	std	Y+34, r25	; 0x22
    4548:	89 a3       	std	Y+33, r24	; 0x21
    454a:	0f c0       	rjmp	.+30     	; 0x456a <HSTEP_voidMotorAngle+0x23c>
    454c:	88 ec       	ldi	r24, 0xC8	; 200
    454e:	90 e0       	ldi	r25, 0x00	; 0
    4550:	98 a3       	std	Y+32, r25	; 0x20
    4552:	8f 8f       	std	Y+31, r24	; 0x1f
    4554:	8f 8d       	ldd	r24, Y+31	; 0x1f
    4556:	98 a1       	ldd	r25, Y+32	; 0x20
    4558:	01 97       	sbiw	r24, 0x01	; 1
    455a:	f1 f7       	brne	.-4      	; 0x4558 <HSTEP_voidMotorAngle+0x22a>
    455c:	98 a3       	std	Y+32, r25	; 0x20
    455e:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4560:	89 a1       	ldd	r24, Y+33	; 0x21
    4562:	9a a1       	ldd	r25, Y+34	; 0x22
    4564:	01 97       	sbiw	r24, 0x01	; 1
    4566:	9a a3       	std	Y+34, r25	; 0x22
    4568:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    456a:	89 a1       	ldd	r24, Y+33	; 0x21
    456c:	9a a1       	ldd	r25, Y+34	; 0x22
    456e:	00 97       	sbiw	r24, 0x00	; 0
    4570:	69 f7       	brne	.-38     	; 0x454c <HSTEP_voidMotorAngle+0x21e>
    4572:	14 c0       	rjmp	.+40     	; 0x459c <HSTEP_voidMotorAngle+0x26e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4574:	6b a1       	ldd	r22, Y+35	; 0x23
    4576:	7c a1       	ldd	r23, Y+36	; 0x24
    4578:	8d a1       	ldd	r24, Y+37	; 0x25
    457a:	9e a1       	ldd	r25, Y+38	; 0x26
    457c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4580:	dc 01       	movw	r26, r24
    4582:	cb 01       	movw	r24, r22
    4584:	9a a3       	std	Y+34, r25	; 0x22
    4586:	89 a3       	std	Y+33, r24	; 0x21
    4588:	89 a1       	ldd	r24, Y+33	; 0x21
    458a:	9a a1       	ldd	r25, Y+34	; 0x22
    458c:	9e 8f       	std	Y+30, r25	; 0x1e
    458e:	8d 8f       	std	Y+29, r24	; 0x1d
    4590:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4592:	9e 8d       	ldd	r25, Y+30	; 0x1e
    4594:	01 97       	sbiw	r24, 0x01	; 1
    4596:	f1 f7       	brne	.-4      	; 0x4594 <HSTEP_voidMotorAngle+0x266>
    4598:	9e 8f       	std	Y+30, r25	; 0x1e
    459a:	8d 8f       	std	Y+29, r24	; 0x1d
    _delay_ms(10);
    MDIO_voidSetPinValue(STEPPER_PORT,BLUE_COIL_PIN,PIN_HIGH);
    459c:	80 e0       	ldi	r24, 0x00	; 0
    459e:	60 e0       	ldi	r22, 0x00	; 0
    45a0:	41 e0       	ldi	r20, 0x01	; 1
    45a2:	0e 94 32 08 	call	0x1064	; 0x1064 <MDIO_voidSetPinValue>
    MDIO_voidSetPinValue(STEPPER_PORT,PINK_COIL_PIN,PIN_HIGH);
    45a6:	80 e0       	ldi	r24, 0x00	; 0
    45a8:	61 e0       	ldi	r22, 0x01	; 1
    45aa:	41 e0       	ldi	r20, 0x01	; 1
    45ac:	0e 94 32 08 	call	0x1064	; 0x1064 <MDIO_voidSetPinValue>
    MDIO_voidSetPinValue(STEPPER_PORT,YELLOW_COIL_PIN,PIN_HIGH);
    45b0:	80 e0       	ldi	r24, 0x00	; 0
    45b2:	62 e0       	ldi	r22, 0x02	; 2
    45b4:	41 e0       	ldi	r20, 0x01	; 1
    45b6:	0e 94 32 08 	call	0x1064	; 0x1064 <MDIO_voidSetPinValue>
    MDIO_voidSetPinValue(STEPPER_PORT,ORANGE_COIL_PIN,PIN_LOW);
    45ba:	80 e0       	ldi	r24, 0x00	; 0
    45bc:	63 e0       	ldi	r22, 0x03	; 3
    45be:	40 e0       	ldi	r20, 0x00	; 0
    45c0:	0e 94 32 08 	call	0x1064	; 0x1064 <MDIO_voidSetPinValue>
    45c4:	80 e0       	ldi	r24, 0x00	; 0
    45c6:	90 e0       	ldi	r25, 0x00	; 0
    45c8:	a0 e2       	ldi	r26, 0x20	; 32
    45ca:	b1 e4       	ldi	r27, 0x41	; 65
    45cc:	89 8f       	std	Y+25, r24	; 0x19
    45ce:	9a 8f       	std	Y+26, r25	; 0x1a
    45d0:	ab 8f       	std	Y+27, r26	; 0x1b
    45d2:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    45d4:	69 8d       	ldd	r22, Y+25	; 0x19
    45d6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    45d8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    45da:	9c 8d       	ldd	r25, Y+28	; 0x1c
    45dc:	20 e0       	ldi	r18, 0x00	; 0
    45de:	30 e0       	ldi	r19, 0x00	; 0
    45e0:	4a ef       	ldi	r20, 0xFA	; 250
    45e2:	54 e4       	ldi	r21, 0x44	; 68
    45e4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    45e8:	dc 01       	movw	r26, r24
    45ea:	cb 01       	movw	r24, r22
    45ec:	8d 8b       	std	Y+21, r24	; 0x15
    45ee:	9e 8b       	std	Y+22, r25	; 0x16
    45f0:	af 8b       	std	Y+23, r26	; 0x17
    45f2:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    45f4:	6d 89       	ldd	r22, Y+21	; 0x15
    45f6:	7e 89       	ldd	r23, Y+22	; 0x16
    45f8:	8f 89       	ldd	r24, Y+23	; 0x17
    45fa:	98 8d       	ldd	r25, Y+24	; 0x18
    45fc:	20 e0       	ldi	r18, 0x00	; 0
    45fe:	30 e0       	ldi	r19, 0x00	; 0
    4600:	40 e8       	ldi	r20, 0x80	; 128
    4602:	5f e3       	ldi	r21, 0x3F	; 63
    4604:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4608:	88 23       	and	r24, r24
    460a:	2c f4       	brge	.+10     	; 0x4616 <HSTEP_voidMotorAngle+0x2e8>
		__ticks = 1;
    460c:	81 e0       	ldi	r24, 0x01	; 1
    460e:	90 e0       	ldi	r25, 0x00	; 0
    4610:	9c 8b       	std	Y+20, r25	; 0x14
    4612:	8b 8b       	std	Y+19, r24	; 0x13
    4614:	3f c0       	rjmp	.+126    	; 0x4694 <HSTEP_voidMotorAngle+0x366>
	else if (__tmp > 65535)
    4616:	6d 89       	ldd	r22, Y+21	; 0x15
    4618:	7e 89       	ldd	r23, Y+22	; 0x16
    461a:	8f 89       	ldd	r24, Y+23	; 0x17
    461c:	98 8d       	ldd	r25, Y+24	; 0x18
    461e:	20 e0       	ldi	r18, 0x00	; 0
    4620:	3f ef       	ldi	r19, 0xFF	; 255
    4622:	4f e7       	ldi	r20, 0x7F	; 127
    4624:	57 e4       	ldi	r21, 0x47	; 71
    4626:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    462a:	18 16       	cp	r1, r24
    462c:	4c f5       	brge	.+82     	; 0x4680 <HSTEP_voidMotorAngle+0x352>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    462e:	69 8d       	ldd	r22, Y+25	; 0x19
    4630:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4632:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4634:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4636:	20 e0       	ldi	r18, 0x00	; 0
    4638:	30 e0       	ldi	r19, 0x00	; 0
    463a:	40 e2       	ldi	r20, 0x20	; 32
    463c:	51 e4       	ldi	r21, 0x41	; 65
    463e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4642:	dc 01       	movw	r26, r24
    4644:	cb 01       	movw	r24, r22
    4646:	bc 01       	movw	r22, r24
    4648:	cd 01       	movw	r24, r26
    464a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    464e:	dc 01       	movw	r26, r24
    4650:	cb 01       	movw	r24, r22
    4652:	9c 8b       	std	Y+20, r25	; 0x14
    4654:	8b 8b       	std	Y+19, r24	; 0x13
    4656:	0f c0       	rjmp	.+30     	; 0x4676 <HSTEP_voidMotorAngle+0x348>
    4658:	88 ec       	ldi	r24, 0xC8	; 200
    465a:	90 e0       	ldi	r25, 0x00	; 0
    465c:	9a 8b       	std	Y+18, r25	; 0x12
    465e:	89 8b       	std	Y+17, r24	; 0x11
    4660:	89 89       	ldd	r24, Y+17	; 0x11
    4662:	9a 89       	ldd	r25, Y+18	; 0x12
    4664:	01 97       	sbiw	r24, 0x01	; 1
    4666:	f1 f7       	brne	.-4      	; 0x4664 <HSTEP_voidMotorAngle+0x336>
    4668:	9a 8b       	std	Y+18, r25	; 0x12
    466a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    466c:	8b 89       	ldd	r24, Y+19	; 0x13
    466e:	9c 89       	ldd	r25, Y+20	; 0x14
    4670:	01 97       	sbiw	r24, 0x01	; 1
    4672:	9c 8b       	std	Y+20, r25	; 0x14
    4674:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4676:	8b 89       	ldd	r24, Y+19	; 0x13
    4678:	9c 89       	ldd	r25, Y+20	; 0x14
    467a:	00 97       	sbiw	r24, 0x00	; 0
    467c:	69 f7       	brne	.-38     	; 0x4658 <HSTEP_voidMotorAngle+0x32a>
    467e:	14 c0       	rjmp	.+40     	; 0x46a8 <HSTEP_voidMotorAngle+0x37a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4680:	6d 89       	ldd	r22, Y+21	; 0x15
    4682:	7e 89       	ldd	r23, Y+22	; 0x16
    4684:	8f 89       	ldd	r24, Y+23	; 0x17
    4686:	98 8d       	ldd	r25, Y+24	; 0x18
    4688:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    468c:	dc 01       	movw	r26, r24
    468e:	cb 01       	movw	r24, r22
    4690:	9c 8b       	std	Y+20, r25	; 0x14
    4692:	8b 8b       	std	Y+19, r24	; 0x13
    4694:	8b 89       	ldd	r24, Y+19	; 0x13
    4696:	9c 89       	ldd	r25, Y+20	; 0x14
    4698:	98 8b       	std	Y+16, r25	; 0x10
    469a:	8f 87       	std	Y+15, r24	; 0x0f
    469c:	8f 85       	ldd	r24, Y+15	; 0x0f
    469e:	98 89       	ldd	r25, Y+16	; 0x10
    46a0:	01 97       	sbiw	r24, 0x01	; 1
    46a2:	f1 f7       	brne	.-4      	; 0x46a0 <HSTEP_voidMotorAngle+0x372>
    46a4:	98 8b       	std	Y+16, r25	; 0x10
    46a6:	8f 87       	std	Y+15, r24	; 0x0f
    _delay_ms(10);
    MDIO_voidSetPinValue(STEPPER_PORT,BLUE_COIL_PIN,PIN_LOW);
    46a8:	80 e0       	ldi	r24, 0x00	; 0
    46aa:	60 e0       	ldi	r22, 0x00	; 0
    46ac:	40 e0       	ldi	r20, 0x00	; 0
    46ae:	0e 94 32 08 	call	0x1064	; 0x1064 <MDIO_voidSetPinValue>
    MDIO_voidSetPinValue(STEPPER_PORT,PINK_COIL_PIN,PIN_HIGH);
    46b2:	80 e0       	ldi	r24, 0x00	; 0
    46b4:	61 e0       	ldi	r22, 0x01	; 1
    46b6:	41 e0       	ldi	r20, 0x01	; 1
    46b8:	0e 94 32 08 	call	0x1064	; 0x1064 <MDIO_voidSetPinValue>
    MDIO_voidSetPinValue(STEPPER_PORT,YELLOW_COIL_PIN,PIN_HIGH);
    46bc:	80 e0       	ldi	r24, 0x00	; 0
    46be:	62 e0       	ldi	r22, 0x02	; 2
    46c0:	41 e0       	ldi	r20, 0x01	; 1
    46c2:	0e 94 32 08 	call	0x1064	; 0x1064 <MDIO_voidSetPinValue>
    MDIO_voidSetPinValue(STEPPER_PORT,ORANGE_COIL_PIN,PIN_HIGH);
    46c6:	80 e0       	ldi	r24, 0x00	; 0
    46c8:	63 e0       	ldi	r22, 0x03	; 3
    46ca:	41 e0       	ldi	r20, 0x01	; 1
    46cc:	0e 94 32 08 	call	0x1064	; 0x1064 <MDIO_voidSetPinValue>
    46d0:	80 e0       	ldi	r24, 0x00	; 0
    46d2:	90 e0       	ldi	r25, 0x00	; 0
    46d4:	a0 e2       	ldi	r26, 0x20	; 32
    46d6:	b1 e4       	ldi	r27, 0x41	; 65
    46d8:	8b 87       	std	Y+11, r24	; 0x0b
    46da:	9c 87       	std	Y+12, r25	; 0x0c
    46dc:	ad 87       	std	Y+13, r26	; 0x0d
    46de:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    46e0:	6b 85       	ldd	r22, Y+11	; 0x0b
    46e2:	7c 85       	ldd	r23, Y+12	; 0x0c
    46e4:	8d 85       	ldd	r24, Y+13	; 0x0d
    46e6:	9e 85       	ldd	r25, Y+14	; 0x0e
    46e8:	20 e0       	ldi	r18, 0x00	; 0
    46ea:	30 e0       	ldi	r19, 0x00	; 0
    46ec:	4a ef       	ldi	r20, 0xFA	; 250
    46ee:	54 e4       	ldi	r21, 0x44	; 68
    46f0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    46f4:	dc 01       	movw	r26, r24
    46f6:	cb 01       	movw	r24, r22
    46f8:	8f 83       	std	Y+7, r24	; 0x07
    46fa:	98 87       	std	Y+8, r25	; 0x08
    46fc:	a9 87       	std	Y+9, r26	; 0x09
    46fe:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4700:	6f 81       	ldd	r22, Y+7	; 0x07
    4702:	78 85       	ldd	r23, Y+8	; 0x08
    4704:	89 85       	ldd	r24, Y+9	; 0x09
    4706:	9a 85       	ldd	r25, Y+10	; 0x0a
    4708:	20 e0       	ldi	r18, 0x00	; 0
    470a:	30 e0       	ldi	r19, 0x00	; 0
    470c:	40 e8       	ldi	r20, 0x80	; 128
    470e:	5f e3       	ldi	r21, 0x3F	; 63
    4710:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4714:	88 23       	and	r24, r24
    4716:	2c f4       	brge	.+10     	; 0x4722 <HSTEP_voidMotorAngle+0x3f4>
		__ticks = 1;
    4718:	81 e0       	ldi	r24, 0x01	; 1
    471a:	90 e0       	ldi	r25, 0x00	; 0
    471c:	9e 83       	std	Y+6, r25	; 0x06
    471e:	8d 83       	std	Y+5, r24	; 0x05
    4720:	3f c0       	rjmp	.+126    	; 0x47a0 <HSTEP_voidMotorAngle+0x472>
	else if (__tmp > 65535)
    4722:	6f 81       	ldd	r22, Y+7	; 0x07
    4724:	78 85       	ldd	r23, Y+8	; 0x08
    4726:	89 85       	ldd	r24, Y+9	; 0x09
    4728:	9a 85       	ldd	r25, Y+10	; 0x0a
    472a:	20 e0       	ldi	r18, 0x00	; 0
    472c:	3f ef       	ldi	r19, 0xFF	; 255
    472e:	4f e7       	ldi	r20, 0x7F	; 127
    4730:	57 e4       	ldi	r21, 0x47	; 71
    4732:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4736:	18 16       	cp	r1, r24
    4738:	4c f5       	brge	.+82     	; 0x478c <HSTEP_voidMotorAngle+0x45e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    473a:	6b 85       	ldd	r22, Y+11	; 0x0b
    473c:	7c 85       	ldd	r23, Y+12	; 0x0c
    473e:	8d 85       	ldd	r24, Y+13	; 0x0d
    4740:	9e 85       	ldd	r25, Y+14	; 0x0e
    4742:	20 e0       	ldi	r18, 0x00	; 0
    4744:	30 e0       	ldi	r19, 0x00	; 0
    4746:	40 e2       	ldi	r20, 0x20	; 32
    4748:	51 e4       	ldi	r21, 0x41	; 65
    474a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    474e:	dc 01       	movw	r26, r24
    4750:	cb 01       	movw	r24, r22
    4752:	bc 01       	movw	r22, r24
    4754:	cd 01       	movw	r24, r26
    4756:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    475a:	dc 01       	movw	r26, r24
    475c:	cb 01       	movw	r24, r22
    475e:	9e 83       	std	Y+6, r25	; 0x06
    4760:	8d 83       	std	Y+5, r24	; 0x05
    4762:	0f c0       	rjmp	.+30     	; 0x4782 <HSTEP_voidMotorAngle+0x454>
    4764:	88 ec       	ldi	r24, 0xC8	; 200
    4766:	90 e0       	ldi	r25, 0x00	; 0
    4768:	9c 83       	std	Y+4, r25	; 0x04
    476a:	8b 83       	std	Y+3, r24	; 0x03
    476c:	8b 81       	ldd	r24, Y+3	; 0x03
    476e:	9c 81       	ldd	r25, Y+4	; 0x04
    4770:	01 97       	sbiw	r24, 0x01	; 1
    4772:	f1 f7       	brne	.-4      	; 0x4770 <HSTEP_voidMotorAngle+0x442>
    4774:	9c 83       	std	Y+4, r25	; 0x04
    4776:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4778:	8d 81       	ldd	r24, Y+5	; 0x05
    477a:	9e 81       	ldd	r25, Y+6	; 0x06
    477c:	01 97       	sbiw	r24, 0x01	; 1
    477e:	9e 83       	std	Y+6, r25	; 0x06
    4780:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4782:	8d 81       	ldd	r24, Y+5	; 0x05
    4784:	9e 81       	ldd	r25, Y+6	; 0x06
    4786:	00 97       	sbiw	r24, 0x00	; 0
    4788:	69 f7       	brne	.-38     	; 0x4764 <HSTEP_voidMotorAngle+0x436>
    478a:	14 c0       	rjmp	.+40     	; 0x47b4 <HSTEP_voidMotorAngle+0x486>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    478c:	6f 81       	ldd	r22, Y+7	; 0x07
    478e:	78 85       	ldd	r23, Y+8	; 0x08
    4790:	89 85       	ldd	r24, Y+9	; 0x09
    4792:	9a 85       	ldd	r25, Y+10	; 0x0a
    4794:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4798:	dc 01       	movw	r26, r24
    479a:	cb 01       	movw	r24, r22
    479c:	9e 83       	std	Y+6, r25	; 0x06
    479e:	8d 83       	std	Y+5, r24	; 0x05
    47a0:	8d 81       	ldd	r24, Y+5	; 0x05
    47a2:	9e 81       	ldd	r25, Y+6	; 0x06
    47a4:	9a 83       	std	Y+2, r25	; 0x02
    47a6:	89 83       	std	Y+1, r24	; 0x01
    47a8:	89 81       	ldd	r24, Y+1	; 0x01
    47aa:	9a 81       	ldd	r25, Y+2	; 0x02
    47ac:	01 97       	sbiw	r24, 0x01	; 1
    47ae:	f1 f7       	brne	.-4      	; 0x47ac <HSTEP_voidMotorAngle+0x47e>
    47b0:	9a 83       	std	Y+2, r25	; 0x02
    47b2:	89 83       	std	Y+1, r24	; 0x01

void HSTEP_voidMotorAngle(u32 A_u32Angle)
{
    u32 local_u32Angle=((NO_OF_STEPS_FOR_360*A_u32Angle)/CIRCLE_ANGLE);
    u32 local_u32Steps=local_u32Angle/NO_OF_COILS; 
    for(u16 i =0;i<local_u32Steps;i++)
    47b4:	89 ad       	ldd	r24, Y+57	; 0x39
    47b6:	9a ad       	ldd	r25, Y+58	; 0x3a
    47b8:	01 96       	adiw	r24, 0x01	; 1
    47ba:	9a af       	std	Y+58, r25	; 0x3a
    47bc:	89 af       	std	Y+57, r24	; 0x39
    47be:	29 ad       	ldd	r18, Y+57	; 0x39
    47c0:	3a ad       	ldd	r19, Y+58	; 0x3a
    47c2:	8b ad       	ldd	r24, Y+59	; 0x3b
    47c4:	9c ad       	ldd	r25, Y+60	; 0x3c
    47c6:	28 17       	cp	r18, r24
    47c8:	39 07       	cpc	r19, r25
    47ca:	08 f4       	brcc	.+2      	; 0x47ce <HSTEP_voidMotorAngle+0x4a0>
    47cc:	db cd       	rjmp	.-1098   	; 0x4384 <HSTEP_voidMotorAngle+0x56>
    MDIO_voidSetPinValue(STEPPER_PORT,PINK_COIL_PIN,PIN_HIGH);
    MDIO_voidSetPinValue(STEPPER_PORT,YELLOW_COIL_PIN,PIN_HIGH);
    MDIO_voidSetPinValue(STEPPER_PORT,ORANGE_COIL_PIN,PIN_HIGH);
    _delay_ms(10);
    }
    47ce:	c0 5c       	subi	r28, 0xC0	; 192
    47d0:	df 4f       	sbci	r29, 0xFF	; 255
    47d2:	0f b6       	in	r0, 0x3f	; 63
    47d4:	f8 94       	cli
    47d6:	de bf       	out	0x3e, r29	; 62
    47d8:	0f be       	out	0x3f, r0	; 63
    47da:	cd bf       	out	0x3d, r28	; 61
    47dc:	cf 91       	pop	r28
    47de:	df 91       	pop	r29
    47e0:	08 95       	ret

000047e2 <main>:

#include <util/delay.h>

void toggleLED(void);
void main(void)
{
    47e2:	df 93       	push	r29
    47e4:	cf 93       	push	r28
    47e6:	0f 92       	push	r0
    47e8:	cd b7       	in	r28, 0x3d	; 61
    47ea:	de b7       	in	r29, 0x3e	; 62
    u8 local_u8PressedKey;
    MDIO_voidInit();
    47ec:	0e 94 5a 07 	call	0xeb4	; 0xeb4 <MDIO_voidInit>
    MGI_voidEnable();
    47f0:	0e 94 cb 0c 	call	0x1996	; 0x1996 <MGI_voidEnable>
    MEXTI_voidConfig(EXTI0,FALLING_EDGE);
    47f4:	80 e0       	ldi	r24, 0x00	; 0
    47f6:	62 e0       	ldi	r22, 0x02	; 2
    47f8:	0e 94 e0 0a 	call	0x15c0	; 0x15c0 <MEXTI_voidConfig>
    MEXTI_voidSetCallBack(EXTI0,toggleLED);
    47fc:	28 e0       	ldi	r18, 0x08	; 8
    47fe:	34 e2       	ldi	r19, 0x24	; 36
    4800:	80 e0       	ldi	r24, 0x00	; 0
    4802:	b9 01       	movw	r22, r18
    4804:	0e 94 f5 0b 	call	0x17ea	; 0x17ea <MEXTI_voidSetCallBack>
    MEXTI_voidEnable(EXTI0);
    4808:	80 e0       	ldi	r24, 0x00	; 0
    480a:	0e 94 50 0b 	call	0x16a0	; 0x16a0 <MEXTI_voidEnable>
    480e:	ff cf       	rjmp	.-2      	; 0x480e <main+0x2c>

00004810 <toggleLED>:

    }
}

void toggleLED(void)
{
    4810:	df 93       	push	r29
    4812:	cf 93       	push	r28
    4814:	cd b7       	in	r28, 0x3d	; 61
    4816:	de b7       	in	r29, 0x3e	; 62
    4818:	6c 97       	sbiw	r28, 0x1c	; 28
    481a:	0f b6       	in	r0, 0x3f	; 63
    481c:	f8 94       	cli
    481e:	de bf       	out	0x3e, r29	; 62
    4820:	0f be       	out	0x3f, r0	; 63
    4822:	cd bf       	out	0x3d, r28	; 61
	static u8 local_u8Flag=0;
	if(local_u8Flag)
    4824:	80 91 9b 00 	lds	r24, 0x009B
    4828:	88 23       	and	r24, r24
    482a:	09 f4       	brne	.+2      	; 0x482e <toggleLED+0x1e>
    482c:	7a c0       	rjmp	.+244    	; 0x4922 <toggleLED+0x112>
	{
		local_u8Flag=0;
    482e:	10 92 9b 00 	sts	0x009B, r1
		MDIO_voidSetPinValue(PORTA,PIN0,PIN_HIGH);
    4832:	80 e0       	ldi	r24, 0x00	; 0
    4834:	60 e0       	ldi	r22, 0x00	; 0
    4836:	41 e0       	ldi	r20, 0x01	; 1
    4838:	0e 94 32 08 	call	0x1064	; 0x1064 <MDIO_voidSetPinValue>
    483c:	80 e0       	ldi	r24, 0x00	; 0
    483e:	90 e0       	ldi	r25, 0x00	; 0
    4840:	a8 ec       	ldi	r26, 0xC8	; 200
    4842:	b2 e4       	ldi	r27, 0x42	; 66
    4844:	89 8f       	std	Y+25, r24	; 0x19
    4846:	9a 8f       	std	Y+26, r25	; 0x1a
    4848:	ab 8f       	std	Y+27, r26	; 0x1b
    484a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    484c:	69 8d       	ldd	r22, Y+25	; 0x19
    484e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4850:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4852:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4854:	20 e0       	ldi	r18, 0x00	; 0
    4856:	30 e0       	ldi	r19, 0x00	; 0
    4858:	4a ef       	ldi	r20, 0xFA	; 250
    485a:	54 e4       	ldi	r21, 0x44	; 68
    485c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4860:	dc 01       	movw	r26, r24
    4862:	cb 01       	movw	r24, r22
    4864:	8d 8b       	std	Y+21, r24	; 0x15
    4866:	9e 8b       	std	Y+22, r25	; 0x16
    4868:	af 8b       	std	Y+23, r26	; 0x17
    486a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    486c:	6d 89       	ldd	r22, Y+21	; 0x15
    486e:	7e 89       	ldd	r23, Y+22	; 0x16
    4870:	8f 89       	ldd	r24, Y+23	; 0x17
    4872:	98 8d       	ldd	r25, Y+24	; 0x18
    4874:	20 e0       	ldi	r18, 0x00	; 0
    4876:	30 e0       	ldi	r19, 0x00	; 0
    4878:	40 e8       	ldi	r20, 0x80	; 128
    487a:	5f e3       	ldi	r21, 0x3F	; 63
    487c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4880:	88 23       	and	r24, r24
    4882:	2c f4       	brge	.+10     	; 0x488e <toggleLED+0x7e>
		__ticks = 1;
    4884:	81 e0       	ldi	r24, 0x01	; 1
    4886:	90 e0       	ldi	r25, 0x00	; 0
    4888:	9c 8b       	std	Y+20, r25	; 0x14
    488a:	8b 8b       	std	Y+19, r24	; 0x13
    488c:	3f c0       	rjmp	.+126    	; 0x490c <toggleLED+0xfc>
	else if (__tmp > 65535)
    488e:	6d 89       	ldd	r22, Y+21	; 0x15
    4890:	7e 89       	ldd	r23, Y+22	; 0x16
    4892:	8f 89       	ldd	r24, Y+23	; 0x17
    4894:	98 8d       	ldd	r25, Y+24	; 0x18
    4896:	20 e0       	ldi	r18, 0x00	; 0
    4898:	3f ef       	ldi	r19, 0xFF	; 255
    489a:	4f e7       	ldi	r20, 0x7F	; 127
    489c:	57 e4       	ldi	r21, 0x47	; 71
    489e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    48a2:	18 16       	cp	r1, r24
    48a4:	4c f5       	brge	.+82     	; 0x48f8 <toggleLED+0xe8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    48a6:	69 8d       	ldd	r22, Y+25	; 0x19
    48a8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    48aa:	8b 8d       	ldd	r24, Y+27	; 0x1b
    48ac:	9c 8d       	ldd	r25, Y+28	; 0x1c
    48ae:	20 e0       	ldi	r18, 0x00	; 0
    48b0:	30 e0       	ldi	r19, 0x00	; 0
    48b2:	40 e2       	ldi	r20, 0x20	; 32
    48b4:	51 e4       	ldi	r21, 0x41	; 65
    48b6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    48ba:	dc 01       	movw	r26, r24
    48bc:	cb 01       	movw	r24, r22
    48be:	bc 01       	movw	r22, r24
    48c0:	cd 01       	movw	r24, r26
    48c2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    48c6:	dc 01       	movw	r26, r24
    48c8:	cb 01       	movw	r24, r22
    48ca:	9c 8b       	std	Y+20, r25	; 0x14
    48cc:	8b 8b       	std	Y+19, r24	; 0x13
    48ce:	0f c0       	rjmp	.+30     	; 0x48ee <toggleLED+0xde>
    48d0:	88 ec       	ldi	r24, 0xC8	; 200
    48d2:	90 e0       	ldi	r25, 0x00	; 0
    48d4:	9a 8b       	std	Y+18, r25	; 0x12
    48d6:	89 8b       	std	Y+17, r24	; 0x11
    48d8:	89 89       	ldd	r24, Y+17	; 0x11
    48da:	9a 89       	ldd	r25, Y+18	; 0x12
    48dc:	01 97       	sbiw	r24, 0x01	; 1
    48de:	f1 f7       	brne	.-4      	; 0x48dc <toggleLED+0xcc>
    48e0:	9a 8b       	std	Y+18, r25	; 0x12
    48e2:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    48e4:	8b 89       	ldd	r24, Y+19	; 0x13
    48e6:	9c 89       	ldd	r25, Y+20	; 0x14
    48e8:	01 97       	sbiw	r24, 0x01	; 1
    48ea:	9c 8b       	std	Y+20, r25	; 0x14
    48ec:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    48ee:	8b 89       	ldd	r24, Y+19	; 0x13
    48f0:	9c 89       	ldd	r25, Y+20	; 0x14
    48f2:	00 97       	sbiw	r24, 0x00	; 0
    48f4:	69 f7       	brne	.-38     	; 0x48d0 <toggleLED+0xc0>
    48f6:	8f c0       	rjmp	.+286    	; 0x4a16 <toggleLED+0x206>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    48f8:	6d 89       	ldd	r22, Y+21	; 0x15
    48fa:	7e 89       	ldd	r23, Y+22	; 0x16
    48fc:	8f 89       	ldd	r24, Y+23	; 0x17
    48fe:	98 8d       	ldd	r25, Y+24	; 0x18
    4900:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4904:	dc 01       	movw	r26, r24
    4906:	cb 01       	movw	r24, r22
    4908:	9c 8b       	std	Y+20, r25	; 0x14
    490a:	8b 8b       	std	Y+19, r24	; 0x13
    490c:	8b 89       	ldd	r24, Y+19	; 0x13
    490e:	9c 89       	ldd	r25, Y+20	; 0x14
    4910:	98 8b       	std	Y+16, r25	; 0x10
    4912:	8f 87       	std	Y+15, r24	; 0x0f
    4914:	8f 85       	ldd	r24, Y+15	; 0x0f
    4916:	98 89       	ldd	r25, Y+16	; 0x10
    4918:	01 97       	sbiw	r24, 0x01	; 1
    491a:	f1 f7       	brne	.-4      	; 0x4918 <toggleLED+0x108>
    491c:	98 8b       	std	Y+16, r25	; 0x10
    491e:	8f 87       	std	Y+15, r24	; 0x0f
    4920:	7a c0       	rjmp	.+244    	; 0x4a16 <toggleLED+0x206>
		_delay_ms(100);
	}else
	{
		local_u8Flag=1;
    4922:	81 e0       	ldi	r24, 0x01	; 1
    4924:	80 93 9b 00 	sts	0x009B, r24
		MDIO_voidSetPinValue(PORTA,PIN0,PIN_LOW);
    4928:	80 e0       	ldi	r24, 0x00	; 0
    492a:	60 e0       	ldi	r22, 0x00	; 0
    492c:	40 e0       	ldi	r20, 0x00	; 0
    492e:	0e 94 32 08 	call	0x1064	; 0x1064 <MDIO_voidSetPinValue>
    4932:	80 e0       	ldi	r24, 0x00	; 0
    4934:	90 e0       	ldi	r25, 0x00	; 0
    4936:	a8 ec       	ldi	r26, 0xC8	; 200
    4938:	b2 e4       	ldi	r27, 0x42	; 66
    493a:	8b 87       	std	Y+11, r24	; 0x0b
    493c:	9c 87       	std	Y+12, r25	; 0x0c
    493e:	ad 87       	std	Y+13, r26	; 0x0d
    4940:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4942:	6b 85       	ldd	r22, Y+11	; 0x0b
    4944:	7c 85       	ldd	r23, Y+12	; 0x0c
    4946:	8d 85       	ldd	r24, Y+13	; 0x0d
    4948:	9e 85       	ldd	r25, Y+14	; 0x0e
    494a:	20 e0       	ldi	r18, 0x00	; 0
    494c:	30 e0       	ldi	r19, 0x00	; 0
    494e:	4a ef       	ldi	r20, 0xFA	; 250
    4950:	54 e4       	ldi	r21, 0x44	; 68
    4952:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4956:	dc 01       	movw	r26, r24
    4958:	cb 01       	movw	r24, r22
    495a:	8f 83       	std	Y+7, r24	; 0x07
    495c:	98 87       	std	Y+8, r25	; 0x08
    495e:	a9 87       	std	Y+9, r26	; 0x09
    4960:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4962:	6f 81       	ldd	r22, Y+7	; 0x07
    4964:	78 85       	ldd	r23, Y+8	; 0x08
    4966:	89 85       	ldd	r24, Y+9	; 0x09
    4968:	9a 85       	ldd	r25, Y+10	; 0x0a
    496a:	20 e0       	ldi	r18, 0x00	; 0
    496c:	30 e0       	ldi	r19, 0x00	; 0
    496e:	40 e8       	ldi	r20, 0x80	; 128
    4970:	5f e3       	ldi	r21, 0x3F	; 63
    4972:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4976:	88 23       	and	r24, r24
    4978:	2c f4       	brge	.+10     	; 0x4984 <toggleLED+0x174>
		__ticks = 1;
    497a:	81 e0       	ldi	r24, 0x01	; 1
    497c:	90 e0       	ldi	r25, 0x00	; 0
    497e:	9e 83       	std	Y+6, r25	; 0x06
    4980:	8d 83       	std	Y+5, r24	; 0x05
    4982:	3f c0       	rjmp	.+126    	; 0x4a02 <toggleLED+0x1f2>
	else if (__tmp > 65535)
    4984:	6f 81       	ldd	r22, Y+7	; 0x07
    4986:	78 85       	ldd	r23, Y+8	; 0x08
    4988:	89 85       	ldd	r24, Y+9	; 0x09
    498a:	9a 85       	ldd	r25, Y+10	; 0x0a
    498c:	20 e0       	ldi	r18, 0x00	; 0
    498e:	3f ef       	ldi	r19, 0xFF	; 255
    4990:	4f e7       	ldi	r20, 0x7F	; 127
    4992:	57 e4       	ldi	r21, 0x47	; 71
    4994:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4998:	18 16       	cp	r1, r24
    499a:	4c f5       	brge	.+82     	; 0x49ee <toggleLED+0x1de>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    499c:	6b 85       	ldd	r22, Y+11	; 0x0b
    499e:	7c 85       	ldd	r23, Y+12	; 0x0c
    49a0:	8d 85       	ldd	r24, Y+13	; 0x0d
    49a2:	9e 85       	ldd	r25, Y+14	; 0x0e
    49a4:	20 e0       	ldi	r18, 0x00	; 0
    49a6:	30 e0       	ldi	r19, 0x00	; 0
    49a8:	40 e2       	ldi	r20, 0x20	; 32
    49aa:	51 e4       	ldi	r21, 0x41	; 65
    49ac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    49b0:	dc 01       	movw	r26, r24
    49b2:	cb 01       	movw	r24, r22
    49b4:	bc 01       	movw	r22, r24
    49b6:	cd 01       	movw	r24, r26
    49b8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    49bc:	dc 01       	movw	r26, r24
    49be:	cb 01       	movw	r24, r22
    49c0:	9e 83       	std	Y+6, r25	; 0x06
    49c2:	8d 83       	std	Y+5, r24	; 0x05
    49c4:	0f c0       	rjmp	.+30     	; 0x49e4 <toggleLED+0x1d4>
    49c6:	88 ec       	ldi	r24, 0xC8	; 200
    49c8:	90 e0       	ldi	r25, 0x00	; 0
    49ca:	9c 83       	std	Y+4, r25	; 0x04
    49cc:	8b 83       	std	Y+3, r24	; 0x03
    49ce:	8b 81       	ldd	r24, Y+3	; 0x03
    49d0:	9c 81       	ldd	r25, Y+4	; 0x04
    49d2:	01 97       	sbiw	r24, 0x01	; 1
    49d4:	f1 f7       	brne	.-4      	; 0x49d2 <toggleLED+0x1c2>
    49d6:	9c 83       	std	Y+4, r25	; 0x04
    49d8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    49da:	8d 81       	ldd	r24, Y+5	; 0x05
    49dc:	9e 81       	ldd	r25, Y+6	; 0x06
    49de:	01 97       	sbiw	r24, 0x01	; 1
    49e0:	9e 83       	std	Y+6, r25	; 0x06
    49e2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    49e4:	8d 81       	ldd	r24, Y+5	; 0x05
    49e6:	9e 81       	ldd	r25, Y+6	; 0x06
    49e8:	00 97       	sbiw	r24, 0x00	; 0
    49ea:	69 f7       	brne	.-38     	; 0x49c6 <toggleLED+0x1b6>
    49ec:	14 c0       	rjmp	.+40     	; 0x4a16 <toggleLED+0x206>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    49ee:	6f 81       	ldd	r22, Y+7	; 0x07
    49f0:	78 85       	ldd	r23, Y+8	; 0x08
    49f2:	89 85       	ldd	r24, Y+9	; 0x09
    49f4:	9a 85       	ldd	r25, Y+10	; 0x0a
    49f6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    49fa:	dc 01       	movw	r26, r24
    49fc:	cb 01       	movw	r24, r22
    49fe:	9e 83       	std	Y+6, r25	; 0x06
    4a00:	8d 83       	std	Y+5, r24	; 0x05
    4a02:	8d 81       	ldd	r24, Y+5	; 0x05
    4a04:	9e 81       	ldd	r25, Y+6	; 0x06
    4a06:	9a 83       	std	Y+2, r25	; 0x02
    4a08:	89 83       	std	Y+1, r24	; 0x01
    4a0a:	89 81       	ldd	r24, Y+1	; 0x01
    4a0c:	9a 81       	ldd	r25, Y+2	; 0x02
    4a0e:	01 97       	sbiw	r24, 0x01	; 1
    4a10:	f1 f7       	brne	.-4      	; 0x4a0e <toggleLED+0x1fe>
    4a12:	9a 83       	std	Y+2, r25	; 0x02
    4a14:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(100);
	}
}
    4a16:	6c 96       	adiw	r28, 0x1c	; 28
    4a18:	0f b6       	in	r0, 0x3f	; 63
    4a1a:	f8 94       	cli
    4a1c:	de bf       	out	0x3e, r29	; 62
    4a1e:	0f be       	out	0x3f, r0	; 63
    4a20:	cd bf       	out	0x3d, r28	; 61
    4a22:	cf 91       	pop	r28
    4a24:	df 91       	pop	r29
    4a26:	08 95       	ret

00004a28 <__udivmodhi4>:
    4a28:	aa 1b       	sub	r26, r26
    4a2a:	bb 1b       	sub	r27, r27
    4a2c:	51 e1       	ldi	r21, 0x11	; 17
    4a2e:	07 c0       	rjmp	.+14     	; 0x4a3e <__udivmodhi4_ep>

00004a30 <__udivmodhi4_loop>:
    4a30:	aa 1f       	adc	r26, r26
    4a32:	bb 1f       	adc	r27, r27
    4a34:	a6 17       	cp	r26, r22
    4a36:	b7 07       	cpc	r27, r23
    4a38:	10 f0       	brcs	.+4      	; 0x4a3e <__udivmodhi4_ep>
    4a3a:	a6 1b       	sub	r26, r22
    4a3c:	b7 0b       	sbc	r27, r23

00004a3e <__udivmodhi4_ep>:
    4a3e:	88 1f       	adc	r24, r24
    4a40:	99 1f       	adc	r25, r25
    4a42:	5a 95       	dec	r21
    4a44:	a9 f7       	brne	.-22     	; 0x4a30 <__udivmodhi4_loop>
    4a46:	80 95       	com	r24
    4a48:	90 95       	com	r25
    4a4a:	bc 01       	movw	r22, r24
    4a4c:	cd 01       	movw	r24, r26
    4a4e:	08 95       	ret

00004a50 <__prologue_saves__>:
    4a50:	2f 92       	push	r2
    4a52:	3f 92       	push	r3
    4a54:	4f 92       	push	r4
    4a56:	5f 92       	push	r5
    4a58:	6f 92       	push	r6
    4a5a:	7f 92       	push	r7
    4a5c:	8f 92       	push	r8
    4a5e:	9f 92       	push	r9
    4a60:	af 92       	push	r10
    4a62:	bf 92       	push	r11
    4a64:	cf 92       	push	r12
    4a66:	df 92       	push	r13
    4a68:	ef 92       	push	r14
    4a6a:	ff 92       	push	r15
    4a6c:	0f 93       	push	r16
    4a6e:	1f 93       	push	r17
    4a70:	cf 93       	push	r28
    4a72:	df 93       	push	r29
    4a74:	cd b7       	in	r28, 0x3d	; 61
    4a76:	de b7       	in	r29, 0x3e	; 62
    4a78:	ca 1b       	sub	r28, r26
    4a7a:	db 0b       	sbc	r29, r27
    4a7c:	0f b6       	in	r0, 0x3f	; 63
    4a7e:	f8 94       	cli
    4a80:	de bf       	out	0x3e, r29	; 62
    4a82:	0f be       	out	0x3f, r0	; 63
    4a84:	cd bf       	out	0x3d, r28	; 61
    4a86:	09 94       	ijmp

00004a88 <__epilogue_restores__>:
    4a88:	2a 88       	ldd	r2, Y+18	; 0x12
    4a8a:	39 88       	ldd	r3, Y+17	; 0x11
    4a8c:	48 88       	ldd	r4, Y+16	; 0x10
    4a8e:	5f 84       	ldd	r5, Y+15	; 0x0f
    4a90:	6e 84       	ldd	r6, Y+14	; 0x0e
    4a92:	7d 84       	ldd	r7, Y+13	; 0x0d
    4a94:	8c 84       	ldd	r8, Y+12	; 0x0c
    4a96:	9b 84       	ldd	r9, Y+11	; 0x0b
    4a98:	aa 84       	ldd	r10, Y+10	; 0x0a
    4a9a:	b9 84       	ldd	r11, Y+9	; 0x09
    4a9c:	c8 84       	ldd	r12, Y+8	; 0x08
    4a9e:	df 80       	ldd	r13, Y+7	; 0x07
    4aa0:	ee 80       	ldd	r14, Y+6	; 0x06
    4aa2:	fd 80       	ldd	r15, Y+5	; 0x05
    4aa4:	0c 81       	ldd	r16, Y+4	; 0x04
    4aa6:	1b 81       	ldd	r17, Y+3	; 0x03
    4aa8:	aa 81       	ldd	r26, Y+2	; 0x02
    4aaa:	b9 81       	ldd	r27, Y+1	; 0x01
    4aac:	ce 0f       	add	r28, r30
    4aae:	d1 1d       	adc	r29, r1
    4ab0:	0f b6       	in	r0, 0x3f	; 63
    4ab2:	f8 94       	cli
    4ab4:	de bf       	out	0x3e, r29	; 62
    4ab6:	0f be       	out	0x3f, r0	; 63
    4ab8:	cd bf       	out	0x3d, r28	; 61
    4aba:	ed 01       	movw	r28, r26
    4abc:	08 95       	ret

00004abe <_exit>:
    4abe:	f8 94       	cli

00004ac0 <__stop_program>:
    4ac0:	ff cf       	rjmp	.-2      	; 0x4ac0 <__stop_program>
