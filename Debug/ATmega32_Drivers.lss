
ATmega32_Drivers.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000400c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000034  00800060  0000400c  000040a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  00800094  00800094  000040d4  2**0
                  ALLOC
  3 .stab         00003648  00000000  00000000  000040d4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000f68  00000000  00000000  0000771c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000160  00000000  00000000  00008684  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000018f  00000000  00000000  000087e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002045  00000000  00000000  00008973  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001101  00000000  00000000  0000a9b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000f82  00000000  00000000  0000bab9  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000180  00000000  00000000  0000ca3c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002c2  00000000  00000000  0000cbbc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000088e  00000000  00000000  0000ce7e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000d70c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec e0       	ldi	r30, 0x0C	; 12
      68:	f0 e4       	ldi	r31, 0x40	; 64
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a4 39       	cpi	r26, 0x94	; 148
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a4 e9       	ldi	r26, 0x94	; 148
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a5 39       	cpi	r26, 0x95	; 149
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 8f 1f 	call	0x3f1e	; 0x3f1e <main>
      8a:	0c 94 04 20 	jmp	0x4008	; 0x4008 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 cd 1f 	jmp	0x3f9a	; 0x3f9a <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 e9 1f 	jmp	0x3fd2	; 0x3fd2 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 d9 1f 	jmp	0x3fb2	; 0x3fb2 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 f5 1f 	jmp	0x3fea	; 0x3fea <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 d9 1f 	jmp	0x3fb2	; 0x3fb2 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 f5 1f 	jmp	0x3fea	; 0x3fea <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 cd 1f 	jmp	0x3f9a	; 0x3f9a <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 e9 1f 	jmp	0x3fd2	; 0x3fd2 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 d5 1f 	jmp	0x3faa	; 0x3faa <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	60 e6       	ldi	r22, 0x60	; 96
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 f1 1f 	jmp	0x3fe2	; 0x3fe2 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 d9 1f 	jmp	0x3fb2	; 0x3fb2 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 f5 1f 	jmp	0x3fea	; 0x3fea <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 d9 1f 	jmp	0x3fb2	; 0x3fb2 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 f5 1f 	jmp	0x3fea	; 0x3fea <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 d9 1f 	jmp	0x3fb2	; 0x3fb2 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 f5 1f 	jmp	0x3fea	; 0x3fea <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 dd 1f 	jmp	0x3fba	; 0x3fba <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 f9 1f 	jmp	0x3ff2	; 0x3ff2 <__epilogue_restores__+0x20>

00000952 <__pack_f>:
     952:	df 92       	push	r13
     954:	ef 92       	push	r14
     956:	ff 92       	push	r15
     958:	0f 93       	push	r16
     95a:	1f 93       	push	r17
     95c:	fc 01       	movw	r30, r24
     95e:	e4 80       	ldd	r14, Z+4	; 0x04
     960:	f5 80       	ldd	r15, Z+5	; 0x05
     962:	06 81       	ldd	r16, Z+6	; 0x06
     964:	17 81       	ldd	r17, Z+7	; 0x07
     966:	d1 80       	ldd	r13, Z+1	; 0x01
     968:	80 81       	ld	r24, Z
     96a:	82 30       	cpi	r24, 0x02	; 2
     96c:	48 f4       	brcc	.+18     	; 0x980 <__pack_f+0x2e>
     96e:	80 e0       	ldi	r24, 0x00	; 0
     970:	90 e0       	ldi	r25, 0x00	; 0
     972:	a0 e1       	ldi	r26, 0x10	; 16
     974:	b0 e0       	ldi	r27, 0x00	; 0
     976:	e8 2a       	or	r14, r24
     978:	f9 2a       	or	r15, r25
     97a:	0a 2b       	or	r16, r26
     97c:	1b 2b       	or	r17, r27
     97e:	a5 c0       	rjmp	.+330    	; 0xaca <__pack_f+0x178>
     980:	84 30       	cpi	r24, 0x04	; 4
     982:	09 f4       	brne	.+2      	; 0x986 <__pack_f+0x34>
     984:	9f c0       	rjmp	.+318    	; 0xac4 <__pack_f+0x172>
     986:	82 30       	cpi	r24, 0x02	; 2
     988:	21 f4       	brne	.+8      	; 0x992 <__pack_f+0x40>
     98a:	ee 24       	eor	r14, r14
     98c:	ff 24       	eor	r15, r15
     98e:	87 01       	movw	r16, r14
     990:	05 c0       	rjmp	.+10     	; 0x99c <__pack_f+0x4a>
     992:	e1 14       	cp	r14, r1
     994:	f1 04       	cpc	r15, r1
     996:	01 05       	cpc	r16, r1
     998:	11 05       	cpc	r17, r1
     99a:	19 f4       	brne	.+6      	; 0x9a2 <__pack_f+0x50>
     99c:	e0 e0       	ldi	r30, 0x00	; 0
     99e:	f0 e0       	ldi	r31, 0x00	; 0
     9a0:	96 c0       	rjmp	.+300    	; 0xace <__pack_f+0x17c>
     9a2:	62 81       	ldd	r22, Z+2	; 0x02
     9a4:	73 81       	ldd	r23, Z+3	; 0x03
     9a6:	9f ef       	ldi	r25, 0xFF	; 255
     9a8:	62 38       	cpi	r22, 0x82	; 130
     9aa:	79 07       	cpc	r23, r25
     9ac:	0c f0       	brlt	.+2      	; 0x9b0 <__pack_f+0x5e>
     9ae:	5b c0       	rjmp	.+182    	; 0xa66 <__pack_f+0x114>
     9b0:	22 e8       	ldi	r18, 0x82	; 130
     9b2:	3f ef       	ldi	r19, 0xFF	; 255
     9b4:	26 1b       	sub	r18, r22
     9b6:	37 0b       	sbc	r19, r23
     9b8:	2a 31       	cpi	r18, 0x1A	; 26
     9ba:	31 05       	cpc	r19, r1
     9bc:	2c f0       	brlt	.+10     	; 0x9c8 <__pack_f+0x76>
     9be:	20 e0       	ldi	r18, 0x00	; 0
     9c0:	30 e0       	ldi	r19, 0x00	; 0
     9c2:	40 e0       	ldi	r20, 0x00	; 0
     9c4:	50 e0       	ldi	r21, 0x00	; 0
     9c6:	2a c0       	rjmp	.+84     	; 0xa1c <__pack_f+0xca>
     9c8:	b8 01       	movw	r22, r16
     9ca:	a7 01       	movw	r20, r14
     9cc:	02 2e       	mov	r0, r18
     9ce:	04 c0       	rjmp	.+8      	; 0x9d8 <__pack_f+0x86>
     9d0:	76 95       	lsr	r23
     9d2:	67 95       	ror	r22
     9d4:	57 95       	ror	r21
     9d6:	47 95       	ror	r20
     9d8:	0a 94       	dec	r0
     9da:	d2 f7       	brpl	.-12     	; 0x9d0 <__pack_f+0x7e>
     9dc:	81 e0       	ldi	r24, 0x01	; 1
     9de:	90 e0       	ldi	r25, 0x00	; 0
     9e0:	a0 e0       	ldi	r26, 0x00	; 0
     9e2:	b0 e0       	ldi	r27, 0x00	; 0
     9e4:	04 c0       	rjmp	.+8      	; 0x9ee <__pack_f+0x9c>
     9e6:	88 0f       	add	r24, r24
     9e8:	99 1f       	adc	r25, r25
     9ea:	aa 1f       	adc	r26, r26
     9ec:	bb 1f       	adc	r27, r27
     9ee:	2a 95       	dec	r18
     9f0:	d2 f7       	brpl	.-12     	; 0x9e6 <__pack_f+0x94>
     9f2:	01 97       	sbiw	r24, 0x01	; 1
     9f4:	a1 09       	sbc	r26, r1
     9f6:	b1 09       	sbc	r27, r1
     9f8:	8e 21       	and	r24, r14
     9fa:	9f 21       	and	r25, r15
     9fc:	a0 23       	and	r26, r16
     9fe:	b1 23       	and	r27, r17
     a00:	00 97       	sbiw	r24, 0x00	; 0
     a02:	a1 05       	cpc	r26, r1
     a04:	b1 05       	cpc	r27, r1
     a06:	21 f0       	breq	.+8      	; 0xa10 <__pack_f+0xbe>
     a08:	81 e0       	ldi	r24, 0x01	; 1
     a0a:	90 e0       	ldi	r25, 0x00	; 0
     a0c:	a0 e0       	ldi	r26, 0x00	; 0
     a0e:	b0 e0       	ldi	r27, 0x00	; 0
     a10:	9a 01       	movw	r18, r20
     a12:	ab 01       	movw	r20, r22
     a14:	28 2b       	or	r18, r24
     a16:	39 2b       	or	r19, r25
     a18:	4a 2b       	or	r20, r26
     a1a:	5b 2b       	or	r21, r27
     a1c:	da 01       	movw	r26, r20
     a1e:	c9 01       	movw	r24, r18
     a20:	8f 77       	andi	r24, 0x7F	; 127
     a22:	90 70       	andi	r25, 0x00	; 0
     a24:	a0 70       	andi	r26, 0x00	; 0
     a26:	b0 70       	andi	r27, 0x00	; 0
     a28:	80 34       	cpi	r24, 0x40	; 64
     a2a:	91 05       	cpc	r25, r1
     a2c:	a1 05       	cpc	r26, r1
     a2e:	b1 05       	cpc	r27, r1
     a30:	39 f4       	brne	.+14     	; 0xa40 <__pack_f+0xee>
     a32:	27 ff       	sbrs	r18, 7
     a34:	09 c0       	rjmp	.+18     	; 0xa48 <__pack_f+0xf6>
     a36:	20 5c       	subi	r18, 0xC0	; 192
     a38:	3f 4f       	sbci	r19, 0xFF	; 255
     a3a:	4f 4f       	sbci	r20, 0xFF	; 255
     a3c:	5f 4f       	sbci	r21, 0xFF	; 255
     a3e:	04 c0       	rjmp	.+8      	; 0xa48 <__pack_f+0xf6>
     a40:	21 5c       	subi	r18, 0xC1	; 193
     a42:	3f 4f       	sbci	r19, 0xFF	; 255
     a44:	4f 4f       	sbci	r20, 0xFF	; 255
     a46:	5f 4f       	sbci	r21, 0xFF	; 255
     a48:	e0 e0       	ldi	r30, 0x00	; 0
     a4a:	f0 e0       	ldi	r31, 0x00	; 0
     a4c:	20 30       	cpi	r18, 0x00	; 0
     a4e:	a0 e0       	ldi	r26, 0x00	; 0
     a50:	3a 07       	cpc	r19, r26
     a52:	a0 e0       	ldi	r26, 0x00	; 0
     a54:	4a 07       	cpc	r20, r26
     a56:	a0 e4       	ldi	r26, 0x40	; 64
     a58:	5a 07       	cpc	r21, r26
     a5a:	10 f0       	brcs	.+4      	; 0xa60 <__pack_f+0x10e>
     a5c:	e1 e0       	ldi	r30, 0x01	; 1
     a5e:	f0 e0       	ldi	r31, 0x00	; 0
     a60:	79 01       	movw	r14, r18
     a62:	8a 01       	movw	r16, r20
     a64:	27 c0       	rjmp	.+78     	; 0xab4 <__pack_f+0x162>
     a66:	60 38       	cpi	r22, 0x80	; 128
     a68:	71 05       	cpc	r23, r1
     a6a:	64 f5       	brge	.+88     	; 0xac4 <__pack_f+0x172>
     a6c:	fb 01       	movw	r30, r22
     a6e:	e1 58       	subi	r30, 0x81	; 129
     a70:	ff 4f       	sbci	r31, 0xFF	; 255
     a72:	d8 01       	movw	r26, r16
     a74:	c7 01       	movw	r24, r14
     a76:	8f 77       	andi	r24, 0x7F	; 127
     a78:	90 70       	andi	r25, 0x00	; 0
     a7a:	a0 70       	andi	r26, 0x00	; 0
     a7c:	b0 70       	andi	r27, 0x00	; 0
     a7e:	80 34       	cpi	r24, 0x40	; 64
     a80:	91 05       	cpc	r25, r1
     a82:	a1 05       	cpc	r26, r1
     a84:	b1 05       	cpc	r27, r1
     a86:	39 f4       	brne	.+14     	; 0xa96 <__pack_f+0x144>
     a88:	e7 fe       	sbrs	r14, 7
     a8a:	0d c0       	rjmp	.+26     	; 0xaa6 <__pack_f+0x154>
     a8c:	80 e4       	ldi	r24, 0x40	; 64
     a8e:	90 e0       	ldi	r25, 0x00	; 0
     a90:	a0 e0       	ldi	r26, 0x00	; 0
     a92:	b0 e0       	ldi	r27, 0x00	; 0
     a94:	04 c0       	rjmp	.+8      	; 0xa9e <__pack_f+0x14c>
     a96:	8f e3       	ldi	r24, 0x3F	; 63
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	e8 0e       	add	r14, r24
     aa0:	f9 1e       	adc	r15, r25
     aa2:	0a 1f       	adc	r16, r26
     aa4:	1b 1f       	adc	r17, r27
     aa6:	17 ff       	sbrs	r17, 7
     aa8:	05 c0       	rjmp	.+10     	; 0xab4 <__pack_f+0x162>
     aaa:	16 95       	lsr	r17
     aac:	07 95       	ror	r16
     aae:	f7 94       	ror	r15
     ab0:	e7 94       	ror	r14
     ab2:	31 96       	adiw	r30, 0x01	; 1
     ab4:	87 e0       	ldi	r24, 0x07	; 7
     ab6:	16 95       	lsr	r17
     ab8:	07 95       	ror	r16
     aba:	f7 94       	ror	r15
     abc:	e7 94       	ror	r14
     abe:	8a 95       	dec	r24
     ac0:	d1 f7       	brne	.-12     	; 0xab6 <__pack_f+0x164>
     ac2:	05 c0       	rjmp	.+10     	; 0xace <__pack_f+0x17c>
     ac4:	ee 24       	eor	r14, r14
     ac6:	ff 24       	eor	r15, r15
     ac8:	87 01       	movw	r16, r14
     aca:	ef ef       	ldi	r30, 0xFF	; 255
     acc:	f0 e0       	ldi	r31, 0x00	; 0
     ace:	6e 2f       	mov	r22, r30
     ad0:	67 95       	ror	r22
     ad2:	66 27       	eor	r22, r22
     ad4:	67 95       	ror	r22
     ad6:	90 2f       	mov	r25, r16
     ad8:	9f 77       	andi	r25, 0x7F	; 127
     ada:	d7 94       	ror	r13
     adc:	dd 24       	eor	r13, r13
     ade:	d7 94       	ror	r13
     ae0:	8e 2f       	mov	r24, r30
     ae2:	86 95       	lsr	r24
     ae4:	49 2f       	mov	r20, r25
     ae6:	46 2b       	or	r20, r22
     ae8:	58 2f       	mov	r21, r24
     aea:	5d 29       	or	r21, r13
     aec:	b7 01       	movw	r22, r14
     aee:	ca 01       	movw	r24, r20
     af0:	1f 91       	pop	r17
     af2:	0f 91       	pop	r16
     af4:	ff 90       	pop	r15
     af6:	ef 90       	pop	r14
     af8:	df 90       	pop	r13
     afa:	08 95       	ret

00000afc <__unpack_f>:
     afc:	fc 01       	movw	r30, r24
     afe:	db 01       	movw	r26, r22
     b00:	40 81       	ld	r20, Z
     b02:	51 81       	ldd	r21, Z+1	; 0x01
     b04:	22 81       	ldd	r18, Z+2	; 0x02
     b06:	62 2f       	mov	r22, r18
     b08:	6f 77       	andi	r22, 0x7F	; 127
     b0a:	70 e0       	ldi	r23, 0x00	; 0
     b0c:	22 1f       	adc	r18, r18
     b0e:	22 27       	eor	r18, r18
     b10:	22 1f       	adc	r18, r18
     b12:	93 81       	ldd	r25, Z+3	; 0x03
     b14:	89 2f       	mov	r24, r25
     b16:	88 0f       	add	r24, r24
     b18:	82 2b       	or	r24, r18
     b1a:	28 2f       	mov	r18, r24
     b1c:	30 e0       	ldi	r19, 0x00	; 0
     b1e:	99 1f       	adc	r25, r25
     b20:	99 27       	eor	r25, r25
     b22:	99 1f       	adc	r25, r25
     b24:	11 96       	adiw	r26, 0x01	; 1
     b26:	9c 93       	st	X, r25
     b28:	11 97       	sbiw	r26, 0x01	; 1
     b2a:	21 15       	cp	r18, r1
     b2c:	31 05       	cpc	r19, r1
     b2e:	a9 f5       	brne	.+106    	; 0xb9a <__unpack_f+0x9e>
     b30:	41 15       	cp	r20, r1
     b32:	51 05       	cpc	r21, r1
     b34:	61 05       	cpc	r22, r1
     b36:	71 05       	cpc	r23, r1
     b38:	11 f4       	brne	.+4      	; 0xb3e <__unpack_f+0x42>
     b3a:	82 e0       	ldi	r24, 0x02	; 2
     b3c:	37 c0       	rjmp	.+110    	; 0xbac <__unpack_f+0xb0>
     b3e:	82 e8       	ldi	r24, 0x82	; 130
     b40:	9f ef       	ldi	r25, 0xFF	; 255
     b42:	13 96       	adiw	r26, 0x03	; 3
     b44:	9c 93       	st	X, r25
     b46:	8e 93       	st	-X, r24
     b48:	12 97       	sbiw	r26, 0x02	; 2
     b4a:	9a 01       	movw	r18, r20
     b4c:	ab 01       	movw	r20, r22
     b4e:	67 e0       	ldi	r22, 0x07	; 7
     b50:	22 0f       	add	r18, r18
     b52:	33 1f       	adc	r19, r19
     b54:	44 1f       	adc	r20, r20
     b56:	55 1f       	adc	r21, r21
     b58:	6a 95       	dec	r22
     b5a:	d1 f7       	brne	.-12     	; 0xb50 <__unpack_f+0x54>
     b5c:	83 e0       	ldi	r24, 0x03	; 3
     b5e:	8c 93       	st	X, r24
     b60:	0d c0       	rjmp	.+26     	; 0xb7c <__unpack_f+0x80>
     b62:	22 0f       	add	r18, r18
     b64:	33 1f       	adc	r19, r19
     b66:	44 1f       	adc	r20, r20
     b68:	55 1f       	adc	r21, r21
     b6a:	12 96       	adiw	r26, 0x02	; 2
     b6c:	8d 91       	ld	r24, X+
     b6e:	9c 91       	ld	r25, X
     b70:	13 97       	sbiw	r26, 0x03	; 3
     b72:	01 97       	sbiw	r24, 0x01	; 1
     b74:	13 96       	adiw	r26, 0x03	; 3
     b76:	9c 93       	st	X, r25
     b78:	8e 93       	st	-X, r24
     b7a:	12 97       	sbiw	r26, 0x02	; 2
     b7c:	20 30       	cpi	r18, 0x00	; 0
     b7e:	80 e0       	ldi	r24, 0x00	; 0
     b80:	38 07       	cpc	r19, r24
     b82:	80 e0       	ldi	r24, 0x00	; 0
     b84:	48 07       	cpc	r20, r24
     b86:	80 e4       	ldi	r24, 0x40	; 64
     b88:	58 07       	cpc	r21, r24
     b8a:	58 f3       	brcs	.-42     	; 0xb62 <__unpack_f+0x66>
     b8c:	14 96       	adiw	r26, 0x04	; 4
     b8e:	2d 93       	st	X+, r18
     b90:	3d 93       	st	X+, r19
     b92:	4d 93       	st	X+, r20
     b94:	5c 93       	st	X, r21
     b96:	17 97       	sbiw	r26, 0x07	; 7
     b98:	08 95       	ret
     b9a:	2f 3f       	cpi	r18, 0xFF	; 255
     b9c:	31 05       	cpc	r19, r1
     b9e:	79 f4       	brne	.+30     	; 0xbbe <__unpack_f+0xc2>
     ba0:	41 15       	cp	r20, r1
     ba2:	51 05       	cpc	r21, r1
     ba4:	61 05       	cpc	r22, r1
     ba6:	71 05       	cpc	r23, r1
     ba8:	19 f4       	brne	.+6      	; 0xbb0 <__unpack_f+0xb4>
     baa:	84 e0       	ldi	r24, 0x04	; 4
     bac:	8c 93       	st	X, r24
     bae:	08 95       	ret
     bb0:	64 ff       	sbrs	r22, 4
     bb2:	03 c0       	rjmp	.+6      	; 0xbba <__unpack_f+0xbe>
     bb4:	81 e0       	ldi	r24, 0x01	; 1
     bb6:	8c 93       	st	X, r24
     bb8:	12 c0       	rjmp	.+36     	; 0xbde <__unpack_f+0xe2>
     bba:	1c 92       	st	X, r1
     bbc:	10 c0       	rjmp	.+32     	; 0xbde <__unpack_f+0xe2>
     bbe:	2f 57       	subi	r18, 0x7F	; 127
     bc0:	30 40       	sbci	r19, 0x00	; 0
     bc2:	13 96       	adiw	r26, 0x03	; 3
     bc4:	3c 93       	st	X, r19
     bc6:	2e 93       	st	-X, r18
     bc8:	12 97       	sbiw	r26, 0x02	; 2
     bca:	83 e0       	ldi	r24, 0x03	; 3
     bcc:	8c 93       	st	X, r24
     bce:	87 e0       	ldi	r24, 0x07	; 7
     bd0:	44 0f       	add	r20, r20
     bd2:	55 1f       	adc	r21, r21
     bd4:	66 1f       	adc	r22, r22
     bd6:	77 1f       	adc	r23, r23
     bd8:	8a 95       	dec	r24
     bda:	d1 f7       	brne	.-12     	; 0xbd0 <__unpack_f+0xd4>
     bdc:	70 64       	ori	r23, 0x40	; 64
     bde:	14 96       	adiw	r26, 0x04	; 4
     be0:	4d 93       	st	X+, r20
     be2:	5d 93       	st	X+, r21
     be4:	6d 93       	st	X+, r22
     be6:	7c 93       	st	X, r23
     be8:	17 97       	sbiw	r26, 0x07	; 7
     bea:	08 95       	ret

00000bec <__fpcmp_parts_f>:
     bec:	1f 93       	push	r17
     bee:	dc 01       	movw	r26, r24
     bf0:	fb 01       	movw	r30, r22
     bf2:	9c 91       	ld	r25, X
     bf4:	92 30       	cpi	r25, 0x02	; 2
     bf6:	08 f4       	brcc	.+2      	; 0xbfa <__fpcmp_parts_f+0xe>
     bf8:	47 c0       	rjmp	.+142    	; 0xc88 <__fpcmp_parts_f+0x9c>
     bfa:	80 81       	ld	r24, Z
     bfc:	82 30       	cpi	r24, 0x02	; 2
     bfe:	08 f4       	brcc	.+2      	; 0xc02 <__fpcmp_parts_f+0x16>
     c00:	43 c0       	rjmp	.+134    	; 0xc88 <__fpcmp_parts_f+0x9c>
     c02:	94 30       	cpi	r25, 0x04	; 4
     c04:	51 f4       	brne	.+20     	; 0xc1a <__fpcmp_parts_f+0x2e>
     c06:	11 96       	adiw	r26, 0x01	; 1
     c08:	1c 91       	ld	r17, X
     c0a:	84 30       	cpi	r24, 0x04	; 4
     c0c:	99 f5       	brne	.+102    	; 0xc74 <__fpcmp_parts_f+0x88>
     c0e:	81 81       	ldd	r24, Z+1	; 0x01
     c10:	68 2f       	mov	r22, r24
     c12:	70 e0       	ldi	r23, 0x00	; 0
     c14:	61 1b       	sub	r22, r17
     c16:	71 09       	sbc	r23, r1
     c18:	3f c0       	rjmp	.+126    	; 0xc98 <__fpcmp_parts_f+0xac>
     c1a:	84 30       	cpi	r24, 0x04	; 4
     c1c:	21 f0       	breq	.+8      	; 0xc26 <__fpcmp_parts_f+0x3a>
     c1e:	92 30       	cpi	r25, 0x02	; 2
     c20:	31 f4       	brne	.+12     	; 0xc2e <__fpcmp_parts_f+0x42>
     c22:	82 30       	cpi	r24, 0x02	; 2
     c24:	b9 f1       	breq	.+110    	; 0xc94 <__fpcmp_parts_f+0xa8>
     c26:	81 81       	ldd	r24, Z+1	; 0x01
     c28:	88 23       	and	r24, r24
     c2a:	89 f1       	breq	.+98     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c2c:	2d c0       	rjmp	.+90     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c2e:	11 96       	adiw	r26, 0x01	; 1
     c30:	1c 91       	ld	r17, X
     c32:	11 97       	sbiw	r26, 0x01	; 1
     c34:	82 30       	cpi	r24, 0x02	; 2
     c36:	f1 f0       	breq	.+60     	; 0xc74 <__fpcmp_parts_f+0x88>
     c38:	81 81       	ldd	r24, Z+1	; 0x01
     c3a:	18 17       	cp	r17, r24
     c3c:	d9 f4       	brne	.+54     	; 0xc74 <__fpcmp_parts_f+0x88>
     c3e:	12 96       	adiw	r26, 0x02	; 2
     c40:	2d 91       	ld	r18, X+
     c42:	3c 91       	ld	r19, X
     c44:	13 97       	sbiw	r26, 0x03	; 3
     c46:	82 81       	ldd	r24, Z+2	; 0x02
     c48:	93 81       	ldd	r25, Z+3	; 0x03
     c4a:	82 17       	cp	r24, r18
     c4c:	93 07       	cpc	r25, r19
     c4e:	94 f0       	brlt	.+36     	; 0xc74 <__fpcmp_parts_f+0x88>
     c50:	28 17       	cp	r18, r24
     c52:	39 07       	cpc	r19, r25
     c54:	bc f0       	brlt	.+46     	; 0xc84 <__fpcmp_parts_f+0x98>
     c56:	14 96       	adiw	r26, 0x04	; 4
     c58:	8d 91       	ld	r24, X+
     c5a:	9d 91       	ld	r25, X+
     c5c:	0d 90       	ld	r0, X+
     c5e:	bc 91       	ld	r27, X
     c60:	a0 2d       	mov	r26, r0
     c62:	24 81       	ldd	r18, Z+4	; 0x04
     c64:	35 81       	ldd	r19, Z+5	; 0x05
     c66:	46 81       	ldd	r20, Z+6	; 0x06
     c68:	57 81       	ldd	r21, Z+7	; 0x07
     c6a:	28 17       	cp	r18, r24
     c6c:	39 07       	cpc	r19, r25
     c6e:	4a 07       	cpc	r20, r26
     c70:	5b 07       	cpc	r21, r27
     c72:	18 f4       	brcc	.+6      	; 0xc7a <__fpcmp_parts_f+0x8e>
     c74:	11 23       	and	r17, r17
     c76:	41 f0       	breq	.+16     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c78:	0a c0       	rjmp	.+20     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c7a:	82 17       	cp	r24, r18
     c7c:	93 07       	cpc	r25, r19
     c7e:	a4 07       	cpc	r26, r20
     c80:	b5 07       	cpc	r27, r21
     c82:	40 f4       	brcc	.+16     	; 0xc94 <__fpcmp_parts_f+0xa8>
     c84:	11 23       	and	r17, r17
     c86:	19 f0       	breq	.+6      	; 0xc8e <__fpcmp_parts_f+0xa2>
     c88:	61 e0       	ldi	r22, 0x01	; 1
     c8a:	70 e0       	ldi	r23, 0x00	; 0
     c8c:	05 c0       	rjmp	.+10     	; 0xc98 <__fpcmp_parts_f+0xac>
     c8e:	6f ef       	ldi	r22, 0xFF	; 255
     c90:	7f ef       	ldi	r23, 0xFF	; 255
     c92:	02 c0       	rjmp	.+4      	; 0xc98 <__fpcmp_parts_f+0xac>
     c94:	60 e0       	ldi	r22, 0x00	; 0
     c96:	70 e0       	ldi	r23, 0x00	; 0
     c98:	cb 01       	movw	r24, r22
     c9a:	1f 91       	pop	r17
     c9c:	08 95       	ret

00000c9e <HDCMOTOR_voidHBridge>:

#include <util/delay.h>

//H-bridge using 4npn transistors 2N2222
void HDCMOTOR_voidHBridge()
{
     c9e:	df 93       	push	r29
     ca0:	cf 93       	push	r28
     ca2:	cd b7       	in	r28, 0x3d	; 61
     ca4:	de b7       	in	r29, 0x3e	; 62
     ca6:	6c 97       	sbiw	r28, 0x1c	; 28
     ca8:	0f b6       	in	r0, 0x3f	; 63
     caa:	f8 94       	cli
     cac:	de bf       	out	0x3e, r29	; 62
     cae:	0f be       	out	0x3f, r0	; 63
     cb0:	cd bf       	out	0x3d, r28	; 61
    MDIO_voidSetPinValue(DC_MOTOR_PORT,DC_MOTOR_PIN1,PIN_HIGH);
     cb2:	80 e0       	ldi	r24, 0x00	; 0
     cb4:	60 e0       	ldi	r22, 0x00	; 0
     cb6:	41 e0       	ldi	r20, 0x01	; 1
     cb8:	0e 94 31 08 	call	0x1062	; 0x1062 <MDIO_voidSetPinValue>
    MDIO_voidSetPinValue(DC_MOTOR_PORT,DC_MOTOR_PIN2,PIN_LOW);
     cbc:	80 e0       	ldi	r24, 0x00	; 0
     cbe:	61 e0       	ldi	r22, 0x01	; 1
     cc0:	40 e0       	ldi	r20, 0x00	; 0
     cc2:	0e 94 31 08 	call	0x1062	; 0x1062 <MDIO_voidSetPinValue>
     cc6:	80 e0       	ldi	r24, 0x00	; 0
     cc8:	90 e0       	ldi	r25, 0x00	; 0
     cca:	aa e7       	ldi	r26, 0x7A	; 122
     ccc:	b4 e4       	ldi	r27, 0x44	; 68
     cce:	89 8f       	std	Y+25, r24	; 0x19
     cd0:	9a 8f       	std	Y+26, r25	; 0x1a
     cd2:	ab 8f       	std	Y+27, r26	; 0x1b
     cd4:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     cd6:	69 8d       	ldd	r22, Y+25	; 0x19
     cd8:	7a 8d       	ldd	r23, Y+26	; 0x1a
     cda:	8b 8d       	ldd	r24, Y+27	; 0x1b
     cdc:	9c 8d       	ldd	r25, Y+28	; 0x1c
     cde:	20 e0       	ldi	r18, 0x00	; 0
     ce0:	30 e0       	ldi	r19, 0x00	; 0
     ce2:	4a ef       	ldi	r20, 0xFA	; 250
     ce4:	54 e4       	ldi	r21, 0x44	; 68
     ce6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     cea:	dc 01       	movw	r26, r24
     cec:	cb 01       	movw	r24, r22
     cee:	8d 8b       	std	Y+21, r24	; 0x15
     cf0:	9e 8b       	std	Y+22, r25	; 0x16
     cf2:	af 8b       	std	Y+23, r26	; 0x17
     cf4:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     cf6:	6d 89       	ldd	r22, Y+21	; 0x15
     cf8:	7e 89       	ldd	r23, Y+22	; 0x16
     cfa:	8f 89       	ldd	r24, Y+23	; 0x17
     cfc:	98 8d       	ldd	r25, Y+24	; 0x18
     cfe:	20 e0       	ldi	r18, 0x00	; 0
     d00:	30 e0       	ldi	r19, 0x00	; 0
     d02:	40 e8       	ldi	r20, 0x80	; 128
     d04:	5f e3       	ldi	r21, 0x3F	; 63
     d06:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
     d0a:	88 23       	and	r24, r24
     d0c:	2c f4       	brge	.+10     	; 0xd18 <HDCMOTOR_voidHBridge+0x7a>
		__ticks = 1;
     d0e:	81 e0       	ldi	r24, 0x01	; 1
     d10:	90 e0       	ldi	r25, 0x00	; 0
     d12:	9c 8b       	std	Y+20, r25	; 0x14
     d14:	8b 8b       	std	Y+19, r24	; 0x13
     d16:	3f c0       	rjmp	.+126    	; 0xd96 <HDCMOTOR_voidHBridge+0xf8>
	else if (__tmp > 65535)
     d18:	6d 89       	ldd	r22, Y+21	; 0x15
     d1a:	7e 89       	ldd	r23, Y+22	; 0x16
     d1c:	8f 89       	ldd	r24, Y+23	; 0x17
     d1e:	98 8d       	ldd	r25, Y+24	; 0x18
     d20:	20 e0       	ldi	r18, 0x00	; 0
     d22:	3f ef       	ldi	r19, 0xFF	; 255
     d24:	4f e7       	ldi	r20, 0x7F	; 127
     d26:	57 e4       	ldi	r21, 0x47	; 71
     d28:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
     d2c:	18 16       	cp	r1, r24
     d2e:	4c f5       	brge	.+82     	; 0xd82 <HDCMOTOR_voidHBridge+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     d30:	69 8d       	ldd	r22, Y+25	; 0x19
     d32:	7a 8d       	ldd	r23, Y+26	; 0x1a
     d34:	8b 8d       	ldd	r24, Y+27	; 0x1b
     d36:	9c 8d       	ldd	r25, Y+28	; 0x1c
     d38:	20 e0       	ldi	r18, 0x00	; 0
     d3a:	30 e0       	ldi	r19, 0x00	; 0
     d3c:	40 e2       	ldi	r20, 0x20	; 32
     d3e:	51 e4       	ldi	r21, 0x41	; 65
     d40:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d44:	dc 01       	movw	r26, r24
     d46:	cb 01       	movw	r24, r22
     d48:	bc 01       	movw	r22, r24
     d4a:	cd 01       	movw	r24, r26
     d4c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     d50:	dc 01       	movw	r26, r24
     d52:	cb 01       	movw	r24, r22
     d54:	9c 8b       	std	Y+20, r25	; 0x14
     d56:	8b 8b       	std	Y+19, r24	; 0x13
     d58:	0f c0       	rjmp	.+30     	; 0xd78 <HDCMOTOR_voidHBridge+0xda>
     d5a:	88 ec       	ldi	r24, 0xC8	; 200
     d5c:	90 e0       	ldi	r25, 0x00	; 0
     d5e:	9a 8b       	std	Y+18, r25	; 0x12
     d60:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     d62:	89 89       	ldd	r24, Y+17	; 0x11
     d64:	9a 89       	ldd	r25, Y+18	; 0x12
     d66:	01 97       	sbiw	r24, 0x01	; 1
     d68:	f1 f7       	brne	.-4      	; 0xd66 <HDCMOTOR_voidHBridge+0xc8>
     d6a:	9a 8b       	std	Y+18, r25	; 0x12
     d6c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     d6e:	8b 89       	ldd	r24, Y+19	; 0x13
     d70:	9c 89       	ldd	r25, Y+20	; 0x14
     d72:	01 97       	sbiw	r24, 0x01	; 1
     d74:	9c 8b       	std	Y+20, r25	; 0x14
     d76:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     d78:	8b 89       	ldd	r24, Y+19	; 0x13
     d7a:	9c 89       	ldd	r25, Y+20	; 0x14
     d7c:	00 97       	sbiw	r24, 0x00	; 0
     d7e:	69 f7       	brne	.-38     	; 0xd5a <HDCMOTOR_voidHBridge+0xbc>
     d80:	14 c0       	rjmp	.+40     	; 0xdaa <HDCMOTOR_voidHBridge+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     d82:	6d 89       	ldd	r22, Y+21	; 0x15
     d84:	7e 89       	ldd	r23, Y+22	; 0x16
     d86:	8f 89       	ldd	r24, Y+23	; 0x17
     d88:	98 8d       	ldd	r25, Y+24	; 0x18
     d8a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     d8e:	dc 01       	movw	r26, r24
     d90:	cb 01       	movw	r24, r22
     d92:	9c 8b       	std	Y+20, r25	; 0x14
     d94:	8b 8b       	std	Y+19, r24	; 0x13
     d96:	8b 89       	ldd	r24, Y+19	; 0x13
     d98:	9c 89       	ldd	r25, Y+20	; 0x14
     d9a:	98 8b       	std	Y+16, r25	; 0x10
     d9c:	8f 87       	std	Y+15, r24	; 0x0f
     d9e:	8f 85       	ldd	r24, Y+15	; 0x0f
     da0:	98 89       	ldd	r25, Y+16	; 0x10
     da2:	01 97       	sbiw	r24, 0x01	; 1
     da4:	f1 f7       	brne	.-4      	; 0xda2 <HDCMOTOR_voidHBridge+0x104>
     da6:	98 8b       	std	Y+16, r25	; 0x10
     da8:	8f 87       	std	Y+15, r24	; 0x0f
    _delay_ms(INVERSE_MOTOR_DELAY);
    MDIO_voidSetPinValue(DC_MOTOR_PORT,DC_MOTOR_PIN1,PIN_LOW);
     daa:	80 e0       	ldi	r24, 0x00	; 0
     dac:	60 e0       	ldi	r22, 0x00	; 0
     dae:	40 e0       	ldi	r20, 0x00	; 0
     db0:	0e 94 31 08 	call	0x1062	; 0x1062 <MDIO_voidSetPinValue>
    MDIO_voidSetPinValue(DC_MOTOR_PORT,DC_MOTOR_PIN2,PIN_HIGH);
     db4:	80 e0       	ldi	r24, 0x00	; 0
     db6:	61 e0       	ldi	r22, 0x01	; 1
     db8:	41 e0       	ldi	r20, 0x01	; 1
     dba:	0e 94 31 08 	call	0x1062	; 0x1062 <MDIO_voidSetPinValue>
     dbe:	80 e0       	ldi	r24, 0x00	; 0
     dc0:	90 e0       	ldi	r25, 0x00	; 0
     dc2:	aa e7       	ldi	r26, 0x7A	; 122
     dc4:	b4 e4       	ldi	r27, 0x44	; 68
     dc6:	8b 87       	std	Y+11, r24	; 0x0b
     dc8:	9c 87       	std	Y+12, r25	; 0x0c
     dca:	ad 87       	std	Y+13, r26	; 0x0d
     dcc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     dce:	6b 85       	ldd	r22, Y+11	; 0x0b
     dd0:	7c 85       	ldd	r23, Y+12	; 0x0c
     dd2:	8d 85       	ldd	r24, Y+13	; 0x0d
     dd4:	9e 85       	ldd	r25, Y+14	; 0x0e
     dd6:	20 e0       	ldi	r18, 0x00	; 0
     dd8:	30 e0       	ldi	r19, 0x00	; 0
     dda:	4a ef       	ldi	r20, 0xFA	; 250
     ddc:	54 e4       	ldi	r21, 0x44	; 68
     dde:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     de2:	dc 01       	movw	r26, r24
     de4:	cb 01       	movw	r24, r22
     de6:	8f 83       	std	Y+7, r24	; 0x07
     de8:	98 87       	std	Y+8, r25	; 0x08
     dea:	a9 87       	std	Y+9, r26	; 0x09
     dec:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     dee:	6f 81       	ldd	r22, Y+7	; 0x07
     df0:	78 85       	ldd	r23, Y+8	; 0x08
     df2:	89 85       	ldd	r24, Y+9	; 0x09
     df4:	9a 85       	ldd	r25, Y+10	; 0x0a
     df6:	20 e0       	ldi	r18, 0x00	; 0
     df8:	30 e0       	ldi	r19, 0x00	; 0
     dfa:	40 e8       	ldi	r20, 0x80	; 128
     dfc:	5f e3       	ldi	r21, 0x3F	; 63
     dfe:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
     e02:	88 23       	and	r24, r24
     e04:	2c f4       	brge	.+10     	; 0xe10 <HDCMOTOR_voidHBridge+0x172>
		__ticks = 1;
     e06:	81 e0       	ldi	r24, 0x01	; 1
     e08:	90 e0       	ldi	r25, 0x00	; 0
     e0a:	9e 83       	std	Y+6, r25	; 0x06
     e0c:	8d 83       	std	Y+5, r24	; 0x05
     e0e:	3f c0       	rjmp	.+126    	; 0xe8e <HDCMOTOR_voidHBridge+0x1f0>
	else if (__tmp > 65535)
     e10:	6f 81       	ldd	r22, Y+7	; 0x07
     e12:	78 85       	ldd	r23, Y+8	; 0x08
     e14:	89 85       	ldd	r24, Y+9	; 0x09
     e16:	9a 85       	ldd	r25, Y+10	; 0x0a
     e18:	20 e0       	ldi	r18, 0x00	; 0
     e1a:	3f ef       	ldi	r19, 0xFF	; 255
     e1c:	4f e7       	ldi	r20, 0x7F	; 127
     e1e:	57 e4       	ldi	r21, 0x47	; 71
     e20:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
     e24:	18 16       	cp	r1, r24
     e26:	4c f5       	brge	.+82     	; 0xe7a <HDCMOTOR_voidHBridge+0x1dc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     e28:	6b 85       	ldd	r22, Y+11	; 0x0b
     e2a:	7c 85       	ldd	r23, Y+12	; 0x0c
     e2c:	8d 85       	ldd	r24, Y+13	; 0x0d
     e2e:	9e 85       	ldd	r25, Y+14	; 0x0e
     e30:	20 e0       	ldi	r18, 0x00	; 0
     e32:	30 e0       	ldi	r19, 0x00	; 0
     e34:	40 e2       	ldi	r20, 0x20	; 32
     e36:	51 e4       	ldi	r21, 0x41	; 65
     e38:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e3c:	dc 01       	movw	r26, r24
     e3e:	cb 01       	movw	r24, r22
     e40:	bc 01       	movw	r22, r24
     e42:	cd 01       	movw	r24, r26
     e44:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e48:	dc 01       	movw	r26, r24
     e4a:	cb 01       	movw	r24, r22
     e4c:	9e 83       	std	Y+6, r25	; 0x06
     e4e:	8d 83       	std	Y+5, r24	; 0x05
     e50:	0f c0       	rjmp	.+30     	; 0xe70 <HDCMOTOR_voidHBridge+0x1d2>
     e52:	88 ec       	ldi	r24, 0xC8	; 200
     e54:	90 e0       	ldi	r25, 0x00	; 0
     e56:	9c 83       	std	Y+4, r25	; 0x04
     e58:	8b 83       	std	Y+3, r24	; 0x03
     e5a:	8b 81       	ldd	r24, Y+3	; 0x03
     e5c:	9c 81       	ldd	r25, Y+4	; 0x04
     e5e:	01 97       	sbiw	r24, 0x01	; 1
     e60:	f1 f7       	brne	.-4      	; 0xe5e <HDCMOTOR_voidHBridge+0x1c0>
     e62:	9c 83       	std	Y+4, r25	; 0x04
     e64:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e66:	8d 81       	ldd	r24, Y+5	; 0x05
     e68:	9e 81       	ldd	r25, Y+6	; 0x06
     e6a:	01 97       	sbiw	r24, 0x01	; 1
     e6c:	9e 83       	std	Y+6, r25	; 0x06
     e6e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e70:	8d 81       	ldd	r24, Y+5	; 0x05
     e72:	9e 81       	ldd	r25, Y+6	; 0x06
     e74:	00 97       	sbiw	r24, 0x00	; 0
     e76:	69 f7       	brne	.-38     	; 0xe52 <HDCMOTOR_voidHBridge+0x1b4>
     e78:	14 c0       	rjmp	.+40     	; 0xea2 <HDCMOTOR_voidHBridge+0x204>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     e7a:	6f 81       	ldd	r22, Y+7	; 0x07
     e7c:	78 85       	ldd	r23, Y+8	; 0x08
     e7e:	89 85       	ldd	r24, Y+9	; 0x09
     e80:	9a 85       	ldd	r25, Y+10	; 0x0a
     e82:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e86:	dc 01       	movw	r26, r24
     e88:	cb 01       	movw	r24, r22
     e8a:	9e 83       	std	Y+6, r25	; 0x06
     e8c:	8d 83       	std	Y+5, r24	; 0x05
     e8e:	8d 81       	ldd	r24, Y+5	; 0x05
     e90:	9e 81       	ldd	r25, Y+6	; 0x06
     e92:	9a 83       	std	Y+2, r25	; 0x02
     e94:	89 83       	std	Y+1, r24	; 0x01
     e96:	89 81       	ldd	r24, Y+1	; 0x01
     e98:	9a 81       	ldd	r25, Y+2	; 0x02
     e9a:	01 97       	sbiw	r24, 0x01	; 1
     e9c:	f1 f7       	brne	.-4      	; 0xe9a <HDCMOTOR_voidHBridge+0x1fc>
     e9e:	9a 83       	std	Y+2, r25	; 0x02
     ea0:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(INVERSE_MOTOR_DELAY);
    
}
     ea2:	6c 96       	adiw	r28, 0x1c	; 28
     ea4:	0f b6       	in	r0, 0x3f	; 63
     ea6:	f8 94       	cli
     ea8:	de bf       	out	0x3e, r29	; 62
     eaa:	0f be       	out	0x3f, r0	; 63
     eac:	cd bf       	out	0x3d, r28	; 61
     eae:	cf 91       	pop	r28
     eb0:	df 91       	pop	r29
     eb2:	08 95       	ret

00000eb4 <MDIO_voidInit>:
#include "../Include/MCAL/DIO/DIO_Private.h"
#include "../Include/MCAL/DIO/DIO_Configuration.h"
#include "../Include/MCAL/DIO/DIO_Interface.h"

void MDIO_voidInit()
{
     eb4:	df 93       	push	r29
     eb6:	cf 93       	push	r28
     eb8:	cd b7       	in	r28, 0x3d	; 61
     eba:	de b7       	in	r29, 0x3e	; 62
    PORTA_REG=CONC_BIT(PORTA_PIN7_VALUE,PORTA_PIN6_VALUE,PORTA_PIN5_VALUE,PORTA_PIN4_VALUE,PORTA_PIN3_VALUE,PORTA_PIN2_VALUE,PORTA_PIN1_VALUE,PORTA_PIN0_VALUE);
     ebc:	eb e3       	ldi	r30, 0x3B	; 59
     ebe:	f0 e0       	ldi	r31, 0x00	; 0
     ec0:	10 82       	st	Z, r1
    PORTB_REG=CONC_BIT(PORTB_PIN7_VALUE,PORTB_PIN6_VALUE,PORTB_PIN5_VALUE,PORTB_PIN4_VALUE,PORTB_PIN3_VALUE,PORTB_PIN2_VALUE,PORTB_PIN1_VALUE,PORTB_PIN0_VALUE);
     ec2:	e8 e3       	ldi	r30, 0x38	; 56
     ec4:	f0 e0       	ldi	r31, 0x00	; 0
     ec6:	10 82       	st	Z, r1
    PORTC_REG=CONC_BIT(PORTC_PIN7_VALUE,PORTC_PIN6_VALUE,PORTC_PIN5_VALUE,PORTC_PIN4_VALUE,PORTC_PIN3_VALUE,PORTC_PIN2_VALUE,PORTC_PIN1_VALUE,PORTC_PIN0_VALUE);
     ec8:	e5 e3       	ldi	r30, 0x35	; 53
     eca:	f0 e0       	ldi	r31, 0x00	; 0
     ecc:	10 82       	st	Z, r1
    PORTD_REG=CONC_BIT(PORTD_PIN7_VALUE,PORTD_PIN6_VALUE,PORTD_PIN5_VALUE,PORTD_PIN4_VALUE,PORTD_PIN3_VALUE,PORTD_PIN2_VALUE,PORTD_PIN1_VALUE,PORTD_PIN0_VALUE);
     ece:	e2 e3       	ldi	r30, 0x32	; 50
     ed0:	f0 e0       	ldi	r31, 0x00	; 0
     ed2:	10 82       	st	Z, r1
    
    DDRA_REG=CONC_BIT(DDRA_PIN7_DIRECTION,DDRA_PIN6_DIRECTION,DDRA_PIN5_DIRECTION,DDRA_PIN4_DIRECTION,DDRA_PIN3_DIRECTION,DDRA_PIN2_DIRECTION,DDRA_PIN1_DIRECTION,DDRA_PIN0_DIRECTION);
     ed4:	ea e3       	ldi	r30, 0x3A	; 58
     ed6:	f0 e0       	ldi	r31, 0x00	; 0
     ed8:	8f ef       	ldi	r24, 0xFF	; 255
     eda:	80 83       	st	Z, r24
    DDRB_REG=CONC_BIT(DDRB_PIN7_DIRECTION,DDRB_PIN6_DIRECTION,DDRB_PIN5_DIRECTION,DDRB_PIN4_DIRECTION,DDRB_PIN3_DIRECTION,DDRB_PIN2_DIRECTION,DDRB_PIN1_DIRECTION,DDRB_PIN0_DIRECTION);
     edc:	e7 e3       	ldi	r30, 0x37	; 55
     ede:	f0 e0       	ldi	r31, 0x00	; 0
     ee0:	8f ef       	ldi	r24, 0xFF	; 255
     ee2:	80 83       	st	Z, r24
    DDRC_REG=CONC_BIT(DDRC_PIN7_DIRECTION,DDRC_PIN6_DIRECTION,DDRC_PIN5_DIRECTION,DDRC_PIN4_DIRECTION,DDRC_PIN3_DIRECTION,DDRC_PIN2_DIRECTION,DDRC_PIN1_DIRECTION,DDRC_PIN0_DIRECTION);
     ee4:	e4 e3       	ldi	r30, 0x34	; 52
     ee6:	f0 e0       	ldi	r31, 0x00	; 0
     ee8:	8f ef       	ldi	r24, 0xFF	; 255
     eea:	80 83       	st	Z, r24
    DDRD_REG=CONC_BIT(DDRD_PIN7_DIRECTION,DDRD_PIN6_DIRECTION,DDRD_PIN5_DIRECTION,DDRD_PIN4_DIRECTION,DDRD_PIN3_DIRECTION,DDRD_PIN2_DIRECTION,DDRD_PIN1_DIRECTION,DDRD_PIN0_DIRECTION);
     eec:	e1 e3       	ldi	r30, 0x31	; 49
     eee:	f0 e0       	ldi	r31, 0x00	; 0
     ef0:	8f ef       	ldi	r24, 0xFF	; 255
     ef2:	80 83       	st	Z, r24

}
     ef4:	cf 91       	pop	r28
     ef6:	df 91       	pop	r29
     ef8:	08 95       	ret

00000efa <MDIO_u8GetPinValue>:

u8 MDIO_u8GetPinValue(u8 A_u8Port,u8 A_u8Pin)
{
     efa:	df 93       	push	r29
     efc:	cf 93       	push	r28
     efe:	00 d0       	rcall	.+0      	; 0xf00 <MDIO_u8GetPinValue+0x6>
     f00:	00 d0       	rcall	.+0      	; 0xf02 <MDIO_u8GetPinValue+0x8>
     f02:	0f 92       	push	r0
     f04:	cd b7       	in	r28, 0x3d	; 61
     f06:	de b7       	in	r29, 0x3e	; 62
     f08:	8a 83       	std	Y+2, r24	; 0x02
     f0a:	6b 83       	std	Y+3, r22	; 0x03
    u8 local_u8Value;
    switch(A_u8Port)
     f0c:	8a 81       	ldd	r24, Y+2	; 0x02
     f0e:	28 2f       	mov	r18, r24
     f10:	30 e0       	ldi	r19, 0x00	; 0
     f12:	3d 83       	std	Y+5, r19	; 0x05
     f14:	2c 83       	std	Y+4, r18	; 0x04
     f16:	8c 81       	ldd	r24, Y+4	; 0x04
     f18:	9d 81       	ldd	r25, Y+5	; 0x05
     f1a:	81 30       	cpi	r24, 0x01	; 1
     f1c:	91 05       	cpc	r25, r1
     f1e:	c1 f1       	breq	.+112    	; 0xf90 <MDIO_u8GetPinValue+0x96>
     f20:	2c 81       	ldd	r18, Y+4	; 0x04
     f22:	3d 81       	ldd	r19, Y+5	; 0x05
     f24:	22 30       	cpi	r18, 0x02	; 2
     f26:	31 05       	cpc	r19, r1
     f28:	2c f4       	brge	.+10     	; 0xf34 <MDIO_u8GetPinValue+0x3a>
     f2a:	8c 81       	ldd	r24, Y+4	; 0x04
     f2c:	9d 81       	ldd	r25, Y+5	; 0x05
     f2e:	00 97       	sbiw	r24, 0x00	; 0
     f30:	71 f0       	breq	.+28     	; 0xf4e <MDIO_u8GetPinValue+0x54>
     f32:	8e c0       	rjmp	.+284    	; 0x1050 <MDIO_u8GetPinValue+0x156>
     f34:	2c 81       	ldd	r18, Y+4	; 0x04
     f36:	3d 81       	ldd	r19, Y+5	; 0x05
     f38:	22 30       	cpi	r18, 0x02	; 2
     f3a:	31 05       	cpc	r19, r1
     f3c:	09 f4       	brne	.+2      	; 0xf40 <MDIO_u8GetPinValue+0x46>
     f3e:	49 c0       	rjmp	.+146    	; 0xfd2 <MDIO_u8GetPinValue+0xd8>
     f40:	8c 81       	ldd	r24, Y+4	; 0x04
     f42:	9d 81       	ldd	r25, Y+5	; 0x05
     f44:	83 30       	cpi	r24, 0x03	; 3
     f46:	91 05       	cpc	r25, r1
     f48:	09 f4       	brne	.+2      	; 0xf4c <MDIO_u8GetPinValue+0x52>
     f4a:	63 c0       	rjmp	.+198    	; 0x1012 <MDIO_u8GetPinValue+0x118>
     f4c:	81 c0       	rjmp	.+258    	; 0x1050 <MDIO_u8GetPinValue+0x156>
    {
        case PORTA: local_u8Value=GET_BIT(PINA_REG,A_u8Pin);
     f4e:	e9 e3       	ldi	r30, 0x39	; 57
     f50:	f0 e0       	ldi	r31, 0x00	; 0
     f52:	80 81       	ld	r24, Z
     f54:	48 2f       	mov	r20, r24
     f56:	50 e0       	ldi	r21, 0x00	; 0
     f58:	8b 81       	ldd	r24, Y+3	; 0x03
     f5a:	28 2f       	mov	r18, r24
     f5c:	30 e0       	ldi	r19, 0x00	; 0
     f5e:	81 e0       	ldi	r24, 0x01	; 1
     f60:	90 e0       	ldi	r25, 0x00	; 0
     f62:	02 c0       	rjmp	.+4      	; 0xf68 <MDIO_u8GetPinValue+0x6e>
     f64:	88 0f       	add	r24, r24
     f66:	99 1f       	adc	r25, r25
     f68:	2a 95       	dec	r18
     f6a:	e2 f7       	brpl	.-8      	; 0xf64 <MDIO_u8GetPinValue+0x6a>
     f6c:	80 95       	com	r24
     f6e:	90 95       	com	r25
     f70:	9a 01       	movw	r18, r20
     f72:	28 23       	and	r18, r24
     f74:	39 23       	and	r19, r25
     f76:	e9 e3       	ldi	r30, 0x39	; 57
     f78:	f0 e0       	ldi	r31, 0x00	; 0
     f7a:	80 81       	ld	r24, Z
     f7c:	88 2f       	mov	r24, r24
     f7e:	90 e0       	ldi	r25, 0x00	; 0
     f80:	19 82       	std	Y+1, r1	; 0x01
     f82:	28 17       	cp	r18, r24
     f84:	39 07       	cpc	r19, r25
     f86:	09 f4       	brne	.+2      	; 0xf8a <MDIO_u8GetPinValue+0x90>
     f88:	63 c0       	rjmp	.+198    	; 0x1050 <MDIO_u8GetPinValue+0x156>
     f8a:	81 e0       	ldi	r24, 0x01	; 1
     f8c:	89 83       	std	Y+1, r24	; 0x01
     f8e:	60 c0       	rjmp	.+192    	; 0x1050 <MDIO_u8GetPinValue+0x156>
        break;
        case PORTB: local_u8Value=GET_BIT(PINB_REG,A_u8Pin);
     f90:	e6 e3       	ldi	r30, 0x36	; 54
     f92:	f0 e0       	ldi	r31, 0x00	; 0
     f94:	80 81       	ld	r24, Z
     f96:	48 2f       	mov	r20, r24
     f98:	50 e0       	ldi	r21, 0x00	; 0
     f9a:	8b 81       	ldd	r24, Y+3	; 0x03
     f9c:	28 2f       	mov	r18, r24
     f9e:	30 e0       	ldi	r19, 0x00	; 0
     fa0:	81 e0       	ldi	r24, 0x01	; 1
     fa2:	90 e0       	ldi	r25, 0x00	; 0
     fa4:	02 c0       	rjmp	.+4      	; 0xfaa <MDIO_u8GetPinValue+0xb0>
     fa6:	88 0f       	add	r24, r24
     fa8:	99 1f       	adc	r25, r25
     faa:	2a 95       	dec	r18
     fac:	e2 f7       	brpl	.-8      	; 0xfa6 <MDIO_u8GetPinValue+0xac>
     fae:	80 95       	com	r24
     fb0:	90 95       	com	r25
     fb2:	9a 01       	movw	r18, r20
     fb4:	28 23       	and	r18, r24
     fb6:	39 23       	and	r19, r25
     fb8:	e6 e3       	ldi	r30, 0x36	; 54
     fba:	f0 e0       	ldi	r31, 0x00	; 0
     fbc:	80 81       	ld	r24, Z
     fbe:	88 2f       	mov	r24, r24
     fc0:	90 e0       	ldi	r25, 0x00	; 0
     fc2:	19 82       	std	Y+1, r1	; 0x01
     fc4:	28 17       	cp	r18, r24
     fc6:	39 07       	cpc	r19, r25
     fc8:	09 f4       	brne	.+2      	; 0xfcc <MDIO_u8GetPinValue+0xd2>
     fca:	42 c0       	rjmp	.+132    	; 0x1050 <MDIO_u8GetPinValue+0x156>
     fcc:	81 e0       	ldi	r24, 0x01	; 1
     fce:	89 83       	std	Y+1, r24	; 0x01
     fd0:	3f c0       	rjmp	.+126    	; 0x1050 <MDIO_u8GetPinValue+0x156>
        break;
        case PORTC: local_u8Value=GET_BIT(PINC_REG,A_u8Pin);
     fd2:	e3 e3       	ldi	r30, 0x33	; 51
     fd4:	f0 e0       	ldi	r31, 0x00	; 0
     fd6:	80 81       	ld	r24, Z
     fd8:	48 2f       	mov	r20, r24
     fda:	50 e0       	ldi	r21, 0x00	; 0
     fdc:	8b 81       	ldd	r24, Y+3	; 0x03
     fde:	28 2f       	mov	r18, r24
     fe0:	30 e0       	ldi	r19, 0x00	; 0
     fe2:	81 e0       	ldi	r24, 0x01	; 1
     fe4:	90 e0       	ldi	r25, 0x00	; 0
     fe6:	02 c0       	rjmp	.+4      	; 0xfec <MDIO_u8GetPinValue+0xf2>
     fe8:	88 0f       	add	r24, r24
     fea:	99 1f       	adc	r25, r25
     fec:	2a 95       	dec	r18
     fee:	e2 f7       	brpl	.-8      	; 0xfe8 <MDIO_u8GetPinValue+0xee>
     ff0:	80 95       	com	r24
     ff2:	90 95       	com	r25
     ff4:	9a 01       	movw	r18, r20
     ff6:	28 23       	and	r18, r24
     ff8:	39 23       	and	r19, r25
     ffa:	e3 e3       	ldi	r30, 0x33	; 51
     ffc:	f0 e0       	ldi	r31, 0x00	; 0
     ffe:	80 81       	ld	r24, Z
    1000:	88 2f       	mov	r24, r24
    1002:	90 e0       	ldi	r25, 0x00	; 0
    1004:	19 82       	std	Y+1, r1	; 0x01
    1006:	28 17       	cp	r18, r24
    1008:	39 07       	cpc	r19, r25
    100a:	11 f1       	breq	.+68     	; 0x1050 <MDIO_u8GetPinValue+0x156>
    100c:	81 e0       	ldi	r24, 0x01	; 1
    100e:	89 83       	std	Y+1, r24	; 0x01
    1010:	1f c0       	rjmp	.+62     	; 0x1050 <MDIO_u8GetPinValue+0x156>
        break;
        case PORTD: local_u8Value=GET_BIT(PIND_REG,A_u8Pin);
    1012:	e0 e3       	ldi	r30, 0x30	; 48
    1014:	f0 e0       	ldi	r31, 0x00	; 0
    1016:	80 81       	ld	r24, Z
    1018:	48 2f       	mov	r20, r24
    101a:	50 e0       	ldi	r21, 0x00	; 0
    101c:	8b 81       	ldd	r24, Y+3	; 0x03
    101e:	28 2f       	mov	r18, r24
    1020:	30 e0       	ldi	r19, 0x00	; 0
    1022:	81 e0       	ldi	r24, 0x01	; 1
    1024:	90 e0       	ldi	r25, 0x00	; 0
    1026:	02 c0       	rjmp	.+4      	; 0x102c <MDIO_u8GetPinValue+0x132>
    1028:	88 0f       	add	r24, r24
    102a:	99 1f       	adc	r25, r25
    102c:	2a 95       	dec	r18
    102e:	e2 f7       	brpl	.-8      	; 0x1028 <MDIO_u8GetPinValue+0x12e>
    1030:	80 95       	com	r24
    1032:	90 95       	com	r25
    1034:	9a 01       	movw	r18, r20
    1036:	28 23       	and	r18, r24
    1038:	39 23       	and	r19, r25
    103a:	e0 e3       	ldi	r30, 0x30	; 48
    103c:	f0 e0       	ldi	r31, 0x00	; 0
    103e:	80 81       	ld	r24, Z
    1040:	88 2f       	mov	r24, r24
    1042:	90 e0       	ldi	r25, 0x00	; 0
    1044:	19 82       	std	Y+1, r1	; 0x01
    1046:	28 17       	cp	r18, r24
    1048:	39 07       	cpc	r19, r25
    104a:	11 f0       	breq	.+4      	; 0x1050 <MDIO_u8GetPinValue+0x156>
    104c:	81 e0       	ldi	r24, 0x01	; 1
    104e:	89 83       	std	Y+1, r24	; 0x01
        break;
    }
    return local_u8Value;
    1050:	89 81       	ldd	r24, Y+1	; 0x01
}
    1052:	0f 90       	pop	r0
    1054:	0f 90       	pop	r0
    1056:	0f 90       	pop	r0
    1058:	0f 90       	pop	r0
    105a:	0f 90       	pop	r0
    105c:	cf 91       	pop	r28
    105e:	df 91       	pop	r29
    1060:	08 95       	ret

00001062 <MDIO_voidSetPinValue>:

void MDIO_voidSetPinValue(u8 A_u8Port,u8 A_u8Pin, u8 A_u8Value)
{
    1062:	df 93       	push	r29
    1064:	cf 93       	push	r28
    1066:	cd b7       	in	r28, 0x3d	; 61
    1068:	de b7       	in	r29, 0x3e	; 62
    106a:	2d 97       	sbiw	r28, 0x0d	; 13
    106c:	0f b6       	in	r0, 0x3f	; 63
    106e:	f8 94       	cli
    1070:	de bf       	out	0x3e, r29	; 62
    1072:	0f be       	out	0x3f, r0	; 63
    1074:	cd bf       	out	0x3d, r28	; 61
    1076:	89 83       	std	Y+1, r24	; 0x01
    1078:	6a 83       	std	Y+2, r22	; 0x02
    107a:	4b 83       	std	Y+3, r20	; 0x03
    switch(A_u8Port)
    107c:	89 81       	ldd	r24, Y+1	; 0x01
    107e:	28 2f       	mov	r18, r24
    1080:	30 e0       	ldi	r19, 0x00	; 0
    1082:	3d 87       	std	Y+13, r19	; 0x0d
    1084:	2c 87       	std	Y+12, r18	; 0x0c
    1086:	8c 85       	ldd	r24, Y+12	; 0x0c
    1088:	9d 85       	ldd	r25, Y+13	; 0x0d
    108a:	81 30       	cpi	r24, 0x01	; 1
    108c:	91 05       	cpc	r25, r1
    108e:	09 f4       	brne	.+2      	; 0x1092 <MDIO_voidSetPinValue+0x30>
    1090:	4f c0       	rjmp	.+158    	; 0x1130 <MDIO_voidSetPinValue+0xce>
    1092:	2c 85       	ldd	r18, Y+12	; 0x0c
    1094:	3d 85       	ldd	r19, Y+13	; 0x0d
    1096:	22 30       	cpi	r18, 0x02	; 2
    1098:	31 05       	cpc	r19, r1
    109a:	2c f4       	brge	.+10     	; 0x10a6 <MDIO_voidSetPinValue+0x44>
    109c:	8c 85       	ldd	r24, Y+12	; 0x0c
    109e:	9d 85       	ldd	r25, Y+13	; 0x0d
    10a0:	00 97       	sbiw	r24, 0x00	; 0
    10a2:	71 f0       	breq	.+28     	; 0x10c0 <MDIO_voidSetPinValue+0x5e>
    10a4:	eb c0       	rjmp	.+470    	; 0x127c <MDIO_voidSetPinValue+0x21a>
    10a6:	2c 85       	ldd	r18, Y+12	; 0x0c
    10a8:	3d 85       	ldd	r19, Y+13	; 0x0d
    10aa:	22 30       	cpi	r18, 0x02	; 2
    10ac:	31 05       	cpc	r19, r1
    10ae:	09 f4       	brne	.+2      	; 0x10b2 <MDIO_voidSetPinValue+0x50>
    10b0:	77 c0       	rjmp	.+238    	; 0x11a0 <MDIO_voidSetPinValue+0x13e>
    10b2:	8c 85       	ldd	r24, Y+12	; 0x0c
    10b4:	9d 85       	ldd	r25, Y+13	; 0x0d
    10b6:	83 30       	cpi	r24, 0x03	; 3
    10b8:	91 05       	cpc	r25, r1
    10ba:	09 f4       	brne	.+2      	; 0x10be <MDIO_voidSetPinValue+0x5c>
    10bc:	a9 c0       	rjmp	.+338    	; 0x1210 <MDIO_voidSetPinValue+0x1ae>
    10be:	de c0       	rjmp	.+444    	; 0x127c <MDIO_voidSetPinValue+0x21a>
    {
        case PORTA:
        switch (A_u8Value)
    10c0:	8b 81       	ldd	r24, Y+3	; 0x03
    10c2:	28 2f       	mov	r18, r24
    10c4:	30 e0       	ldi	r19, 0x00	; 0
    10c6:	3b 87       	std	Y+11, r19	; 0x0b
    10c8:	2a 87       	std	Y+10, r18	; 0x0a
    10ca:	8a 85       	ldd	r24, Y+10	; 0x0a
    10cc:	9b 85       	ldd	r25, Y+11	; 0x0b
    10ce:	00 97       	sbiw	r24, 0x00	; 0
    10d0:	d1 f0       	breq	.+52     	; 0x1106 <MDIO_voidSetPinValue+0xa4>
    10d2:	2a 85       	ldd	r18, Y+10	; 0x0a
    10d4:	3b 85       	ldd	r19, Y+11	; 0x0b
    10d6:	21 30       	cpi	r18, 0x01	; 1
    10d8:	31 05       	cpc	r19, r1
    10da:	09 f0       	breq	.+2      	; 0x10de <MDIO_voidSetPinValue+0x7c>
    10dc:	cf c0       	rjmp	.+414    	; 0x127c <MDIO_voidSetPinValue+0x21a>
        {
            case PIN_HIGH: SET_BIT(PORTA_REG,A_u8Pin);
    10de:	ab e3       	ldi	r26, 0x3B	; 59
    10e0:	b0 e0       	ldi	r27, 0x00	; 0
    10e2:	eb e3       	ldi	r30, 0x3B	; 59
    10e4:	f0 e0       	ldi	r31, 0x00	; 0
    10e6:	80 81       	ld	r24, Z
    10e8:	48 2f       	mov	r20, r24
    10ea:	8a 81       	ldd	r24, Y+2	; 0x02
    10ec:	28 2f       	mov	r18, r24
    10ee:	30 e0       	ldi	r19, 0x00	; 0
    10f0:	81 e0       	ldi	r24, 0x01	; 1
    10f2:	90 e0       	ldi	r25, 0x00	; 0
    10f4:	02 2e       	mov	r0, r18
    10f6:	02 c0       	rjmp	.+4      	; 0x10fc <MDIO_voidSetPinValue+0x9a>
    10f8:	88 0f       	add	r24, r24
    10fa:	99 1f       	adc	r25, r25
    10fc:	0a 94       	dec	r0
    10fe:	e2 f7       	brpl	.-8      	; 0x10f8 <MDIO_voidSetPinValue+0x96>
    1100:	84 2b       	or	r24, r20
    1102:	8c 93       	st	X, r24
    1104:	bb c0       	rjmp	.+374    	; 0x127c <MDIO_voidSetPinValue+0x21a>
            break;

            case PIN_LOW: CLR_BIT(PORTA_REG,A_u8Pin);
    1106:	ab e3       	ldi	r26, 0x3B	; 59
    1108:	b0 e0       	ldi	r27, 0x00	; 0
    110a:	eb e3       	ldi	r30, 0x3B	; 59
    110c:	f0 e0       	ldi	r31, 0x00	; 0
    110e:	80 81       	ld	r24, Z
    1110:	48 2f       	mov	r20, r24
    1112:	8a 81       	ldd	r24, Y+2	; 0x02
    1114:	28 2f       	mov	r18, r24
    1116:	30 e0       	ldi	r19, 0x00	; 0
    1118:	81 e0       	ldi	r24, 0x01	; 1
    111a:	90 e0       	ldi	r25, 0x00	; 0
    111c:	02 2e       	mov	r0, r18
    111e:	02 c0       	rjmp	.+4      	; 0x1124 <MDIO_voidSetPinValue+0xc2>
    1120:	88 0f       	add	r24, r24
    1122:	99 1f       	adc	r25, r25
    1124:	0a 94       	dec	r0
    1126:	e2 f7       	brpl	.-8      	; 0x1120 <MDIO_voidSetPinValue+0xbe>
    1128:	80 95       	com	r24
    112a:	84 23       	and	r24, r20
    112c:	8c 93       	st	X, r24
    112e:	a6 c0       	rjmp	.+332    	; 0x127c <MDIO_voidSetPinValue+0x21a>
            break;
        };
        break;

        case PORTB:
        switch (A_u8Value)
    1130:	8b 81       	ldd	r24, Y+3	; 0x03
    1132:	28 2f       	mov	r18, r24
    1134:	30 e0       	ldi	r19, 0x00	; 0
    1136:	39 87       	std	Y+9, r19	; 0x09
    1138:	28 87       	std	Y+8, r18	; 0x08
    113a:	88 85       	ldd	r24, Y+8	; 0x08
    113c:	99 85       	ldd	r25, Y+9	; 0x09
    113e:	00 97       	sbiw	r24, 0x00	; 0
    1140:	d1 f0       	breq	.+52     	; 0x1176 <MDIO_voidSetPinValue+0x114>
    1142:	28 85       	ldd	r18, Y+8	; 0x08
    1144:	39 85       	ldd	r19, Y+9	; 0x09
    1146:	21 30       	cpi	r18, 0x01	; 1
    1148:	31 05       	cpc	r19, r1
    114a:	09 f0       	breq	.+2      	; 0x114e <MDIO_voidSetPinValue+0xec>
    114c:	97 c0       	rjmp	.+302    	; 0x127c <MDIO_voidSetPinValue+0x21a>
        {
            case PIN_HIGH: SET_BIT(PORTB_REG,A_u8Pin);
    114e:	a8 e3       	ldi	r26, 0x38	; 56
    1150:	b0 e0       	ldi	r27, 0x00	; 0
    1152:	e8 e3       	ldi	r30, 0x38	; 56
    1154:	f0 e0       	ldi	r31, 0x00	; 0
    1156:	80 81       	ld	r24, Z
    1158:	48 2f       	mov	r20, r24
    115a:	8a 81       	ldd	r24, Y+2	; 0x02
    115c:	28 2f       	mov	r18, r24
    115e:	30 e0       	ldi	r19, 0x00	; 0
    1160:	81 e0       	ldi	r24, 0x01	; 1
    1162:	90 e0       	ldi	r25, 0x00	; 0
    1164:	02 2e       	mov	r0, r18
    1166:	02 c0       	rjmp	.+4      	; 0x116c <MDIO_voidSetPinValue+0x10a>
    1168:	88 0f       	add	r24, r24
    116a:	99 1f       	adc	r25, r25
    116c:	0a 94       	dec	r0
    116e:	e2 f7       	brpl	.-8      	; 0x1168 <MDIO_voidSetPinValue+0x106>
    1170:	84 2b       	or	r24, r20
    1172:	8c 93       	st	X, r24
    1174:	83 c0       	rjmp	.+262    	; 0x127c <MDIO_voidSetPinValue+0x21a>
            break;

            case PIN_LOW: CLR_BIT(PORTB_REG,A_u8Pin);
    1176:	a8 e3       	ldi	r26, 0x38	; 56
    1178:	b0 e0       	ldi	r27, 0x00	; 0
    117a:	e8 e3       	ldi	r30, 0x38	; 56
    117c:	f0 e0       	ldi	r31, 0x00	; 0
    117e:	80 81       	ld	r24, Z
    1180:	48 2f       	mov	r20, r24
    1182:	8a 81       	ldd	r24, Y+2	; 0x02
    1184:	28 2f       	mov	r18, r24
    1186:	30 e0       	ldi	r19, 0x00	; 0
    1188:	81 e0       	ldi	r24, 0x01	; 1
    118a:	90 e0       	ldi	r25, 0x00	; 0
    118c:	02 2e       	mov	r0, r18
    118e:	02 c0       	rjmp	.+4      	; 0x1194 <MDIO_voidSetPinValue+0x132>
    1190:	88 0f       	add	r24, r24
    1192:	99 1f       	adc	r25, r25
    1194:	0a 94       	dec	r0
    1196:	e2 f7       	brpl	.-8      	; 0x1190 <MDIO_voidSetPinValue+0x12e>
    1198:	80 95       	com	r24
    119a:	84 23       	and	r24, r20
    119c:	8c 93       	st	X, r24
    119e:	6e c0       	rjmp	.+220    	; 0x127c <MDIO_voidSetPinValue+0x21a>
            break;
        };
        break;

        case PORTC:
        switch (A_u8Value)
    11a0:	8b 81       	ldd	r24, Y+3	; 0x03
    11a2:	28 2f       	mov	r18, r24
    11a4:	30 e0       	ldi	r19, 0x00	; 0
    11a6:	3f 83       	std	Y+7, r19	; 0x07
    11a8:	2e 83       	std	Y+6, r18	; 0x06
    11aa:	8e 81       	ldd	r24, Y+6	; 0x06
    11ac:	9f 81       	ldd	r25, Y+7	; 0x07
    11ae:	00 97       	sbiw	r24, 0x00	; 0
    11b0:	d1 f0       	breq	.+52     	; 0x11e6 <MDIO_voidSetPinValue+0x184>
    11b2:	2e 81       	ldd	r18, Y+6	; 0x06
    11b4:	3f 81       	ldd	r19, Y+7	; 0x07
    11b6:	21 30       	cpi	r18, 0x01	; 1
    11b8:	31 05       	cpc	r19, r1
    11ba:	09 f0       	breq	.+2      	; 0x11be <MDIO_voidSetPinValue+0x15c>
    11bc:	5f c0       	rjmp	.+190    	; 0x127c <MDIO_voidSetPinValue+0x21a>
        {
            case PIN_HIGH: SET_BIT(PORTC_REG,A_u8Pin);
    11be:	a5 e3       	ldi	r26, 0x35	; 53
    11c0:	b0 e0       	ldi	r27, 0x00	; 0
    11c2:	e5 e3       	ldi	r30, 0x35	; 53
    11c4:	f0 e0       	ldi	r31, 0x00	; 0
    11c6:	80 81       	ld	r24, Z
    11c8:	48 2f       	mov	r20, r24
    11ca:	8a 81       	ldd	r24, Y+2	; 0x02
    11cc:	28 2f       	mov	r18, r24
    11ce:	30 e0       	ldi	r19, 0x00	; 0
    11d0:	81 e0       	ldi	r24, 0x01	; 1
    11d2:	90 e0       	ldi	r25, 0x00	; 0
    11d4:	02 2e       	mov	r0, r18
    11d6:	02 c0       	rjmp	.+4      	; 0x11dc <MDIO_voidSetPinValue+0x17a>
    11d8:	88 0f       	add	r24, r24
    11da:	99 1f       	adc	r25, r25
    11dc:	0a 94       	dec	r0
    11de:	e2 f7       	brpl	.-8      	; 0x11d8 <MDIO_voidSetPinValue+0x176>
    11e0:	84 2b       	or	r24, r20
    11e2:	8c 93       	st	X, r24
    11e4:	4b c0       	rjmp	.+150    	; 0x127c <MDIO_voidSetPinValue+0x21a>
            break;

            case PIN_LOW: CLR_BIT(PORTC_REG,A_u8Pin);
    11e6:	a5 e3       	ldi	r26, 0x35	; 53
    11e8:	b0 e0       	ldi	r27, 0x00	; 0
    11ea:	e5 e3       	ldi	r30, 0x35	; 53
    11ec:	f0 e0       	ldi	r31, 0x00	; 0
    11ee:	80 81       	ld	r24, Z
    11f0:	48 2f       	mov	r20, r24
    11f2:	8a 81       	ldd	r24, Y+2	; 0x02
    11f4:	28 2f       	mov	r18, r24
    11f6:	30 e0       	ldi	r19, 0x00	; 0
    11f8:	81 e0       	ldi	r24, 0x01	; 1
    11fa:	90 e0       	ldi	r25, 0x00	; 0
    11fc:	02 2e       	mov	r0, r18
    11fe:	02 c0       	rjmp	.+4      	; 0x1204 <MDIO_voidSetPinValue+0x1a2>
    1200:	88 0f       	add	r24, r24
    1202:	99 1f       	adc	r25, r25
    1204:	0a 94       	dec	r0
    1206:	e2 f7       	brpl	.-8      	; 0x1200 <MDIO_voidSetPinValue+0x19e>
    1208:	80 95       	com	r24
    120a:	84 23       	and	r24, r20
    120c:	8c 93       	st	X, r24
    120e:	36 c0       	rjmp	.+108    	; 0x127c <MDIO_voidSetPinValue+0x21a>
            break;
        };
        break;

        case PORTD:
        switch (A_u8Value)
    1210:	8b 81       	ldd	r24, Y+3	; 0x03
    1212:	28 2f       	mov	r18, r24
    1214:	30 e0       	ldi	r19, 0x00	; 0
    1216:	3d 83       	std	Y+5, r19	; 0x05
    1218:	2c 83       	std	Y+4, r18	; 0x04
    121a:	8c 81       	ldd	r24, Y+4	; 0x04
    121c:	9d 81       	ldd	r25, Y+5	; 0x05
    121e:	00 97       	sbiw	r24, 0x00	; 0
    1220:	c9 f0       	breq	.+50     	; 0x1254 <MDIO_voidSetPinValue+0x1f2>
    1222:	2c 81       	ldd	r18, Y+4	; 0x04
    1224:	3d 81       	ldd	r19, Y+5	; 0x05
    1226:	21 30       	cpi	r18, 0x01	; 1
    1228:	31 05       	cpc	r19, r1
    122a:	41 f5       	brne	.+80     	; 0x127c <MDIO_voidSetPinValue+0x21a>
        {
            case PIN_HIGH: SET_BIT(PORTD_REG,A_u8Pin);
    122c:	a2 e3       	ldi	r26, 0x32	; 50
    122e:	b0 e0       	ldi	r27, 0x00	; 0
    1230:	e2 e3       	ldi	r30, 0x32	; 50
    1232:	f0 e0       	ldi	r31, 0x00	; 0
    1234:	80 81       	ld	r24, Z
    1236:	48 2f       	mov	r20, r24
    1238:	8a 81       	ldd	r24, Y+2	; 0x02
    123a:	28 2f       	mov	r18, r24
    123c:	30 e0       	ldi	r19, 0x00	; 0
    123e:	81 e0       	ldi	r24, 0x01	; 1
    1240:	90 e0       	ldi	r25, 0x00	; 0
    1242:	02 2e       	mov	r0, r18
    1244:	02 c0       	rjmp	.+4      	; 0x124a <MDIO_voidSetPinValue+0x1e8>
    1246:	88 0f       	add	r24, r24
    1248:	99 1f       	adc	r25, r25
    124a:	0a 94       	dec	r0
    124c:	e2 f7       	brpl	.-8      	; 0x1246 <MDIO_voidSetPinValue+0x1e4>
    124e:	84 2b       	or	r24, r20
    1250:	8c 93       	st	X, r24
    1252:	14 c0       	rjmp	.+40     	; 0x127c <MDIO_voidSetPinValue+0x21a>
            break;

            case PIN_LOW: CLR_BIT(PORTD_REG,A_u8Pin);
    1254:	a2 e3       	ldi	r26, 0x32	; 50
    1256:	b0 e0       	ldi	r27, 0x00	; 0
    1258:	e2 e3       	ldi	r30, 0x32	; 50
    125a:	f0 e0       	ldi	r31, 0x00	; 0
    125c:	80 81       	ld	r24, Z
    125e:	48 2f       	mov	r20, r24
    1260:	8a 81       	ldd	r24, Y+2	; 0x02
    1262:	28 2f       	mov	r18, r24
    1264:	30 e0       	ldi	r19, 0x00	; 0
    1266:	81 e0       	ldi	r24, 0x01	; 1
    1268:	90 e0       	ldi	r25, 0x00	; 0
    126a:	02 2e       	mov	r0, r18
    126c:	02 c0       	rjmp	.+4      	; 0x1272 <MDIO_voidSetPinValue+0x210>
    126e:	88 0f       	add	r24, r24
    1270:	99 1f       	adc	r25, r25
    1272:	0a 94       	dec	r0
    1274:	e2 f7       	brpl	.-8      	; 0x126e <MDIO_voidSetPinValue+0x20c>
    1276:	80 95       	com	r24
    1278:	84 23       	and	r24, r20
    127a:	8c 93       	st	X, r24
            break;
        };
        break;
    }
}
    127c:	2d 96       	adiw	r28, 0x0d	; 13
    127e:	0f b6       	in	r0, 0x3f	; 63
    1280:	f8 94       	cli
    1282:	de bf       	out	0x3e, r29	; 62
    1284:	0f be       	out	0x3f, r0	; 63
    1286:	cd bf       	out	0x3d, r28	; 61
    1288:	cf 91       	pop	r28
    128a:	df 91       	pop	r29
    128c:	08 95       	ret

0000128e <MDIO_voidSetPinDirection>:

void MDIO_voidSetPinDirection(u8 A_u8Port,u8 A_u8Pin, u8 A_u8Value)
{
    128e:	df 93       	push	r29
    1290:	cf 93       	push	r28
    1292:	cd b7       	in	r28, 0x3d	; 61
    1294:	de b7       	in	r29, 0x3e	; 62
    1296:	2d 97       	sbiw	r28, 0x0d	; 13
    1298:	0f b6       	in	r0, 0x3f	; 63
    129a:	f8 94       	cli
    129c:	de bf       	out	0x3e, r29	; 62
    129e:	0f be       	out	0x3f, r0	; 63
    12a0:	cd bf       	out	0x3d, r28	; 61
    12a2:	89 83       	std	Y+1, r24	; 0x01
    12a4:	6a 83       	std	Y+2, r22	; 0x02
    12a6:	4b 83       	std	Y+3, r20	; 0x03
    switch(A_u8Port)
    12a8:	89 81       	ldd	r24, Y+1	; 0x01
    12aa:	28 2f       	mov	r18, r24
    12ac:	30 e0       	ldi	r19, 0x00	; 0
    12ae:	3d 87       	std	Y+13, r19	; 0x0d
    12b0:	2c 87       	std	Y+12, r18	; 0x0c
    12b2:	8c 85       	ldd	r24, Y+12	; 0x0c
    12b4:	9d 85       	ldd	r25, Y+13	; 0x0d
    12b6:	81 30       	cpi	r24, 0x01	; 1
    12b8:	91 05       	cpc	r25, r1
    12ba:	09 f4       	brne	.+2      	; 0x12be <MDIO_voidSetPinDirection+0x30>
    12bc:	4f c0       	rjmp	.+158    	; 0x135c <MDIO_voidSetPinDirection+0xce>
    12be:	2c 85       	ldd	r18, Y+12	; 0x0c
    12c0:	3d 85       	ldd	r19, Y+13	; 0x0d
    12c2:	22 30       	cpi	r18, 0x02	; 2
    12c4:	31 05       	cpc	r19, r1
    12c6:	2c f4       	brge	.+10     	; 0x12d2 <MDIO_voidSetPinDirection+0x44>
    12c8:	8c 85       	ldd	r24, Y+12	; 0x0c
    12ca:	9d 85       	ldd	r25, Y+13	; 0x0d
    12cc:	00 97       	sbiw	r24, 0x00	; 0
    12ce:	71 f0       	breq	.+28     	; 0x12ec <MDIO_voidSetPinDirection+0x5e>
    12d0:	eb c0       	rjmp	.+470    	; 0x14a8 <MDIO_voidSetPinDirection+0x21a>
    12d2:	2c 85       	ldd	r18, Y+12	; 0x0c
    12d4:	3d 85       	ldd	r19, Y+13	; 0x0d
    12d6:	22 30       	cpi	r18, 0x02	; 2
    12d8:	31 05       	cpc	r19, r1
    12da:	09 f4       	brne	.+2      	; 0x12de <MDIO_voidSetPinDirection+0x50>
    12dc:	77 c0       	rjmp	.+238    	; 0x13cc <MDIO_voidSetPinDirection+0x13e>
    12de:	8c 85       	ldd	r24, Y+12	; 0x0c
    12e0:	9d 85       	ldd	r25, Y+13	; 0x0d
    12e2:	83 30       	cpi	r24, 0x03	; 3
    12e4:	91 05       	cpc	r25, r1
    12e6:	09 f4       	brne	.+2      	; 0x12ea <MDIO_voidSetPinDirection+0x5c>
    12e8:	a9 c0       	rjmp	.+338    	; 0x143c <MDIO_voidSetPinDirection+0x1ae>
    12ea:	de c0       	rjmp	.+444    	; 0x14a8 <MDIO_voidSetPinDirection+0x21a>
    {
        case PORTA:
        switch (A_u8Value)
    12ec:	8b 81       	ldd	r24, Y+3	; 0x03
    12ee:	28 2f       	mov	r18, r24
    12f0:	30 e0       	ldi	r19, 0x00	; 0
    12f2:	3b 87       	std	Y+11, r19	; 0x0b
    12f4:	2a 87       	std	Y+10, r18	; 0x0a
    12f6:	8a 85       	ldd	r24, Y+10	; 0x0a
    12f8:	9b 85       	ldd	r25, Y+11	; 0x0b
    12fa:	00 97       	sbiw	r24, 0x00	; 0
    12fc:	d1 f0       	breq	.+52     	; 0x1332 <MDIO_voidSetPinDirection+0xa4>
    12fe:	2a 85       	ldd	r18, Y+10	; 0x0a
    1300:	3b 85       	ldd	r19, Y+11	; 0x0b
    1302:	21 30       	cpi	r18, 0x01	; 1
    1304:	31 05       	cpc	r19, r1
    1306:	09 f0       	breq	.+2      	; 0x130a <MDIO_voidSetPinDirection+0x7c>
    1308:	cf c0       	rjmp	.+414    	; 0x14a8 <MDIO_voidSetPinDirection+0x21a>
        {
            case PIN_OUTPUT: SET_BIT(DDRA_REG,A_u8Pin);
    130a:	aa e3       	ldi	r26, 0x3A	; 58
    130c:	b0 e0       	ldi	r27, 0x00	; 0
    130e:	ea e3       	ldi	r30, 0x3A	; 58
    1310:	f0 e0       	ldi	r31, 0x00	; 0
    1312:	80 81       	ld	r24, Z
    1314:	48 2f       	mov	r20, r24
    1316:	8a 81       	ldd	r24, Y+2	; 0x02
    1318:	28 2f       	mov	r18, r24
    131a:	30 e0       	ldi	r19, 0x00	; 0
    131c:	81 e0       	ldi	r24, 0x01	; 1
    131e:	90 e0       	ldi	r25, 0x00	; 0
    1320:	02 2e       	mov	r0, r18
    1322:	02 c0       	rjmp	.+4      	; 0x1328 <MDIO_voidSetPinDirection+0x9a>
    1324:	88 0f       	add	r24, r24
    1326:	99 1f       	adc	r25, r25
    1328:	0a 94       	dec	r0
    132a:	e2 f7       	brpl	.-8      	; 0x1324 <MDIO_voidSetPinDirection+0x96>
    132c:	84 2b       	or	r24, r20
    132e:	8c 93       	st	X, r24
    1330:	bb c0       	rjmp	.+374    	; 0x14a8 <MDIO_voidSetPinDirection+0x21a>
            break;

            case PIN_INPUT: CLR_BIT(DDRA_REG,A_u8Pin);
    1332:	aa e3       	ldi	r26, 0x3A	; 58
    1334:	b0 e0       	ldi	r27, 0x00	; 0
    1336:	ea e3       	ldi	r30, 0x3A	; 58
    1338:	f0 e0       	ldi	r31, 0x00	; 0
    133a:	80 81       	ld	r24, Z
    133c:	48 2f       	mov	r20, r24
    133e:	8a 81       	ldd	r24, Y+2	; 0x02
    1340:	28 2f       	mov	r18, r24
    1342:	30 e0       	ldi	r19, 0x00	; 0
    1344:	81 e0       	ldi	r24, 0x01	; 1
    1346:	90 e0       	ldi	r25, 0x00	; 0
    1348:	02 2e       	mov	r0, r18
    134a:	02 c0       	rjmp	.+4      	; 0x1350 <MDIO_voidSetPinDirection+0xc2>
    134c:	88 0f       	add	r24, r24
    134e:	99 1f       	adc	r25, r25
    1350:	0a 94       	dec	r0
    1352:	e2 f7       	brpl	.-8      	; 0x134c <MDIO_voidSetPinDirection+0xbe>
    1354:	80 95       	com	r24
    1356:	84 23       	and	r24, r20
    1358:	8c 93       	st	X, r24
    135a:	a6 c0       	rjmp	.+332    	; 0x14a8 <MDIO_voidSetPinDirection+0x21a>
            break;
        };
        break;

        case PORTB:
        switch (A_u8Value)
    135c:	8b 81       	ldd	r24, Y+3	; 0x03
    135e:	28 2f       	mov	r18, r24
    1360:	30 e0       	ldi	r19, 0x00	; 0
    1362:	39 87       	std	Y+9, r19	; 0x09
    1364:	28 87       	std	Y+8, r18	; 0x08
    1366:	88 85       	ldd	r24, Y+8	; 0x08
    1368:	99 85       	ldd	r25, Y+9	; 0x09
    136a:	00 97       	sbiw	r24, 0x00	; 0
    136c:	d1 f0       	breq	.+52     	; 0x13a2 <MDIO_voidSetPinDirection+0x114>
    136e:	28 85       	ldd	r18, Y+8	; 0x08
    1370:	39 85       	ldd	r19, Y+9	; 0x09
    1372:	21 30       	cpi	r18, 0x01	; 1
    1374:	31 05       	cpc	r19, r1
    1376:	09 f0       	breq	.+2      	; 0x137a <MDIO_voidSetPinDirection+0xec>
    1378:	97 c0       	rjmp	.+302    	; 0x14a8 <MDIO_voidSetPinDirection+0x21a>
        {
            case PIN_OUTPUT: SET_BIT(DDRB_REG,A_u8Pin);
    137a:	a7 e3       	ldi	r26, 0x37	; 55
    137c:	b0 e0       	ldi	r27, 0x00	; 0
    137e:	e7 e3       	ldi	r30, 0x37	; 55
    1380:	f0 e0       	ldi	r31, 0x00	; 0
    1382:	80 81       	ld	r24, Z
    1384:	48 2f       	mov	r20, r24
    1386:	8a 81       	ldd	r24, Y+2	; 0x02
    1388:	28 2f       	mov	r18, r24
    138a:	30 e0       	ldi	r19, 0x00	; 0
    138c:	81 e0       	ldi	r24, 0x01	; 1
    138e:	90 e0       	ldi	r25, 0x00	; 0
    1390:	02 2e       	mov	r0, r18
    1392:	02 c0       	rjmp	.+4      	; 0x1398 <MDIO_voidSetPinDirection+0x10a>
    1394:	88 0f       	add	r24, r24
    1396:	99 1f       	adc	r25, r25
    1398:	0a 94       	dec	r0
    139a:	e2 f7       	brpl	.-8      	; 0x1394 <MDIO_voidSetPinDirection+0x106>
    139c:	84 2b       	or	r24, r20
    139e:	8c 93       	st	X, r24
    13a0:	83 c0       	rjmp	.+262    	; 0x14a8 <MDIO_voidSetPinDirection+0x21a>
            break;

            case PIN_INPUT: CLR_BIT(DDRB_REG,A_u8Pin);
    13a2:	a7 e3       	ldi	r26, 0x37	; 55
    13a4:	b0 e0       	ldi	r27, 0x00	; 0
    13a6:	e7 e3       	ldi	r30, 0x37	; 55
    13a8:	f0 e0       	ldi	r31, 0x00	; 0
    13aa:	80 81       	ld	r24, Z
    13ac:	48 2f       	mov	r20, r24
    13ae:	8a 81       	ldd	r24, Y+2	; 0x02
    13b0:	28 2f       	mov	r18, r24
    13b2:	30 e0       	ldi	r19, 0x00	; 0
    13b4:	81 e0       	ldi	r24, 0x01	; 1
    13b6:	90 e0       	ldi	r25, 0x00	; 0
    13b8:	02 2e       	mov	r0, r18
    13ba:	02 c0       	rjmp	.+4      	; 0x13c0 <MDIO_voidSetPinDirection+0x132>
    13bc:	88 0f       	add	r24, r24
    13be:	99 1f       	adc	r25, r25
    13c0:	0a 94       	dec	r0
    13c2:	e2 f7       	brpl	.-8      	; 0x13bc <MDIO_voidSetPinDirection+0x12e>
    13c4:	80 95       	com	r24
    13c6:	84 23       	and	r24, r20
    13c8:	8c 93       	st	X, r24
    13ca:	6e c0       	rjmp	.+220    	; 0x14a8 <MDIO_voidSetPinDirection+0x21a>
            break;
        };
        break;

        case PORTC:
        switch (A_u8Value)
    13cc:	8b 81       	ldd	r24, Y+3	; 0x03
    13ce:	28 2f       	mov	r18, r24
    13d0:	30 e0       	ldi	r19, 0x00	; 0
    13d2:	3f 83       	std	Y+7, r19	; 0x07
    13d4:	2e 83       	std	Y+6, r18	; 0x06
    13d6:	8e 81       	ldd	r24, Y+6	; 0x06
    13d8:	9f 81       	ldd	r25, Y+7	; 0x07
    13da:	00 97       	sbiw	r24, 0x00	; 0
    13dc:	d1 f0       	breq	.+52     	; 0x1412 <MDIO_voidSetPinDirection+0x184>
    13de:	2e 81       	ldd	r18, Y+6	; 0x06
    13e0:	3f 81       	ldd	r19, Y+7	; 0x07
    13e2:	21 30       	cpi	r18, 0x01	; 1
    13e4:	31 05       	cpc	r19, r1
    13e6:	09 f0       	breq	.+2      	; 0x13ea <MDIO_voidSetPinDirection+0x15c>
    13e8:	5f c0       	rjmp	.+190    	; 0x14a8 <MDIO_voidSetPinDirection+0x21a>
        {
            case PIN_OUTPUT: SET_BIT(DDRC_REG,A_u8Pin);
    13ea:	a4 e3       	ldi	r26, 0x34	; 52
    13ec:	b0 e0       	ldi	r27, 0x00	; 0
    13ee:	e4 e3       	ldi	r30, 0x34	; 52
    13f0:	f0 e0       	ldi	r31, 0x00	; 0
    13f2:	80 81       	ld	r24, Z
    13f4:	48 2f       	mov	r20, r24
    13f6:	8a 81       	ldd	r24, Y+2	; 0x02
    13f8:	28 2f       	mov	r18, r24
    13fa:	30 e0       	ldi	r19, 0x00	; 0
    13fc:	81 e0       	ldi	r24, 0x01	; 1
    13fe:	90 e0       	ldi	r25, 0x00	; 0
    1400:	02 2e       	mov	r0, r18
    1402:	02 c0       	rjmp	.+4      	; 0x1408 <MDIO_voidSetPinDirection+0x17a>
    1404:	88 0f       	add	r24, r24
    1406:	99 1f       	adc	r25, r25
    1408:	0a 94       	dec	r0
    140a:	e2 f7       	brpl	.-8      	; 0x1404 <MDIO_voidSetPinDirection+0x176>
    140c:	84 2b       	or	r24, r20
    140e:	8c 93       	st	X, r24
    1410:	4b c0       	rjmp	.+150    	; 0x14a8 <MDIO_voidSetPinDirection+0x21a>
            break;

            case PIN_INPUT: CLR_BIT(DDRC_REG,A_u8Pin);
    1412:	a4 e3       	ldi	r26, 0x34	; 52
    1414:	b0 e0       	ldi	r27, 0x00	; 0
    1416:	e4 e3       	ldi	r30, 0x34	; 52
    1418:	f0 e0       	ldi	r31, 0x00	; 0
    141a:	80 81       	ld	r24, Z
    141c:	48 2f       	mov	r20, r24
    141e:	8a 81       	ldd	r24, Y+2	; 0x02
    1420:	28 2f       	mov	r18, r24
    1422:	30 e0       	ldi	r19, 0x00	; 0
    1424:	81 e0       	ldi	r24, 0x01	; 1
    1426:	90 e0       	ldi	r25, 0x00	; 0
    1428:	02 2e       	mov	r0, r18
    142a:	02 c0       	rjmp	.+4      	; 0x1430 <MDIO_voidSetPinDirection+0x1a2>
    142c:	88 0f       	add	r24, r24
    142e:	99 1f       	adc	r25, r25
    1430:	0a 94       	dec	r0
    1432:	e2 f7       	brpl	.-8      	; 0x142c <MDIO_voidSetPinDirection+0x19e>
    1434:	80 95       	com	r24
    1436:	84 23       	and	r24, r20
    1438:	8c 93       	st	X, r24
    143a:	36 c0       	rjmp	.+108    	; 0x14a8 <MDIO_voidSetPinDirection+0x21a>
            break;
        };
        break;

        case PORTD:
        switch (A_u8Value)
    143c:	8b 81       	ldd	r24, Y+3	; 0x03
    143e:	28 2f       	mov	r18, r24
    1440:	30 e0       	ldi	r19, 0x00	; 0
    1442:	3d 83       	std	Y+5, r19	; 0x05
    1444:	2c 83       	std	Y+4, r18	; 0x04
    1446:	8c 81       	ldd	r24, Y+4	; 0x04
    1448:	9d 81       	ldd	r25, Y+5	; 0x05
    144a:	00 97       	sbiw	r24, 0x00	; 0
    144c:	c9 f0       	breq	.+50     	; 0x1480 <MDIO_voidSetPinDirection+0x1f2>
    144e:	2c 81       	ldd	r18, Y+4	; 0x04
    1450:	3d 81       	ldd	r19, Y+5	; 0x05
    1452:	21 30       	cpi	r18, 0x01	; 1
    1454:	31 05       	cpc	r19, r1
    1456:	41 f5       	brne	.+80     	; 0x14a8 <MDIO_voidSetPinDirection+0x21a>
        {
            case PIN_OUTPUT: SET_BIT(DDRD_REG,A_u8Pin);
    1458:	a1 e3       	ldi	r26, 0x31	; 49
    145a:	b0 e0       	ldi	r27, 0x00	; 0
    145c:	e1 e3       	ldi	r30, 0x31	; 49
    145e:	f0 e0       	ldi	r31, 0x00	; 0
    1460:	80 81       	ld	r24, Z
    1462:	48 2f       	mov	r20, r24
    1464:	8a 81       	ldd	r24, Y+2	; 0x02
    1466:	28 2f       	mov	r18, r24
    1468:	30 e0       	ldi	r19, 0x00	; 0
    146a:	81 e0       	ldi	r24, 0x01	; 1
    146c:	90 e0       	ldi	r25, 0x00	; 0
    146e:	02 2e       	mov	r0, r18
    1470:	02 c0       	rjmp	.+4      	; 0x1476 <MDIO_voidSetPinDirection+0x1e8>
    1472:	88 0f       	add	r24, r24
    1474:	99 1f       	adc	r25, r25
    1476:	0a 94       	dec	r0
    1478:	e2 f7       	brpl	.-8      	; 0x1472 <MDIO_voidSetPinDirection+0x1e4>
    147a:	84 2b       	or	r24, r20
    147c:	8c 93       	st	X, r24
    147e:	14 c0       	rjmp	.+40     	; 0x14a8 <MDIO_voidSetPinDirection+0x21a>
            break;

            case PIN_INPUT: CLR_BIT(DDRD_REG,A_u8Pin);
    1480:	a1 e3       	ldi	r26, 0x31	; 49
    1482:	b0 e0       	ldi	r27, 0x00	; 0
    1484:	e1 e3       	ldi	r30, 0x31	; 49
    1486:	f0 e0       	ldi	r31, 0x00	; 0
    1488:	80 81       	ld	r24, Z
    148a:	48 2f       	mov	r20, r24
    148c:	8a 81       	ldd	r24, Y+2	; 0x02
    148e:	28 2f       	mov	r18, r24
    1490:	30 e0       	ldi	r19, 0x00	; 0
    1492:	81 e0       	ldi	r24, 0x01	; 1
    1494:	90 e0       	ldi	r25, 0x00	; 0
    1496:	02 2e       	mov	r0, r18
    1498:	02 c0       	rjmp	.+4      	; 0x149e <MDIO_voidSetPinDirection+0x210>
    149a:	88 0f       	add	r24, r24
    149c:	99 1f       	adc	r25, r25
    149e:	0a 94       	dec	r0
    14a0:	e2 f7       	brpl	.-8      	; 0x149a <MDIO_voidSetPinDirection+0x20c>
    14a2:	80 95       	com	r24
    14a4:	84 23       	and	r24, r20
    14a6:	8c 93       	st	X, r24
            break;
        };
        break;
    }
}
    14a8:	2d 96       	adiw	r28, 0x0d	; 13
    14aa:	0f b6       	in	r0, 0x3f	; 63
    14ac:	f8 94       	cli
    14ae:	de bf       	out	0x3e, r29	; 62
    14b0:	0f be       	out	0x3f, r0	; 63
    14b2:	cd bf       	out	0x3d, r28	; 61
    14b4:	cf 91       	pop	r28
    14b6:	df 91       	pop	r29
    14b8:	08 95       	ret

000014ba <MDIO_voidSetPortValue>:


void MDIO_voidSetPortValue(u8 A_u8Port,u8 A_u8Value)
{
    14ba:	df 93       	push	r29
    14bc:	cf 93       	push	r28
    14be:	00 d0       	rcall	.+0      	; 0x14c0 <MDIO_voidSetPortValue+0x6>
    14c0:	00 d0       	rcall	.+0      	; 0x14c2 <MDIO_voidSetPortValue+0x8>
    14c2:	cd b7       	in	r28, 0x3d	; 61
    14c4:	de b7       	in	r29, 0x3e	; 62
    14c6:	89 83       	std	Y+1, r24	; 0x01
    14c8:	6a 83       	std	Y+2, r22	; 0x02
    switch(A_u8Port)
    14ca:	89 81       	ldd	r24, Y+1	; 0x01
    14cc:	28 2f       	mov	r18, r24
    14ce:	30 e0       	ldi	r19, 0x00	; 0
    14d0:	3c 83       	std	Y+4, r19	; 0x04
    14d2:	2b 83       	std	Y+3, r18	; 0x03
    14d4:	8b 81       	ldd	r24, Y+3	; 0x03
    14d6:	9c 81       	ldd	r25, Y+4	; 0x04
    14d8:	81 30       	cpi	r24, 0x01	; 1
    14da:	91 05       	cpc	r25, r1
    14dc:	d1 f0       	breq	.+52     	; 0x1512 <MDIO_voidSetPortValue+0x58>
    14de:	2b 81       	ldd	r18, Y+3	; 0x03
    14e0:	3c 81       	ldd	r19, Y+4	; 0x04
    14e2:	22 30       	cpi	r18, 0x02	; 2
    14e4:	31 05       	cpc	r19, r1
    14e6:	2c f4       	brge	.+10     	; 0x14f2 <MDIO_voidSetPortValue+0x38>
    14e8:	8b 81       	ldd	r24, Y+3	; 0x03
    14ea:	9c 81       	ldd	r25, Y+4	; 0x04
    14ec:	00 97       	sbiw	r24, 0x00	; 0
    14ee:	61 f0       	breq	.+24     	; 0x1508 <MDIO_voidSetPortValue+0x4e>
    14f0:	1e c0       	rjmp	.+60     	; 0x152e <MDIO_voidSetPortValue+0x74>
    14f2:	2b 81       	ldd	r18, Y+3	; 0x03
    14f4:	3c 81       	ldd	r19, Y+4	; 0x04
    14f6:	22 30       	cpi	r18, 0x02	; 2
    14f8:	31 05       	cpc	r19, r1
    14fa:	81 f0       	breq	.+32     	; 0x151c <MDIO_voidSetPortValue+0x62>
    14fc:	8b 81       	ldd	r24, Y+3	; 0x03
    14fe:	9c 81       	ldd	r25, Y+4	; 0x04
    1500:	83 30       	cpi	r24, 0x03	; 3
    1502:	91 05       	cpc	r25, r1
    1504:	81 f0       	breq	.+32     	; 0x1526 <MDIO_voidSetPortValue+0x6c>
    1506:	13 c0       	rjmp	.+38     	; 0x152e <MDIO_voidSetPortValue+0x74>
    {
        case PORTA:PORTA_REG=A_u8Value;
    1508:	eb e3       	ldi	r30, 0x3B	; 59
    150a:	f0 e0       	ldi	r31, 0x00	; 0
    150c:	8a 81       	ldd	r24, Y+2	; 0x02
    150e:	80 83       	st	Z, r24
    1510:	0e c0       	rjmp	.+28     	; 0x152e <MDIO_voidSetPortValue+0x74>
        break;
        case PORTB:PORTB_REG=A_u8Value;
    1512:	e8 e3       	ldi	r30, 0x38	; 56
    1514:	f0 e0       	ldi	r31, 0x00	; 0
    1516:	8a 81       	ldd	r24, Y+2	; 0x02
    1518:	80 83       	st	Z, r24
    151a:	09 c0       	rjmp	.+18     	; 0x152e <MDIO_voidSetPortValue+0x74>
        break;
        case PORTC:PORTC_REG=A_u8Value;
    151c:	e5 e3       	ldi	r30, 0x35	; 53
    151e:	f0 e0       	ldi	r31, 0x00	; 0
    1520:	8a 81       	ldd	r24, Y+2	; 0x02
    1522:	80 83       	st	Z, r24
    1524:	04 c0       	rjmp	.+8      	; 0x152e <MDIO_voidSetPortValue+0x74>
        break;
        case PORTD:PORTD_REG=A_u8Value;
    1526:	e2 e3       	ldi	r30, 0x32	; 50
    1528:	f0 e0       	ldi	r31, 0x00	; 0
    152a:	8a 81       	ldd	r24, Y+2	; 0x02
    152c:	80 83       	st	Z, r24
        break;
    }
}
    152e:	0f 90       	pop	r0
    1530:	0f 90       	pop	r0
    1532:	0f 90       	pop	r0
    1534:	0f 90       	pop	r0
    1536:	cf 91       	pop	r28
    1538:	df 91       	pop	r29
    153a:	08 95       	ret

0000153c <MDIO_voidSetPortDirection>:

void MDIO_voidSetPortDirection(u8 A_u8Port,u8 A_u8Value)
{
    153c:	df 93       	push	r29
    153e:	cf 93       	push	r28
    1540:	00 d0       	rcall	.+0      	; 0x1542 <MDIO_voidSetPortDirection+0x6>
    1542:	00 d0       	rcall	.+0      	; 0x1544 <MDIO_voidSetPortDirection+0x8>
    1544:	cd b7       	in	r28, 0x3d	; 61
    1546:	de b7       	in	r29, 0x3e	; 62
    1548:	89 83       	std	Y+1, r24	; 0x01
    154a:	6a 83       	std	Y+2, r22	; 0x02
    switch(A_u8Port)
    154c:	89 81       	ldd	r24, Y+1	; 0x01
    154e:	28 2f       	mov	r18, r24
    1550:	30 e0       	ldi	r19, 0x00	; 0
    1552:	3c 83       	std	Y+4, r19	; 0x04
    1554:	2b 83       	std	Y+3, r18	; 0x03
    1556:	8b 81       	ldd	r24, Y+3	; 0x03
    1558:	9c 81       	ldd	r25, Y+4	; 0x04
    155a:	81 30       	cpi	r24, 0x01	; 1
    155c:	91 05       	cpc	r25, r1
    155e:	d1 f0       	breq	.+52     	; 0x1594 <MDIO_voidSetPortDirection+0x58>
    1560:	2b 81       	ldd	r18, Y+3	; 0x03
    1562:	3c 81       	ldd	r19, Y+4	; 0x04
    1564:	22 30       	cpi	r18, 0x02	; 2
    1566:	31 05       	cpc	r19, r1
    1568:	2c f4       	brge	.+10     	; 0x1574 <MDIO_voidSetPortDirection+0x38>
    156a:	8b 81       	ldd	r24, Y+3	; 0x03
    156c:	9c 81       	ldd	r25, Y+4	; 0x04
    156e:	00 97       	sbiw	r24, 0x00	; 0
    1570:	61 f0       	breq	.+24     	; 0x158a <MDIO_voidSetPortDirection+0x4e>
    1572:	1e c0       	rjmp	.+60     	; 0x15b0 <MDIO_voidSetPortDirection+0x74>
    1574:	2b 81       	ldd	r18, Y+3	; 0x03
    1576:	3c 81       	ldd	r19, Y+4	; 0x04
    1578:	22 30       	cpi	r18, 0x02	; 2
    157a:	31 05       	cpc	r19, r1
    157c:	81 f0       	breq	.+32     	; 0x159e <MDIO_voidSetPortDirection+0x62>
    157e:	8b 81       	ldd	r24, Y+3	; 0x03
    1580:	9c 81       	ldd	r25, Y+4	; 0x04
    1582:	83 30       	cpi	r24, 0x03	; 3
    1584:	91 05       	cpc	r25, r1
    1586:	81 f0       	breq	.+32     	; 0x15a8 <MDIO_voidSetPortDirection+0x6c>
    1588:	13 c0       	rjmp	.+38     	; 0x15b0 <MDIO_voidSetPortDirection+0x74>
    {
        case PORTA:DDRA_REG=A_u8Value;
    158a:	ea e3       	ldi	r30, 0x3A	; 58
    158c:	f0 e0       	ldi	r31, 0x00	; 0
    158e:	8a 81       	ldd	r24, Y+2	; 0x02
    1590:	80 83       	st	Z, r24
    1592:	0e c0       	rjmp	.+28     	; 0x15b0 <MDIO_voidSetPortDirection+0x74>
        break;
        case PORTB:DDRB_REG=A_u8Value;
    1594:	e7 e3       	ldi	r30, 0x37	; 55
    1596:	f0 e0       	ldi	r31, 0x00	; 0
    1598:	8a 81       	ldd	r24, Y+2	; 0x02
    159a:	80 83       	st	Z, r24
    159c:	09 c0       	rjmp	.+18     	; 0x15b0 <MDIO_voidSetPortDirection+0x74>
        break;
        case PORTC:DDRC_REG=A_u8Value;
    159e:	e4 e3       	ldi	r30, 0x34	; 52
    15a0:	f0 e0       	ldi	r31, 0x00	; 0
    15a2:	8a 81       	ldd	r24, Y+2	; 0x02
    15a4:	80 83       	st	Z, r24
    15a6:	04 c0       	rjmp	.+8      	; 0x15b0 <MDIO_voidSetPortDirection+0x74>
        break;
        case PORTD:DDRD_REG=A_u8Value;
    15a8:	e1 e3       	ldi	r30, 0x31	; 49
    15aa:	f0 e0       	ldi	r31, 0x00	; 0
    15ac:	8a 81       	ldd	r24, Y+2	; 0x02
    15ae:	80 83       	st	Z, r24
        break;
    }
    15b0:	0f 90       	pop	r0
    15b2:	0f 90       	pop	r0
    15b4:	0f 90       	pop	r0
    15b6:	0f 90       	pop	r0
    15b8:	cf 91       	pop	r28
    15ba:	df 91       	pop	r29
    15bc:	08 95       	ret

000015be <HKEYPAD_u8GetPressedKey>:
u8 keypadRow[ROWS_NUMBER]=ROW_PINS;
u8 keypadCol[COLS_NUMBER]=COL_PINS;


u8 HKEYPAD_u8GetPressedKey()
{
    15be:	df 93       	push	r29
    15c0:	cf 93       	push	r28
    15c2:	cd b7       	in	r28, 0x3d	; 61
    15c4:	de b7       	in	r29, 0x3e	; 62
    15c6:	62 97       	sbiw	r28, 0x12	; 18
    15c8:	0f b6       	in	r0, 0x3f	; 63
    15ca:	f8 94       	cli
    15cc:	de bf       	out	0x3e, r29	; 62
    15ce:	0f be       	out	0x3f, r0	; 63
    15d0:	cd bf       	out	0x3d, r28	; 61
    u8 local_u8RowCounter,local_u8ColCounter,local_u8Flag=FLAG_DOWN,local_u8PressedKey=KEY_NOT_PRESSED;
    15d2:	18 8a       	std	Y+16, r1	; 0x10
    15d4:	8f ef       	ldi	r24, 0xFF	; 255
    15d6:	8f 87       	std	Y+15, r24	; 0x0f
    
    for(local_u8RowCounter=0;local_u8RowCounter<ROWS_NUMBER;local_u8RowCounter++)
    15d8:	1a 8a       	std	Y+18, r1	; 0x12
    15da:	c9 c0       	rjmp	.+402    	; 0x176e <HKEYPAD_u8GetPressedKey+0x1b0>
    {
        MDIO_voidSetPinValue(KEYPAD_PORT,keypadRow[local_u8RowCounter],PIN_LOW);
    15dc:	8a 89       	ldd	r24, Y+18	; 0x12
    15de:	88 2f       	mov	r24, r24
    15e0:	90 e0       	ldi	r25, 0x00	; 0
    15e2:	fc 01       	movw	r30, r24
    15e4:	e8 58       	subi	r30, 0x88	; 136
    15e6:	ff 4f       	sbci	r31, 0xFF	; 255
    15e8:	90 81       	ld	r25, Z
    15ea:	80 e0       	ldi	r24, 0x00	; 0
    15ec:	69 2f       	mov	r22, r25
    15ee:	40 e0       	ldi	r20, 0x00	; 0
    15f0:	0e 94 31 08 	call	0x1062	; 0x1062 <MDIO_voidSetPinValue>
        for(local_u8ColCounter=0;local_u8ColCounter<COLS_NUMBER;local_u8ColCounter++)
    15f4:	19 8a       	std	Y+17, r1	; 0x11
    15f6:	a5 c0       	rjmp	.+330    	; 0x1742 <HKEYPAD_u8GetPressedKey+0x184>
        {
            if (MDIO_u8GetPinValue(KEYPAD_PORT,keypadCol[local_u8ColCounter])==PIN_LOW)
    15f8:	89 89       	ldd	r24, Y+17	; 0x11
    15fa:	88 2f       	mov	r24, r24
    15fc:	90 e0       	ldi	r25, 0x00	; 0
    15fe:	fc 01       	movw	r30, r24
    1600:	e4 58       	subi	r30, 0x84	; 132
    1602:	ff 4f       	sbci	r31, 0xFF	; 255
    1604:	90 81       	ld	r25, Z
    1606:	80 e0       	ldi	r24, 0x00	; 0
    1608:	69 2f       	mov	r22, r25
    160a:	0e 94 7d 07 	call	0xefa	; 0xefa <MDIO_u8GetPinValue>
    160e:	88 23       	and	r24, r24
    1610:	09 f0       	breq	.+2      	; 0x1614 <HKEYPAD_u8GetPressedKey+0x56>
    1612:	94 c0       	rjmp	.+296    	; 0x173c <HKEYPAD_u8GetPressedKey+0x17e>
    1614:	80 e0       	ldi	r24, 0x00	; 0
    1616:	90 e0       	ldi	r25, 0x00	; 0
    1618:	a6 e1       	ldi	r26, 0x16	; 22
    161a:	b3 e4       	ldi	r27, 0x43	; 67
    161c:	8b 87       	std	Y+11, r24	; 0x0b
    161e:	9c 87       	std	Y+12, r25	; 0x0c
    1620:	ad 87       	std	Y+13, r26	; 0x0d
    1622:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1624:	6b 85       	ldd	r22, Y+11	; 0x0b
    1626:	7c 85       	ldd	r23, Y+12	; 0x0c
    1628:	8d 85       	ldd	r24, Y+13	; 0x0d
    162a:	9e 85       	ldd	r25, Y+14	; 0x0e
    162c:	20 e0       	ldi	r18, 0x00	; 0
    162e:	30 e0       	ldi	r19, 0x00	; 0
    1630:	4a ef       	ldi	r20, 0xFA	; 250
    1632:	54 e4       	ldi	r21, 0x44	; 68
    1634:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1638:	dc 01       	movw	r26, r24
    163a:	cb 01       	movw	r24, r22
    163c:	8f 83       	std	Y+7, r24	; 0x07
    163e:	98 87       	std	Y+8, r25	; 0x08
    1640:	a9 87       	std	Y+9, r26	; 0x09
    1642:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1644:	6f 81       	ldd	r22, Y+7	; 0x07
    1646:	78 85       	ldd	r23, Y+8	; 0x08
    1648:	89 85       	ldd	r24, Y+9	; 0x09
    164a:	9a 85       	ldd	r25, Y+10	; 0x0a
    164c:	20 e0       	ldi	r18, 0x00	; 0
    164e:	30 e0       	ldi	r19, 0x00	; 0
    1650:	40 e8       	ldi	r20, 0x80	; 128
    1652:	5f e3       	ldi	r21, 0x3F	; 63
    1654:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1658:	88 23       	and	r24, r24
    165a:	2c f4       	brge	.+10     	; 0x1666 <HKEYPAD_u8GetPressedKey+0xa8>
		__ticks = 1;
    165c:	81 e0       	ldi	r24, 0x01	; 1
    165e:	90 e0       	ldi	r25, 0x00	; 0
    1660:	9e 83       	std	Y+6, r25	; 0x06
    1662:	8d 83       	std	Y+5, r24	; 0x05
    1664:	3f c0       	rjmp	.+126    	; 0x16e4 <HKEYPAD_u8GetPressedKey+0x126>
	else if (__tmp > 65535)
    1666:	6f 81       	ldd	r22, Y+7	; 0x07
    1668:	78 85       	ldd	r23, Y+8	; 0x08
    166a:	89 85       	ldd	r24, Y+9	; 0x09
    166c:	9a 85       	ldd	r25, Y+10	; 0x0a
    166e:	20 e0       	ldi	r18, 0x00	; 0
    1670:	3f ef       	ldi	r19, 0xFF	; 255
    1672:	4f e7       	ldi	r20, 0x7F	; 127
    1674:	57 e4       	ldi	r21, 0x47	; 71
    1676:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    167a:	18 16       	cp	r1, r24
    167c:	4c f5       	brge	.+82     	; 0x16d0 <HKEYPAD_u8GetPressedKey+0x112>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    167e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1680:	7c 85       	ldd	r23, Y+12	; 0x0c
    1682:	8d 85       	ldd	r24, Y+13	; 0x0d
    1684:	9e 85       	ldd	r25, Y+14	; 0x0e
    1686:	20 e0       	ldi	r18, 0x00	; 0
    1688:	30 e0       	ldi	r19, 0x00	; 0
    168a:	40 e2       	ldi	r20, 0x20	; 32
    168c:	51 e4       	ldi	r21, 0x41	; 65
    168e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1692:	dc 01       	movw	r26, r24
    1694:	cb 01       	movw	r24, r22
    1696:	bc 01       	movw	r22, r24
    1698:	cd 01       	movw	r24, r26
    169a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    169e:	dc 01       	movw	r26, r24
    16a0:	cb 01       	movw	r24, r22
    16a2:	9e 83       	std	Y+6, r25	; 0x06
    16a4:	8d 83       	std	Y+5, r24	; 0x05
    16a6:	0f c0       	rjmp	.+30     	; 0x16c6 <HKEYPAD_u8GetPressedKey+0x108>
    16a8:	88 ec       	ldi	r24, 0xC8	; 200
    16aa:	90 e0       	ldi	r25, 0x00	; 0
    16ac:	9c 83       	std	Y+4, r25	; 0x04
    16ae:	8b 83       	std	Y+3, r24	; 0x03
    16b0:	8b 81       	ldd	r24, Y+3	; 0x03
    16b2:	9c 81       	ldd	r25, Y+4	; 0x04
    16b4:	01 97       	sbiw	r24, 0x01	; 1
    16b6:	f1 f7       	brne	.-4      	; 0x16b4 <HKEYPAD_u8GetPressedKey+0xf6>
    16b8:	9c 83       	std	Y+4, r25	; 0x04
    16ba:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    16bc:	8d 81       	ldd	r24, Y+5	; 0x05
    16be:	9e 81       	ldd	r25, Y+6	; 0x06
    16c0:	01 97       	sbiw	r24, 0x01	; 1
    16c2:	9e 83       	std	Y+6, r25	; 0x06
    16c4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    16c6:	8d 81       	ldd	r24, Y+5	; 0x05
    16c8:	9e 81       	ldd	r25, Y+6	; 0x06
    16ca:	00 97       	sbiw	r24, 0x00	; 0
    16cc:	69 f7       	brne	.-38     	; 0x16a8 <HKEYPAD_u8GetPressedKey+0xea>
    16ce:	14 c0       	rjmp	.+40     	; 0x16f8 <HKEYPAD_u8GetPressedKey+0x13a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    16d0:	6f 81       	ldd	r22, Y+7	; 0x07
    16d2:	78 85       	ldd	r23, Y+8	; 0x08
    16d4:	89 85       	ldd	r24, Y+9	; 0x09
    16d6:	9a 85       	ldd	r25, Y+10	; 0x0a
    16d8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16dc:	dc 01       	movw	r26, r24
    16de:	cb 01       	movw	r24, r22
    16e0:	9e 83       	std	Y+6, r25	; 0x06
    16e2:	8d 83       	std	Y+5, r24	; 0x05
    16e4:	8d 81       	ldd	r24, Y+5	; 0x05
    16e6:	9e 81       	ldd	r25, Y+6	; 0x06
    16e8:	9a 83       	std	Y+2, r25	; 0x02
    16ea:	89 83       	std	Y+1, r24	; 0x01
    16ec:	89 81       	ldd	r24, Y+1	; 0x01
    16ee:	9a 81       	ldd	r25, Y+2	; 0x02
    16f0:	01 97       	sbiw	r24, 0x01	; 1
    16f2:	f1 f7       	brne	.-4      	; 0x16f0 <HKEYPAD_u8GetPressedKey+0x132>
    16f4:	9a 83       	std	Y+2, r25	; 0x02
    16f6:	89 83       	std	Y+1, r24	; 0x01
            {
                //to avoid "debounce effect"
                _delay_ms(DEBOUNCING_DELAY);
                local_u8Flag=FLAG_UP;
    16f8:	81 e0       	ldi	r24, 0x01	; 1
    16fa:	88 8b       	std	Y+16, r24	; 0x10
                //to make sure it will not print the character more than once if the user still press the button
                while(MDIO_u8GetPinValue(KEYPAD_PORT,keypadCol[local_u8ColCounter])==PIN_LOW);
    16fc:	89 89       	ldd	r24, Y+17	; 0x11
    16fe:	88 2f       	mov	r24, r24
    1700:	90 e0       	ldi	r25, 0x00	; 0
    1702:	fc 01       	movw	r30, r24
    1704:	e4 58       	subi	r30, 0x84	; 132
    1706:	ff 4f       	sbci	r31, 0xFF	; 255
    1708:	90 81       	ld	r25, Z
    170a:	80 e0       	ldi	r24, 0x00	; 0
    170c:	69 2f       	mov	r22, r25
    170e:	0e 94 7d 07 	call	0xefa	; 0xefa <MDIO_u8GetPinValue>
    1712:	88 23       	and	r24, r24
    1714:	99 f3       	breq	.-26     	; 0x16fc <HKEYPAD_u8GetPressedKey+0x13e>
                local_u8PressedKey=KeypadArr[local_u8RowCounter][local_u8ColCounter];
    1716:	8a 89       	ldd	r24, Y+18	; 0x12
    1718:	48 2f       	mov	r20, r24
    171a:	50 e0       	ldi	r21, 0x00	; 0
    171c:	89 89       	ldd	r24, Y+17	; 0x11
    171e:	28 2f       	mov	r18, r24
    1720:	30 e0       	ldi	r19, 0x00	; 0
    1722:	ca 01       	movw	r24, r20
    1724:	88 0f       	add	r24, r24
    1726:	99 1f       	adc	r25, r25
    1728:	88 0f       	add	r24, r24
    172a:	99 1f       	adc	r25, r25
    172c:	82 0f       	add	r24, r18
    172e:	93 1f       	adc	r25, r19
    1730:	fc 01       	movw	r30, r24
    1732:	e8 59       	subi	r30, 0x98	; 152
    1734:	ff 4f       	sbci	r31, 0xFF	; 255
    1736:	80 81       	ld	r24, Z
    1738:	8f 87       	std	Y+15, r24	; 0x0f
    173a:	07 c0       	rjmp	.+14     	; 0x174a <HKEYPAD_u8GetPressedKey+0x18c>
    u8 local_u8RowCounter,local_u8ColCounter,local_u8Flag=FLAG_DOWN,local_u8PressedKey=KEY_NOT_PRESSED;
    
    for(local_u8RowCounter=0;local_u8RowCounter<ROWS_NUMBER;local_u8RowCounter++)
    {
        MDIO_voidSetPinValue(KEYPAD_PORT,keypadRow[local_u8RowCounter],PIN_LOW);
        for(local_u8ColCounter=0;local_u8ColCounter<COLS_NUMBER;local_u8ColCounter++)
    173c:	89 89       	ldd	r24, Y+17	; 0x11
    173e:	8f 5f       	subi	r24, 0xFF	; 255
    1740:	89 8b       	std	Y+17, r24	; 0x11
    1742:	89 89       	ldd	r24, Y+17	; 0x11
    1744:	84 30       	cpi	r24, 0x04	; 4
    1746:	08 f4       	brcc	.+2      	; 0x174a <HKEYPAD_u8GetPressedKey+0x18c>
    1748:	57 cf       	rjmp	.-338    	; 0x15f8 <HKEYPAD_u8GetPressedKey+0x3a>
                while(MDIO_u8GetPinValue(KEYPAD_PORT,keypadCol[local_u8ColCounter])==PIN_LOW);
                local_u8PressedKey=KeypadArr[local_u8RowCounter][local_u8ColCounter];
                break;
            }
        }
        MDIO_voidSetPinValue(KEYPAD_PORT,keypadRow[local_u8RowCounter],PIN_HIGH);
    174a:	8a 89       	ldd	r24, Y+18	; 0x12
    174c:	88 2f       	mov	r24, r24
    174e:	90 e0       	ldi	r25, 0x00	; 0
    1750:	fc 01       	movw	r30, r24
    1752:	e8 58       	subi	r30, 0x88	; 136
    1754:	ff 4f       	sbci	r31, 0xFF	; 255
    1756:	90 81       	ld	r25, Z
    1758:	80 e0       	ldi	r24, 0x00	; 0
    175a:	69 2f       	mov	r22, r25
    175c:	41 e0       	ldi	r20, 0x01	; 1
    175e:	0e 94 31 08 	call	0x1062	; 0x1062 <MDIO_voidSetPinValue>
        if(local_u8Flag)
    1762:	88 89       	ldd	r24, Y+16	; 0x10
    1764:	88 23       	and	r24, r24
    1766:	39 f4       	brne	.+14     	; 0x1776 <HKEYPAD_u8GetPressedKey+0x1b8>

u8 HKEYPAD_u8GetPressedKey()
{
    u8 local_u8RowCounter,local_u8ColCounter,local_u8Flag=FLAG_DOWN,local_u8PressedKey=KEY_NOT_PRESSED;
    
    for(local_u8RowCounter=0;local_u8RowCounter<ROWS_NUMBER;local_u8RowCounter++)
    1768:	8a 89       	ldd	r24, Y+18	; 0x12
    176a:	8f 5f       	subi	r24, 0xFF	; 255
    176c:	8a 8b       	std	Y+18, r24	; 0x12
    176e:	8a 89       	ldd	r24, Y+18	; 0x12
    1770:	84 30       	cpi	r24, 0x04	; 4
    1772:	08 f4       	brcc	.+2      	; 0x1776 <HKEYPAD_u8GetPressedKey+0x1b8>
    1774:	33 cf       	rjmp	.-410    	; 0x15dc <HKEYPAD_u8GetPressedKey+0x1e>
        if(local_u8Flag)
        {
            break;
        }
    }
    return local_u8PressedKey;
    1776:	8f 85       	ldd	r24, Y+15	; 0x0f
}
    1778:	62 96       	adiw	r28, 0x12	; 18
    177a:	0f b6       	in	r0, 0x3f	; 63
    177c:	f8 94       	cli
    177e:	de bf       	out	0x3e, r29	; 62
    1780:	0f be       	out	0x3f, r0	; 63
    1782:	cd bf       	out	0x3d, r28	; 61
    1784:	cf 91       	pop	r28
    1786:	df 91       	pop	r29
    1788:	08 95       	ret

0000178a <HLCD4_voidSendCommand>:


static u8 global_u8Init=0;

void HLCD4_voidSendCommand(u8 A_u8Command)
{
    178a:	df 93       	push	r29
    178c:	cf 93       	push	r28
    178e:	cd b7       	in	r28, 0x3d	; 61
    1790:	de b7       	in	r29, 0x3e	; 62
    1792:	ab 97       	sbiw	r28, 0x2b	; 43
    1794:	0f b6       	in	r0, 0x3f	; 63
    1796:	f8 94       	cli
    1798:	de bf       	out	0x3e, r29	; 62
    179a:	0f be       	out	0x3f, r0	; 63
    179c:	cd bf       	out	0x3d, r28	; 61
    179e:	8b a7       	std	Y+43, r24	; 0x2b
    //RS=0 RW=0
    MDIO_voidSetPinValue(LCD_CONTROL_PORT,RS_PIN,PIN_LOW);
    17a0:	82 e0       	ldi	r24, 0x02	; 2
    17a2:	60 e0       	ldi	r22, 0x00	; 0
    17a4:	40 e0       	ldi	r20, 0x00	; 0
    17a6:	0e 94 31 08 	call	0x1062	; 0x1062 <MDIO_voidSetPinValue>
    MDIO_voidSetPinValue(LCD_CONTROL_PORT,RW_PIN,PIN_LOW);
    17aa:	82 e0       	ldi	r24, 0x02	; 2
    17ac:	61 e0       	ldi	r22, 0x01	; 1
    17ae:	40 e0       	ldi	r20, 0x00	; 0
    17b0:	0e 94 31 08 	call	0x1062	; 0x1062 <MDIO_voidSetPinValue>

    //send UPPER Bits (B7 to B4)
    MDIO_voidSetPortValue(LCD_DATA_PORT,A_u8Command);
    17b4:	83 e0       	ldi	r24, 0x03	; 3
    17b6:	6b a5       	ldd	r22, Y+43	; 0x2b
    17b8:	0e 94 5d 0a 	call	0x14ba	; 0x14ba <MDIO_voidSetPortValue>


    //pulse HIGH to LOW to ENABLE PIN
    MDIO_voidSetPinValue(LCD_CONTROL_PORT,E_PIN,PIN_HIGH);
    17bc:	82 e0       	ldi	r24, 0x02	; 2
    17be:	62 e0       	ldi	r22, 0x02	; 2
    17c0:	41 e0       	ldi	r20, 0x01	; 1
    17c2:	0e 94 31 08 	call	0x1062	; 0x1062 <MDIO_voidSetPinValue>
    17c6:	80 e0       	ldi	r24, 0x00	; 0
    17c8:	90 e0       	ldi	r25, 0x00	; 0
    17ca:	a0 e8       	ldi	r26, 0x80	; 128
    17cc:	bf e3       	ldi	r27, 0x3F	; 63
    17ce:	8f a3       	std	Y+39, r24	; 0x27
    17d0:	98 a7       	std	Y+40, r25	; 0x28
    17d2:	a9 a7       	std	Y+41, r26	; 0x29
    17d4:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    17d6:	6f a1       	ldd	r22, Y+39	; 0x27
    17d8:	78 a5       	ldd	r23, Y+40	; 0x28
    17da:	89 a5       	ldd	r24, Y+41	; 0x29
    17dc:	9a a5       	ldd	r25, Y+42	; 0x2a
    17de:	20 e0       	ldi	r18, 0x00	; 0
    17e0:	30 e0       	ldi	r19, 0x00	; 0
    17e2:	4a ef       	ldi	r20, 0xFA	; 250
    17e4:	54 e4       	ldi	r21, 0x44	; 68
    17e6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17ea:	dc 01       	movw	r26, r24
    17ec:	cb 01       	movw	r24, r22
    17ee:	8b a3       	std	Y+35, r24	; 0x23
    17f0:	9c a3       	std	Y+36, r25	; 0x24
    17f2:	ad a3       	std	Y+37, r26	; 0x25
    17f4:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    17f6:	6b a1       	ldd	r22, Y+35	; 0x23
    17f8:	7c a1       	ldd	r23, Y+36	; 0x24
    17fa:	8d a1       	ldd	r24, Y+37	; 0x25
    17fc:	9e a1       	ldd	r25, Y+38	; 0x26
    17fe:	20 e0       	ldi	r18, 0x00	; 0
    1800:	30 e0       	ldi	r19, 0x00	; 0
    1802:	40 e8       	ldi	r20, 0x80	; 128
    1804:	5f e3       	ldi	r21, 0x3F	; 63
    1806:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    180a:	88 23       	and	r24, r24
    180c:	2c f4       	brge	.+10     	; 0x1818 <HLCD4_voidSendCommand+0x8e>
		__ticks = 1;
    180e:	81 e0       	ldi	r24, 0x01	; 1
    1810:	90 e0       	ldi	r25, 0x00	; 0
    1812:	9a a3       	std	Y+34, r25	; 0x22
    1814:	89 a3       	std	Y+33, r24	; 0x21
    1816:	3f c0       	rjmp	.+126    	; 0x1896 <HLCD4_voidSendCommand+0x10c>
	else if (__tmp > 65535)
    1818:	6b a1       	ldd	r22, Y+35	; 0x23
    181a:	7c a1       	ldd	r23, Y+36	; 0x24
    181c:	8d a1       	ldd	r24, Y+37	; 0x25
    181e:	9e a1       	ldd	r25, Y+38	; 0x26
    1820:	20 e0       	ldi	r18, 0x00	; 0
    1822:	3f ef       	ldi	r19, 0xFF	; 255
    1824:	4f e7       	ldi	r20, 0x7F	; 127
    1826:	57 e4       	ldi	r21, 0x47	; 71
    1828:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    182c:	18 16       	cp	r1, r24
    182e:	4c f5       	brge	.+82     	; 0x1882 <HLCD4_voidSendCommand+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1830:	6f a1       	ldd	r22, Y+39	; 0x27
    1832:	78 a5       	ldd	r23, Y+40	; 0x28
    1834:	89 a5       	ldd	r24, Y+41	; 0x29
    1836:	9a a5       	ldd	r25, Y+42	; 0x2a
    1838:	20 e0       	ldi	r18, 0x00	; 0
    183a:	30 e0       	ldi	r19, 0x00	; 0
    183c:	40 e2       	ldi	r20, 0x20	; 32
    183e:	51 e4       	ldi	r21, 0x41	; 65
    1840:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1844:	dc 01       	movw	r26, r24
    1846:	cb 01       	movw	r24, r22
    1848:	bc 01       	movw	r22, r24
    184a:	cd 01       	movw	r24, r26
    184c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1850:	dc 01       	movw	r26, r24
    1852:	cb 01       	movw	r24, r22
    1854:	9a a3       	std	Y+34, r25	; 0x22
    1856:	89 a3       	std	Y+33, r24	; 0x21
    1858:	0f c0       	rjmp	.+30     	; 0x1878 <HLCD4_voidSendCommand+0xee>
    185a:	88 ec       	ldi	r24, 0xC8	; 200
    185c:	90 e0       	ldi	r25, 0x00	; 0
    185e:	98 a3       	std	Y+32, r25	; 0x20
    1860:	8f 8f       	std	Y+31, r24	; 0x1f
    1862:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1864:	98 a1       	ldd	r25, Y+32	; 0x20
    1866:	01 97       	sbiw	r24, 0x01	; 1
    1868:	f1 f7       	brne	.-4      	; 0x1866 <HLCD4_voidSendCommand+0xdc>
    186a:	98 a3       	std	Y+32, r25	; 0x20
    186c:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    186e:	89 a1       	ldd	r24, Y+33	; 0x21
    1870:	9a a1       	ldd	r25, Y+34	; 0x22
    1872:	01 97       	sbiw	r24, 0x01	; 1
    1874:	9a a3       	std	Y+34, r25	; 0x22
    1876:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1878:	89 a1       	ldd	r24, Y+33	; 0x21
    187a:	9a a1       	ldd	r25, Y+34	; 0x22
    187c:	00 97       	sbiw	r24, 0x00	; 0
    187e:	69 f7       	brne	.-38     	; 0x185a <HLCD4_voidSendCommand+0xd0>
    1880:	14 c0       	rjmp	.+40     	; 0x18aa <HLCD4_voidSendCommand+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1882:	6b a1       	ldd	r22, Y+35	; 0x23
    1884:	7c a1       	ldd	r23, Y+36	; 0x24
    1886:	8d a1       	ldd	r24, Y+37	; 0x25
    1888:	9e a1       	ldd	r25, Y+38	; 0x26
    188a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    188e:	dc 01       	movw	r26, r24
    1890:	cb 01       	movw	r24, r22
    1892:	9a a3       	std	Y+34, r25	; 0x22
    1894:	89 a3       	std	Y+33, r24	; 0x21
    1896:	89 a1       	ldd	r24, Y+33	; 0x21
    1898:	9a a1       	ldd	r25, Y+34	; 0x22
    189a:	9e 8f       	std	Y+30, r25	; 0x1e
    189c:	8d 8f       	std	Y+29, r24	; 0x1d
    189e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    18a0:	9e 8d       	ldd	r25, Y+30	; 0x1e
    18a2:	01 97       	sbiw	r24, 0x01	; 1
    18a4:	f1 f7       	brne	.-4      	; 0x18a2 <HLCD4_voidSendCommand+0x118>
    18a6:	9e 8f       	std	Y+30, r25	; 0x1e
    18a8:	8d 8f       	std	Y+29, r24	; 0x1d
    _delay_ms(1);
    MDIO_voidSetPinValue(LCD_CONTROL_PORT,E_PIN,PIN_LOW);
    18aa:	82 e0       	ldi	r24, 0x02	; 2
    18ac:	62 e0       	ldi	r22, 0x02	; 2
    18ae:	40 e0       	ldi	r20, 0x00	; 0
    18b0:	0e 94 31 08 	call	0x1062	; 0x1062 <MDIO_voidSetPinValue>

    if(global_u8Init)
    18b4:	80 91 94 00 	lds	r24, 0x0094
    18b8:	88 23       	and	r24, r24
    18ba:	09 f4       	brne	.+2      	; 0x18be <HLCD4_voidSendCommand+0x134>
    18bc:	84 c0       	rjmp	.+264    	; 0x19c6 <HLCD4_voidSendCommand+0x23c>
    {

        //send LOWR Bits (B3 to B0)
        MDIO_voidSetPortValue(LCD_DATA_PORT,A_u8Command<<4);
    18be:	8b a5       	ldd	r24, Y+43	; 0x2b
    18c0:	98 2f       	mov	r25, r24
    18c2:	92 95       	swap	r25
    18c4:	90 7f       	andi	r25, 0xF0	; 240
    18c6:	83 e0       	ldi	r24, 0x03	; 3
    18c8:	69 2f       	mov	r22, r25
    18ca:	0e 94 5d 0a 	call	0x14ba	; 0x14ba <MDIO_voidSetPortValue>

        //pulse HIGH to LOW to ENABLE PIN
        MDIO_voidSetPinValue(LCD_CONTROL_PORT,E_PIN,PIN_HIGH);
    18ce:	82 e0       	ldi	r24, 0x02	; 2
    18d0:	62 e0       	ldi	r22, 0x02	; 2
    18d2:	41 e0       	ldi	r20, 0x01	; 1
    18d4:	0e 94 31 08 	call	0x1062	; 0x1062 <MDIO_voidSetPinValue>
    18d8:	80 e0       	ldi	r24, 0x00	; 0
    18da:	90 e0       	ldi	r25, 0x00	; 0
    18dc:	a0 e8       	ldi	r26, 0x80	; 128
    18de:	bf e3       	ldi	r27, 0x3F	; 63
    18e0:	89 8f       	std	Y+25, r24	; 0x19
    18e2:	9a 8f       	std	Y+26, r25	; 0x1a
    18e4:	ab 8f       	std	Y+27, r26	; 0x1b
    18e6:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    18e8:	69 8d       	ldd	r22, Y+25	; 0x19
    18ea:	7a 8d       	ldd	r23, Y+26	; 0x1a
    18ec:	8b 8d       	ldd	r24, Y+27	; 0x1b
    18ee:	9c 8d       	ldd	r25, Y+28	; 0x1c
    18f0:	20 e0       	ldi	r18, 0x00	; 0
    18f2:	30 e0       	ldi	r19, 0x00	; 0
    18f4:	4a ef       	ldi	r20, 0xFA	; 250
    18f6:	54 e4       	ldi	r21, 0x44	; 68
    18f8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18fc:	dc 01       	movw	r26, r24
    18fe:	cb 01       	movw	r24, r22
    1900:	8d 8b       	std	Y+21, r24	; 0x15
    1902:	9e 8b       	std	Y+22, r25	; 0x16
    1904:	af 8b       	std	Y+23, r26	; 0x17
    1906:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1908:	6d 89       	ldd	r22, Y+21	; 0x15
    190a:	7e 89       	ldd	r23, Y+22	; 0x16
    190c:	8f 89       	ldd	r24, Y+23	; 0x17
    190e:	98 8d       	ldd	r25, Y+24	; 0x18
    1910:	20 e0       	ldi	r18, 0x00	; 0
    1912:	30 e0       	ldi	r19, 0x00	; 0
    1914:	40 e8       	ldi	r20, 0x80	; 128
    1916:	5f e3       	ldi	r21, 0x3F	; 63
    1918:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    191c:	88 23       	and	r24, r24
    191e:	2c f4       	brge	.+10     	; 0x192a <HLCD4_voidSendCommand+0x1a0>
		__ticks = 1;
    1920:	81 e0       	ldi	r24, 0x01	; 1
    1922:	90 e0       	ldi	r25, 0x00	; 0
    1924:	9c 8b       	std	Y+20, r25	; 0x14
    1926:	8b 8b       	std	Y+19, r24	; 0x13
    1928:	3f c0       	rjmp	.+126    	; 0x19a8 <HLCD4_voidSendCommand+0x21e>
	else if (__tmp > 65535)
    192a:	6d 89       	ldd	r22, Y+21	; 0x15
    192c:	7e 89       	ldd	r23, Y+22	; 0x16
    192e:	8f 89       	ldd	r24, Y+23	; 0x17
    1930:	98 8d       	ldd	r25, Y+24	; 0x18
    1932:	20 e0       	ldi	r18, 0x00	; 0
    1934:	3f ef       	ldi	r19, 0xFF	; 255
    1936:	4f e7       	ldi	r20, 0x7F	; 127
    1938:	57 e4       	ldi	r21, 0x47	; 71
    193a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    193e:	18 16       	cp	r1, r24
    1940:	4c f5       	brge	.+82     	; 0x1994 <HLCD4_voidSendCommand+0x20a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1942:	69 8d       	ldd	r22, Y+25	; 0x19
    1944:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1946:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1948:	9c 8d       	ldd	r25, Y+28	; 0x1c
    194a:	20 e0       	ldi	r18, 0x00	; 0
    194c:	30 e0       	ldi	r19, 0x00	; 0
    194e:	40 e2       	ldi	r20, 0x20	; 32
    1950:	51 e4       	ldi	r21, 0x41	; 65
    1952:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1956:	dc 01       	movw	r26, r24
    1958:	cb 01       	movw	r24, r22
    195a:	bc 01       	movw	r22, r24
    195c:	cd 01       	movw	r24, r26
    195e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1962:	dc 01       	movw	r26, r24
    1964:	cb 01       	movw	r24, r22
    1966:	9c 8b       	std	Y+20, r25	; 0x14
    1968:	8b 8b       	std	Y+19, r24	; 0x13
    196a:	0f c0       	rjmp	.+30     	; 0x198a <HLCD4_voidSendCommand+0x200>
    196c:	88 ec       	ldi	r24, 0xC8	; 200
    196e:	90 e0       	ldi	r25, 0x00	; 0
    1970:	9a 8b       	std	Y+18, r25	; 0x12
    1972:	89 8b       	std	Y+17, r24	; 0x11
    1974:	89 89       	ldd	r24, Y+17	; 0x11
    1976:	9a 89       	ldd	r25, Y+18	; 0x12
    1978:	01 97       	sbiw	r24, 0x01	; 1
    197a:	f1 f7       	brne	.-4      	; 0x1978 <HLCD4_voidSendCommand+0x1ee>
    197c:	9a 8b       	std	Y+18, r25	; 0x12
    197e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1980:	8b 89       	ldd	r24, Y+19	; 0x13
    1982:	9c 89       	ldd	r25, Y+20	; 0x14
    1984:	01 97       	sbiw	r24, 0x01	; 1
    1986:	9c 8b       	std	Y+20, r25	; 0x14
    1988:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    198a:	8b 89       	ldd	r24, Y+19	; 0x13
    198c:	9c 89       	ldd	r25, Y+20	; 0x14
    198e:	00 97       	sbiw	r24, 0x00	; 0
    1990:	69 f7       	brne	.-38     	; 0x196c <HLCD4_voidSendCommand+0x1e2>
    1992:	14 c0       	rjmp	.+40     	; 0x19bc <HLCD4_voidSendCommand+0x232>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1994:	6d 89       	ldd	r22, Y+21	; 0x15
    1996:	7e 89       	ldd	r23, Y+22	; 0x16
    1998:	8f 89       	ldd	r24, Y+23	; 0x17
    199a:	98 8d       	ldd	r25, Y+24	; 0x18
    199c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19a0:	dc 01       	movw	r26, r24
    19a2:	cb 01       	movw	r24, r22
    19a4:	9c 8b       	std	Y+20, r25	; 0x14
    19a6:	8b 8b       	std	Y+19, r24	; 0x13
    19a8:	8b 89       	ldd	r24, Y+19	; 0x13
    19aa:	9c 89       	ldd	r25, Y+20	; 0x14
    19ac:	98 8b       	std	Y+16, r25	; 0x10
    19ae:	8f 87       	std	Y+15, r24	; 0x0f
    19b0:	8f 85       	ldd	r24, Y+15	; 0x0f
    19b2:	98 89       	ldd	r25, Y+16	; 0x10
    19b4:	01 97       	sbiw	r24, 0x01	; 1
    19b6:	f1 f7       	brne	.-4      	; 0x19b4 <HLCD4_voidSendCommand+0x22a>
    19b8:	98 8b       	std	Y+16, r25	; 0x10
    19ba:	8f 87       	std	Y+15, r24	; 0x0f
        _delay_ms(1);
        MDIO_voidSetPinValue(LCD_CONTROL_PORT,E_PIN,PIN_LOW);
    19bc:	82 e0       	ldi	r24, 0x02	; 2
    19be:	62 e0       	ldi	r22, 0x02	; 2
    19c0:	40 e0       	ldi	r20, 0x00	; 0
    19c2:	0e 94 31 08 	call	0x1062	; 0x1062 <MDIO_voidSetPinValue>
    19c6:	80 e0       	ldi	r24, 0x00	; 0
    19c8:	90 e0       	ldi	r25, 0x00	; 0
    19ca:	a0 e0       	ldi	r26, 0x00	; 0
    19cc:	b0 e4       	ldi	r27, 0x40	; 64
    19ce:	8b 87       	std	Y+11, r24	; 0x0b
    19d0:	9c 87       	std	Y+12, r25	; 0x0c
    19d2:	ad 87       	std	Y+13, r26	; 0x0d
    19d4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    19d6:	6b 85       	ldd	r22, Y+11	; 0x0b
    19d8:	7c 85       	ldd	r23, Y+12	; 0x0c
    19da:	8d 85       	ldd	r24, Y+13	; 0x0d
    19dc:	9e 85       	ldd	r25, Y+14	; 0x0e
    19de:	20 e0       	ldi	r18, 0x00	; 0
    19e0:	30 e0       	ldi	r19, 0x00	; 0
    19e2:	4a ef       	ldi	r20, 0xFA	; 250
    19e4:	54 e4       	ldi	r21, 0x44	; 68
    19e6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19ea:	dc 01       	movw	r26, r24
    19ec:	cb 01       	movw	r24, r22
    19ee:	8f 83       	std	Y+7, r24	; 0x07
    19f0:	98 87       	std	Y+8, r25	; 0x08
    19f2:	a9 87       	std	Y+9, r26	; 0x09
    19f4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    19f6:	6f 81       	ldd	r22, Y+7	; 0x07
    19f8:	78 85       	ldd	r23, Y+8	; 0x08
    19fa:	89 85       	ldd	r24, Y+9	; 0x09
    19fc:	9a 85       	ldd	r25, Y+10	; 0x0a
    19fe:	20 e0       	ldi	r18, 0x00	; 0
    1a00:	30 e0       	ldi	r19, 0x00	; 0
    1a02:	40 e8       	ldi	r20, 0x80	; 128
    1a04:	5f e3       	ldi	r21, 0x3F	; 63
    1a06:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1a0a:	88 23       	and	r24, r24
    1a0c:	2c f4       	brge	.+10     	; 0x1a18 <HLCD4_voidSendCommand+0x28e>
		__ticks = 1;
    1a0e:	81 e0       	ldi	r24, 0x01	; 1
    1a10:	90 e0       	ldi	r25, 0x00	; 0
    1a12:	9e 83       	std	Y+6, r25	; 0x06
    1a14:	8d 83       	std	Y+5, r24	; 0x05
    1a16:	3f c0       	rjmp	.+126    	; 0x1a96 <HLCD4_voidSendCommand+0x30c>
	else if (__tmp > 65535)
    1a18:	6f 81       	ldd	r22, Y+7	; 0x07
    1a1a:	78 85       	ldd	r23, Y+8	; 0x08
    1a1c:	89 85       	ldd	r24, Y+9	; 0x09
    1a1e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a20:	20 e0       	ldi	r18, 0x00	; 0
    1a22:	3f ef       	ldi	r19, 0xFF	; 255
    1a24:	4f e7       	ldi	r20, 0x7F	; 127
    1a26:	57 e4       	ldi	r21, 0x47	; 71
    1a28:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1a2c:	18 16       	cp	r1, r24
    1a2e:	4c f5       	brge	.+82     	; 0x1a82 <HLCD4_voidSendCommand+0x2f8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a30:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a32:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a34:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a36:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a38:	20 e0       	ldi	r18, 0x00	; 0
    1a3a:	30 e0       	ldi	r19, 0x00	; 0
    1a3c:	40 e2       	ldi	r20, 0x20	; 32
    1a3e:	51 e4       	ldi	r21, 0x41	; 65
    1a40:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a44:	dc 01       	movw	r26, r24
    1a46:	cb 01       	movw	r24, r22
    1a48:	bc 01       	movw	r22, r24
    1a4a:	cd 01       	movw	r24, r26
    1a4c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a50:	dc 01       	movw	r26, r24
    1a52:	cb 01       	movw	r24, r22
    1a54:	9e 83       	std	Y+6, r25	; 0x06
    1a56:	8d 83       	std	Y+5, r24	; 0x05
    1a58:	0f c0       	rjmp	.+30     	; 0x1a78 <HLCD4_voidSendCommand+0x2ee>
    1a5a:	88 ec       	ldi	r24, 0xC8	; 200
    1a5c:	90 e0       	ldi	r25, 0x00	; 0
    1a5e:	9c 83       	std	Y+4, r25	; 0x04
    1a60:	8b 83       	std	Y+3, r24	; 0x03
    1a62:	8b 81       	ldd	r24, Y+3	; 0x03
    1a64:	9c 81       	ldd	r25, Y+4	; 0x04
    1a66:	01 97       	sbiw	r24, 0x01	; 1
    1a68:	f1 f7       	brne	.-4      	; 0x1a66 <HLCD4_voidSendCommand+0x2dc>
    1a6a:	9c 83       	std	Y+4, r25	; 0x04
    1a6c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a6e:	8d 81       	ldd	r24, Y+5	; 0x05
    1a70:	9e 81       	ldd	r25, Y+6	; 0x06
    1a72:	01 97       	sbiw	r24, 0x01	; 1
    1a74:	9e 83       	std	Y+6, r25	; 0x06
    1a76:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a78:	8d 81       	ldd	r24, Y+5	; 0x05
    1a7a:	9e 81       	ldd	r25, Y+6	; 0x06
    1a7c:	00 97       	sbiw	r24, 0x00	; 0
    1a7e:	69 f7       	brne	.-38     	; 0x1a5a <HLCD4_voidSendCommand+0x2d0>
    1a80:	14 c0       	rjmp	.+40     	; 0x1aaa <HLCD4_voidSendCommand+0x320>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a82:	6f 81       	ldd	r22, Y+7	; 0x07
    1a84:	78 85       	ldd	r23, Y+8	; 0x08
    1a86:	89 85       	ldd	r24, Y+9	; 0x09
    1a88:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a8a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a8e:	dc 01       	movw	r26, r24
    1a90:	cb 01       	movw	r24, r22
    1a92:	9e 83       	std	Y+6, r25	; 0x06
    1a94:	8d 83       	std	Y+5, r24	; 0x05
    1a96:	8d 81       	ldd	r24, Y+5	; 0x05
    1a98:	9e 81       	ldd	r25, Y+6	; 0x06
    1a9a:	9a 83       	std	Y+2, r25	; 0x02
    1a9c:	89 83       	std	Y+1, r24	; 0x01
    1a9e:	89 81       	ldd	r24, Y+1	; 0x01
    1aa0:	9a 81       	ldd	r25, Y+2	; 0x02
    1aa2:	01 97       	sbiw	r24, 0x01	; 1
    1aa4:	f1 f7       	brne	.-4      	; 0x1aa2 <HLCD4_voidSendCommand+0x318>
    1aa6:	9a 83       	std	Y+2, r25	; 0x02
    1aa8:	89 83       	std	Y+1, r24	; 0x01
    }
    _delay_ms(2);
}
    1aaa:	ab 96       	adiw	r28, 0x2b	; 43
    1aac:	0f b6       	in	r0, 0x3f	; 63
    1aae:	f8 94       	cli
    1ab0:	de bf       	out	0x3e, r29	; 62
    1ab2:	0f be       	out	0x3f, r0	; 63
    1ab4:	cd bf       	out	0x3d, r28	; 61
    1ab6:	cf 91       	pop	r28
    1ab8:	df 91       	pop	r29
    1aba:	08 95       	ret

00001abc <HLCD4_voidSendData>:


void HLCD4_voidSendData(u8 A_u8Data)
{
    1abc:	df 93       	push	r29
    1abe:	cf 93       	push	r28
    1ac0:	cd b7       	in	r28, 0x3d	; 61
    1ac2:	de b7       	in	r29, 0x3e	; 62
    1ac4:	ab 97       	sbiw	r28, 0x2b	; 43
    1ac6:	0f b6       	in	r0, 0x3f	; 63
    1ac8:	f8 94       	cli
    1aca:	de bf       	out	0x3e, r29	; 62
    1acc:	0f be       	out	0x3f, r0	; 63
    1ace:	cd bf       	out	0x3d, r28	; 61
    1ad0:	8b a7       	std	Y+43, r24	; 0x2b
    //RS=1 RW=0
    MDIO_voidSetPinValue(LCD_CONTROL_PORT,RS_PIN,PIN_HIGH);
    1ad2:	82 e0       	ldi	r24, 0x02	; 2
    1ad4:	60 e0       	ldi	r22, 0x00	; 0
    1ad6:	41 e0       	ldi	r20, 0x01	; 1
    1ad8:	0e 94 31 08 	call	0x1062	; 0x1062 <MDIO_voidSetPinValue>
    MDIO_voidSetPinValue(LCD_CONTROL_PORT,RW_PIN,PIN_LOW);
    1adc:	82 e0       	ldi	r24, 0x02	; 2
    1ade:	61 e0       	ldi	r22, 0x01	; 1
    1ae0:	40 e0       	ldi	r20, 0x00	; 0
    1ae2:	0e 94 31 08 	call	0x1062	; 0x1062 <MDIO_voidSetPinValue>

	MDIO_voidSetPortValue(LCD_DATA_PORT,A_u8Data);
    1ae6:	83 e0       	ldi	r24, 0x03	; 3
    1ae8:	6b a5       	ldd	r22, Y+43	; 0x2b
    1aea:	0e 94 5d 0a 	call	0x14ba	; 0x14ba <MDIO_voidSetPortValue>


    MDIO_voidSetPinValue(LCD_CONTROL_PORT,E_PIN,PIN_HIGH);
    1aee:	82 e0       	ldi	r24, 0x02	; 2
    1af0:	62 e0       	ldi	r22, 0x02	; 2
    1af2:	41 e0       	ldi	r20, 0x01	; 1
    1af4:	0e 94 31 08 	call	0x1062	; 0x1062 <MDIO_voidSetPinValue>
    1af8:	80 e0       	ldi	r24, 0x00	; 0
    1afa:	90 e0       	ldi	r25, 0x00	; 0
    1afc:	a0 e8       	ldi	r26, 0x80	; 128
    1afe:	bf e3       	ldi	r27, 0x3F	; 63
    1b00:	8f a3       	std	Y+39, r24	; 0x27
    1b02:	98 a7       	std	Y+40, r25	; 0x28
    1b04:	a9 a7       	std	Y+41, r26	; 0x29
    1b06:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b08:	6f a1       	ldd	r22, Y+39	; 0x27
    1b0a:	78 a5       	ldd	r23, Y+40	; 0x28
    1b0c:	89 a5       	ldd	r24, Y+41	; 0x29
    1b0e:	9a a5       	ldd	r25, Y+42	; 0x2a
    1b10:	20 e0       	ldi	r18, 0x00	; 0
    1b12:	30 e0       	ldi	r19, 0x00	; 0
    1b14:	4a ef       	ldi	r20, 0xFA	; 250
    1b16:	54 e4       	ldi	r21, 0x44	; 68
    1b18:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b1c:	dc 01       	movw	r26, r24
    1b1e:	cb 01       	movw	r24, r22
    1b20:	8b a3       	std	Y+35, r24	; 0x23
    1b22:	9c a3       	std	Y+36, r25	; 0x24
    1b24:	ad a3       	std	Y+37, r26	; 0x25
    1b26:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1b28:	6b a1       	ldd	r22, Y+35	; 0x23
    1b2a:	7c a1       	ldd	r23, Y+36	; 0x24
    1b2c:	8d a1       	ldd	r24, Y+37	; 0x25
    1b2e:	9e a1       	ldd	r25, Y+38	; 0x26
    1b30:	20 e0       	ldi	r18, 0x00	; 0
    1b32:	30 e0       	ldi	r19, 0x00	; 0
    1b34:	40 e8       	ldi	r20, 0x80	; 128
    1b36:	5f e3       	ldi	r21, 0x3F	; 63
    1b38:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1b3c:	88 23       	and	r24, r24
    1b3e:	2c f4       	brge	.+10     	; 0x1b4a <HLCD4_voidSendData+0x8e>
		__ticks = 1;
    1b40:	81 e0       	ldi	r24, 0x01	; 1
    1b42:	90 e0       	ldi	r25, 0x00	; 0
    1b44:	9a a3       	std	Y+34, r25	; 0x22
    1b46:	89 a3       	std	Y+33, r24	; 0x21
    1b48:	3f c0       	rjmp	.+126    	; 0x1bc8 <HLCD4_voidSendData+0x10c>
	else if (__tmp > 65535)
    1b4a:	6b a1       	ldd	r22, Y+35	; 0x23
    1b4c:	7c a1       	ldd	r23, Y+36	; 0x24
    1b4e:	8d a1       	ldd	r24, Y+37	; 0x25
    1b50:	9e a1       	ldd	r25, Y+38	; 0x26
    1b52:	20 e0       	ldi	r18, 0x00	; 0
    1b54:	3f ef       	ldi	r19, 0xFF	; 255
    1b56:	4f e7       	ldi	r20, 0x7F	; 127
    1b58:	57 e4       	ldi	r21, 0x47	; 71
    1b5a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1b5e:	18 16       	cp	r1, r24
    1b60:	4c f5       	brge	.+82     	; 0x1bb4 <HLCD4_voidSendData+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b62:	6f a1       	ldd	r22, Y+39	; 0x27
    1b64:	78 a5       	ldd	r23, Y+40	; 0x28
    1b66:	89 a5       	ldd	r24, Y+41	; 0x29
    1b68:	9a a5       	ldd	r25, Y+42	; 0x2a
    1b6a:	20 e0       	ldi	r18, 0x00	; 0
    1b6c:	30 e0       	ldi	r19, 0x00	; 0
    1b6e:	40 e2       	ldi	r20, 0x20	; 32
    1b70:	51 e4       	ldi	r21, 0x41	; 65
    1b72:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b76:	dc 01       	movw	r26, r24
    1b78:	cb 01       	movw	r24, r22
    1b7a:	bc 01       	movw	r22, r24
    1b7c:	cd 01       	movw	r24, r26
    1b7e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b82:	dc 01       	movw	r26, r24
    1b84:	cb 01       	movw	r24, r22
    1b86:	9a a3       	std	Y+34, r25	; 0x22
    1b88:	89 a3       	std	Y+33, r24	; 0x21
    1b8a:	0f c0       	rjmp	.+30     	; 0x1baa <HLCD4_voidSendData+0xee>
    1b8c:	88 ec       	ldi	r24, 0xC8	; 200
    1b8e:	90 e0       	ldi	r25, 0x00	; 0
    1b90:	98 a3       	std	Y+32, r25	; 0x20
    1b92:	8f 8f       	std	Y+31, r24	; 0x1f
    1b94:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1b96:	98 a1       	ldd	r25, Y+32	; 0x20
    1b98:	01 97       	sbiw	r24, 0x01	; 1
    1b9a:	f1 f7       	brne	.-4      	; 0x1b98 <HLCD4_voidSendData+0xdc>
    1b9c:	98 a3       	std	Y+32, r25	; 0x20
    1b9e:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ba0:	89 a1       	ldd	r24, Y+33	; 0x21
    1ba2:	9a a1       	ldd	r25, Y+34	; 0x22
    1ba4:	01 97       	sbiw	r24, 0x01	; 1
    1ba6:	9a a3       	std	Y+34, r25	; 0x22
    1ba8:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1baa:	89 a1       	ldd	r24, Y+33	; 0x21
    1bac:	9a a1       	ldd	r25, Y+34	; 0x22
    1bae:	00 97       	sbiw	r24, 0x00	; 0
    1bb0:	69 f7       	brne	.-38     	; 0x1b8c <HLCD4_voidSendData+0xd0>
    1bb2:	14 c0       	rjmp	.+40     	; 0x1bdc <HLCD4_voidSendData+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1bb4:	6b a1       	ldd	r22, Y+35	; 0x23
    1bb6:	7c a1       	ldd	r23, Y+36	; 0x24
    1bb8:	8d a1       	ldd	r24, Y+37	; 0x25
    1bba:	9e a1       	ldd	r25, Y+38	; 0x26
    1bbc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bc0:	dc 01       	movw	r26, r24
    1bc2:	cb 01       	movw	r24, r22
    1bc4:	9a a3       	std	Y+34, r25	; 0x22
    1bc6:	89 a3       	std	Y+33, r24	; 0x21
    1bc8:	89 a1       	ldd	r24, Y+33	; 0x21
    1bca:	9a a1       	ldd	r25, Y+34	; 0x22
    1bcc:	9e 8f       	std	Y+30, r25	; 0x1e
    1bce:	8d 8f       	std	Y+29, r24	; 0x1d
    1bd0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1bd2:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1bd4:	01 97       	sbiw	r24, 0x01	; 1
    1bd6:	f1 f7       	brne	.-4      	; 0x1bd4 <HLCD4_voidSendData+0x118>
    1bd8:	9e 8f       	std	Y+30, r25	; 0x1e
    1bda:	8d 8f       	std	Y+29, r24	; 0x1d
    _delay_ms(1);
    MDIO_voidSetPinValue(LCD_CONTROL_PORT,E_PIN,PIN_LOW);
    1bdc:	82 e0       	ldi	r24, 0x02	; 2
    1bde:	62 e0       	ldi	r22, 0x02	; 2
    1be0:	40 e0       	ldi	r20, 0x00	; 0
    1be2:	0e 94 31 08 	call	0x1062	; 0x1062 <MDIO_voidSetPinValue>

    MDIO_voidSetPortValue(LCD_DATA_PORT,A_u8Data<<4);
    1be6:	8b a5       	ldd	r24, Y+43	; 0x2b
    1be8:	98 2f       	mov	r25, r24
    1bea:	92 95       	swap	r25
    1bec:	90 7f       	andi	r25, 0xF0	; 240
    1bee:	83 e0       	ldi	r24, 0x03	; 3
    1bf0:	69 2f       	mov	r22, r25
    1bf2:	0e 94 5d 0a 	call	0x14ba	; 0x14ba <MDIO_voidSetPortValue>


    MDIO_voidSetPinValue(LCD_CONTROL_PORT,E_PIN,PIN_HIGH);
    1bf6:	82 e0       	ldi	r24, 0x02	; 2
    1bf8:	62 e0       	ldi	r22, 0x02	; 2
    1bfa:	41 e0       	ldi	r20, 0x01	; 1
    1bfc:	0e 94 31 08 	call	0x1062	; 0x1062 <MDIO_voidSetPinValue>
    1c00:	80 e0       	ldi	r24, 0x00	; 0
    1c02:	90 e0       	ldi	r25, 0x00	; 0
    1c04:	a0 e8       	ldi	r26, 0x80	; 128
    1c06:	bf e3       	ldi	r27, 0x3F	; 63
    1c08:	89 8f       	std	Y+25, r24	; 0x19
    1c0a:	9a 8f       	std	Y+26, r25	; 0x1a
    1c0c:	ab 8f       	std	Y+27, r26	; 0x1b
    1c0e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c10:	69 8d       	ldd	r22, Y+25	; 0x19
    1c12:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1c14:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1c16:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1c18:	20 e0       	ldi	r18, 0x00	; 0
    1c1a:	30 e0       	ldi	r19, 0x00	; 0
    1c1c:	4a ef       	ldi	r20, 0xFA	; 250
    1c1e:	54 e4       	ldi	r21, 0x44	; 68
    1c20:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c24:	dc 01       	movw	r26, r24
    1c26:	cb 01       	movw	r24, r22
    1c28:	8d 8b       	std	Y+21, r24	; 0x15
    1c2a:	9e 8b       	std	Y+22, r25	; 0x16
    1c2c:	af 8b       	std	Y+23, r26	; 0x17
    1c2e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1c30:	6d 89       	ldd	r22, Y+21	; 0x15
    1c32:	7e 89       	ldd	r23, Y+22	; 0x16
    1c34:	8f 89       	ldd	r24, Y+23	; 0x17
    1c36:	98 8d       	ldd	r25, Y+24	; 0x18
    1c38:	20 e0       	ldi	r18, 0x00	; 0
    1c3a:	30 e0       	ldi	r19, 0x00	; 0
    1c3c:	40 e8       	ldi	r20, 0x80	; 128
    1c3e:	5f e3       	ldi	r21, 0x3F	; 63
    1c40:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1c44:	88 23       	and	r24, r24
    1c46:	2c f4       	brge	.+10     	; 0x1c52 <HLCD4_voidSendData+0x196>
		__ticks = 1;
    1c48:	81 e0       	ldi	r24, 0x01	; 1
    1c4a:	90 e0       	ldi	r25, 0x00	; 0
    1c4c:	9c 8b       	std	Y+20, r25	; 0x14
    1c4e:	8b 8b       	std	Y+19, r24	; 0x13
    1c50:	3f c0       	rjmp	.+126    	; 0x1cd0 <HLCD4_voidSendData+0x214>
	else if (__tmp > 65535)
    1c52:	6d 89       	ldd	r22, Y+21	; 0x15
    1c54:	7e 89       	ldd	r23, Y+22	; 0x16
    1c56:	8f 89       	ldd	r24, Y+23	; 0x17
    1c58:	98 8d       	ldd	r25, Y+24	; 0x18
    1c5a:	20 e0       	ldi	r18, 0x00	; 0
    1c5c:	3f ef       	ldi	r19, 0xFF	; 255
    1c5e:	4f e7       	ldi	r20, 0x7F	; 127
    1c60:	57 e4       	ldi	r21, 0x47	; 71
    1c62:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1c66:	18 16       	cp	r1, r24
    1c68:	4c f5       	brge	.+82     	; 0x1cbc <HLCD4_voidSendData+0x200>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c6a:	69 8d       	ldd	r22, Y+25	; 0x19
    1c6c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1c6e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1c70:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1c72:	20 e0       	ldi	r18, 0x00	; 0
    1c74:	30 e0       	ldi	r19, 0x00	; 0
    1c76:	40 e2       	ldi	r20, 0x20	; 32
    1c78:	51 e4       	ldi	r21, 0x41	; 65
    1c7a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c7e:	dc 01       	movw	r26, r24
    1c80:	cb 01       	movw	r24, r22
    1c82:	bc 01       	movw	r22, r24
    1c84:	cd 01       	movw	r24, r26
    1c86:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c8a:	dc 01       	movw	r26, r24
    1c8c:	cb 01       	movw	r24, r22
    1c8e:	9c 8b       	std	Y+20, r25	; 0x14
    1c90:	8b 8b       	std	Y+19, r24	; 0x13
    1c92:	0f c0       	rjmp	.+30     	; 0x1cb2 <HLCD4_voidSendData+0x1f6>
    1c94:	88 ec       	ldi	r24, 0xC8	; 200
    1c96:	90 e0       	ldi	r25, 0x00	; 0
    1c98:	9a 8b       	std	Y+18, r25	; 0x12
    1c9a:	89 8b       	std	Y+17, r24	; 0x11
    1c9c:	89 89       	ldd	r24, Y+17	; 0x11
    1c9e:	9a 89       	ldd	r25, Y+18	; 0x12
    1ca0:	01 97       	sbiw	r24, 0x01	; 1
    1ca2:	f1 f7       	brne	.-4      	; 0x1ca0 <HLCD4_voidSendData+0x1e4>
    1ca4:	9a 8b       	std	Y+18, r25	; 0x12
    1ca6:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ca8:	8b 89       	ldd	r24, Y+19	; 0x13
    1caa:	9c 89       	ldd	r25, Y+20	; 0x14
    1cac:	01 97       	sbiw	r24, 0x01	; 1
    1cae:	9c 8b       	std	Y+20, r25	; 0x14
    1cb0:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1cb2:	8b 89       	ldd	r24, Y+19	; 0x13
    1cb4:	9c 89       	ldd	r25, Y+20	; 0x14
    1cb6:	00 97       	sbiw	r24, 0x00	; 0
    1cb8:	69 f7       	brne	.-38     	; 0x1c94 <HLCD4_voidSendData+0x1d8>
    1cba:	14 c0       	rjmp	.+40     	; 0x1ce4 <HLCD4_voidSendData+0x228>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1cbc:	6d 89       	ldd	r22, Y+21	; 0x15
    1cbe:	7e 89       	ldd	r23, Y+22	; 0x16
    1cc0:	8f 89       	ldd	r24, Y+23	; 0x17
    1cc2:	98 8d       	ldd	r25, Y+24	; 0x18
    1cc4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1cc8:	dc 01       	movw	r26, r24
    1cca:	cb 01       	movw	r24, r22
    1ccc:	9c 8b       	std	Y+20, r25	; 0x14
    1cce:	8b 8b       	std	Y+19, r24	; 0x13
    1cd0:	8b 89       	ldd	r24, Y+19	; 0x13
    1cd2:	9c 89       	ldd	r25, Y+20	; 0x14
    1cd4:	98 8b       	std	Y+16, r25	; 0x10
    1cd6:	8f 87       	std	Y+15, r24	; 0x0f
    1cd8:	8f 85       	ldd	r24, Y+15	; 0x0f
    1cda:	98 89       	ldd	r25, Y+16	; 0x10
    1cdc:	01 97       	sbiw	r24, 0x01	; 1
    1cde:	f1 f7       	brne	.-4      	; 0x1cdc <HLCD4_voidSendData+0x220>
    1ce0:	98 8b       	std	Y+16, r25	; 0x10
    1ce2:	8f 87       	std	Y+15, r24	; 0x0f
    _delay_ms(1);
    MDIO_voidSetPinValue(LCD_CONTROL_PORT,E_PIN,PIN_LOW);
    1ce4:	82 e0       	ldi	r24, 0x02	; 2
    1ce6:	62 e0       	ldi	r22, 0x02	; 2
    1ce8:	40 e0       	ldi	r20, 0x00	; 0
    1cea:	0e 94 31 08 	call	0x1062	; 0x1062 <MDIO_voidSetPinValue>
    1cee:	80 e0       	ldi	r24, 0x00	; 0
    1cf0:	90 e0       	ldi	r25, 0x00	; 0
    1cf2:	a0 e0       	ldi	r26, 0x00	; 0
    1cf4:	b0 e4       	ldi	r27, 0x40	; 64
    1cf6:	8b 87       	std	Y+11, r24	; 0x0b
    1cf8:	9c 87       	std	Y+12, r25	; 0x0c
    1cfa:	ad 87       	std	Y+13, r26	; 0x0d
    1cfc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1cfe:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d00:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d02:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d04:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d06:	20 e0       	ldi	r18, 0x00	; 0
    1d08:	30 e0       	ldi	r19, 0x00	; 0
    1d0a:	4a ef       	ldi	r20, 0xFA	; 250
    1d0c:	54 e4       	ldi	r21, 0x44	; 68
    1d0e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d12:	dc 01       	movw	r26, r24
    1d14:	cb 01       	movw	r24, r22
    1d16:	8f 83       	std	Y+7, r24	; 0x07
    1d18:	98 87       	std	Y+8, r25	; 0x08
    1d1a:	a9 87       	std	Y+9, r26	; 0x09
    1d1c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1d1e:	6f 81       	ldd	r22, Y+7	; 0x07
    1d20:	78 85       	ldd	r23, Y+8	; 0x08
    1d22:	89 85       	ldd	r24, Y+9	; 0x09
    1d24:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d26:	20 e0       	ldi	r18, 0x00	; 0
    1d28:	30 e0       	ldi	r19, 0x00	; 0
    1d2a:	40 e8       	ldi	r20, 0x80	; 128
    1d2c:	5f e3       	ldi	r21, 0x3F	; 63
    1d2e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1d32:	88 23       	and	r24, r24
    1d34:	2c f4       	brge	.+10     	; 0x1d40 <HLCD4_voidSendData+0x284>
		__ticks = 1;
    1d36:	81 e0       	ldi	r24, 0x01	; 1
    1d38:	90 e0       	ldi	r25, 0x00	; 0
    1d3a:	9e 83       	std	Y+6, r25	; 0x06
    1d3c:	8d 83       	std	Y+5, r24	; 0x05
    1d3e:	3f c0       	rjmp	.+126    	; 0x1dbe <HLCD4_voidSendData+0x302>
	else if (__tmp > 65535)
    1d40:	6f 81       	ldd	r22, Y+7	; 0x07
    1d42:	78 85       	ldd	r23, Y+8	; 0x08
    1d44:	89 85       	ldd	r24, Y+9	; 0x09
    1d46:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d48:	20 e0       	ldi	r18, 0x00	; 0
    1d4a:	3f ef       	ldi	r19, 0xFF	; 255
    1d4c:	4f e7       	ldi	r20, 0x7F	; 127
    1d4e:	57 e4       	ldi	r21, 0x47	; 71
    1d50:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1d54:	18 16       	cp	r1, r24
    1d56:	4c f5       	brge	.+82     	; 0x1daa <HLCD4_voidSendData+0x2ee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d58:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d5a:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d5c:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d5e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d60:	20 e0       	ldi	r18, 0x00	; 0
    1d62:	30 e0       	ldi	r19, 0x00	; 0
    1d64:	40 e2       	ldi	r20, 0x20	; 32
    1d66:	51 e4       	ldi	r21, 0x41	; 65
    1d68:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d6c:	dc 01       	movw	r26, r24
    1d6e:	cb 01       	movw	r24, r22
    1d70:	bc 01       	movw	r22, r24
    1d72:	cd 01       	movw	r24, r26
    1d74:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d78:	dc 01       	movw	r26, r24
    1d7a:	cb 01       	movw	r24, r22
    1d7c:	9e 83       	std	Y+6, r25	; 0x06
    1d7e:	8d 83       	std	Y+5, r24	; 0x05
    1d80:	0f c0       	rjmp	.+30     	; 0x1da0 <HLCD4_voidSendData+0x2e4>
    1d82:	88 ec       	ldi	r24, 0xC8	; 200
    1d84:	90 e0       	ldi	r25, 0x00	; 0
    1d86:	9c 83       	std	Y+4, r25	; 0x04
    1d88:	8b 83       	std	Y+3, r24	; 0x03
    1d8a:	8b 81       	ldd	r24, Y+3	; 0x03
    1d8c:	9c 81       	ldd	r25, Y+4	; 0x04
    1d8e:	01 97       	sbiw	r24, 0x01	; 1
    1d90:	f1 f7       	brne	.-4      	; 0x1d8e <HLCD4_voidSendData+0x2d2>
    1d92:	9c 83       	std	Y+4, r25	; 0x04
    1d94:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d96:	8d 81       	ldd	r24, Y+5	; 0x05
    1d98:	9e 81       	ldd	r25, Y+6	; 0x06
    1d9a:	01 97       	sbiw	r24, 0x01	; 1
    1d9c:	9e 83       	std	Y+6, r25	; 0x06
    1d9e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1da0:	8d 81       	ldd	r24, Y+5	; 0x05
    1da2:	9e 81       	ldd	r25, Y+6	; 0x06
    1da4:	00 97       	sbiw	r24, 0x00	; 0
    1da6:	69 f7       	brne	.-38     	; 0x1d82 <HLCD4_voidSendData+0x2c6>
    1da8:	14 c0       	rjmp	.+40     	; 0x1dd2 <HLCD4_voidSendData+0x316>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1daa:	6f 81       	ldd	r22, Y+7	; 0x07
    1dac:	78 85       	ldd	r23, Y+8	; 0x08
    1dae:	89 85       	ldd	r24, Y+9	; 0x09
    1db0:	9a 85       	ldd	r25, Y+10	; 0x0a
    1db2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1db6:	dc 01       	movw	r26, r24
    1db8:	cb 01       	movw	r24, r22
    1dba:	9e 83       	std	Y+6, r25	; 0x06
    1dbc:	8d 83       	std	Y+5, r24	; 0x05
    1dbe:	8d 81       	ldd	r24, Y+5	; 0x05
    1dc0:	9e 81       	ldd	r25, Y+6	; 0x06
    1dc2:	9a 83       	std	Y+2, r25	; 0x02
    1dc4:	89 83       	std	Y+1, r24	; 0x01
    1dc6:	89 81       	ldd	r24, Y+1	; 0x01
    1dc8:	9a 81       	ldd	r25, Y+2	; 0x02
    1dca:	01 97       	sbiw	r24, 0x01	; 1
    1dcc:	f1 f7       	brne	.-4      	; 0x1dca <HLCD4_voidSendData+0x30e>
    1dce:	9a 83       	std	Y+2, r25	; 0x02
    1dd0:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(2);
}
    1dd2:	ab 96       	adiw	r28, 0x2b	; 43
    1dd4:	0f b6       	in	r0, 0x3f	; 63
    1dd6:	f8 94       	cli
    1dd8:	de bf       	out	0x3e, r29	; 62
    1dda:	0f be       	out	0x3f, r0	; 63
    1ddc:	cd bf       	out	0x3d, r28	; 61
    1dde:	cf 91       	pop	r28
    1de0:	df 91       	pop	r29
    1de2:	08 95       	ret

00001de4 <HLCD4_voidInit>:



void HLCD4_voidInit()
{
    1de4:	0f 93       	push	r16
    1de6:	1f 93       	push	r17
    1de8:	df 93       	push	r29
    1dea:	cf 93       	push	r28
    1dec:	cd b7       	in	r28, 0x3d	; 61
    1dee:	de b7       	in	r29, 0x3e	; 62
    1df0:	cc 54       	subi	r28, 0x4C	; 76
    1df2:	d0 40       	sbci	r29, 0x00	; 0
    1df4:	0f b6       	in	r0, 0x3f	; 63
    1df6:	f8 94       	cli
    1df8:	de bf       	out	0x3e, r29	; 62
    1dfa:	0f be       	out	0x3f, r0	; 63
    1dfc:	cd bf       	out	0x3d, r28	; 61
    1dfe:	fe 01       	movw	r30, r28
    1e00:	e7 5b       	subi	r30, 0xB7	; 183
    1e02:	ff 4f       	sbci	r31, 0xFF	; 255
    1e04:	80 e0       	ldi	r24, 0x00	; 0
    1e06:	90 e0       	ldi	r25, 0x00	; 0
    1e08:	a0 ef       	ldi	r26, 0xF0	; 240
    1e0a:	b1 e4       	ldi	r27, 0x41	; 65
    1e0c:	80 83       	st	Z, r24
    1e0e:	91 83       	std	Z+1, r25	; 0x01
    1e10:	a2 83       	std	Z+2, r26	; 0x02
    1e12:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e14:	8e 01       	movw	r16, r28
    1e16:	0b 5b       	subi	r16, 0xBB	; 187
    1e18:	1f 4f       	sbci	r17, 0xFF	; 255
    1e1a:	fe 01       	movw	r30, r28
    1e1c:	e7 5b       	subi	r30, 0xB7	; 183
    1e1e:	ff 4f       	sbci	r31, 0xFF	; 255
    1e20:	60 81       	ld	r22, Z
    1e22:	71 81       	ldd	r23, Z+1	; 0x01
    1e24:	82 81       	ldd	r24, Z+2	; 0x02
    1e26:	93 81       	ldd	r25, Z+3	; 0x03
    1e28:	20 e0       	ldi	r18, 0x00	; 0
    1e2a:	30 e0       	ldi	r19, 0x00	; 0
    1e2c:	4a ef       	ldi	r20, 0xFA	; 250
    1e2e:	54 e4       	ldi	r21, 0x44	; 68
    1e30:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e34:	dc 01       	movw	r26, r24
    1e36:	cb 01       	movw	r24, r22
    1e38:	f8 01       	movw	r30, r16
    1e3a:	80 83       	st	Z, r24
    1e3c:	91 83       	std	Z+1, r25	; 0x01
    1e3e:	a2 83       	std	Z+2, r26	; 0x02
    1e40:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1e42:	fe 01       	movw	r30, r28
    1e44:	eb 5b       	subi	r30, 0xBB	; 187
    1e46:	ff 4f       	sbci	r31, 0xFF	; 255
    1e48:	60 81       	ld	r22, Z
    1e4a:	71 81       	ldd	r23, Z+1	; 0x01
    1e4c:	82 81       	ldd	r24, Z+2	; 0x02
    1e4e:	93 81       	ldd	r25, Z+3	; 0x03
    1e50:	20 e0       	ldi	r18, 0x00	; 0
    1e52:	30 e0       	ldi	r19, 0x00	; 0
    1e54:	40 e8       	ldi	r20, 0x80	; 128
    1e56:	5f e3       	ldi	r21, 0x3F	; 63
    1e58:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1e5c:	88 23       	and	r24, r24
    1e5e:	44 f4       	brge	.+16     	; 0x1e70 <HLCD4_voidInit+0x8c>
		__ticks = 1;
    1e60:	fe 01       	movw	r30, r28
    1e62:	ed 5b       	subi	r30, 0xBD	; 189
    1e64:	ff 4f       	sbci	r31, 0xFF	; 255
    1e66:	81 e0       	ldi	r24, 0x01	; 1
    1e68:	90 e0       	ldi	r25, 0x00	; 0
    1e6a:	91 83       	std	Z+1, r25	; 0x01
    1e6c:	80 83       	st	Z, r24
    1e6e:	64 c0       	rjmp	.+200    	; 0x1f38 <HLCD4_voidInit+0x154>
	else if (__tmp > 65535)
    1e70:	fe 01       	movw	r30, r28
    1e72:	eb 5b       	subi	r30, 0xBB	; 187
    1e74:	ff 4f       	sbci	r31, 0xFF	; 255
    1e76:	60 81       	ld	r22, Z
    1e78:	71 81       	ldd	r23, Z+1	; 0x01
    1e7a:	82 81       	ldd	r24, Z+2	; 0x02
    1e7c:	93 81       	ldd	r25, Z+3	; 0x03
    1e7e:	20 e0       	ldi	r18, 0x00	; 0
    1e80:	3f ef       	ldi	r19, 0xFF	; 255
    1e82:	4f e7       	ldi	r20, 0x7F	; 127
    1e84:	57 e4       	ldi	r21, 0x47	; 71
    1e86:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1e8a:	18 16       	cp	r1, r24
    1e8c:	0c f0       	brlt	.+2      	; 0x1e90 <HLCD4_voidInit+0xac>
    1e8e:	43 c0       	rjmp	.+134    	; 0x1f16 <HLCD4_voidInit+0x132>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e90:	fe 01       	movw	r30, r28
    1e92:	e7 5b       	subi	r30, 0xB7	; 183
    1e94:	ff 4f       	sbci	r31, 0xFF	; 255
    1e96:	60 81       	ld	r22, Z
    1e98:	71 81       	ldd	r23, Z+1	; 0x01
    1e9a:	82 81       	ldd	r24, Z+2	; 0x02
    1e9c:	93 81       	ldd	r25, Z+3	; 0x03
    1e9e:	20 e0       	ldi	r18, 0x00	; 0
    1ea0:	30 e0       	ldi	r19, 0x00	; 0
    1ea2:	40 e2       	ldi	r20, 0x20	; 32
    1ea4:	51 e4       	ldi	r21, 0x41	; 65
    1ea6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1eaa:	dc 01       	movw	r26, r24
    1eac:	cb 01       	movw	r24, r22
    1eae:	8e 01       	movw	r16, r28
    1eb0:	0d 5b       	subi	r16, 0xBD	; 189
    1eb2:	1f 4f       	sbci	r17, 0xFF	; 255
    1eb4:	bc 01       	movw	r22, r24
    1eb6:	cd 01       	movw	r24, r26
    1eb8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ebc:	dc 01       	movw	r26, r24
    1ebe:	cb 01       	movw	r24, r22
    1ec0:	f8 01       	movw	r30, r16
    1ec2:	91 83       	std	Z+1, r25	; 0x01
    1ec4:	80 83       	st	Z, r24
    1ec6:	1f c0       	rjmp	.+62     	; 0x1f06 <HLCD4_voidInit+0x122>
    1ec8:	fe 01       	movw	r30, r28
    1eca:	ef 5b       	subi	r30, 0xBF	; 191
    1ecc:	ff 4f       	sbci	r31, 0xFF	; 255
    1ece:	88 ec       	ldi	r24, 0xC8	; 200
    1ed0:	90 e0       	ldi	r25, 0x00	; 0
    1ed2:	91 83       	std	Z+1, r25	; 0x01
    1ed4:	80 83       	st	Z, r24
    1ed6:	fe 01       	movw	r30, r28
    1ed8:	ef 5b       	subi	r30, 0xBF	; 191
    1eda:	ff 4f       	sbci	r31, 0xFF	; 255
    1edc:	80 81       	ld	r24, Z
    1ede:	91 81       	ldd	r25, Z+1	; 0x01
    1ee0:	01 97       	sbiw	r24, 0x01	; 1
    1ee2:	f1 f7       	brne	.-4      	; 0x1ee0 <HLCD4_voidInit+0xfc>
    1ee4:	fe 01       	movw	r30, r28
    1ee6:	ef 5b       	subi	r30, 0xBF	; 191
    1ee8:	ff 4f       	sbci	r31, 0xFF	; 255
    1eea:	91 83       	std	Z+1, r25	; 0x01
    1eec:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1eee:	de 01       	movw	r26, r28
    1ef0:	ad 5b       	subi	r26, 0xBD	; 189
    1ef2:	bf 4f       	sbci	r27, 0xFF	; 255
    1ef4:	fe 01       	movw	r30, r28
    1ef6:	ed 5b       	subi	r30, 0xBD	; 189
    1ef8:	ff 4f       	sbci	r31, 0xFF	; 255
    1efa:	80 81       	ld	r24, Z
    1efc:	91 81       	ldd	r25, Z+1	; 0x01
    1efe:	01 97       	sbiw	r24, 0x01	; 1
    1f00:	11 96       	adiw	r26, 0x01	; 1
    1f02:	9c 93       	st	X, r25
    1f04:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f06:	fe 01       	movw	r30, r28
    1f08:	ed 5b       	subi	r30, 0xBD	; 189
    1f0a:	ff 4f       	sbci	r31, 0xFF	; 255
    1f0c:	80 81       	ld	r24, Z
    1f0e:	91 81       	ldd	r25, Z+1	; 0x01
    1f10:	00 97       	sbiw	r24, 0x00	; 0
    1f12:	d1 f6       	brne	.-76     	; 0x1ec8 <HLCD4_voidInit+0xe4>
    1f14:	24 c0       	rjmp	.+72     	; 0x1f5e <HLCD4_voidInit+0x17a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f16:	8e 01       	movw	r16, r28
    1f18:	0d 5b       	subi	r16, 0xBD	; 189
    1f1a:	1f 4f       	sbci	r17, 0xFF	; 255
    1f1c:	fe 01       	movw	r30, r28
    1f1e:	eb 5b       	subi	r30, 0xBB	; 187
    1f20:	ff 4f       	sbci	r31, 0xFF	; 255
    1f22:	60 81       	ld	r22, Z
    1f24:	71 81       	ldd	r23, Z+1	; 0x01
    1f26:	82 81       	ldd	r24, Z+2	; 0x02
    1f28:	93 81       	ldd	r25, Z+3	; 0x03
    1f2a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f2e:	dc 01       	movw	r26, r24
    1f30:	cb 01       	movw	r24, r22
    1f32:	f8 01       	movw	r30, r16
    1f34:	91 83       	std	Z+1, r25	; 0x01
    1f36:	80 83       	st	Z, r24
    1f38:	fe 01       	movw	r30, r28
    1f3a:	ed 5b       	subi	r30, 0xBD	; 189
    1f3c:	ff 4f       	sbci	r31, 0xFF	; 255
    1f3e:	80 81       	ld	r24, Z
    1f40:	91 81       	ldd	r25, Z+1	; 0x01
    1f42:	fe 01       	movw	r30, r28
    1f44:	ff 96       	adiw	r30, 0x3f	; 63
    1f46:	91 83       	std	Z+1, r25	; 0x01
    1f48:	80 83       	st	Z, r24
    1f4a:	fe 01       	movw	r30, r28
    1f4c:	ff 96       	adiw	r30, 0x3f	; 63
    1f4e:	80 81       	ld	r24, Z
    1f50:	91 81       	ldd	r25, Z+1	; 0x01
    1f52:	01 97       	sbiw	r24, 0x01	; 1
    1f54:	f1 f7       	brne	.-4      	; 0x1f52 <HLCD4_voidInit+0x16e>
    1f56:	fe 01       	movw	r30, r28
    1f58:	ff 96       	adiw	r30, 0x3f	; 63
    1f5a:	91 83       	std	Z+1, r25	; 0x01
    1f5c:	80 83       	st	Z, r24
    _delay_ms(30);
    HLCD4_voidSendCommand(FUNCTION_SET1);
    1f5e:	80 e2       	ldi	r24, 0x20	; 32
    1f60:	0e 94 c5 0b 	call	0x178a	; 0x178a <HLCD4_voidSendCommand>
    HLCD4_voidSendCommand(FUNCTION_SET2);
    1f64:	80 e2       	ldi	r24, 0x20	; 32
    1f66:	0e 94 c5 0b 	call	0x178a	; 0x178a <HLCD4_voidSendCommand>
    HLCD4_voidSendCommand(FUNCTION_SET3);
    1f6a:	80 e8       	ldi	r24, 0x80	; 128
    1f6c:	0e 94 c5 0b 	call	0x178a	; 0x178a <HLCD4_voidSendCommand>
    1f70:	80 e0       	ldi	r24, 0x00	; 0
    1f72:	90 e0       	ldi	r25, 0x00	; 0
    1f74:	a0 e2       	ldi	r26, 0x20	; 32
    1f76:	b2 e4       	ldi	r27, 0x42	; 66
    1f78:	8b af       	std	Y+59, r24	; 0x3b
    1f7a:	9c af       	std	Y+60, r25	; 0x3c
    1f7c:	ad af       	std	Y+61, r26	; 0x3d
    1f7e:	be af       	std	Y+62, r27	; 0x3e
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1f80:	6b ad       	ldd	r22, Y+59	; 0x3b
    1f82:	7c ad       	ldd	r23, Y+60	; 0x3c
    1f84:	8d ad       	ldd	r24, Y+61	; 0x3d
    1f86:	9e ad       	ldd	r25, Y+62	; 0x3e
    1f88:	2b ea       	ldi	r18, 0xAB	; 171
    1f8a:	3a ea       	ldi	r19, 0xAA	; 170
    1f8c:	4a e2       	ldi	r20, 0x2A	; 42
    1f8e:	50 e4       	ldi	r21, 0x40	; 64
    1f90:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f94:	dc 01       	movw	r26, r24
    1f96:	cb 01       	movw	r24, r22
    1f98:	8f ab       	std	Y+55, r24	; 0x37
    1f9a:	98 af       	std	Y+56, r25	; 0x38
    1f9c:	a9 af       	std	Y+57, r26	; 0x39
    1f9e:	ba af       	std	Y+58, r27	; 0x3a
	if (__tmp < 1.0)
    1fa0:	6f a9       	ldd	r22, Y+55	; 0x37
    1fa2:	78 ad       	ldd	r23, Y+56	; 0x38
    1fa4:	89 ad       	ldd	r24, Y+57	; 0x39
    1fa6:	9a ad       	ldd	r25, Y+58	; 0x3a
    1fa8:	20 e0       	ldi	r18, 0x00	; 0
    1faa:	30 e0       	ldi	r19, 0x00	; 0
    1fac:	40 e8       	ldi	r20, 0x80	; 128
    1fae:	5f e3       	ldi	r21, 0x3F	; 63
    1fb0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1fb4:	88 23       	and	r24, r24
    1fb6:	1c f4       	brge	.+6      	; 0x1fbe <HLCD4_voidInit+0x1da>
		__ticks = 1;
    1fb8:	81 e0       	ldi	r24, 0x01	; 1
    1fba:	8e ab       	std	Y+54, r24	; 0x36
    1fbc:	91 c0       	rjmp	.+290    	; 0x20e0 <HLCD4_voidInit+0x2fc>
	else if (__tmp > 255)
    1fbe:	6f a9       	ldd	r22, Y+55	; 0x37
    1fc0:	78 ad       	ldd	r23, Y+56	; 0x38
    1fc2:	89 ad       	ldd	r24, Y+57	; 0x39
    1fc4:	9a ad       	ldd	r25, Y+58	; 0x3a
    1fc6:	20 e0       	ldi	r18, 0x00	; 0
    1fc8:	30 e0       	ldi	r19, 0x00	; 0
    1fca:	4f e7       	ldi	r20, 0x7F	; 127
    1fcc:	53 e4       	ldi	r21, 0x43	; 67
    1fce:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1fd2:	18 16       	cp	r1, r24
    1fd4:	0c f0       	brlt	.+2      	; 0x1fd8 <HLCD4_voidInit+0x1f4>
    1fd6:	7b c0       	rjmp	.+246    	; 0x20ce <HLCD4_voidInit+0x2ea>
	{
		_delay_ms(__us / 1000.0);
    1fd8:	6b ad       	ldd	r22, Y+59	; 0x3b
    1fda:	7c ad       	ldd	r23, Y+60	; 0x3c
    1fdc:	8d ad       	ldd	r24, Y+61	; 0x3d
    1fde:	9e ad       	ldd	r25, Y+62	; 0x3e
    1fe0:	20 e0       	ldi	r18, 0x00	; 0
    1fe2:	30 e0       	ldi	r19, 0x00	; 0
    1fe4:	4a e7       	ldi	r20, 0x7A	; 122
    1fe6:	54 e4       	ldi	r21, 0x44	; 68
    1fe8:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1fec:	dc 01       	movw	r26, r24
    1fee:	cb 01       	movw	r24, r22
    1ff0:	8a ab       	std	Y+50, r24	; 0x32
    1ff2:	9b ab       	std	Y+51, r25	; 0x33
    1ff4:	ac ab       	std	Y+52, r26	; 0x34
    1ff6:	bd ab       	std	Y+53, r27	; 0x35
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ff8:	6a a9       	ldd	r22, Y+50	; 0x32
    1ffa:	7b a9       	ldd	r23, Y+51	; 0x33
    1ffc:	8c a9       	ldd	r24, Y+52	; 0x34
    1ffe:	9d a9       	ldd	r25, Y+53	; 0x35
    2000:	20 e0       	ldi	r18, 0x00	; 0
    2002:	30 e0       	ldi	r19, 0x00	; 0
    2004:	4a ef       	ldi	r20, 0xFA	; 250
    2006:	54 e4       	ldi	r21, 0x44	; 68
    2008:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    200c:	dc 01       	movw	r26, r24
    200e:	cb 01       	movw	r24, r22
    2010:	8e a7       	std	Y+46, r24	; 0x2e
    2012:	9f a7       	std	Y+47, r25	; 0x2f
    2014:	a8 ab       	std	Y+48, r26	; 0x30
    2016:	b9 ab       	std	Y+49, r27	; 0x31
	if (__tmp < 1.0)
    2018:	6e a5       	ldd	r22, Y+46	; 0x2e
    201a:	7f a5       	ldd	r23, Y+47	; 0x2f
    201c:	88 a9       	ldd	r24, Y+48	; 0x30
    201e:	99 a9       	ldd	r25, Y+49	; 0x31
    2020:	20 e0       	ldi	r18, 0x00	; 0
    2022:	30 e0       	ldi	r19, 0x00	; 0
    2024:	40 e8       	ldi	r20, 0x80	; 128
    2026:	5f e3       	ldi	r21, 0x3F	; 63
    2028:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    202c:	88 23       	and	r24, r24
    202e:	2c f4       	brge	.+10     	; 0x203a <HLCD4_voidInit+0x256>
		__ticks = 1;
    2030:	81 e0       	ldi	r24, 0x01	; 1
    2032:	90 e0       	ldi	r25, 0x00	; 0
    2034:	9d a7       	std	Y+45, r25	; 0x2d
    2036:	8c a7       	std	Y+44, r24	; 0x2c
    2038:	3f c0       	rjmp	.+126    	; 0x20b8 <HLCD4_voidInit+0x2d4>
	else if (__tmp > 65535)
    203a:	6e a5       	ldd	r22, Y+46	; 0x2e
    203c:	7f a5       	ldd	r23, Y+47	; 0x2f
    203e:	88 a9       	ldd	r24, Y+48	; 0x30
    2040:	99 a9       	ldd	r25, Y+49	; 0x31
    2042:	20 e0       	ldi	r18, 0x00	; 0
    2044:	3f ef       	ldi	r19, 0xFF	; 255
    2046:	4f e7       	ldi	r20, 0x7F	; 127
    2048:	57 e4       	ldi	r21, 0x47	; 71
    204a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    204e:	18 16       	cp	r1, r24
    2050:	4c f5       	brge	.+82     	; 0x20a4 <HLCD4_voidInit+0x2c0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2052:	6a a9       	ldd	r22, Y+50	; 0x32
    2054:	7b a9       	ldd	r23, Y+51	; 0x33
    2056:	8c a9       	ldd	r24, Y+52	; 0x34
    2058:	9d a9       	ldd	r25, Y+53	; 0x35
    205a:	20 e0       	ldi	r18, 0x00	; 0
    205c:	30 e0       	ldi	r19, 0x00	; 0
    205e:	40 e2       	ldi	r20, 0x20	; 32
    2060:	51 e4       	ldi	r21, 0x41	; 65
    2062:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2066:	dc 01       	movw	r26, r24
    2068:	cb 01       	movw	r24, r22
    206a:	bc 01       	movw	r22, r24
    206c:	cd 01       	movw	r24, r26
    206e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2072:	dc 01       	movw	r26, r24
    2074:	cb 01       	movw	r24, r22
    2076:	9d a7       	std	Y+45, r25	; 0x2d
    2078:	8c a7       	std	Y+44, r24	; 0x2c
    207a:	0f c0       	rjmp	.+30     	; 0x209a <HLCD4_voidInit+0x2b6>
    207c:	88 ec       	ldi	r24, 0xC8	; 200
    207e:	90 e0       	ldi	r25, 0x00	; 0
    2080:	9b a7       	std	Y+43, r25	; 0x2b
    2082:	8a a7       	std	Y+42, r24	; 0x2a
    2084:	8a a5       	ldd	r24, Y+42	; 0x2a
    2086:	9b a5       	ldd	r25, Y+43	; 0x2b
    2088:	01 97       	sbiw	r24, 0x01	; 1
    208a:	f1 f7       	brne	.-4      	; 0x2088 <HLCD4_voidInit+0x2a4>
    208c:	9b a7       	std	Y+43, r25	; 0x2b
    208e:	8a a7       	std	Y+42, r24	; 0x2a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2090:	8c a5       	ldd	r24, Y+44	; 0x2c
    2092:	9d a5       	ldd	r25, Y+45	; 0x2d
    2094:	01 97       	sbiw	r24, 0x01	; 1
    2096:	9d a7       	std	Y+45, r25	; 0x2d
    2098:	8c a7       	std	Y+44, r24	; 0x2c
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    209a:	8c a5       	ldd	r24, Y+44	; 0x2c
    209c:	9d a5       	ldd	r25, Y+45	; 0x2d
    209e:	00 97       	sbiw	r24, 0x00	; 0
    20a0:	69 f7       	brne	.-38     	; 0x207c <HLCD4_voidInit+0x298>
    20a2:	24 c0       	rjmp	.+72     	; 0x20ec <HLCD4_voidInit+0x308>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    20a4:	6e a5       	ldd	r22, Y+46	; 0x2e
    20a6:	7f a5       	ldd	r23, Y+47	; 0x2f
    20a8:	88 a9       	ldd	r24, Y+48	; 0x30
    20aa:	99 a9       	ldd	r25, Y+49	; 0x31
    20ac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20b0:	dc 01       	movw	r26, r24
    20b2:	cb 01       	movw	r24, r22
    20b4:	9d a7       	std	Y+45, r25	; 0x2d
    20b6:	8c a7       	std	Y+44, r24	; 0x2c
    20b8:	8c a5       	ldd	r24, Y+44	; 0x2c
    20ba:	9d a5       	ldd	r25, Y+45	; 0x2d
    20bc:	99 a7       	std	Y+41, r25	; 0x29
    20be:	88 a7       	std	Y+40, r24	; 0x28
    20c0:	88 a5       	ldd	r24, Y+40	; 0x28
    20c2:	99 a5       	ldd	r25, Y+41	; 0x29
    20c4:	01 97       	sbiw	r24, 0x01	; 1
    20c6:	f1 f7       	brne	.-4      	; 0x20c4 <HLCD4_voidInit+0x2e0>
    20c8:	99 a7       	std	Y+41, r25	; 0x29
    20ca:	88 a7       	std	Y+40, r24	; 0x28
    20cc:	0f c0       	rjmp	.+30     	; 0x20ec <HLCD4_voidInit+0x308>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    20ce:	6f a9       	ldd	r22, Y+55	; 0x37
    20d0:	78 ad       	ldd	r23, Y+56	; 0x38
    20d2:	89 ad       	ldd	r24, Y+57	; 0x39
    20d4:	9a ad       	ldd	r25, Y+58	; 0x3a
    20d6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20da:	dc 01       	movw	r26, r24
    20dc:	cb 01       	movw	r24, r22
    20de:	8e ab       	std	Y+54, r24	; 0x36
    20e0:	8e a9       	ldd	r24, Y+54	; 0x36
    20e2:	8f a3       	std	Y+39, r24	; 0x27
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    20e4:	8f a1       	ldd	r24, Y+39	; 0x27
    20e6:	8a 95       	dec	r24
    20e8:	f1 f7       	brne	.-4      	; 0x20e6 <HLCD4_voidInit+0x302>
    20ea:	8f a3       	std	Y+39, r24	; 0x27
    _delay_us(40);
    HLCD4_voidSendCommand(ON_OFF_CONTROL1);
    20ec:	80 e0       	ldi	r24, 0x00	; 0
    20ee:	0e 94 c5 0b 	call	0x178a	; 0x178a <HLCD4_voidSendCommand>
    HLCD4_voidSendCommand(ON_OFF_CONTROL2);
    20f2:	80 ec       	ldi	r24, 0xC0	; 192
    20f4:	0e 94 c5 0b 	call	0x178a	; 0x178a <HLCD4_voidSendCommand>
    20f8:	80 e0       	ldi	r24, 0x00	; 0
    20fa:	90 e0       	ldi	r25, 0x00	; 0
    20fc:	a0 e2       	ldi	r26, 0x20	; 32
    20fe:	b2 e4       	ldi	r27, 0x42	; 66
    2100:	8b a3       	std	Y+35, r24	; 0x23
    2102:	9c a3       	std	Y+36, r25	; 0x24
    2104:	ad a3       	std	Y+37, r26	; 0x25
    2106:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2108:	6b a1       	ldd	r22, Y+35	; 0x23
    210a:	7c a1       	ldd	r23, Y+36	; 0x24
    210c:	8d a1       	ldd	r24, Y+37	; 0x25
    210e:	9e a1       	ldd	r25, Y+38	; 0x26
    2110:	2b ea       	ldi	r18, 0xAB	; 171
    2112:	3a ea       	ldi	r19, 0xAA	; 170
    2114:	4a e2       	ldi	r20, 0x2A	; 42
    2116:	50 e4       	ldi	r21, 0x40	; 64
    2118:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    211c:	dc 01       	movw	r26, r24
    211e:	cb 01       	movw	r24, r22
    2120:	8f 8f       	std	Y+31, r24	; 0x1f
    2122:	98 a3       	std	Y+32, r25	; 0x20
    2124:	a9 a3       	std	Y+33, r26	; 0x21
    2126:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    2128:	6f 8d       	ldd	r22, Y+31	; 0x1f
    212a:	78 a1       	ldd	r23, Y+32	; 0x20
    212c:	89 a1       	ldd	r24, Y+33	; 0x21
    212e:	9a a1       	ldd	r25, Y+34	; 0x22
    2130:	20 e0       	ldi	r18, 0x00	; 0
    2132:	30 e0       	ldi	r19, 0x00	; 0
    2134:	40 e8       	ldi	r20, 0x80	; 128
    2136:	5f e3       	ldi	r21, 0x3F	; 63
    2138:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    213c:	88 23       	and	r24, r24
    213e:	1c f4       	brge	.+6      	; 0x2146 <HLCD4_voidInit+0x362>
		__ticks = 1;
    2140:	81 e0       	ldi	r24, 0x01	; 1
    2142:	8e 8f       	std	Y+30, r24	; 0x1e
    2144:	91 c0       	rjmp	.+290    	; 0x2268 <HLCD4_voidInit+0x484>
	else if (__tmp > 255)
    2146:	6f 8d       	ldd	r22, Y+31	; 0x1f
    2148:	78 a1       	ldd	r23, Y+32	; 0x20
    214a:	89 a1       	ldd	r24, Y+33	; 0x21
    214c:	9a a1       	ldd	r25, Y+34	; 0x22
    214e:	20 e0       	ldi	r18, 0x00	; 0
    2150:	30 e0       	ldi	r19, 0x00	; 0
    2152:	4f e7       	ldi	r20, 0x7F	; 127
    2154:	53 e4       	ldi	r21, 0x43	; 67
    2156:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    215a:	18 16       	cp	r1, r24
    215c:	0c f0       	brlt	.+2      	; 0x2160 <HLCD4_voidInit+0x37c>
    215e:	7b c0       	rjmp	.+246    	; 0x2256 <HLCD4_voidInit+0x472>
	{
		_delay_ms(__us / 1000.0);
    2160:	6b a1       	ldd	r22, Y+35	; 0x23
    2162:	7c a1       	ldd	r23, Y+36	; 0x24
    2164:	8d a1       	ldd	r24, Y+37	; 0x25
    2166:	9e a1       	ldd	r25, Y+38	; 0x26
    2168:	20 e0       	ldi	r18, 0x00	; 0
    216a:	30 e0       	ldi	r19, 0x00	; 0
    216c:	4a e7       	ldi	r20, 0x7A	; 122
    216e:	54 e4       	ldi	r21, 0x44	; 68
    2170:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2174:	dc 01       	movw	r26, r24
    2176:	cb 01       	movw	r24, r22
    2178:	8a 8f       	std	Y+26, r24	; 0x1a
    217a:	9b 8f       	std	Y+27, r25	; 0x1b
    217c:	ac 8f       	std	Y+28, r26	; 0x1c
    217e:	bd 8f       	std	Y+29, r27	; 0x1d
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2180:	6a 8d       	ldd	r22, Y+26	; 0x1a
    2182:	7b 8d       	ldd	r23, Y+27	; 0x1b
    2184:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2186:	9d 8d       	ldd	r25, Y+29	; 0x1d
    2188:	20 e0       	ldi	r18, 0x00	; 0
    218a:	30 e0       	ldi	r19, 0x00	; 0
    218c:	4a ef       	ldi	r20, 0xFA	; 250
    218e:	54 e4       	ldi	r21, 0x44	; 68
    2190:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2194:	dc 01       	movw	r26, r24
    2196:	cb 01       	movw	r24, r22
    2198:	8e 8b       	std	Y+22, r24	; 0x16
    219a:	9f 8b       	std	Y+23, r25	; 0x17
    219c:	a8 8f       	std	Y+24, r26	; 0x18
    219e:	b9 8f       	std	Y+25, r27	; 0x19
	if (__tmp < 1.0)
    21a0:	6e 89       	ldd	r22, Y+22	; 0x16
    21a2:	7f 89       	ldd	r23, Y+23	; 0x17
    21a4:	88 8d       	ldd	r24, Y+24	; 0x18
    21a6:	99 8d       	ldd	r25, Y+25	; 0x19
    21a8:	20 e0       	ldi	r18, 0x00	; 0
    21aa:	30 e0       	ldi	r19, 0x00	; 0
    21ac:	40 e8       	ldi	r20, 0x80	; 128
    21ae:	5f e3       	ldi	r21, 0x3F	; 63
    21b0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    21b4:	88 23       	and	r24, r24
    21b6:	2c f4       	brge	.+10     	; 0x21c2 <HLCD4_voidInit+0x3de>
		__ticks = 1;
    21b8:	81 e0       	ldi	r24, 0x01	; 1
    21ba:	90 e0       	ldi	r25, 0x00	; 0
    21bc:	9d 8b       	std	Y+21, r25	; 0x15
    21be:	8c 8b       	std	Y+20, r24	; 0x14
    21c0:	3f c0       	rjmp	.+126    	; 0x2240 <HLCD4_voidInit+0x45c>
	else if (__tmp > 65535)
    21c2:	6e 89       	ldd	r22, Y+22	; 0x16
    21c4:	7f 89       	ldd	r23, Y+23	; 0x17
    21c6:	88 8d       	ldd	r24, Y+24	; 0x18
    21c8:	99 8d       	ldd	r25, Y+25	; 0x19
    21ca:	20 e0       	ldi	r18, 0x00	; 0
    21cc:	3f ef       	ldi	r19, 0xFF	; 255
    21ce:	4f e7       	ldi	r20, 0x7F	; 127
    21d0:	57 e4       	ldi	r21, 0x47	; 71
    21d2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    21d6:	18 16       	cp	r1, r24
    21d8:	4c f5       	brge	.+82     	; 0x222c <HLCD4_voidInit+0x448>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    21da:	6a 8d       	ldd	r22, Y+26	; 0x1a
    21dc:	7b 8d       	ldd	r23, Y+27	; 0x1b
    21de:	8c 8d       	ldd	r24, Y+28	; 0x1c
    21e0:	9d 8d       	ldd	r25, Y+29	; 0x1d
    21e2:	20 e0       	ldi	r18, 0x00	; 0
    21e4:	30 e0       	ldi	r19, 0x00	; 0
    21e6:	40 e2       	ldi	r20, 0x20	; 32
    21e8:	51 e4       	ldi	r21, 0x41	; 65
    21ea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21ee:	dc 01       	movw	r26, r24
    21f0:	cb 01       	movw	r24, r22
    21f2:	bc 01       	movw	r22, r24
    21f4:	cd 01       	movw	r24, r26
    21f6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21fa:	dc 01       	movw	r26, r24
    21fc:	cb 01       	movw	r24, r22
    21fe:	9d 8b       	std	Y+21, r25	; 0x15
    2200:	8c 8b       	std	Y+20, r24	; 0x14
    2202:	0f c0       	rjmp	.+30     	; 0x2222 <HLCD4_voidInit+0x43e>
    2204:	88 ec       	ldi	r24, 0xC8	; 200
    2206:	90 e0       	ldi	r25, 0x00	; 0
    2208:	9b 8b       	std	Y+19, r25	; 0x13
    220a:	8a 8b       	std	Y+18, r24	; 0x12
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    220c:	8a 89       	ldd	r24, Y+18	; 0x12
    220e:	9b 89       	ldd	r25, Y+19	; 0x13
    2210:	01 97       	sbiw	r24, 0x01	; 1
    2212:	f1 f7       	brne	.-4      	; 0x2210 <HLCD4_voidInit+0x42c>
    2214:	9b 8b       	std	Y+19, r25	; 0x13
    2216:	8a 8b       	std	Y+18, r24	; 0x12
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2218:	8c 89       	ldd	r24, Y+20	; 0x14
    221a:	9d 89       	ldd	r25, Y+21	; 0x15
    221c:	01 97       	sbiw	r24, 0x01	; 1
    221e:	9d 8b       	std	Y+21, r25	; 0x15
    2220:	8c 8b       	std	Y+20, r24	; 0x14
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2222:	8c 89       	ldd	r24, Y+20	; 0x14
    2224:	9d 89       	ldd	r25, Y+21	; 0x15
    2226:	00 97       	sbiw	r24, 0x00	; 0
    2228:	69 f7       	brne	.-38     	; 0x2204 <HLCD4_voidInit+0x420>
    222a:	24 c0       	rjmp	.+72     	; 0x2274 <HLCD4_voidInit+0x490>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    222c:	6e 89       	ldd	r22, Y+22	; 0x16
    222e:	7f 89       	ldd	r23, Y+23	; 0x17
    2230:	88 8d       	ldd	r24, Y+24	; 0x18
    2232:	99 8d       	ldd	r25, Y+25	; 0x19
    2234:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2238:	dc 01       	movw	r26, r24
    223a:	cb 01       	movw	r24, r22
    223c:	9d 8b       	std	Y+21, r25	; 0x15
    223e:	8c 8b       	std	Y+20, r24	; 0x14
    2240:	8c 89       	ldd	r24, Y+20	; 0x14
    2242:	9d 89       	ldd	r25, Y+21	; 0x15
    2244:	99 8b       	std	Y+17, r25	; 0x11
    2246:	88 8b       	std	Y+16, r24	; 0x10
    2248:	88 89       	ldd	r24, Y+16	; 0x10
    224a:	99 89       	ldd	r25, Y+17	; 0x11
    224c:	01 97       	sbiw	r24, 0x01	; 1
    224e:	f1 f7       	brne	.-4      	; 0x224c <HLCD4_voidInit+0x468>
    2250:	99 8b       	std	Y+17, r25	; 0x11
    2252:	88 8b       	std	Y+16, r24	; 0x10
    2254:	0f c0       	rjmp	.+30     	; 0x2274 <HLCD4_voidInit+0x490>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2256:	6f 8d       	ldd	r22, Y+31	; 0x1f
    2258:	78 a1       	ldd	r23, Y+32	; 0x20
    225a:	89 a1       	ldd	r24, Y+33	; 0x21
    225c:	9a a1       	ldd	r25, Y+34	; 0x22
    225e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2262:	dc 01       	movw	r26, r24
    2264:	cb 01       	movw	r24, r22
    2266:	8e 8f       	std	Y+30, r24	; 0x1e
    2268:	8e 8d       	ldd	r24, Y+30	; 0x1e
    226a:	8f 87       	std	Y+15, r24	; 0x0f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    226c:	8f 85       	ldd	r24, Y+15	; 0x0f
    226e:	8a 95       	dec	r24
    2270:	f1 f7       	brne	.-4      	; 0x226e <HLCD4_voidInit+0x48a>
    2272:	8f 87       	std	Y+15, r24	; 0x0f
    _delay_us(40);
    HLCD4_voidSendCommand(DISPLAY_CLEAR1);
    2274:	80 e0       	ldi	r24, 0x00	; 0
    2276:	0e 94 c5 0b 	call	0x178a	; 0x178a <HLCD4_voidSendCommand>
    HLCD4_voidSendCommand(DISPLAY_CLEAR2);
    227a:	80 e1       	ldi	r24, 0x10	; 16
    227c:	0e 94 c5 0b 	call	0x178a	; 0x178a <HLCD4_voidSendCommand>
    2280:	80 e0       	ldi	r24, 0x00	; 0
    2282:	90 e0       	ldi	r25, 0x00	; 0
    2284:	a0 e0       	ldi	r26, 0x00	; 0
    2286:	b0 e4       	ldi	r27, 0x40	; 64
    2288:	8b 87       	std	Y+11, r24	; 0x0b
    228a:	9c 87       	std	Y+12, r25	; 0x0c
    228c:	ad 87       	std	Y+13, r26	; 0x0d
    228e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2290:	6b 85       	ldd	r22, Y+11	; 0x0b
    2292:	7c 85       	ldd	r23, Y+12	; 0x0c
    2294:	8d 85       	ldd	r24, Y+13	; 0x0d
    2296:	9e 85       	ldd	r25, Y+14	; 0x0e
    2298:	20 e0       	ldi	r18, 0x00	; 0
    229a:	30 e0       	ldi	r19, 0x00	; 0
    229c:	4a ef       	ldi	r20, 0xFA	; 250
    229e:	54 e4       	ldi	r21, 0x44	; 68
    22a0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22a4:	dc 01       	movw	r26, r24
    22a6:	cb 01       	movw	r24, r22
    22a8:	8f 83       	std	Y+7, r24	; 0x07
    22aa:	98 87       	std	Y+8, r25	; 0x08
    22ac:	a9 87       	std	Y+9, r26	; 0x09
    22ae:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    22b0:	6f 81       	ldd	r22, Y+7	; 0x07
    22b2:	78 85       	ldd	r23, Y+8	; 0x08
    22b4:	89 85       	ldd	r24, Y+9	; 0x09
    22b6:	9a 85       	ldd	r25, Y+10	; 0x0a
    22b8:	20 e0       	ldi	r18, 0x00	; 0
    22ba:	30 e0       	ldi	r19, 0x00	; 0
    22bc:	40 e8       	ldi	r20, 0x80	; 128
    22be:	5f e3       	ldi	r21, 0x3F	; 63
    22c0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    22c4:	88 23       	and	r24, r24
    22c6:	2c f4       	brge	.+10     	; 0x22d2 <HLCD4_voidInit+0x4ee>
		__ticks = 1;
    22c8:	81 e0       	ldi	r24, 0x01	; 1
    22ca:	90 e0       	ldi	r25, 0x00	; 0
    22cc:	9e 83       	std	Y+6, r25	; 0x06
    22ce:	8d 83       	std	Y+5, r24	; 0x05
    22d0:	3f c0       	rjmp	.+126    	; 0x2350 <HLCD4_voidInit+0x56c>
	else if (__tmp > 65535)
    22d2:	6f 81       	ldd	r22, Y+7	; 0x07
    22d4:	78 85       	ldd	r23, Y+8	; 0x08
    22d6:	89 85       	ldd	r24, Y+9	; 0x09
    22d8:	9a 85       	ldd	r25, Y+10	; 0x0a
    22da:	20 e0       	ldi	r18, 0x00	; 0
    22dc:	3f ef       	ldi	r19, 0xFF	; 255
    22de:	4f e7       	ldi	r20, 0x7F	; 127
    22e0:	57 e4       	ldi	r21, 0x47	; 71
    22e2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    22e6:	18 16       	cp	r1, r24
    22e8:	4c f5       	brge	.+82     	; 0x233c <HLCD4_voidInit+0x558>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    22ea:	6b 85       	ldd	r22, Y+11	; 0x0b
    22ec:	7c 85       	ldd	r23, Y+12	; 0x0c
    22ee:	8d 85       	ldd	r24, Y+13	; 0x0d
    22f0:	9e 85       	ldd	r25, Y+14	; 0x0e
    22f2:	20 e0       	ldi	r18, 0x00	; 0
    22f4:	30 e0       	ldi	r19, 0x00	; 0
    22f6:	40 e2       	ldi	r20, 0x20	; 32
    22f8:	51 e4       	ldi	r21, 0x41	; 65
    22fa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22fe:	dc 01       	movw	r26, r24
    2300:	cb 01       	movw	r24, r22
    2302:	bc 01       	movw	r22, r24
    2304:	cd 01       	movw	r24, r26
    2306:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    230a:	dc 01       	movw	r26, r24
    230c:	cb 01       	movw	r24, r22
    230e:	9e 83       	std	Y+6, r25	; 0x06
    2310:	8d 83       	std	Y+5, r24	; 0x05
    2312:	0f c0       	rjmp	.+30     	; 0x2332 <HLCD4_voidInit+0x54e>
    2314:	88 ec       	ldi	r24, 0xC8	; 200
    2316:	90 e0       	ldi	r25, 0x00	; 0
    2318:	9c 83       	std	Y+4, r25	; 0x04
    231a:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    231c:	8b 81       	ldd	r24, Y+3	; 0x03
    231e:	9c 81       	ldd	r25, Y+4	; 0x04
    2320:	01 97       	sbiw	r24, 0x01	; 1
    2322:	f1 f7       	brne	.-4      	; 0x2320 <HLCD4_voidInit+0x53c>
    2324:	9c 83       	std	Y+4, r25	; 0x04
    2326:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2328:	8d 81       	ldd	r24, Y+5	; 0x05
    232a:	9e 81       	ldd	r25, Y+6	; 0x06
    232c:	01 97       	sbiw	r24, 0x01	; 1
    232e:	9e 83       	std	Y+6, r25	; 0x06
    2330:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2332:	8d 81       	ldd	r24, Y+5	; 0x05
    2334:	9e 81       	ldd	r25, Y+6	; 0x06
    2336:	00 97       	sbiw	r24, 0x00	; 0
    2338:	69 f7       	brne	.-38     	; 0x2314 <HLCD4_voidInit+0x530>
    233a:	14 c0       	rjmp	.+40     	; 0x2364 <HLCD4_voidInit+0x580>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    233c:	6f 81       	ldd	r22, Y+7	; 0x07
    233e:	78 85       	ldd	r23, Y+8	; 0x08
    2340:	89 85       	ldd	r24, Y+9	; 0x09
    2342:	9a 85       	ldd	r25, Y+10	; 0x0a
    2344:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2348:	dc 01       	movw	r26, r24
    234a:	cb 01       	movw	r24, r22
    234c:	9e 83       	std	Y+6, r25	; 0x06
    234e:	8d 83       	std	Y+5, r24	; 0x05
    2350:	8d 81       	ldd	r24, Y+5	; 0x05
    2352:	9e 81       	ldd	r25, Y+6	; 0x06
    2354:	9a 83       	std	Y+2, r25	; 0x02
    2356:	89 83       	std	Y+1, r24	; 0x01
    2358:	89 81       	ldd	r24, Y+1	; 0x01
    235a:	9a 81       	ldd	r25, Y+2	; 0x02
    235c:	01 97       	sbiw	r24, 0x01	; 1
    235e:	f1 f7       	brne	.-4      	; 0x235c <HLCD4_voidInit+0x578>
    2360:	9a 83       	std	Y+2, r25	; 0x02
    2362:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(2);
    HLCD4_voidSendCommand(ENTRY_MODE_SET1);
    2364:	80 e0       	ldi	r24, 0x00	; 0
    2366:	0e 94 c5 0b 	call	0x178a	; 0x178a <HLCD4_voidSendCommand>
    HLCD4_voidSendCommand(ENTRY_MODE_SET2);
    236a:	80 e6       	ldi	r24, 0x60	; 96
    236c:	0e 94 c5 0b 	call	0x178a	; 0x178a <HLCD4_voidSendCommand>
    global_u8Init=1;
    2370:	81 e0       	ldi	r24, 0x01	; 1
    2372:	80 93 94 00 	sts	0x0094, r24
} 
    2376:	c4 5b       	subi	r28, 0xB4	; 180
    2378:	df 4f       	sbci	r29, 0xFF	; 255
    237a:	0f b6       	in	r0, 0x3f	; 63
    237c:	f8 94       	cli
    237e:	de bf       	out	0x3e, r29	; 62
    2380:	0f be       	out	0x3f, r0	; 63
    2382:	cd bf       	out	0x3d, r28	; 61
    2384:	cf 91       	pop	r28
    2386:	df 91       	pop	r29
    2388:	1f 91       	pop	r17
    238a:	0f 91       	pop	r16
    238c:	08 95       	ret

0000238e <HLCD4_voidClearDisplay>:

void HLCD4_voidClearDisplay(void)
{
    238e:	df 93       	push	r29
    2390:	cf 93       	push	r28
    2392:	cd b7       	in	r28, 0x3d	; 61
    2394:	de b7       	in	r29, 0x3e	; 62
    2396:	2e 97       	sbiw	r28, 0x0e	; 14
    2398:	0f b6       	in	r0, 0x3f	; 63
    239a:	f8 94       	cli
    239c:	de bf       	out	0x3e, r29	; 62
    239e:	0f be       	out	0x3f, r0	; 63
    23a0:	cd bf       	out	0x3d, r28	; 61
    HLCD4_voidSendCommand(DISPLAY_CLEAR1);
    23a2:	80 e0       	ldi	r24, 0x00	; 0
    23a4:	0e 94 c5 0b 	call	0x178a	; 0x178a <HLCD4_voidSendCommand>
    HLCD4_voidSendCommand(DISPLAY_CLEAR2);
    23a8:	80 e1       	ldi	r24, 0x10	; 16
    23aa:	0e 94 c5 0b 	call	0x178a	; 0x178a <HLCD4_voidSendCommand>
    23ae:	80 e0       	ldi	r24, 0x00	; 0
    23b0:	90 e0       	ldi	r25, 0x00	; 0
    23b2:	a0 e0       	ldi	r26, 0x00	; 0
    23b4:	b0 e4       	ldi	r27, 0x40	; 64
    23b6:	8b 87       	std	Y+11, r24	; 0x0b
    23b8:	9c 87       	std	Y+12, r25	; 0x0c
    23ba:	ad 87       	std	Y+13, r26	; 0x0d
    23bc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    23be:	6b 85       	ldd	r22, Y+11	; 0x0b
    23c0:	7c 85       	ldd	r23, Y+12	; 0x0c
    23c2:	8d 85       	ldd	r24, Y+13	; 0x0d
    23c4:	9e 85       	ldd	r25, Y+14	; 0x0e
    23c6:	20 e0       	ldi	r18, 0x00	; 0
    23c8:	30 e0       	ldi	r19, 0x00	; 0
    23ca:	4a ef       	ldi	r20, 0xFA	; 250
    23cc:	54 e4       	ldi	r21, 0x44	; 68
    23ce:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23d2:	dc 01       	movw	r26, r24
    23d4:	cb 01       	movw	r24, r22
    23d6:	8f 83       	std	Y+7, r24	; 0x07
    23d8:	98 87       	std	Y+8, r25	; 0x08
    23da:	a9 87       	std	Y+9, r26	; 0x09
    23dc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    23de:	6f 81       	ldd	r22, Y+7	; 0x07
    23e0:	78 85       	ldd	r23, Y+8	; 0x08
    23e2:	89 85       	ldd	r24, Y+9	; 0x09
    23e4:	9a 85       	ldd	r25, Y+10	; 0x0a
    23e6:	20 e0       	ldi	r18, 0x00	; 0
    23e8:	30 e0       	ldi	r19, 0x00	; 0
    23ea:	40 e8       	ldi	r20, 0x80	; 128
    23ec:	5f e3       	ldi	r21, 0x3F	; 63
    23ee:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    23f2:	88 23       	and	r24, r24
    23f4:	2c f4       	brge	.+10     	; 0x2400 <HLCD4_voidClearDisplay+0x72>
		__ticks = 1;
    23f6:	81 e0       	ldi	r24, 0x01	; 1
    23f8:	90 e0       	ldi	r25, 0x00	; 0
    23fa:	9e 83       	std	Y+6, r25	; 0x06
    23fc:	8d 83       	std	Y+5, r24	; 0x05
    23fe:	3f c0       	rjmp	.+126    	; 0x247e <HLCD4_voidClearDisplay+0xf0>
	else if (__tmp > 65535)
    2400:	6f 81       	ldd	r22, Y+7	; 0x07
    2402:	78 85       	ldd	r23, Y+8	; 0x08
    2404:	89 85       	ldd	r24, Y+9	; 0x09
    2406:	9a 85       	ldd	r25, Y+10	; 0x0a
    2408:	20 e0       	ldi	r18, 0x00	; 0
    240a:	3f ef       	ldi	r19, 0xFF	; 255
    240c:	4f e7       	ldi	r20, 0x7F	; 127
    240e:	57 e4       	ldi	r21, 0x47	; 71
    2410:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2414:	18 16       	cp	r1, r24
    2416:	4c f5       	brge	.+82     	; 0x246a <HLCD4_voidClearDisplay+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2418:	6b 85       	ldd	r22, Y+11	; 0x0b
    241a:	7c 85       	ldd	r23, Y+12	; 0x0c
    241c:	8d 85       	ldd	r24, Y+13	; 0x0d
    241e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2420:	20 e0       	ldi	r18, 0x00	; 0
    2422:	30 e0       	ldi	r19, 0x00	; 0
    2424:	40 e2       	ldi	r20, 0x20	; 32
    2426:	51 e4       	ldi	r21, 0x41	; 65
    2428:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    242c:	dc 01       	movw	r26, r24
    242e:	cb 01       	movw	r24, r22
    2430:	bc 01       	movw	r22, r24
    2432:	cd 01       	movw	r24, r26
    2434:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2438:	dc 01       	movw	r26, r24
    243a:	cb 01       	movw	r24, r22
    243c:	9e 83       	std	Y+6, r25	; 0x06
    243e:	8d 83       	std	Y+5, r24	; 0x05
    2440:	0f c0       	rjmp	.+30     	; 0x2460 <HLCD4_voidClearDisplay+0xd2>
    2442:	88 ec       	ldi	r24, 0xC8	; 200
    2444:	90 e0       	ldi	r25, 0x00	; 0
    2446:	9c 83       	std	Y+4, r25	; 0x04
    2448:	8b 83       	std	Y+3, r24	; 0x03
    244a:	8b 81       	ldd	r24, Y+3	; 0x03
    244c:	9c 81       	ldd	r25, Y+4	; 0x04
    244e:	01 97       	sbiw	r24, 0x01	; 1
    2450:	f1 f7       	brne	.-4      	; 0x244e <HLCD4_voidClearDisplay+0xc0>
    2452:	9c 83       	std	Y+4, r25	; 0x04
    2454:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2456:	8d 81       	ldd	r24, Y+5	; 0x05
    2458:	9e 81       	ldd	r25, Y+6	; 0x06
    245a:	01 97       	sbiw	r24, 0x01	; 1
    245c:	9e 83       	std	Y+6, r25	; 0x06
    245e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2460:	8d 81       	ldd	r24, Y+5	; 0x05
    2462:	9e 81       	ldd	r25, Y+6	; 0x06
    2464:	00 97       	sbiw	r24, 0x00	; 0
    2466:	69 f7       	brne	.-38     	; 0x2442 <HLCD4_voidClearDisplay+0xb4>
    2468:	14 c0       	rjmp	.+40     	; 0x2492 <HLCD4_voidClearDisplay+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    246a:	6f 81       	ldd	r22, Y+7	; 0x07
    246c:	78 85       	ldd	r23, Y+8	; 0x08
    246e:	89 85       	ldd	r24, Y+9	; 0x09
    2470:	9a 85       	ldd	r25, Y+10	; 0x0a
    2472:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2476:	dc 01       	movw	r26, r24
    2478:	cb 01       	movw	r24, r22
    247a:	9e 83       	std	Y+6, r25	; 0x06
    247c:	8d 83       	std	Y+5, r24	; 0x05
    247e:	8d 81       	ldd	r24, Y+5	; 0x05
    2480:	9e 81       	ldd	r25, Y+6	; 0x06
    2482:	9a 83       	std	Y+2, r25	; 0x02
    2484:	89 83       	std	Y+1, r24	; 0x01
    2486:	89 81       	ldd	r24, Y+1	; 0x01
    2488:	9a 81       	ldd	r25, Y+2	; 0x02
    248a:	01 97       	sbiw	r24, 0x01	; 1
    248c:	f1 f7       	brne	.-4      	; 0x248a <HLCD4_voidClearDisplay+0xfc>
    248e:	9a 83       	std	Y+2, r25	; 0x02
    2490:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(2);
}
    2492:	2e 96       	adiw	r28, 0x0e	; 14
    2494:	0f b6       	in	r0, 0x3f	; 63
    2496:	f8 94       	cli
    2498:	de bf       	out	0x3e, r29	; 62
    249a:	0f be       	out	0x3f, r0	; 63
    249c:	cd bf       	out	0x3d, r28	; 61
    249e:	cf 91       	pop	r28
    24a0:	df 91       	pop	r29
    24a2:	08 95       	ret

000024a4 <HLCD4_voidSendString>:

void HLCD4_voidSendString(u8 * A_Pu8String)
{
    24a4:	df 93       	push	r29
    24a6:	cf 93       	push	r28
    24a8:	00 d0       	rcall	.+0      	; 0x24aa <HLCD4_voidSendString+0x6>
    24aa:	0f 92       	push	r0
    24ac:	cd b7       	in	r28, 0x3d	; 61
    24ae:	de b7       	in	r29, 0x3e	; 62
    24b0:	9b 83       	std	Y+3, r25	; 0x03
    24b2:	8a 83       	std	Y+2, r24	; 0x02
    u8 local_u8Couter=0;
    24b4:	19 82       	std	Y+1, r1	; 0x01
    24b6:	0e c0       	rjmp	.+28     	; 0x24d4 <HLCD4_voidSendString+0x30>
    while (A_Pu8String[local_u8Couter]!='\0')
    {
        HLCD4_voidSendData(A_Pu8String[local_u8Couter]);
    24b8:	89 81       	ldd	r24, Y+1	; 0x01
    24ba:	28 2f       	mov	r18, r24
    24bc:	30 e0       	ldi	r19, 0x00	; 0
    24be:	8a 81       	ldd	r24, Y+2	; 0x02
    24c0:	9b 81       	ldd	r25, Y+3	; 0x03
    24c2:	fc 01       	movw	r30, r24
    24c4:	e2 0f       	add	r30, r18
    24c6:	f3 1f       	adc	r31, r19
    24c8:	80 81       	ld	r24, Z
    24ca:	0e 94 5e 0d 	call	0x1abc	; 0x1abc <HLCD4_voidSendData>
        local_u8Couter++;
    24ce:	89 81       	ldd	r24, Y+1	; 0x01
    24d0:	8f 5f       	subi	r24, 0xFF	; 255
    24d2:	89 83       	std	Y+1, r24	; 0x01
}

void HLCD4_voidSendString(u8 * A_Pu8String)
{
    u8 local_u8Couter=0;
    while (A_Pu8String[local_u8Couter]!='\0')
    24d4:	89 81       	ldd	r24, Y+1	; 0x01
    24d6:	28 2f       	mov	r18, r24
    24d8:	30 e0       	ldi	r19, 0x00	; 0
    24da:	8a 81       	ldd	r24, Y+2	; 0x02
    24dc:	9b 81       	ldd	r25, Y+3	; 0x03
    24de:	fc 01       	movw	r30, r24
    24e0:	e2 0f       	add	r30, r18
    24e2:	f3 1f       	adc	r31, r19
    24e4:	80 81       	ld	r24, Z
    24e6:	88 23       	and	r24, r24
    24e8:	39 f7       	brne	.-50     	; 0x24b8 <HLCD4_voidSendString+0x14>
    {
        HLCD4_voidSendData(A_Pu8String[local_u8Couter]);
        local_u8Couter++;
    }
    
}
    24ea:	0f 90       	pop	r0
    24ec:	0f 90       	pop	r0
    24ee:	0f 90       	pop	r0
    24f0:	cf 91       	pop	r28
    24f2:	df 91       	pop	r29
    24f4:	08 95       	ret

000024f6 <HLCD4_voidGoToPos>:

void HLCD4_voidGoToPos(u8 A_u8RowNum,u8 A_u8ColNum)
{
    24f6:	df 93       	push	r29
    24f8:	cf 93       	push	r28
    24fa:	cd b7       	in	r28, 0x3d	; 61
    24fc:	de b7       	in	r29, 0x3e	; 62
    24fe:	63 97       	sbiw	r28, 0x13	; 19
    2500:	0f b6       	in	r0, 0x3f	; 63
    2502:	f8 94       	cli
    2504:	de bf       	out	0x3e, r29	; 62
    2506:	0f be       	out	0x3f, r0	; 63
    2508:	cd bf       	out	0x3d, r28	; 61
    250a:	88 8b       	std	Y+16, r24	; 0x10
    250c:	69 8b       	std	Y+17, r22	; 0x11
    // _delay_ms(1);

    //*******************************//
    //Second method
	u8 local_u8Address;
    switch(A_u8RowNum)
    250e:	88 89       	ldd	r24, Y+16	; 0x10
    2510:	28 2f       	mov	r18, r24
    2512:	30 e0       	ldi	r19, 0x00	; 0
    2514:	3b 8b       	std	Y+19, r19	; 0x13
    2516:	2a 8b       	std	Y+18, r18	; 0x12
    2518:	8a 89       	ldd	r24, Y+18	; 0x12
    251a:	9b 89       	ldd	r25, Y+19	; 0x13
    251c:	81 30       	cpi	r24, 0x01	; 1
    251e:	91 05       	cpc	r25, r1
    2520:	31 f0       	breq	.+12     	; 0x252e <HLCD4_voidGoToPos+0x38>
    2522:	2a 89       	ldd	r18, Y+18	; 0x12
    2524:	3b 89       	ldd	r19, Y+19	; 0x13
    2526:	22 30       	cpi	r18, 0x02	; 2
    2528:	31 05       	cpc	r19, r1
    252a:	59 f0       	breq	.+22     	; 0x2542 <HLCD4_voidGoToPos+0x4c>
    252c:	13 c0       	rjmp	.+38     	; 0x2554 <HLCD4_voidGoToPos+0x5e>
    {
        case LCD_ROW_ONE:
        local_u8Address=FIRST_ROW_ADDRESS + A_u8ColNum -1;
    252e:	89 89       	ldd	r24, Y+17	; 0x11
    2530:	81 50       	subi	r24, 0x01	; 1
    2532:	8f 87       	std	Y+15, r24	; 0x0f
        SET_BIT(local_u8Address,PIN7);
    2534:	8f 85       	ldd	r24, Y+15	; 0x0f
    2536:	80 68       	ori	r24, 0x80	; 128
    2538:	8f 87       	std	Y+15, r24	; 0x0f
        HLCD4_voidSendCommand(local_u8Address);
    253a:	8f 85       	ldd	r24, Y+15	; 0x0f
    253c:	0e 94 c5 0b 	call	0x178a	; 0x178a <HLCD4_voidSendCommand>
    2540:	09 c0       	rjmp	.+18     	; 0x2554 <HLCD4_voidGoToPos+0x5e>
        break;

        case LCD_ROW_TWO:
        local_u8Address=SECOND_ROW_ADDRESS + A_u8ColNum;
    2542:	89 89       	ldd	r24, Y+17	; 0x11
    2544:	81 5c       	subi	r24, 0xC1	; 193
    2546:	8f 87       	std	Y+15, r24	; 0x0f
        SET_BIT(local_u8Address,PIN7);
    2548:	8f 85       	ldd	r24, Y+15	; 0x0f
    254a:	80 68       	ori	r24, 0x80	; 128
    254c:	8f 87       	std	Y+15, r24	; 0x0f
        HLCD4_voidSendCommand(local_u8Address);
    254e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2550:	0e 94 c5 0b 	call	0x178a	; 0x178a <HLCD4_voidSendCommand>
    2554:	80 e0       	ldi	r24, 0x00	; 0
    2556:	90 e0       	ldi	r25, 0x00	; 0
    2558:	a0 e8       	ldi	r26, 0x80	; 128
    255a:	bf e3       	ldi	r27, 0x3F	; 63
    255c:	8b 87       	std	Y+11, r24	; 0x0b
    255e:	9c 87       	std	Y+12, r25	; 0x0c
    2560:	ad 87       	std	Y+13, r26	; 0x0d
    2562:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2564:	6b 85       	ldd	r22, Y+11	; 0x0b
    2566:	7c 85       	ldd	r23, Y+12	; 0x0c
    2568:	8d 85       	ldd	r24, Y+13	; 0x0d
    256a:	9e 85       	ldd	r25, Y+14	; 0x0e
    256c:	20 e0       	ldi	r18, 0x00	; 0
    256e:	30 e0       	ldi	r19, 0x00	; 0
    2570:	4a ef       	ldi	r20, 0xFA	; 250
    2572:	54 e4       	ldi	r21, 0x44	; 68
    2574:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2578:	dc 01       	movw	r26, r24
    257a:	cb 01       	movw	r24, r22
    257c:	8f 83       	std	Y+7, r24	; 0x07
    257e:	98 87       	std	Y+8, r25	; 0x08
    2580:	a9 87       	std	Y+9, r26	; 0x09
    2582:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2584:	6f 81       	ldd	r22, Y+7	; 0x07
    2586:	78 85       	ldd	r23, Y+8	; 0x08
    2588:	89 85       	ldd	r24, Y+9	; 0x09
    258a:	9a 85       	ldd	r25, Y+10	; 0x0a
    258c:	20 e0       	ldi	r18, 0x00	; 0
    258e:	30 e0       	ldi	r19, 0x00	; 0
    2590:	40 e8       	ldi	r20, 0x80	; 128
    2592:	5f e3       	ldi	r21, 0x3F	; 63
    2594:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2598:	88 23       	and	r24, r24
    259a:	2c f4       	brge	.+10     	; 0x25a6 <HLCD4_voidGoToPos+0xb0>
		__ticks = 1;
    259c:	81 e0       	ldi	r24, 0x01	; 1
    259e:	90 e0       	ldi	r25, 0x00	; 0
    25a0:	9e 83       	std	Y+6, r25	; 0x06
    25a2:	8d 83       	std	Y+5, r24	; 0x05
    25a4:	3f c0       	rjmp	.+126    	; 0x2624 <HLCD4_voidGoToPos+0x12e>
	else if (__tmp > 65535)
    25a6:	6f 81       	ldd	r22, Y+7	; 0x07
    25a8:	78 85       	ldd	r23, Y+8	; 0x08
    25aa:	89 85       	ldd	r24, Y+9	; 0x09
    25ac:	9a 85       	ldd	r25, Y+10	; 0x0a
    25ae:	20 e0       	ldi	r18, 0x00	; 0
    25b0:	3f ef       	ldi	r19, 0xFF	; 255
    25b2:	4f e7       	ldi	r20, 0x7F	; 127
    25b4:	57 e4       	ldi	r21, 0x47	; 71
    25b6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    25ba:	18 16       	cp	r1, r24
    25bc:	4c f5       	brge	.+82     	; 0x2610 <HLCD4_voidGoToPos+0x11a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    25be:	6b 85       	ldd	r22, Y+11	; 0x0b
    25c0:	7c 85       	ldd	r23, Y+12	; 0x0c
    25c2:	8d 85       	ldd	r24, Y+13	; 0x0d
    25c4:	9e 85       	ldd	r25, Y+14	; 0x0e
    25c6:	20 e0       	ldi	r18, 0x00	; 0
    25c8:	30 e0       	ldi	r19, 0x00	; 0
    25ca:	40 e2       	ldi	r20, 0x20	; 32
    25cc:	51 e4       	ldi	r21, 0x41	; 65
    25ce:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25d2:	dc 01       	movw	r26, r24
    25d4:	cb 01       	movw	r24, r22
    25d6:	bc 01       	movw	r22, r24
    25d8:	cd 01       	movw	r24, r26
    25da:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25de:	dc 01       	movw	r26, r24
    25e0:	cb 01       	movw	r24, r22
    25e2:	9e 83       	std	Y+6, r25	; 0x06
    25e4:	8d 83       	std	Y+5, r24	; 0x05
    25e6:	0f c0       	rjmp	.+30     	; 0x2606 <HLCD4_voidGoToPos+0x110>
    25e8:	88 ec       	ldi	r24, 0xC8	; 200
    25ea:	90 e0       	ldi	r25, 0x00	; 0
    25ec:	9c 83       	std	Y+4, r25	; 0x04
    25ee:	8b 83       	std	Y+3, r24	; 0x03
    25f0:	8b 81       	ldd	r24, Y+3	; 0x03
    25f2:	9c 81       	ldd	r25, Y+4	; 0x04
    25f4:	01 97       	sbiw	r24, 0x01	; 1
    25f6:	f1 f7       	brne	.-4      	; 0x25f4 <HLCD4_voidGoToPos+0xfe>
    25f8:	9c 83       	std	Y+4, r25	; 0x04
    25fa:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    25fc:	8d 81       	ldd	r24, Y+5	; 0x05
    25fe:	9e 81       	ldd	r25, Y+6	; 0x06
    2600:	01 97       	sbiw	r24, 0x01	; 1
    2602:	9e 83       	std	Y+6, r25	; 0x06
    2604:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2606:	8d 81       	ldd	r24, Y+5	; 0x05
    2608:	9e 81       	ldd	r25, Y+6	; 0x06
    260a:	00 97       	sbiw	r24, 0x00	; 0
    260c:	69 f7       	brne	.-38     	; 0x25e8 <HLCD4_voidGoToPos+0xf2>
    260e:	14 c0       	rjmp	.+40     	; 0x2638 <HLCD4_voidGoToPos+0x142>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2610:	6f 81       	ldd	r22, Y+7	; 0x07
    2612:	78 85       	ldd	r23, Y+8	; 0x08
    2614:	89 85       	ldd	r24, Y+9	; 0x09
    2616:	9a 85       	ldd	r25, Y+10	; 0x0a
    2618:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    261c:	dc 01       	movw	r26, r24
    261e:	cb 01       	movw	r24, r22
    2620:	9e 83       	std	Y+6, r25	; 0x06
    2622:	8d 83       	std	Y+5, r24	; 0x05
    2624:	8d 81       	ldd	r24, Y+5	; 0x05
    2626:	9e 81       	ldd	r25, Y+6	; 0x06
    2628:	9a 83       	std	Y+2, r25	; 0x02
    262a:	89 83       	std	Y+1, r24	; 0x01
    262c:	89 81       	ldd	r24, Y+1	; 0x01
    262e:	9a 81       	ldd	r25, Y+2	; 0x02
    2630:	01 97       	sbiw	r24, 0x01	; 1
    2632:	f1 f7       	brne	.-4      	; 0x2630 <HLCD4_voidGoToPos+0x13a>
    2634:	9a 83       	std	Y+2, r25	; 0x02
    2636:	89 83       	std	Y+1, r24	; 0x01
        break;

    }
    _delay_ms(1);

}
    2638:	63 96       	adiw	r28, 0x13	; 19
    263a:	0f b6       	in	r0, 0x3f	; 63
    263c:	f8 94       	cli
    263e:	de bf       	out	0x3e, r29	; 62
    2640:	0f be       	out	0x3f, r0	; 63
    2642:	cd bf       	out	0x3d, r28	; 61
    2644:	cf 91       	pop	r28
    2646:	df 91       	pop	r29
    2648:	08 95       	ret

0000264a <HLCD4_voidDisplayNumber>:

void HLCD4_voidDisplayNumber(u32 A_u32Number)
{
    264a:	df 93       	push	r29
    264c:	cf 93       	push	r28
    264e:	00 d0       	rcall	.+0      	; 0x2650 <HLCD4_voidDisplayNumber+0x6>
    2650:	00 d0       	rcall	.+0      	; 0x2652 <HLCD4_voidDisplayNumber+0x8>
    2652:	cd b7       	in	r28, 0x3d	; 61
    2654:	de b7       	in	r29, 0x3e	; 62
    2656:	9c 83       	std	Y+4, r25	; 0x04
    2658:	8b 83       	std	Y+3, r24	; 0x03
    // u8 local_u8NumToStr[100];
    // itoa(A_u32Number,local_u8NumToStr,10);
    // HLCD4_voidSendString(local_u8NumToStr);
    //****************************************************//
    //third method: it will deal with zero unlike the first method so it's not problem here
    u32 local_u32Number=1;
    265a:	81 e0       	ldi	r24, 0x01	; 1
    265c:	90 e0       	ldi	r25, 0x00	; 0
    265e:	9a 83       	std	Y+2, r25	; 0x02
    2660:	89 83       	std	Y+1, r24	; 0x01
    if(A_u32Number==0)
    2662:	8b 81       	ldd	r24, Y+3	; 0x03
    2664:	9c 81       	ldd	r25, Y+4	; 0x04
    2666:	00 97       	sbiw	r24, 0x00	; 0
    2668:	31 f5       	brne	.+76     	; 0x26b6 <HLCD4_voidDisplayNumber+0x6c>
    {
        HLCD4_voidSendData('0');
    266a:	80 e3       	ldi	r24, 0x30	; 48
    266c:	0e 94 5e 0d 	call	0x1abc	; 0x1abc <HLCD4_voidSendData>
    2670:	22 c0       	rjmp	.+68     	; 0x26b6 <HLCD4_voidDisplayNumber+0x6c>
    }   
    while(A_u32Number !=0)
    {
            local_u32Number=((local_u32Number * 10)+(A_u32Number%10));
    2672:	89 81       	ldd	r24, Y+1	; 0x01
    2674:	9a 81       	ldd	r25, Y+2	; 0x02
    2676:	9c 01       	movw	r18, r24
    2678:	22 0f       	add	r18, r18
    267a:	33 1f       	adc	r19, r19
    267c:	c9 01       	movw	r24, r18
    267e:	88 0f       	add	r24, r24
    2680:	99 1f       	adc	r25, r25
    2682:	88 0f       	add	r24, r24
    2684:	99 1f       	adc	r25, r25
    2686:	f9 01       	movw	r30, r18
    2688:	e8 0f       	add	r30, r24
    268a:	f9 1f       	adc	r31, r25
    268c:	8b 81       	ldd	r24, Y+3	; 0x03
    268e:	9c 81       	ldd	r25, Y+4	; 0x04
    2690:	2a e0       	ldi	r18, 0x0A	; 10
    2692:	30 e0       	ldi	r19, 0x00	; 0
    2694:	b9 01       	movw	r22, r18
    2696:	0e 94 b9 1f 	call	0x3f72	; 0x3f72 <__udivmodhi4>
    269a:	8e 0f       	add	r24, r30
    269c:	9f 1f       	adc	r25, r31
    269e:	9a 83       	std	Y+2, r25	; 0x02
    26a0:	89 83       	std	Y+1, r24	; 0x01
            A_u32Number=A_u32Number/10;
    26a2:	8b 81       	ldd	r24, Y+3	; 0x03
    26a4:	9c 81       	ldd	r25, Y+4	; 0x04
    26a6:	2a e0       	ldi	r18, 0x0A	; 10
    26a8:	30 e0       	ldi	r19, 0x00	; 0
    26aa:	b9 01       	movw	r22, r18
    26ac:	0e 94 b9 1f 	call	0x3f72	; 0x3f72 <__udivmodhi4>
    26b0:	cb 01       	movw	r24, r22
    26b2:	9c 83       	std	Y+4, r25	; 0x04
    26b4:	8b 83       	std	Y+3, r24	; 0x03
    u32 local_u32Number=1;
    if(A_u32Number==0)
    {
        HLCD4_voidSendData('0');
    }   
    while(A_u32Number !=0)
    26b6:	8b 81       	ldd	r24, Y+3	; 0x03
    26b8:	9c 81       	ldd	r25, Y+4	; 0x04
    26ba:	00 97       	sbiw	r24, 0x00	; 0
    26bc:	d1 f6       	brne	.-76     	; 0x2672 <HLCD4_voidDisplayNumber+0x28>
    26be:	14 c0       	rjmp	.+40     	; 0x26e8 <HLCD4_voidDisplayNumber+0x9e>
            A_u32Number=A_u32Number/10;

    }
    while (local_u32Number!=1)
    {
        HLCD4_voidSendData((local_u32Number%10)+48);
    26c0:	89 81       	ldd	r24, Y+1	; 0x01
    26c2:	9a 81       	ldd	r25, Y+2	; 0x02
    26c4:	2a e0       	ldi	r18, 0x0A	; 10
    26c6:	30 e0       	ldi	r19, 0x00	; 0
    26c8:	b9 01       	movw	r22, r18
    26ca:	0e 94 b9 1f 	call	0x3f72	; 0x3f72 <__udivmodhi4>
    26ce:	80 5d       	subi	r24, 0xD0	; 208
    26d0:	0e 94 5e 0d 	call	0x1abc	; 0x1abc <HLCD4_voidSendData>
        local_u32Number=local_u32Number/10;
    26d4:	89 81       	ldd	r24, Y+1	; 0x01
    26d6:	9a 81       	ldd	r25, Y+2	; 0x02
    26d8:	2a e0       	ldi	r18, 0x0A	; 10
    26da:	30 e0       	ldi	r19, 0x00	; 0
    26dc:	b9 01       	movw	r22, r18
    26de:	0e 94 b9 1f 	call	0x3f72	; 0x3f72 <__udivmodhi4>
    26e2:	cb 01       	movw	r24, r22
    26e4:	9a 83       	std	Y+2, r25	; 0x02
    26e6:	89 83       	std	Y+1, r24	; 0x01
    {
            local_u32Number=((local_u32Number * 10)+(A_u32Number%10));
            A_u32Number=A_u32Number/10;

    }
    while (local_u32Number!=1)
    26e8:	89 81       	ldd	r24, Y+1	; 0x01
    26ea:	9a 81       	ldd	r25, Y+2	; 0x02
    26ec:	81 30       	cpi	r24, 0x01	; 1
    26ee:	91 05       	cpc	r25, r1
    26f0:	39 f7       	brne	.-50     	; 0x26c0 <HLCD4_voidDisplayNumber+0x76>
    {
        HLCD4_voidSendData((local_u32Number%10)+48);
        local_u32Number=local_u32Number/10;
    }
}
    26f2:	0f 90       	pop	r0
    26f4:	0f 90       	pop	r0
    26f6:	0f 90       	pop	r0
    26f8:	0f 90       	pop	r0
    26fa:	cf 91       	pop	r28
    26fc:	df 91       	pop	r29
    26fe:	08 95       	ret

00002700 <HLCD4_voidStoreCustomChar>:

void HLCD4_voidStoreCustomChar(u8 * A_u8Pattern,u8 A_u8CGRAMIndex)
{
    2700:	df 93       	push	r29
    2702:	cf 93       	push	r28
    2704:	cd b7       	in	r28, 0x3d	; 61
    2706:	de b7       	in	r29, 0x3e	; 62
    2708:	ab 97       	sbiw	r28, 0x2b	; 43
    270a:	0f b6       	in	r0, 0x3f	; 63
    270c:	f8 94       	cli
    270e:	de bf       	out	0x3e, r29	; 62
    2710:	0f be       	out	0x3f, r0	; 63
    2712:	cd bf       	out	0x3d, r28	; 61
    2714:	9a a7       	std	Y+42, r25	; 0x2a
    2716:	89 a7       	std	Y+41, r24	; 0x29
    2718:	6b a7       	std	Y+43, r22	; 0x2b
    u8 local_u8Address;
    if(A_u8CGRAMIndex<8)
    271a:	8b a5       	ldd	r24, Y+43	; 0x2b
    271c:	88 30       	cpi	r24, 0x08	; 8
    271e:	08 f0       	brcs	.+2      	; 0x2722 <HLCD4_voidStoreCustomChar+0x22>
    2720:	e5 c0       	rjmp	.+458    	; 0x28ec <HLCD4_voidStoreCustomChar+0x1ec>
    {
        A_u8CGRAMIndex=A_u8CGRAMIndex*8;
    2722:	8b a5       	ldd	r24, Y+43	; 0x2b
    2724:	88 2f       	mov	r24, r24
    2726:	90 e0       	ldi	r25, 0x00	; 0
    2728:	88 0f       	add	r24, r24
    272a:	99 1f       	adc	r25, r25
    272c:	88 0f       	add	r24, r24
    272e:	99 1f       	adc	r25, r25
    2730:	88 0f       	add	r24, r24
    2732:	99 1f       	adc	r25, r25
    2734:	8b a7       	std	Y+43, r24	; 0x2b
        SET_BIT(A_u8CGRAMIndex,PIN6);
    2736:	8b a5       	ldd	r24, Y+43	; 0x2b
    2738:	80 64       	ori	r24, 0x40	; 64
    273a:	8b a7       	std	Y+43, r24	; 0x2b
        CLR_BIT(A_u8CGRAMIndex,PIN7);
    273c:	8b a5       	ldd	r24, Y+43	; 0x2b
    273e:	8f 77       	andi	r24, 0x7F	; 127
    2740:	8b a7       	std	Y+43, r24	; 0x2b
        HLCD4_voidSendCommand(A_u8CGRAMIndex);
    2742:	8b a5       	ldd	r24, Y+43	; 0x2b
    2744:	0e 94 c5 0b 	call	0x178a	; 0x178a <HLCD4_voidSendCommand>
        for(u8 i=0;i<8;i++)
    2748:	1f a2       	std	Y+39, r1	; 0x27
    274a:	cc c0       	rjmp	.+408    	; 0x28e4 <HLCD4_voidStoreCustomChar+0x1e4>
        {
            HLCD4_voidSendData(A_u8Pattern[i]);
    274c:	8f a1       	ldd	r24, Y+39	; 0x27
    274e:	28 2f       	mov	r18, r24
    2750:	30 e0       	ldi	r19, 0x00	; 0
    2752:	89 a5       	ldd	r24, Y+41	; 0x29
    2754:	9a a5       	ldd	r25, Y+42	; 0x2a
    2756:	fc 01       	movw	r30, r24
    2758:	e2 0f       	add	r30, r18
    275a:	f3 1f       	adc	r31, r19
    275c:	80 81       	ld	r24, Z
    275e:	0e 94 5e 0d 	call	0x1abc	; 0x1abc <HLCD4_voidSendData>
    2762:	80 e0       	ldi	r24, 0x00	; 0
    2764:	90 e0       	ldi	r25, 0x00	; 0
    2766:	a0 e7       	ldi	r26, 0x70	; 112
    2768:	b2 e4       	ldi	r27, 0x42	; 66
    276a:	8b a3       	std	Y+35, r24	; 0x23
    276c:	9c a3       	std	Y+36, r25	; 0x24
    276e:	ad a3       	std	Y+37, r26	; 0x25
    2770:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2772:	6b a1       	ldd	r22, Y+35	; 0x23
    2774:	7c a1       	ldd	r23, Y+36	; 0x24
    2776:	8d a1       	ldd	r24, Y+37	; 0x25
    2778:	9e a1       	ldd	r25, Y+38	; 0x26
    277a:	2b ea       	ldi	r18, 0xAB	; 171
    277c:	3a ea       	ldi	r19, 0xAA	; 170
    277e:	4a e2       	ldi	r20, 0x2A	; 42
    2780:	50 e4       	ldi	r21, 0x40	; 64
    2782:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2786:	dc 01       	movw	r26, r24
    2788:	cb 01       	movw	r24, r22
    278a:	8f 8f       	std	Y+31, r24	; 0x1f
    278c:	98 a3       	std	Y+32, r25	; 0x20
    278e:	a9 a3       	std	Y+33, r26	; 0x21
    2790:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    2792:	6f 8d       	ldd	r22, Y+31	; 0x1f
    2794:	78 a1       	ldd	r23, Y+32	; 0x20
    2796:	89 a1       	ldd	r24, Y+33	; 0x21
    2798:	9a a1       	ldd	r25, Y+34	; 0x22
    279a:	20 e0       	ldi	r18, 0x00	; 0
    279c:	30 e0       	ldi	r19, 0x00	; 0
    279e:	40 e8       	ldi	r20, 0x80	; 128
    27a0:	5f e3       	ldi	r21, 0x3F	; 63
    27a2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    27a6:	88 23       	and	r24, r24
    27a8:	1c f4       	brge	.+6      	; 0x27b0 <HLCD4_voidStoreCustomChar+0xb0>
		__ticks = 1;
    27aa:	81 e0       	ldi	r24, 0x01	; 1
    27ac:	8e 8f       	std	Y+30, r24	; 0x1e
    27ae:	91 c0       	rjmp	.+290    	; 0x28d2 <HLCD4_voidStoreCustomChar+0x1d2>
	else if (__tmp > 255)
    27b0:	6f 8d       	ldd	r22, Y+31	; 0x1f
    27b2:	78 a1       	ldd	r23, Y+32	; 0x20
    27b4:	89 a1       	ldd	r24, Y+33	; 0x21
    27b6:	9a a1       	ldd	r25, Y+34	; 0x22
    27b8:	20 e0       	ldi	r18, 0x00	; 0
    27ba:	30 e0       	ldi	r19, 0x00	; 0
    27bc:	4f e7       	ldi	r20, 0x7F	; 127
    27be:	53 e4       	ldi	r21, 0x43	; 67
    27c0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    27c4:	18 16       	cp	r1, r24
    27c6:	0c f0       	brlt	.+2      	; 0x27ca <HLCD4_voidStoreCustomChar+0xca>
    27c8:	7b c0       	rjmp	.+246    	; 0x28c0 <HLCD4_voidStoreCustomChar+0x1c0>
	{
		_delay_ms(__us / 1000.0);
    27ca:	6b a1       	ldd	r22, Y+35	; 0x23
    27cc:	7c a1       	ldd	r23, Y+36	; 0x24
    27ce:	8d a1       	ldd	r24, Y+37	; 0x25
    27d0:	9e a1       	ldd	r25, Y+38	; 0x26
    27d2:	20 e0       	ldi	r18, 0x00	; 0
    27d4:	30 e0       	ldi	r19, 0x00	; 0
    27d6:	4a e7       	ldi	r20, 0x7A	; 122
    27d8:	54 e4       	ldi	r21, 0x44	; 68
    27da:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    27de:	dc 01       	movw	r26, r24
    27e0:	cb 01       	movw	r24, r22
    27e2:	8a 8f       	std	Y+26, r24	; 0x1a
    27e4:	9b 8f       	std	Y+27, r25	; 0x1b
    27e6:	ac 8f       	std	Y+28, r26	; 0x1c
    27e8:	bd 8f       	std	Y+29, r27	; 0x1d
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    27ea:	6a 8d       	ldd	r22, Y+26	; 0x1a
    27ec:	7b 8d       	ldd	r23, Y+27	; 0x1b
    27ee:	8c 8d       	ldd	r24, Y+28	; 0x1c
    27f0:	9d 8d       	ldd	r25, Y+29	; 0x1d
    27f2:	20 e0       	ldi	r18, 0x00	; 0
    27f4:	30 e0       	ldi	r19, 0x00	; 0
    27f6:	4a ef       	ldi	r20, 0xFA	; 250
    27f8:	54 e4       	ldi	r21, 0x44	; 68
    27fa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27fe:	dc 01       	movw	r26, r24
    2800:	cb 01       	movw	r24, r22
    2802:	8e 8b       	std	Y+22, r24	; 0x16
    2804:	9f 8b       	std	Y+23, r25	; 0x17
    2806:	a8 8f       	std	Y+24, r26	; 0x18
    2808:	b9 8f       	std	Y+25, r27	; 0x19
	if (__tmp < 1.0)
    280a:	6e 89       	ldd	r22, Y+22	; 0x16
    280c:	7f 89       	ldd	r23, Y+23	; 0x17
    280e:	88 8d       	ldd	r24, Y+24	; 0x18
    2810:	99 8d       	ldd	r25, Y+25	; 0x19
    2812:	20 e0       	ldi	r18, 0x00	; 0
    2814:	30 e0       	ldi	r19, 0x00	; 0
    2816:	40 e8       	ldi	r20, 0x80	; 128
    2818:	5f e3       	ldi	r21, 0x3F	; 63
    281a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    281e:	88 23       	and	r24, r24
    2820:	2c f4       	brge	.+10     	; 0x282c <HLCD4_voidStoreCustomChar+0x12c>
		__ticks = 1;
    2822:	81 e0       	ldi	r24, 0x01	; 1
    2824:	90 e0       	ldi	r25, 0x00	; 0
    2826:	9d 8b       	std	Y+21, r25	; 0x15
    2828:	8c 8b       	std	Y+20, r24	; 0x14
    282a:	3f c0       	rjmp	.+126    	; 0x28aa <HLCD4_voidStoreCustomChar+0x1aa>
	else if (__tmp > 65535)
    282c:	6e 89       	ldd	r22, Y+22	; 0x16
    282e:	7f 89       	ldd	r23, Y+23	; 0x17
    2830:	88 8d       	ldd	r24, Y+24	; 0x18
    2832:	99 8d       	ldd	r25, Y+25	; 0x19
    2834:	20 e0       	ldi	r18, 0x00	; 0
    2836:	3f ef       	ldi	r19, 0xFF	; 255
    2838:	4f e7       	ldi	r20, 0x7F	; 127
    283a:	57 e4       	ldi	r21, 0x47	; 71
    283c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2840:	18 16       	cp	r1, r24
    2842:	4c f5       	brge	.+82     	; 0x2896 <HLCD4_voidStoreCustomChar+0x196>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2844:	6a 8d       	ldd	r22, Y+26	; 0x1a
    2846:	7b 8d       	ldd	r23, Y+27	; 0x1b
    2848:	8c 8d       	ldd	r24, Y+28	; 0x1c
    284a:	9d 8d       	ldd	r25, Y+29	; 0x1d
    284c:	20 e0       	ldi	r18, 0x00	; 0
    284e:	30 e0       	ldi	r19, 0x00	; 0
    2850:	40 e2       	ldi	r20, 0x20	; 32
    2852:	51 e4       	ldi	r21, 0x41	; 65
    2854:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2858:	dc 01       	movw	r26, r24
    285a:	cb 01       	movw	r24, r22
    285c:	bc 01       	movw	r22, r24
    285e:	cd 01       	movw	r24, r26
    2860:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2864:	dc 01       	movw	r26, r24
    2866:	cb 01       	movw	r24, r22
    2868:	9d 8b       	std	Y+21, r25	; 0x15
    286a:	8c 8b       	std	Y+20, r24	; 0x14
    286c:	0f c0       	rjmp	.+30     	; 0x288c <HLCD4_voidStoreCustomChar+0x18c>
    286e:	88 ec       	ldi	r24, 0xC8	; 200
    2870:	90 e0       	ldi	r25, 0x00	; 0
    2872:	9b 8b       	std	Y+19, r25	; 0x13
    2874:	8a 8b       	std	Y+18, r24	; 0x12
    2876:	8a 89       	ldd	r24, Y+18	; 0x12
    2878:	9b 89       	ldd	r25, Y+19	; 0x13
    287a:	01 97       	sbiw	r24, 0x01	; 1
    287c:	f1 f7       	brne	.-4      	; 0x287a <HLCD4_voidStoreCustomChar+0x17a>
    287e:	9b 8b       	std	Y+19, r25	; 0x13
    2880:	8a 8b       	std	Y+18, r24	; 0x12
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2882:	8c 89       	ldd	r24, Y+20	; 0x14
    2884:	9d 89       	ldd	r25, Y+21	; 0x15
    2886:	01 97       	sbiw	r24, 0x01	; 1
    2888:	9d 8b       	std	Y+21, r25	; 0x15
    288a:	8c 8b       	std	Y+20, r24	; 0x14
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    288c:	8c 89       	ldd	r24, Y+20	; 0x14
    288e:	9d 89       	ldd	r25, Y+21	; 0x15
    2890:	00 97       	sbiw	r24, 0x00	; 0
    2892:	69 f7       	brne	.-38     	; 0x286e <HLCD4_voidStoreCustomChar+0x16e>
    2894:	24 c0       	rjmp	.+72     	; 0x28de <HLCD4_voidStoreCustomChar+0x1de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2896:	6e 89       	ldd	r22, Y+22	; 0x16
    2898:	7f 89       	ldd	r23, Y+23	; 0x17
    289a:	88 8d       	ldd	r24, Y+24	; 0x18
    289c:	99 8d       	ldd	r25, Y+25	; 0x19
    289e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28a2:	dc 01       	movw	r26, r24
    28a4:	cb 01       	movw	r24, r22
    28a6:	9d 8b       	std	Y+21, r25	; 0x15
    28a8:	8c 8b       	std	Y+20, r24	; 0x14
    28aa:	8c 89       	ldd	r24, Y+20	; 0x14
    28ac:	9d 89       	ldd	r25, Y+21	; 0x15
    28ae:	99 8b       	std	Y+17, r25	; 0x11
    28b0:	88 8b       	std	Y+16, r24	; 0x10
    28b2:	88 89       	ldd	r24, Y+16	; 0x10
    28b4:	99 89       	ldd	r25, Y+17	; 0x11
    28b6:	01 97       	sbiw	r24, 0x01	; 1
    28b8:	f1 f7       	brne	.-4      	; 0x28b6 <HLCD4_voidStoreCustomChar+0x1b6>
    28ba:	99 8b       	std	Y+17, r25	; 0x11
    28bc:	88 8b       	std	Y+16, r24	; 0x10
    28be:	0f c0       	rjmp	.+30     	; 0x28de <HLCD4_voidStoreCustomChar+0x1de>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    28c0:	6f 8d       	ldd	r22, Y+31	; 0x1f
    28c2:	78 a1       	ldd	r23, Y+32	; 0x20
    28c4:	89 a1       	ldd	r24, Y+33	; 0x21
    28c6:	9a a1       	ldd	r25, Y+34	; 0x22
    28c8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28cc:	dc 01       	movw	r26, r24
    28ce:	cb 01       	movw	r24, r22
    28d0:	8e 8f       	std	Y+30, r24	; 0x1e
    28d2:	8e 8d       	ldd	r24, Y+30	; 0x1e
    28d4:	8f 87       	std	Y+15, r24	; 0x0f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    28d6:	8f 85       	ldd	r24, Y+15	; 0x0f
    28d8:	8a 95       	dec	r24
    28da:	f1 f7       	brne	.-4      	; 0x28d8 <HLCD4_voidStoreCustomChar+0x1d8>
    28dc:	8f 87       	std	Y+15, r24	; 0x0f
    {
        A_u8CGRAMIndex=A_u8CGRAMIndex*8;
        SET_BIT(A_u8CGRAMIndex,PIN6);
        CLR_BIT(A_u8CGRAMIndex,PIN7);
        HLCD4_voidSendCommand(A_u8CGRAMIndex);
        for(u8 i=0;i<8;i++)
    28de:	8f a1       	ldd	r24, Y+39	; 0x27
    28e0:	8f 5f       	subi	r24, 0xFF	; 255
    28e2:	8f a3       	std	Y+39, r24	; 0x27
    28e4:	8f a1       	ldd	r24, Y+39	; 0x27
    28e6:	88 30       	cpi	r24, 0x08	; 8
    28e8:	08 f4       	brcc	.+2      	; 0x28ec <HLCD4_voidStoreCustomChar+0x1ec>
    28ea:	30 cf       	rjmp	.-416    	; 0x274c <HLCD4_voidStoreCustomChar+0x4c>
        {
            HLCD4_voidSendData(A_u8Pattern[i]);
            _delay_us(60);
        }
    }
    HLCD4_voidSendCommand(RETURN_HOME);
    28ec:	82 e0       	ldi	r24, 0x02	; 2
    28ee:	0e 94 c5 0b 	call	0x178a	; 0x178a <HLCD4_voidSendCommand>
    28f2:	80 e0       	ldi	r24, 0x00	; 0
    28f4:	90 e0       	ldi	r25, 0x00	; 0
    28f6:	a0 e0       	ldi	r26, 0x00	; 0
    28f8:	b0 e4       	ldi	r27, 0x40	; 64
    28fa:	8b 87       	std	Y+11, r24	; 0x0b
    28fc:	9c 87       	std	Y+12, r25	; 0x0c
    28fe:	ad 87       	std	Y+13, r26	; 0x0d
    2900:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2902:	6b 85       	ldd	r22, Y+11	; 0x0b
    2904:	7c 85       	ldd	r23, Y+12	; 0x0c
    2906:	8d 85       	ldd	r24, Y+13	; 0x0d
    2908:	9e 85       	ldd	r25, Y+14	; 0x0e
    290a:	20 e0       	ldi	r18, 0x00	; 0
    290c:	30 e0       	ldi	r19, 0x00	; 0
    290e:	4a ef       	ldi	r20, 0xFA	; 250
    2910:	54 e4       	ldi	r21, 0x44	; 68
    2912:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2916:	dc 01       	movw	r26, r24
    2918:	cb 01       	movw	r24, r22
    291a:	8f 83       	std	Y+7, r24	; 0x07
    291c:	98 87       	std	Y+8, r25	; 0x08
    291e:	a9 87       	std	Y+9, r26	; 0x09
    2920:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2922:	6f 81       	ldd	r22, Y+7	; 0x07
    2924:	78 85       	ldd	r23, Y+8	; 0x08
    2926:	89 85       	ldd	r24, Y+9	; 0x09
    2928:	9a 85       	ldd	r25, Y+10	; 0x0a
    292a:	20 e0       	ldi	r18, 0x00	; 0
    292c:	30 e0       	ldi	r19, 0x00	; 0
    292e:	40 e8       	ldi	r20, 0x80	; 128
    2930:	5f e3       	ldi	r21, 0x3F	; 63
    2932:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2936:	88 23       	and	r24, r24
    2938:	2c f4       	brge	.+10     	; 0x2944 <HLCD4_voidStoreCustomChar+0x244>
		__ticks = 1;
    293a:	81 e0       	ldi	r24, 0x01	; 1
    293c:	90 e0       	ldi	r25, 0x00	; 0
    293e:	9e 83       	std	Y+6, r25	; 0x06
    2940:	8d 83       	std	Y+5, r24	; 0x05
    2942:	3f c0       	rjmp	.+126    	; 0x29c2 <HLCD4_voidStoreCustomChar+0x2c2>
	else if (__tmp > 65535)
    2944:	6f 81       	ldd	r22, Y+7	; 0x07
    2946:	78 85       	ldd	r23, Y+8	; 0x08
    2948:	89 85       	ldd	r24, Y+9	; 0x09
    294a:	9a 85       	ldd	r25, Y+10	; 0x0a
    294c:	20 e0       	ldi	r18, 0x00	; 0
    294e:	3f ef       	ldi	r19, 0xFF	; 255
    2950:	4f e7       	ldi	r20, 0x7F	; 127
    2952:	57 e4       	ldi	r21, 0x47	; 71
    2954:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2958:	18 16       	cp	r1, r24
    295a:	4c f5       	brge	.+82     	; 0x29ae <HLCD4_voidStoreCustomChar+0x2ae>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    295c:	6b 85       	ldd	r22, Y+11	; 0x0b
    295e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2960:	8d 85       	ldd	r24, Y+13	; 0x0d
    2962:	9e 85       	ldd	r25, Y+14	; 0x0e
    2964:	20 e0       	ldi	r18, 0x00	; 0
    2966:	30 e0       	ldi	r19, 0x00	; 0
    2968:	40 e2       	ldi	r20, 0x20	; 32
    296a:	51 e4       	ldi	r21, 0x41	; 65
    296c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2970:	dc 01       	movw	r26, r24
    2972:	cb 01       	movw	r24, r22
    2974:	bc 01       	movw	r22, r24
    2976:	cd 01       	movw	r24, r26
    2978:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    297c:	dc 01       	movw	r26, r24
    297e:	cb 01       	movw	r24, r22
    2980:	9e 83       	std	Y+6, r25	; 0x06
    2982:	8d 83       	std	Y+5, r24	; 0x05
    2984:	0f c0       	rjmp	.+30     	; 0x29a4 <HLCD4_voidStoreCustomChar+0x2a4>
    2986:	88 ec       	ldi	r24, 0xC8	; 200
    2988:	90 e0       	ldi	r25, 0x00	; 0
    298a:	9c 83       	std	Y+4, r25	; 0x04
    298c:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    298e:	8b 81       	ldd	r24, Y+3	; 0x03
    2990:	9c 81       	ldd	r25, Y+4	; 0x04
    2992:	01 97       	sbiw	r24, 0x01	; 1
    2994:	f1 f7       	brne	.-4      	; 0x2992 <HLCD4_voidStoreCustomChar+0x292>
    2996:	9c 83       	std	Y+4, r25	; 0x04
    2998:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    299a:	8d 81       	ldd	r24, Y+5	; 0x05
    299c:	9e 81       	ldd	r25, Y+6	; 0x06
    299e:	01 97       	sbiw	r24, 0x01	; 1
    29a0:	9e 83       	std	Y+6, r25	; 0x06
    29a2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    29a4:	8d 81       	ldd	r24, Y+5	; 0x05
    29a6:	9e 81       	ldd	r25, Y+6	; 0x06
    29a8:	00 97       	sbiw	r24, 0x00	; 0
    29aa:	69 f7       	brne	.-38     	; 0x2986 <HLCD4_voidStoreCustomChar+0x286>
    29ac:	14 c0       	rjmp	.+40     	; 0x29d6 <HLCD4_voidStoreCustomChar+0x2d6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    29ae:	6f 81       	ldd	r22, Y+7	; 0x07
    29b0:	78 85       	ldd	r23, Y+8	; 0x08
    29b2:	89 85       	ldd	r24, Y+9	; 0x09
    29b4:	9a 85       	ldd	r25, Y+10	; 0x0a
    29b6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29ba:	dc 01       	movw	r26, r24
    29bc:	cb 01       	movw	r24, r22
    29be:	9e 83       	std	Y+6, r25	; 0x06
    29c0:	8d 83       	std	Y+5, r24	; 0x05
    29c2:	8d 81       	ldd	r24, Y+5	; 0x05
    29c4:	9e 81       	ldd	r25, Y+6	; 0x06
    29c6:	9a 83       	std	Y+2, r25	; 0x02
    29c8:	89 83       	std	Y+1, r24	; 0x01
    29ca:	89 81       	ldd	r24, Y+1	; 0x01
    29cc:	9a 81       	ldd	r25, Y+2	; 0x02
    29ce:	01 97       	sbiw	r24, 0x01	; 1
    29d0:	f1 f7       	brne	.-4      	; 0x29ce <HLCD4_voidStoreCustomChar+0x2ce>
    29d2:	9a 83       	std	Y+2, r25	; 0x02
    29d4:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(2);

}
    29d6:	ab 96       	adiw	r28, 0x2b	; 43
    29d8:	0f b6       	in	r0, 0x3f	; 63
    29da:	f8 94       	cli
    29dc:	de bf       	out	0x3e, r29	; 62
    29de:	0f be       	out	0x3f, r0	; 63
    29e0:	cd bf       	out	0x3d, r28	; 61
    29e2:	cf 91       	pop	r28
    29e4:	df 91       	pop	r29
    29e6:	08 95       	ret

000029e8 <HLCD4_voidDisplayCustomChar>:

void HLCD4_voidDisplayCustomChar(u8 A_u8CGRAMIndex,u8 A_u8Row,u8 A_u8Col)
{
    29e8:	df 93       	push	r29
    29ea:	cf 93       	push	r28
    29ec:	00 d0       	rcall	.+0      	; 0x29ee <HLCD4_voidDisplayCustomChar+0x6>
    29ee:	0f 92       	push	r0
    29f0:	cd b7       	in	r28, 0x3d	; 61
    29f2:	de b7       	in	r29, 0x3e	; 62
    29f4:	89 83       	std	Y+1, r24	; 0x01
    29f6:	6a 83       	std	Y+2, r22	; 0x02
    29f8:	4b 83       	std	Y+3, r20	; 0x03
    HLCD4_voidGoToPos(A_u8Row,A_u8Col);
    29fa:	8a 81       	ldd	r24, Y+2	; 0x02
    29fc:	6b 81       	ldd	r22, Y+3	; 0x03
    29fe:	0e 94 7b 12 	call	0x24f6	; 0x24f6 <HLCD4_voidGoToPos>
    HLCD4_voidSendData(A_u8CGRAMIndex);
    2a02:	89 81       	ldd	r24, Y+1	; 0x01
    2a04:	0e 94 5e 0d 	call	0x1abc	; 0x1abc <HLCD4_voidSendData>
    2a08:	0f 90       	pop	r0
    2a0a:	0f 90       	pop	r0
    2a0c:	0f 90       	pop	r0
    2a0e:	cf 91       	pop	r28
    2a10:	df 91       	pop	r29
    2a12:	08 95       	ret

00002a14 <HLCD8_voidSendCommand>:
#define F_CPU 8000000UL
#include <math.h>
#include <stdlib.h>

void HLCD8_voidSendCommand(u8 A_u8Command)
{
    2a14:	df 93       	push	r29
    2a16:	cf 93       	push	r28
    2a18:	cd b7       	in	r28, 0x3d	; 61
    2a1a:	de b7       	in	r29, 0x3e	; 62
    2a1c:	2f 97       	sbiw	r28, 0x0f	; 15
    2a1e:	0f b6       	in	r0, 0x3f	; 63
    2a20:	f8 94       	cli
    2a22:	de bf       	out	0x3e, r29	; 62
    2a24:	0f be       	out	0x3f, r0	; 63
    2a26:	cd bf       	out	0x3d, r28	; 61
    2a28:	8f 87       	std	Y+15, r24	; 0x0f
    //RS=0 RW=0
    MDIO_voidSetPinValue(LCD_CONTROL_PORT,RS_PIN,PIN_LOW);
    2a2a:	82 e0       	ldi	r24, 0x02	; 2
    2a2c:	60 e0       	ldi	r22, 0x00	; 0
    2a2e:	40 e0       	ldi	r20, 0x00	; 0
    2a30:	0e 94 31 08 	call	0x1062	; 0x1062 <MDIO_voidSetPinValue>
    MDIO_voidSetPinValue(LCD_CONTROL_PORT,RW_PIN,PIN_LOW);
    2a34:	82 e0       	ldi	r24, 0x02	; 2
    2a36:	61 e0       	ldi	r22, 0x01	; 1
    2a38:	40 e0       	ldi	r20, 0x00	; 0
    2a3a:	0e 94 31 08 	call	0x1062	; 0x1062 <MDIO_voidSetPinValue>

    MDIO_voidSetPortValue(LCD_DATA_PORT,A_u8Command);
    2a3e:	83 e0       	ldi	r24, 0x03	; 3
    2a40:	6f 85       	ldd	r22, Y+15	; 0x0f
    2a42:	0e 94 5d 0a 	call	0x14ba	; 0x14ba <MDIO_voidSetPortValue>
    MDIO_voidSetPinValue(LCD_CONTROL_PORT,E_PIN,PIN_HIGH);
    2a46:	82 e0       	ldi	r24, 0x02	; 2
    2a48:	62 e0       	ldi	r22, 0x02	; 2
    2a4a:	41 e0       	ldi	r20, 0x01	; 1
    2a4c:	0e 94 31 08 	call	0x1062	; 0x1062 <MDIO_voidSetPinValue>
    2a50:	80 e0       	ldi	r24, 0x00	; 0
    2a52:	90 e0       	ldi	r25, 0x00	; 0
    2a54:	a0 e0       	ldi	r26, 0x00	; 0
    2a56:	b0 e4       	ldi	r27, 0x40	; 64
    2a58:	8b 87       	std	Y+11, r24	; 0x0b
    2a5a:	9c 87       	std	Y+12, r25	; 0x0c
    2a5c:	ad 87       	std	Y+13, r26	; 0x0d
    2a5e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a60:	6b 85       	ldd	r22, Y+11	; 0x0b
    2a62:	7c 85       	ldd	r23, Y+12	; 0x0c
    2a64:	8d 85       	ldd	r24, Y+13	; 0x0d
    2a66:	9e 85       	ldd	r25, Y+14	; 0x0e
    2a68:	20 e0       	ldi	r18, 0x00	; 0
    2a6a:	30 e0       	ldi	r19, 0x00	; 0
    2a6c:	4a ef       	ldi	r20, 0xFA	; 250
    2a6e:	54 e4       	ldi	r21, 0x44	; 68
    2a70:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a74:	dc 01       	movw	r26, r24
    2a76:	cb 01       	movw	r24, r22
    2a78:	8f 83       	std	Y+7, r24	; 0x07
    2a7a:	98 87       	std	Y+8, r25	; 0x08
    2a7c:	a9 87       	std	Y+9, r26	; 0x09
    2a7e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2a80:	6f 81       	ldd	r22, Y+7	; 0x07
    2a82:	78 85       	ldd	r23, Y+8	; 0x08
    2a84:	89 85       	ldd	r24, Y+9	; 0x09
    2a86:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a88:	20 e0       	ldi	r18, 0x00	; 0
    2a8a:	30 e0       	ldi	r19, 0x00	; 0
    2a8c:	40 e8       	ldi	r20, 0x80	; 128
    2a8e:	5f e3       	ldi	r21, 0x3F	; 63
    2a90:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2a94:	88 23       	and	r24, r24
    2a96:	2c f4       	brge	.+10     	; 0x2aa2 <HLCD8_voidSendCommand+0x8e>
		__ticks = 1;
    2a98:	81 e0       	ldi	r24, 0x01	; 1
    2a9a:	90 e0       	ldi	r25, 0x00	; 0
    2a9c:	9e 83       	std	Y+6, r25	; 0x06
    2a9e:	8d 83       	std	Y+5, r24	; 0x05
    2aa0:	3f c0       	rjmp	.+126    	; 0x2b20 <HLCD8_voidSendCommand+0x10c>
	else if (__tmp > 65535)
    2aa2:	6f 81       	ldd	r22, Y+7	; 0x07
    2aa4:	78 85       	ldd	r23, Y+8	; 0x08
    2aa6:	89 85       	ldd	r24, Y+9	; 0x09
    2aa8:	9a 85       	ldd	r25, Y+10	; 0x0a
    2aaa:	20 e0       	ldi	r18, 0x00	; 0
    2aac:	3f ef       	ldi	r19, 0xFF	; 255
    2aae:	4f e7       	ldi	r20, 0x7F	; 127
    2ab0:	57 e4       	ldi	r21, 0x47	; 71
    2ab2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2ab6:	18 16       	cp	r1, r24
    2ab8:	4c f5       	brge	.+82     	; 0x2b0c <HLCD8_voidSendCommand+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2aba:	6b 85       	ldd	r22, Y+11	; 0x0b
    2abc:	7c 85       	ldd	r23, Y+12	; 0x0c
    2abe:	8d 85       	ldd	r24, Y+13	; 0x0d
    2ac0:	9e 85       	ldd	r25, Y+14	; 0x0e
    2ac2:	20 e0       	ldi	r18, 0x00	; 0
    2ac4:	30 e0       	ldi	r19, 0x00	; 0
    2ac6:	40 e2       	ldi	r20, 0x20	; 32
    2ac8:	51 e4       	ldi	r21, 0x41	; 65
    2aca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ace:	dc 01       	movw	r26, r24
    2ad0:	cb 01       	movw	r24, r22
    2ad2:	bc 01       	movw	r22, r24
    2ad4:	cd 01       	movw	r24, r26
    2ad6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ada:	dc 01       	movw	r26, r24
    2adc:	cb 01       	movw	r24, r22
    2ade:	9e 83       	std	Y+6, r25	; 0x06
    2ae0:	8d 83       	std	Y+5, r24	; 0x05
    2ae2:	0f c0       	rjmp	.+30     	; 0x2b02 <HLCD8_voidSendCommand+0xee>
    2ae4:	88 ec       	ldi	r24, 0xC8	; 200
    2ae6:	90 e0       	ldi	r25, 0x00	; 0
    2ae8:	9c 83       	std	Y+4, r25	; 0x04
    2aea:	8b 83       	std	Y+3, r24	; 0x03
    2aec:	8b 81       	ldd	r24, Y+3	; 0x03
    2aee:	9c 81       	ldd	r25, Y+4	; 0x04
    2af0:	01 97       	sbiw	r24, 0x01	; 1
    2af2:	f1 f7       	brne	.-4      	; 0x2af0 <HLCD8_voidSendCommand+0xdc>
    2af4:	9c 83       	std	Y+4, r25	; 0x04
    2af6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2af8:	8d 81       	ldd	r24, Y+5	; 0x05
    2afa:	9e 81       	ldd	r25, Y+6	; 0x06
    2afc:	01 97       	sbiw	r24, 0x01	; 1
    2afe:	9e 83       	std	Y+6, r25	; 0x06
    2b00:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b02:	8d 81       	ldd	r24, Y+5	; 0x05
    2b04:	9e 81       	ldd	r25, Y+6	; 0x06
    2b06:	00 97       	sbiw	r24, 0x00	; 0
    2b08:	69 f7       	brne	.-38     	; 0x2ae4 <HLCD8_voidSendCommand+0xd0>
    2b0a:	14 c0       	rjmp	.+40     	; 0x2b34 <HLCD8_voidSendCommand+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b0c:	6f 81       	ldd	r22, Y+7	; 0x07
    2b0e:	78 85       	ldd	r23, Y+8	; 0x08
    2b10:	89 85       	ldd	r24, Y+9	; 0x09
    2b12:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b14:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b18:	dc 01       	movw	r26, r24
    2b1a:	cb 01       	movw	r24, r22
    2b1c:	9e 83       	std	Y+6, r25	; 0x06
    2b1e:	8d 83       	std	Y+5, r24	; 0x05
    2b20:	8d 81       	ldd	r24, Y+5	; 0x05
    2b22:	9e 81       	ldd	r25, Y+6	; 0x06
    2b24:	9a 83       	std	Y+2, r25	; 0x02
    2b26:	89 83       	std	Y+1, r24	; 0x01
    2b28:	89 81       	ldd	r24, Y+1	; 0x01
    2b2a:	9a 81       	ldd	r25, Y+2	; 0x02
    2b2c:	01 97       	sbiw	r24, 0x01	; 1
    2b2e:	f1 f7       	brne	.-4      	; 0x2b2c <HLCD8_voidSendCommand+0x118>
    2b30:	9a 83       	std	Y+2, r25	; 0x02
    2b32:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(2);
    MDIO_voidSetPinValue(LCD_CONTROL_PORT,E_PIN,PIN_LOW);
    2b34:	82 e0       	ldi	r24, 0x02	; 2
    2b36:	62 e0       	ldi	r22, 0x02	; 2
    2b38:	40 e0       	ldi	r20, 0x00	; 0
    2b3a:	0e 94 31 08 	call	0x1062	; 0x1062 <MDIO_voidSetPinValue>
}
    2b3e:	2f 96       	adiw	r28, 0x0f	; 15
    2b40:	0f b6       	in	r0, 0x3f	; 63
    2b42:	f8 94       	cli
    2b44:	de bf       	out	0x3e, r29	; 62
    2b46:	0f be       	out	0x3f, r0	; 63
    2b48:	cd bf       	out	0x3d, r28	; 61
    2b4a:	cf 91       	pop	r28
    2b4c:	df 91       	pop	r29
    2b4e:	08 95       	ret

00002b50 <HLCD8_voidSendData>:


void HLCD8_voidSendData(u8 A_u8Data)
{
    2b50:	df 93       	push	r29
    2b52:	cf 93       	push	r28
    2b54:	cd b7       	in	r28, 0x3d	; 61
    2b56:	de b7       	in	r29, 0x3e	; 62
    2b58:	2f 97       	sbiw	r28, 0x0f	; 15
    2b5a:	0f b6       	in	r0, 0x3f	; 63
    2b5c:	f8 94       	cli
    2b5e:	de bf       	out	0x3e, r29	; 62
    2b60:	0f be       	out	0x3f, r0	; 63
    2b62:	cd bf       	out	0x3d, r28	; 61
    2b64:	8f 87       	std	Y+15, r24	; 0x0f
    //RS=1 RW=0
    MDIO_voidSetPinValue(LCD_CONTROL_PORT,RS_PIN,PIN_HIGH);
    2b66:	82 e0       	ldi	r24, 0x02	; 2
    2b68:	60 e0       	ldi	r22, 0x00	; 0
    2b6a:	41 e0       	ldi	r20, 0x01	; 1
    2b6c:	0e 94 31 08 	call	0x1062	; 0x1062 <MDIO_voidSetPinValue>
    MDIO_voidSetPinValue(LCD_CONTROL_PORT,RW_PIN,PIN_LOW);
    2b70:	82 e0       	ldi	r24, 0x02	; 2
    2b72:	61 e0       	ldi	r22, 0x01	; 1
    2b74:	40 e0       	ldi	r20, 0x00	; 0
    2b76:	0e 94 31 08 	call	0x1062	; 0x1062 <MDIO_voidSetPinValue>

    MDIO_voidSetPortValue(LCD_DATA_PORT,A_u8Data);
    2b7a:	83 e0       	ldi	r24, 0x03	; 3
    2b7c:	6f 85       	ldd	r22, Y+15	; 0x0f
    2b7e:	0e 94 5d 0a 	call	0x14ba	; 0x14ba <MDIO_voidSetPortValue>

    MDIO_voidSetPinValue(LCD_CONTROL_PORT,E_PIN,PIN_HIGH);
    2b82:	82 e0       	ldi	r24, 0x02	; 2
    2b84:	62 e0       	ldi	r22, 0x02	; 2
    2b86:	41 e0       	ldi	r20, 0x01	; 1
    2b88:	0e 94 31 08 	call	0x1062	; 0x1062 <MDIO_voidSetPinValue>
    2b8c:	80 e0       	ldi	r24, 0x00	; 0
    2b8e:	90 e0       	ldi	r25, 0x00	; 0
    2b90:	a0 e0       	ldi	r26, 0x00	; 0
    2b92:	b0 e4       	ldi	r27, 0x40	; 64
    2b94:	8b 87       	std	Y+11, r24	; 0x0b
    2b96:	9c 87       	std	Y+12, r25	; 0x0c
    2b98:	ad 87       	std	Y+13, r26	; 0x0d
    2b9a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b9c:	6b 85       	ldd	r22, Y+11	; 0x0b
    2b9e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2ba0:	8d 85       	ldd	r24, Y+13	; 0x0d
    2ba2:	9e 85       	ldd	r25, Y+14	; 0x0e
    2ba4:	20 e0       	ldi	r18, 0x00	; 0
    2ba6:	30 e0       	ldi	r19, 0x00	; 0
    2ba8:	4a ef       	ldi	r20, 0xFA	; 250
    2baa:	54 e4       	ldi	r21, 0x44	; 68
    2bac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2bb0:	dc 01       	movw	r26, r24
    2bb2:	cb 01       	movw	r24, r22
    2bb4:	8f 83       	std	Y+7, r24	; 0x07
    2bb6:	98 87       	std	Y+8, r25	; 0x08
    2bb8:	a9 87       	std	Y+9, r26	; 0x09
    2bba:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2bbc:	6f 81       	ldd	r22, Y+7	; 0x07
    2bbe:	78 85       	ldd	r23, Y+8	; 0x08
    2bc0:	89 85       	ldd	r24, Y+9	; 0x09
    2bc2:	9a 85       	ldd	r25, Y+10	; 0x0a
    2bc4:	20 e0       	ldi	r18, 0x00	; 0
    2bc6:	30 e0       	ldi	r19, 0x00	; 0
    2bc8:	40 e8       	ldi	r20, 0x80	; 128
    2bca:	5f e3       	ldi	r21, 0x3F	; 63
    2bcc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2bd0:	88 23       	and	r24, r24
    2bd2:	2c f4       	brge	.+10     	; 0x2bde <HLCD8_voidSendData+0x8e>
		__ticks = 1;
    2bd4:	81 e0       	ldi	r24, 0x01	; 1
    2bd6:	90 e0       	ldi	r25, 0x00	; 0
    2bd8:	9e 83       	std	Y+6, r25	; 0x06
    2bda:	8d 83       	std	Y+5, r24	; 0x05
    2bdc:	3f c0       	rjmp	.+126    	; 0x2c5c <HLCD8_voidSendData+0x10c>
	else if (__tmp > 65535)
    2bde:	6f 81       	ldd	r22, Y+7	; 0x07
    2be0:	78 85       	ldd	r23, Y+8	; 0x08
    2be2:	89 85       	ldd	r24, Y+9	; 0x09
    2be4:	9a 85       	ldd	r25, Y+10	; 0x0a
    2be6:	20 e0       	ldi	r18, 0x00	; 0
    2be8:	3f ef       	ldi	r19, 0xFF	; 255
    2bea:	4f e7       	ldi	r20, 0x7F	; 127
    2bec:	57 e4       	ldi	r21, 0x47	; 71
    2bee:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2bf2:	18 16       	cp	r1, r24
    2bf4:	4c f5       	brge	.+82     	; 0x2c48 <HLCD8_voidSendData+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2bf6:	6b 85       	ldd	r22, Y+11	; 0x0b
    2bf8:	7c 85       	ldd	r23, Y+12	; 0x0c
    2bfa:	8d 85       	ldd	r24, Y+13	; 0x0d
    2bfc:	9e 85       	ldd	r25, Y+14	; 0x0e
    2bfe:	20 e0       	ldi	r18, 0x00	; 0
    2c00:	30 e0       	ldi	r19, 0x00	; 0
    2c02:	40 e2       	ldi	r20, 0x20	; 32
    2c04:	51 e4       	ldi	r21, 0x41	; 65
    2c06:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c0a:	dc 01       	movw	r26, r24
    2c0c:	cb 01       	movw	r24, r22
    2c0e:	bc 01       	movw	r22, r24
    2c10:	cd 01       	movw	r24, r26
    2c12:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c16:	dc 01       	movw	r26, r24
    2c18:	cb 01       	movw	r24, r22
    2c1a:	9e 83       	std	Y+6, r25	; 0x06
    2c1c:	8d 83       	std	Y+5, r24	; 0x05
    2c1e:	0f c0       	rjmp	.+30     	; 0x2c3e <HLCD8_voidSendData+0xee>
    2c20:	88 ec       	ldi	r24, 0xC8	; 200
    2c22:	90 e0       	ldi	r25, 0x00	; 0
    2c24:	9c 83       	std	Y+4, r25	; 0x04
    2c26:	8b 83       	std	Y+3, r24	; 0x03
    2c28:	8b 81       	ldd	r24, Y+3	; 0x03
    2c2a:	9c 81       	ldd	r25, Y+4	; 0x04
    2c2c:	01 97       	sbiw	r24, 0x01	; 1
    2c2e:	f1 f7       	brne	.-4      	; 0x2c2c <HLCD8_voidSendData+0xdc>
    2c30:	9c 83       	std	Y+4, r25	; 0x04
    2c32:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c34:	8d 81       	ldd	r24, Y+5	; 0x05
    2c36:	9e 81       	ldd	r25, Y+6	; 0x06
    2c38:	01 97       	sbiw	r24, 0x01	; 1
    2c3a:	9e 83       	std	Y+6, r25	; 0x06
    2c3c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c3e:	8d 81       	ldd	r24, Y+5	; 0x05
    2c40:	9e 81       	ldd	r25, Y+6	; 0x06
    2c42:	00 97       	sbiw	r24, 0x00	; 0
    2c44:	69 f7       	brne	.-38     	; 0x2c20 <HLCD8_voidSendData+0xd0>
    2c46:	14 c0       	rjmp	.+40     	; 0x2c70 <HLCD8_voidSendData+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c48:	6f 81       	ldd	r22, Y+7	; 0x07
    2c4a:	78 85       	ldd	r23, Y+8	; 0x08
    2c4c:	89 85       	ldd	r24, Y+9	; 0x09
    2c4e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c50:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c54:	dc 01       	movw	r26, r24
    2c56:	cb 01       	movw	r24, r22
    2c58:	9e 83       	std	Y+6, r25	; 0x06
    2c5a:	8d 83       	std	Y+5, r24	; 0x05
    2c5c:	8d 81       	ldd	r24, Y+5	; 0x05
    2c5e:	9e 81       	ldd	r25, Y+6	; 0x06
    2c60:	9a 83       	std	Y+2, r25	; 0x02
    2c62:	89 83       	std	Y+1, r24	; 0x01
    2c64:	89 81       	ldd	r24, Y+1	; 0x01
    2c66:	9a 81       	ldd	r25, Y+2	; 0x02
    2c68:	01 97       	sbiw	r24, 0x01	; 1
    2c6a:	f1 f7       	brne	.-4      	; 0x2c68 <HLCD8_voidSendData+0x118>
    2c6c:	9a 83       	std	Y+2, r25	; 0x02
    2c6e:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(2);
    MDIO_voidSetPinValue(LCD_CONTROL_PORT,E_PIN,PIN_LOW);
    2c70:	82 e0       	ldi	r24, 0x02	; 2
    2c72:	62 e0       	ldi	r22, 0x02	; 2
    2c74:	40 e0       	ldi	r20, 0x00	; 0
    2c76:	0e 94 31 08 	call	0x1062	; 0x1062 <MDIO_voidSetPinValue>
}
    2c7a:	2f 96       	adiw	r28, 0x0f	; 15
    2c7c:	0f b6       	in	r0, 0x3f	; 63
    2c7e:	f8 94       	cli
    2c80:	de bf       	out	0x3e, r29	; 62
    2c82:	0f be       	out	0x3f, r0	; 63
    2c84:	cd bf       	out	0x3d, r28	; 61
    2c86:	cf 91       	pop	r28
    2c88:	df 91       	pop	r29
    2c8a:	08 95       	ret

00002c8c <HLCD8_voidInit>:


void HLCD8_voidInit()
{
    2c8c:	df 93       	push	r29
    2c8e:	cf 93       	push	r28
    2c90:	cd b7       	in	r28, 0x3d	; 61
    2c92:	de b7       	in	r29, 0x3e	; 62
    2c94:	e8 97       	sbiw	r28, 0x38	; 56
    2c96:	0f b6       	in	r0, 0x3f	; 63
    2c98:	f8 94       	cli
    2c9a:	de bf       	out	0x3e, r29	; 62
    2c9c:	0f be       	out	0x3f, r0	; 63
    2c9e:	cd bf       	out	0x3d, r28	; 61
    2ca0:	80 e0       	ldi	r24, 0x00	; 0
    2ca2:	90 e0       	ldi	r25, 0x00	; 0
    2ca4:	a0 ef       	ldi	r26, 0xF0	; 240
    2ca6:	b1 e4       	ldi	r27, 0x41	; 65
    2ca8:	8d ab       	std	Y+53, r24	; 0x35
    2caa:	9e ab       	std	Y+54, r25	; 0x36
    2cac:	af ab       	std	Y+55, r26	; 0x37
    2cae:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2cb0:	6d a9       	ldd	r22, Y+53	; 0x35
    2cb2:	7e a9       	ldd	r23, Y+54	; 0x36
    2cb4:	8f a9       	ldd	r24, Y+55	; 0x37
    2cb6:	98 ad       	ldd	r25, Y+56	; 0x38
    2cb8:	20 e0       	ldi	r18, 0x00	; 0
    2cba:	30 e0       	ldi	r19, 0x00	; 0
    2cbc:	4a ef       	ldi	r20, 0xFA	; 250
    2cbe:	54 e4       	ldi	r21, 0x44	; 68
    2cc0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2cc4:	dc 01       	movw	r26, r24
    2cc6:	cb 01       	movw	r24, r22
    2cc8:	89 ab       	std	Y+49, r24	; 0x31
    2cca:	9a ab       	std	Y+50, r25	; 0x32
    2ccc:	ab ab       	std	Y+51, r26	; 0x33
    2cce:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2cd0:	69 a9       	ldd	r22, Y+49	; 0x31
    2cd2:	7a a9       	ldd	r23, Y+50	; 0x32
    2cd4:	8b a9       	ldd	r24, Y+51	; 0x33
    2cd6:	9c a9       	ldd	r25, Y+52	; 0x34
    2cd8:	20 e0       	ldi	r18, 0x00	; 0
    2cda:	30 e0       	ldi	r19, 0x00	; 0
    2cdc:	40 e8       	ldi	r20, 0x80	; 128
    2cde:	5f e3       	ldi	r21, 0x3F	; 63
    2ce0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2ce4:	88 23       	and	r24, r24
    2ce6:	2c f4       	brge	.+10     	; 0x2cf2 <HLCD8_voidInit+0x66>
		__ticks = 1;
    2ce8:	81 e0       	ldi	r24, 0x01	; 1
    2cea:	90 e0       	ldi	r25, 0x00	; 0
    2cec:	98 ab       	std	Y+48, r25	; 0x30
    2cee:	8f a7       	std	Y+47, r24	; 0x2f
    2cf0:	3f c0       	rjmp	.+126    	; 0x2d70 <HLCD8_voidInit+0xe4>
	else if (__tmp > 65535)
    2cf2:	69 a9       	ldd	r22, Y+49	; 0x31
    2cf4:	7a a9       	ldd	r23, Y+50	; 0x32
    2cf6:	8b a9       	ldd	r24, Y+51	; 0x33
    2cf8:	9c a9       	ldd	r25, Y+52	; 0x34
    2cfa:	20 e0       	ldi	r18, 0x00	; 0
    2cfc:	3f ef       	ldi	r19, 0xFF	; 255
    2cfe:	4f e7       	ldi	r20, 0x7F	; 127
    2d00:	57 e4       	ldi	r21, 0x47	; 71
    2d02:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2d06:	18 16       	cp	r1, r24
    2d08:	4c f5       	brge	.+82     	; 0x2d5c <HLCD8_voidInit+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d0a:	6d a9       	ldd	r22, Y+53	; 0x35
    2d0c:	7e a9       	ldd	r23, Y+54	; 0x36
    2d0e:	8f a9       	ldd	r24, Y+55	; 0x37
    2d10:	98 ad       	ldd	r25, Y+56	; 0x38
    2d12:	20 e0       	ldi	r18, 0x00	; 0
    2d14:	30 e0       	ldi	r19, 0x00	; 0
    2d16:	40 e2       	ldi	r20, 0x20	; 32
    2d18:	51 e4       	ldi	r21, 0x41	; 65
    2d1a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d1e:	dc 01       	movw	r26, r24
    2d20:	cb 01       	movw	r24, r22
    2d22:	bc 01       	movw	r22, r24
    2d24:	cd 01       	movw	r24, r26
    2d26:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d2a:	dc 01       	movw	r26, r24
    2d2c:	cb 01       	movw	r24, r22
    2d2e:	98 ab       	std	Y+48, r25	; 0x30
    2d30:	8f a7       	std	Y+47, r24	; 0x2f
    2d32:	0f c0       	rjmp	.+30     	; 0x2d52 <HLCD8_voidInit+0xc6>
    2d34:	88 ec       	ldi	r24, 0xC8	; 200
    2d36:	90 e0       	ldi	r25, 0x00	; 0
    2d38:	9e a7       	std	Y+46, r25	; 0x2e
    2d3a:	8d a7       	std	Y+45, r24	; 0x2d
    2d3c:	8d a5       	ldd	r24, Y+45	; 0x2d
    2d3e:	9e a5       	ldd	r25, Y+46	; 0x2e
    2d40:	01 97       	sbiw	r24, 0x01	; 1
    2d42:	f1 f7       	brne	.-4      	; 0x2d40 <HLCD8_voidInit+0xb4>
    2d44:	9e a7       	std	Y+46, r25	; 0x2e
    2d46:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d48:	8f a5       	ldd	r24, Y+47	; 0x2f
    2d4a:	98 a9       	ldd	r25, Y+48	; 0x30
    2d4c:	01 97       	sbiw	r24, 0x01	; 1
    2d4e:	98 ab       	std	Y+48, r25	; 0x30
    2d50:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d52:	8f a5       	ldd	r24, Y+47	; 0x2f
    2d54:	98 a9       	ldd	r25, Y+48	; 0x30
    2d56:	00 97       	sbiw	r24, 0x00	; 0
    2d58:	69 f7       	brne	.-38     	; 0x2d34 <HLCD8_voidInit+0xa8>
    2d5a:	14 c0       	rjmp	.+40     	; 0x2d84 <HLCD8_voidInit+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d5c:	69 a9       	ldd	r22, Y+49	; 0x31
    2d5e:	7a a9       	ldd	r23, Y+50	; 0x32
    2d60:	8b a9       	ldd	r24, Y+51	; 0x33
    2d62:	9c a9       	ldd	r25, Y+52	; 0x34
    2d64:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d68:	dc 01       	movw	r26, r24
    2d6a:	cb 01       	movw	r24, r22
    2d6c:	98 ab       	std	Y+48, r25	; 0x30
    2d6e:	8f a7       	std	Y+47, r24	; 0x2f
    2d70:	8f a5       	ldd	r24, Y+47	; 0x2f
    2d72:	98 a9       	ldd	r25, Y+48	; 0x30
    2d74:	9c a7       	std	Y+44, r25	; 0x2c
    2d76:	8b a7       	std	Y+43, r24	; 0x2b
    2d78:	8b a5       	ldd	r24, Y+43	; 0x2b
    2d7a:	9c a5       	ldd	r25, Y+44	; 0x2c
    2d7c:	01 97       	sbiw	r24, 0x01	; 1
    2d7e:	f1 f7       	brne	.-4      	; 0x2d7c <HLCD8_voidInit+0xf0>
    2d80:	9c a7       	std	Y+44, r25	; 0x2c
    2d82:	8b a7       	std	Y+43, r24	; 0x2b
    _delay_ms(30);
    HLCD8_voidSendCommand(FUNCTION_SET);
    2d84:	88 e3       	ldi	r24, 0x38	; 56
    2d86:	0e 94 0a 15 	call	0x2a14	; 0x2a14 <HLCD8_voidSendCommand>
    2d8a:	80 e0       	ldi	r24, 0x00	; 0
    2d8c:	90 e0       	ldi	r25, 0x00	; 0
    2d8e:	a0 e8       	ldi	r26, 0x80	; 128
    2d90:	bf e3       	ldi	r27, 0x3F	; 63
    2d92:	8f a3       	std	Y+39, r24	; 0x27
    2d94:	98 a7       	std	Y+40, r25	; 0x28
    2d96:	a9 a7       	std	Y+41, r26	; 0x29
    2d98:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2d9a:	6f a1       	ldd	r22, Y+39	; 0x27
    2d9c:	78 a5       	ldd	r23, Y+40	; 0x28
    2d9e:	89 a5       	ldd	r24, Y+41	; 0x29
    2da0:	9a a5       	ldd	r25, Y+42	; 0x2a
    2da2:	20 e0       	ldi	r18, 0x00	; 0
    2da4:	30 e0       	ldi	r19, 0x00	; 0
    2da6:	4a ef       	ldi	r20, 0xFA	; 250
    2da8:	54 e4       	ldi	r21, 0x44	; 68
    2daa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2dae:	dc 01       	movw	r26, r24
    2db0:	cb 01       	movw	r24, r22
    2db2:	8b a3       	std	Y+35, r24	; 0x23
    2db4:	9c a3       	std	Y+36, r25	; 0x24
    2db6:	ad a3       	std	Y+37, r26	; 0x25
    2db8:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2dba:	6b a1       	ldd	r22, Y+35	; 0x23
    2dbc:	7c a1       	ldd	r23, Y+36	; 0x24
    2dbe:	8d a1       	ldd	r24, Y+37	; 0x25
    2dc0:	9e a1       	ldd	r25, Y+38	; 0x26
    2dc2:	20 e0       	ldi	r18, 0x00	; 0
    2dc4:	30 e0       	ldi	r19, 0x00	; 0
    2dc6:	40 e8       	ldi	r20, 0x80	; 128
    2dc8:	5f e3       	ldi	r21, 0x3F	; 63
    2dca:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2dce:	88 23       	and	r24, r24
    2dd0:	2c f4       	brge	.+10     	; 0x2ddc <HLCD8_voidInit+0x150>
		__ticks = 1;
    2dd2:	81 e0       	ldi	r24, 0x01	; 1
    2dd4:	90 e0       	ldi	r25, 0x00	; 0
    2dd6:	9a a3       	std	Y+34, r25	; 0x22
    2dd8:	89 a3       	std	Y+33, r24	; 0x21
    2dda:	3f c0       	rjmp	.+126    	; 0x2e5a <HLCD8_voidInit+0x1ce>
	else if (__tmp > 65535)
    2ddc:	6b a1       	ldd	r22, Y+35	; 0x23
    2dde:	7c a1       	ldd	r23, Y+36	; 0x24
    2de0:	8d a1       	ldd	r24, Y+37	; 0x25
    2de2:	9e a1       	ldd	r25, Y+38	; 0x26
    2de4:	20 e0       	ldi	r18, 0x00	; 0
    2de6:	3f ef       	ldi	r19, 0xFF	; 255
    2de8:	4f e7       	ldi	r20, 0x7F	; 127
    2dea:	57 e4       	ldi	r21, 0x47	; 71
    2dec:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2df0:	18 16       	cp	r1, r24
    2df2:	4c f5       	brge	.+82     	; 0x2e46 <HLCD8_voidInit+0x1ba>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2df4:	6f a1       	ldd	r22, Y+39	; 0x27
    2df6:	78 a5       	ldd	r23, Y+40	; 0x28
    2df8:	89 a5       	ldd	r24, Y+41	; 0x29
    2dfa:	9a a5       	ldd	r25, Y+42	; 0x2a
    2dfc:	20 e0       	ldi	r18, 0x00	; 0
    2dfe:	30 e0       	ldi	r19, 0x00	; 0
    2e00:	40 e2       	ldi	r20, 0x20	; 32
    2e02:	51 e4       	ldi	r21, 0x41	; 65
    2e04:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e08:	dc 01       	movw	r26, r24
    2e0a:	cb 01       	movw	r24, r22
    2e0c:	bc 01       	movw	r22, r24
    2e0e:	cd 01       	movw	r24, r26
    2e10:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e14:	dc 01       	movw	r26, r24
    2e16:	cb 01       	movw	r24, r22
    2e18:	9a a3       	std	Y+34, r25	; 0x22
    2e1a:	89 a3       	std	Y+33, r24	; 0x21
    2e1c:	0f c0       	rjmp	.+30     	; 0x2e3c <HLCD8_voidInit+0x1b0>
    2e1e:	88 ec       	ldi	r24, 0xC8	; 200
    2e20:	90 e0       	ldi	r25, 0x00	; 0
    2e22:	98 a3       	std	Y+32, r25	; 0x20
    2e24:	8f 8f       	std	Y+31, r24	; 0x1f
    2e26:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2e28:	98 a1       	ldd	r25, Y+32	; 0x20
    2e2a:	01 97       	sbiw	r24, 0x01	; 1
    2e2c:	f1 f7       	brne	.-4      	; 0x2e2a <HLCD8_voidInit+0x19e>
    2e2e:	98 a3       	std	Y+32, r25	; 0x20
    2e30:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e32:	89 a1       	ldd	r24, Y+33	; 0x21
    2e34:	9a a1       	ldd	r25, Y+34	; 0x22
    2e36:	01 97       	sbiw	r24, 0x01	; 1
    2e38:	9a a3       	std	Y+34, r25	; 0x22
    2e3a:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e3c:	89 a1       	ldd	r24, Y+33	; 0x21
    2e3e:	9a a1       	ldd	r25, Y+34	; 0x22
    2e40:	00 97       	sbiw	r24, 0x00	; 0
    2e42:	69 f7       	brne	.-38     	; 0x2e1e <HLCD8_voidInit+0x192>
    2e44:	14 c0       	rjmp	.+40     	; 0x2e6e <HLCD8_voidInit+0x1e2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2e46:	6b a1       	ldd	r22, Y+35	; 0x23
    2e48:	7c a1       	ldd	r23, Y+36	; 0x24
    2e4a:	8d a1       	ldd	r24, Y+37	; 0x25
    2e4c:	9e a1       	ldd	r25, Y+38	; 0x26
    2e4e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e52:	dc 01       	movw	r26, r24
    2e54:	cb 01       	movw	r24, r22
    2e56:	9a a3       	std	Y+34, r25	; 0x22
    2e58:	89 a3       	std	Y+33, r24	; 0x21
    2e5a:	89 a1       	ldd	r24, Y+33	; 0x21
    2e5c:	9a a1       	ldd	r25, Y+34	; 0x22
    2e5e:	9e 8f       	std	Y+30, r25	; 0x1e
    2e60:	8d 8f       	std	Y+29, r24	; 0x1d
    2e62:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2e64:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2e66:	01 97       	sbiw	r24, 0x01	; 1
    2e68:	f1 f7       	brne	.-4      	; 0x2e66 <HLCD8_voidInit+0x1da>
    2e6a:	9e 8f       	std	Y+30, r25	; 0x1e
    2e6c:	8d 8f       	std	Y+29, r24	; 0x1d
    _delay_ms(1);
    HLCD8_voidSendCommand(ON_OFF_CONTROL);
    2e6e:	8c e0       	ldi	r24, 0x0C	; 12
    2e70:	0e 94 0a 15 	call	0x2a14	; 0x2a14 <HLCD8_voidSendCommand>
    2e74:	80 e0       	ldi	r24, 0x00	; 0
    2e76:	90 e0       	ldi	r25, 0x00	; 0
    2e78:	a0 e8       	ldi	r26, 0x80	; 128
    2e7a:	bf e3       	ldi	r27, 0x3F	; 63
    2e7c:	89 8f       	std	Y+25, r24	; 0x19
    2e7e:	9a 8f       	std	Y+26, r25	; 0x1a
    2e80:	ab 8f       	std	Y+27, r26	; 0x1b
    2e82:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2e84:	69 8d       	ldd	r22, Y+25	; 0x19
    2e86:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2e88:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2e8a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2e8c:	20 e0       	ldi	r18, 0x00	; 0
    2e8e:	30 e0       	ldi	r19, 0x00	; 0
    2e90:	4a ef       	ldi	r20, 0xFA	; 250
    2e92:	54 e4       	ldi	r21, 0x44	; 68
    2e94:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e98:	dc 01       	movw	r26, r24
    2e9a:	cb 01       	movw	r24, r22
    2e9c:	8d 8b       	std	Y+21, r24	; 0x15
    2e9e:	9e 8b       	std	Y+22, r25	; 0x16
    2ea0:	af 8b       	std	Y+23, r26	; 0x17
    2ea2:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2ea4:	6d 89       	ldd	r22, Y+21	; 0x15
    2ea6:	7e 89       	ldd	r23, Y+22	; 0x16
    2ea8:	8f 89       	ldd	r24, Y+23	; 0x17
    2eaa:	98 8d       	ldd	r25, Y+24	; 0x18
    2eac:	20 e0       	ldi	r18, 0x00	; 0
    2eae:	30 e0       	ldi	r19, 0x00	; 0
    2eb0:	40 e8       	ldi	r20, 0x80	; 128
    2eb2:	5f e3       	ldi	r21, 0x3F	; 63
    2eb4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2eb8:	88 23       	and	r24, r24
    2eba:	2c f4       	brge	.+10     	; 0x2ec6 <HLCD8_voidInit+0x23a>
		__ticks = 1;
    2ebc:	81 e0       	ldi	r24, 0x01	; 1
    2ebe:	90 e0       	ldi	r25, 0x00	; 0
    2ec0:	9c 8b       	std	Y+20, r25	; 0x14
    2ec2:	8b 8b       	std	Y+19, r24	; 0x13
    2ec4:	3f c0       	rjmp	.+126    	; 0x2f44 <HLCD8_voidInit+0x2b8>
	else if (__tmp > 65535)
    2ec6:	6d 89       	ldd	r22, Y+21	; 0x15
    2ec8:	7e 89       	ldd	r23, Y+22	; 0x16
    2eca:	8f 89       	ldd	r24, Y+23	; 0x17
    2ecc:	98 8d       	ldd	r25, Y+24	; 0x18
    2ece:	20 e0       	ldi	r18, 0x00	; 0
    2ed0:	3f ef       	ldi	r19, 0xFF	; 255
    2ed2:	4f e7       	ldi	r20, 0x7F	; 127
    2ed4:	57 e4       	ldi	r21, 0x47	; 71
    2ed6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2eda:	18 16       	cp	r1, r24
    2edc:	4c f5       	brge	.+82     	; 0x2f30 <HLCD8_voidInit+0x2a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ede:	69 8d       	ldd	r22, Y+25	; 0x19
    2ee0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2ee2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2ee4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2ee6:	20 e0       	ldi	r18, 0x00	; 0
    2ee8:	30 e0       	ldi	r19, 0x00	; 0
    2eea:	40 e2       	ldi	r20, 0x20	; 32
    2eec:	51 e4       	ldi	r21, 0x41	; 65
    2eee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ef2:	dc 01       	movw	r26, r24
    2ef4:	cb 01       	movw	r24, r22
    2ef6:	bc 01       	movw	r22, r24
    2ef8:	cd 01       	movw	r24, r26
    2efa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2efe:	dc 01       	movw	r26, r24
    2f00:	cb 01       	movw	r24, r22
    2f02:	9c 8b       	std	Y+20, r25	; 0x14
    2f04:	8b 8b       	std	Y+19, r24	; 0x13
    2f06:	0f c0       	rjmp	.+30     	; 0x2f26 <HLCD8_voidInit+0x29a>
    2f08:	88 ec       	ldi	r24, 0xC8	; 200
    2f0a:	90 e0       	ldi	r25, 0x00	; 0
    2f0c:	9a 8b       	std	Y+18, r25	; 0x12
    2f0e:	89 8b       	std	Y+17, r24	; 0x11
    2f10:	89 89       	ldd	r24, Y+17	; 0x11
    2f12:	9a 89       	ldd	r25, Y+18	; 0x12
    2f14:	01 97       	sbiw	r24, 0x01	; 1
    2f16:	f1 f7       	brne	.-4      	; 0x2f14 <HLCD8_voidInit+0x288>
    2f18:	9a 8b       	std	Y+18, r25	; 0x12
    2f1a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2f1c:	8b 89       	ldd	r24, Y+19	; 0x13
    2f1e:	9c 89       	ldd	r25, Y+20	; 0x14
    2f20:	01 97       	sbiw	r24, 0x01	; 1
    2f22:	9c 8b       	std	Y+20, r25	; 0x14
    2f24:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2f26:	8b 89       	ldd	r24, Y+19	; 0x13
    2f28:	9c 89       	ldd	r25, Y+20	; 0x14
    2f2a:	00 97       	sbiw	r24, 0x00	; 0
    2f2c:	69 f7       	brne	.-38     	; 0x2f08 <HLCD8_voidInit+0x27c>
    2f2e:	14 c0       	rjmp	.+40     	; 0x2f58 <HLCD8_voidInit+0x2cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2f30:	6d 89       	ldd	r22, Y+21	; 0x15
    2f32:	7e 89       	ldd	r23, Y+22	; 0x16
    2f34:	8f 89       	ldd	r24, Y+23	; 0x17
    2f36:	98 8d       	ldd	r25, Y+24	; 0x18
    2f38:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f3c:	dc 01       	movw	r26, r24
    2f3e:	cb 01       	movw	r24, r22
    2f40:	9c 8b       	std	Y+20, r25	; 0x14
    2f42:	8b 8b       	std	Y+19, r24	; 0x13
    2f44:	8b 89       	ldd	r24, Y+19	; 0x13
    2f46:	9c 89       	ldd	r25, Y+20	; 0x14
    2f48:	98 8b       	std	Y+16, r25	; 0x10
    2f4a:	8f 87       	std	Y+15, r24	; 0x0f
    2f4c:	8f 85       	ldd	r24, Y+15	; 0x0f
    2f4e:	98 89       	ldd	r25, Y+16	; 0x10
    2f50:	01 97       	sbiw	r24, 0x01	; 1
    2f52:	f1 f7       	brne	.-4      	; 0x2f50 <HLCD8_voidInit+0x2c4>
    2f54:	98 8b       	std	Y+16, r25	; 0x10
    2f56:	8f 87       	std	Y+15, r24	; 0x0f
    _delay_ms(1);
    HLCD8_voidSendCommand(DISPLAY_CLEAR);
    2f58:	81 e0       	ldi	r24, 0x01	; 1
    2f5a:	0e 94 0a 15 	call	0x2a14	; 0x2a14 <HLCD8_voidSendCommand>
    2f5e:	80 e0       	ldi	r24, 0x00	; 0
    2f60:	90 e0       	ldi	r25, 0x00	; 0
    2f62:	a0 e0       	ldi	r26, 0x00	; 0
    2f64:	b0 e4       	ldi	r27, 0x40	; 64
    2f66:	8b 87       	std	Y+11, r24	; 0x0b
    2f68:	9c 87       	std	Y+12, r25	; 0x0c
    2f6a:	ad 87       	std	Y+13, r26	; 0x0d
    2f6c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2f6e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2f70:	7c 85       	ldd	r23, Y+12	; 0x0c
    2f72:	8d 85       	ldd	r24, Y+13	; 0x0d
    2f74:	9e 85       	ldd	r25, Y+14	; 0x0e
    2f76:	20 e0       	ldi	r18, 0x00	; 0
    2f78:	30 e0       	ldi	r19, 0x00	; 0
    2f7a:	4a ef       	ldi	r20, 0xFA	; 250
    2f7c:	54 e4       	ldi	r21, 0x44	; 68
    2f7e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f82:	dc 01       	movw	r26, r24
    2f84:	cb 01       	movw	r24, r22
    2f86:	8f 83       	std	Y+7, r24	; 0x07
    2f88:	98 87       	std	Y+8, r25	; 0x08
    2f8a:	a9 87       	std	Y+9, r26	; 0x09
    2f8c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2f8e:	6f 81       	ldd	r22, Y+7	; 0x07
    2f90:	78 85       	ldd	r23, Y+8	; 0x08
    2f92:	89 85       	ldd	r24, Y+9	; 0x09
    2f94:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f96:	20 e0       	ldi	r18, 0x00	; 0
    2f98:	30 e0       	ldi	r19, 0x00	; 0
    2f9a:	40 e8       	ldi	r20, 0x80	; 128
    2f9c:	5f e3       	ldi	r21, 0x3F	; 63
    2f9e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2fa2:	88 23       	and	r24, r24
    2fa4:	2c f4       	brge	.+10     	; 0x2fb0 <HLCD8_voidInit+0x324>
		__ticks = 1;
    2fa6:	81 e0       	ldi	r24, 0x01	; 1
    2fa8:	90 e0       	ldi	r25, 0x00	; 0
    2faa:	9e 83       	std	Y+6, r25	; 0x06
    2fac:	8d 83       	std	Y+5, r24	; 0x05
    2fae:	3f c0       	rjmp	.+126    	; 0x302e <HLCD8_voidInit+0x3a2>
	else if (__tmp > 65535)
    2fb0:	6f 81       	ldd	r22, Y+7	; 0x07
    2fb2:	78 85       	ldd	r23, Y+8	; 0x08
    2fb4:	89 85       	ldd	r24, Y+9	; 0x09
    2fb6:	9a 85       	ldd	r25, Y+10	; 0x0a
    2fb8:	20 e0       	ldi	r18, 0x00	; 0
    2fba:	3f ef       	ldi	r19, 0xFF	; 255
    2fbc:	4f e7       	ldi	r20, 0x7F	; 127
    2fbe:	57 e4       	ldi	r21, 0x47	; 71
    2fc0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2fc4:	18 16       	cp	r1, r24
    2fc6:	4c f5       	brge	.+82     	; 0x301a <HLCD8_voidInit+0x38e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2fc8:	6b 85       	ldd	r22, Y+11	; 0x0b
    2fca:	7c 85       	ldd	r23, Y+12	; 0x0c
    2fcc:	8d 85       	ldd	r24, Y+13	; 0x0d
    2fce:	9e 85       	ldd	r25, Y+14	; 0x0e
    2fd0:	20 e0       	ldi	r18, 0x00	; 0
    2fd2:	30 e0       	ldi	r19, 0x00	; 0
    2fd4:	40 e2       	ldi	r20, 0x20	; 32
    2fd6:	51 e4       	ldi	r21, 0x41	; 65
    2fd8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2fdc:	dc 01       	movw	r26, r24
    2fde:	cb 01       	movw	r24, r22
    2fe0:	bc 01       	movw	r22, r24
    2fe2:	cd 01       	movw	r24, r26
    2fe4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2fe8:	dc 01       	movw	r26, r24
    2fea:	cb 01       	movw	r24, r22
    2fec:	9e 83       	std	Y+6, r25	; 0x06
    2fee:	8d 83       	std	Y+5, r24	; 0x05
    2ff0:	0f c0       	rjmp	.+30     	; 0x3010 <HLCD8_voidInit+0x384>
    2ff2:	88 ec       	ldi	r24, 0xC8	; 200
    2ff4:	90 e0       	ldi	r25, 0x00	; 0
    2ff6:	9c 83       	std	Y+4, r25	; 0x04
    2ff8:	8b 83       	std	Y+3, r24	; 0x03
    2ffa:	8b 81       	ldd	r24, Y+3	; 0x03
    2ffc:	9c 81       	ldd	r25, Y+4	; 0x04
    2ffe:	01 97       	sbiw	r24, 0x01	; 1
    3000:	f1 f7       	brne	.-4      	; 0x2ffe <HLCD8_voidInit+0x372>
    3002:	9c 83       	std	Y+4, r25	; 0x04
    3004:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3006:	8d 81       	ldd	r24, Y+5	; 0x05
    3008:	9e 81       	ldd	r25, Y+6	; 0x06
    300a:	01 97       	sbiw	r24, 0x01	; 1
    300c:	9e 83       	std	Y+6, r25	; 0x06
    300e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3010:	8d 81       	ldd	r24, Y+5	; 0x05
    3012:	9e 81       	ldd	r25, Y+6	; 0x06
    3014:	00 97       	sbiw	r24, 0x00	; 0
    3016:	69 f7       	brne	.-38     	; 0x2ff2 <HLCD8_voidInit+0x366>
    3018:	14 c0       	rjmp	.+40     	; 0x3042 <HLCD8_voidInit+0x3b6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    301a:	6f 81       	ldd	r22, Y+7	; 0x07
    301c:	78 85       	ldd	r23, Y+8	; 0x08
    301e:	89 85       	ldd	r24, Y+9	; 0x09
    3020:	9a 85       	ldd	r25, Y+10	; 0x0a
    3022:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3026:	dc 01       	movw	r26, r24
    3028:	cb 01       	movw	r24, r22
    302a:	9e 83       	std	Y+6, r25	; 0x06
    302c:	8d 83       	std	Y+5, r24	; 0x05
    302e:	8d 81       	ldd	r24, Y+5	; 0x05
    3030:	9e 81       	ldd	r25, Y+6	; 0x06
    3032:	9a 83       	std	Y+2, r25	; 0x02
    3034:	89 83       	std	Y+1, r24	; 0x01
    3036:	89 81       	ldd	r24, Y+1	; 0x01
    3038:	9a 81       	ldd	r25, Y+2	; 0x02
    303a:	01 97       	sbiw	r24, 0x01	; 1
    303c:	f1 f7       	brne	.-4      	; 0x303a <HLCD8_voidInit+0x3ae>
    303e:	9a 83       	std	Y+2, r25	; 0x02
    3040:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(2);
    HLCD8_voidSendCommand(ENTRY_MODE_SET);
    3042:	86 e0       	ldi	r24, 0x06	; 6
    3044:	0e 94 0a 15 	call	0x2a14	; 0x2a14 <HLCD8_voidSendCommand>
}
    3048:	e8 96       	adiw	r28, 0x38	; 56
    304a:	0f b6       	in	r0, 0x3f	; 63
    304c:	f8 94       	cli
    304e:	de bf       	out	0x3e, r29	; 62
    3050:	0f be       	out	0x3f, r0	; 63
    3052:	cd bf       	out	0x3d, r28	; 61
    3054:	cf 91       	pop	r28
    3056:	df 91       	pop	r29
    3058:	08 95       	ret

0000305a <HLCD8_voidClearDisplay>:

void HLCD8_voidClearDisplay(void)
{
    305a:	df 93       	push	r29
    305c:	cf 93       	push	r28
    305e:	cd b7       	in	r28, 0x3d	; 61
    3060:	de b7       	in	r29, 0x3e	; 62
    3062:	2e 97       	sbiw	r28, 0x0e	; 14
    3064:	0f b6       	in	r0, 0x3f	; 63
    3066:	f8 94       	cli
    3068:	de bf       	out	0x3e, r29	; 62
    306a:	0f be       	out	0x3f, r0	; 63
    306c:	cd bf       	out	0x3d, r28	; 61
    HLCD8_voidSendCommand(DISPLAY_CLEAR);
    306e:	81 e0       	ldi	r24, 0x01	; 1
    3070:	0e 94 0a 15 	call	0x2a14	; 0x2a14 <HLCD8_voidSendCommand>
    3074:	80 e0       	ldi	r24, 0x00	; 0
    3076:	90 e0       	ldi	r25, 0x00	; 0
    3078:	a0 e0       	ldi	r26, 0x00	; 0
    307a:	b0 e4       	ldi	r27, 0x40	; 64
    307c:	8b 87       	std	Y+11, r24	; 0x0b
    307e:	9c 87       	std	Y+12, r25	; 0x0c
    3080:	ad 87       	std	Y+13, r26	; 0x0d
    3082:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3084:	6b 85       	ldd	r22, Y+11	; 0x0b
    3086:	7c 85       	ldd	r23, Y+12	; 0x0c
    3088:	8d 85       	ldd	r24, Y+13	; 0x0d
    308a:	9e 85       	ldd	r25, Y+14	; 0x0e
    308c:	20 e0       	ldi	r18, 0x00	; 0
    308e:	30 e0       	ldi	r19, 0x00	; 0
    3090:	4a ef       	ldi	r20, 0xFA	; 250
    3092:	54 e4       	ldi	r21, 0x44	; 68
    3094:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3098:	dc 01       	movw	r26, r24
    309a:	cb 01       	movw	r24, r22
    309c:	8f 83       	std	Y+7, r24	; 0x07
    309e:	98 87       	std	Y+8, r25	; 0x08
    30a0:	a9 87       	std	Y+9, r26	; 0x09
    30a2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    30a4:	6f 81       	ldd	r22, Y+7	; 0x07
    30a6:	78 85       	ldd	r23, Y+8	; 0x08
    30a8:	89 85       	ldd	r24, Y+9	; 0x09
    30aa:	9a 85       	ldd	r25, Y+10	; 0x0a
    30ac:	20 e0       	ldi	r18, 0x00	; 0
    30ae:	30 e0       	ldi	r19, 0x00	; 0
    30b0:	40 e8       	ldi	r20, 0x80	; 128
    30b2:	5f e3       	ldi	r21, 0x3F	; 63
    30b4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    30b8:	88 23       	and	r24, r24
    30ba:	2c f4       	brge	.+10     	; 0x30c6 <HLCD8_voidClearDisplay+0x6c>
		__ticks = 1;
    30bc:	81 e0       	ldi	r24, 0x01	; 1
    30be:	90 e0       	ldi	r25, 0x00	; 0
    30c0:	9e 83       	std	Y+6, r25	; 0x06
    30c2:	8d 83       	std	Y+5, r24	; 0x05
    30c4:	3f c0       	rjmp	.+126    	; 0x3144 <HLCD8_voidClearDisplay+0xea>
	else if (__tmp > 65535)
    30c6:	6f 81       	ldd	r22, Y+7	; 0x07
    30c8:	78 85       	ldd	r23, Y+8	; 0x08
    30ca:	89 85       	ldd	r24, Y+9	; 0x09
    30cc:	9a 85       	ldd	r25, Y+10	; 0x0a
    30ce:	20 e0       	ldi	r18, 0x00	; 0
    30d0:	3f ef       	ldi	r19, 0xFF	; 255
    30d2:	4f e7       	ldi	r20, 0x7F	; 127
    30d4:	57 e4       	ldi	r21, 0x47	; 71
    30d6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    30da:	18 16       	cp	r1, r24
    30dc:	4c f5       	brge	.+82     	; 0x3130 <HLCD8_voidClearDisplay+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    30de:	6b 85       	ldd	r22, Y+11	; 0x0b
    30e0:	7c 85       	ldd	r23, Y+12	; 0x0c
    30e2:	8d 85       	ldd	r24, Y+13	; 0x0d
    30e4:	9e 85       	ldd	r25, Y+14	; 0x0e
    30e6:	20 e0       	ldi	r18, 0x00	; 0
    30e8:	30 e0       	ldi	r19, 0x00	; 0
    30ea:	40 e2       	ldi	r20, 0x20	; 32
    30ec:	51 e4       	ldi	r21, 0x41	; 65
    30ee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    30f2:	dc 01       	movw	r26, r24
    30f4:	cb 01       	movw	r24, r22
    30f6:	bc 01       	movw	r22, r24
    30f8:	cd 01       	movw	r24, r26
    30fa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    30fe:	dc 01       	movw	r26, r24
    3100:	cb 01       	movw	r24, r22
    3102:	9e 83       	std	Y+6, r25	; 0x06
    3104:	8d 83       	std	Y+5, r24	; 0x05
    3106:	0f c0       	rjmp	.+30     	; 0x3126 <HLCD8_voidClearDisplay+0xcc>
    3108:	88 ec       	ldi	r24, 0xC8	; 200
    310a:	90 e0       	ldi	r25, 0x00	; 0
    310c:	9c 83       	std	Y+4, r25	; 0x04
    310e:	8b 83       	std	Y+3, r24	; 0x03
    3110:	8b 81       	ldd	r24, Y+3	; 0x03
    3112:	9c 81       	ldd	r25, Y+4	; 0x04
    3114:	01 97       	sbiw	r24, 0x01	; 1
    3116:	f1 f7       	brne	.-4      	; 0x3114 <HLCD8_voidClearDisplay+0xba>
    3118:	9c 83       	std	Y+4, r25	; 0x04
    311a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    311c:	8d 81       	ldd	r24, Y+5	; 0x05
    311e:	9e 81       	ldd	r25, Y+6	; 0x06
    3120:	01 97       	sbiw	r24, 0x01	; 1
    3122:	9e 83       	std	Y+6, r25	; 0x06
    3124:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3126:	8d 81       	ldd	r24, Y+5	; 0x05
    3128:	9e 81       	ldd	r25, Y+6	; 0x06
    312a:	00 97       	sbiw	r24, 0x00	; 0
    312c:	69 f7       	brne	.-38     	; 0x3108 <HLCD8_voidClearDisplay+0xae>
    312e:	14 c0       	rjmp	.+40     	; 0x3158 <HLCD8_voidClearDisplay+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3130:	6f 81       	ldd	r22, Y+7	; 0x07
    3132:	78 85       	ldd	r23, Y+8	; 0x08
    3134:	89 85       	ldd	r24, Y+9	; 0x09
    3136:	9a 85       	ldd	r25, Y+10	; 0x0a
    3138:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    313c:	dc 01       	movw	r26, r24
    313e:	cb 01       	movw	r24, r22
    3140:	9e 83       	std	Y+6, r25	; 0x06
    3142:	8d 83       	std	Y+5, r24	; 0x05
    3144:	8d 81       	ldd	r24, Y+5	; 0x05
    3146:	9e 81       	ldd	r25, Y+6	; 0x06
    3148:	9a 83       	std	Y+2, r25	; 0x02
    314a:	89 83       	std	Y+1, r24	; 0x01
    314c:	89 81       	ldd	r24, Y+1	; 0x01
    314e:	9a 81       	ldd	r25, Y+2	; 0x02
    3150:	01 97       	sbiw	r24, 0x01	; 1
    3152:	f1 f7       	brne	.-4      	; 0x3150 <HLCD8_voidClearDisplay+0xf6>
    3154:	9a 83       	std	Y+2, r25	; 0x02
    3156:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(2);
}
    3158:	2e 96       	adiw	r28, 0x0e	; 14
    315a:	0f b6       	in	r0, 0x3f	; 63
    315c:	f8 94       	cli
    315e:	de bf       	out	0x3e, r29	; 62
    3160:	0f be       	out	0x3f, r0	; 63
    3162:	cd bf       	out	0x3d, r28	; 61
    3164:	cf 91       	pop	r28
    3166:	df 91       	pop	r29
    3168:	08 95       	ret

0000316a <HLCD8_voidSendString>:


void HLCD8_voidSendString(u8 * A_Pu8String)
{
    316a:	df 93       	push	r29
    316c:	cf 93       	push	r28
    316e:	00 d0       	rcall	.+0      	; 0x3170 <HLCD8_voidSendString+0x6>
    3170:	0f 92       	push	r0
    3172:	cd b7       	in	r28, 0x3d	; 61
    3174:	de b7       	in	r29, 0x3e	; 62
    3176:	9b 83       	std	Y+3, r25	; 0x03
    3178:	8a 83       	std	Y+2, r24	; 0x02
    u8 local_u8Couter=0;
    317a:	19 82       	std	Y+1, r1	; 0x01
    317c:	0e c0       	rjmp	.+28     	; 0x319a <HLCD8_voidSendString+0x30>
    while (A_Pu8String[local_u8Couter]!='\0')
    {
        HLCD8_voidSendData(A_Pu8String[local_u8Couter]);
    317e:	89 81       	ldd	r24, Y+1	; 0x01
    3180:	28 2f       	mov	r18, r24
    3182:	30 e0       	ldi	r19, 0x00	; 0
    3184:	8a 81       	ldd	r24, Y+2	; 0x02
    3186:	9b 81       	ldd	r25, Y+3	; 0x03
    3188:	fc 01       	movw	r30, r24
    318a:	e2 0f       	add	r30, r18
    318c:	f3 1f       	adc	r31, r19
    318e:	80 81       	ld	r24, Z
    3190:	0e 94 a8 15 	call	0x2b50	; 0x2b50 <HLCD8_voidSendData>
        local_u8Couter++;
    3194:	89 81       	ldd	r24, Y+1	; 0x01
    3196:	8f 5f       	subi	r24, 0xFF	; 255
    3198:	89 83       	std	Y+1, r24	; 0x01


void HLCD8_voidSendString(u8 * A_Pu8String)
{
    u8 local_u8Couter=0;
    while (A_Pu8String[local_u8Couter]!='\0')
    319a:	89 81       	ldd	r24, Y+1	; 0x01
    319c:	28 2f       	mov	r18, r24
    319e:	30 e0       	ldi	r19, 0x00	; 0
    31a0:	8a 81       	ldd	r24, Y+2	; 0x02
    31a2:	9b 81       	ldd	r25, Y+3	; 0x03
    31a4:	fc 01       	movw	r30, r24
    31a6:	e2 0f       	add	r30, r18
    31a8:	f3 1f       	adc	r31, r19
    31aa:	80 81       	ld	r24, Z
    31ac:	88 23       	and	r24, r24
    31ae:	39 f7       	brne	.-50     	; 0x317e <HLCD8_voidSendString+0x14>
    {
        HLCD8_voidSendData(A_Pu8String[local_u8Couter]);
        local_u8Couter++;
    }
    
}
    31b0:	0f 90       	pop	r0
    31b2:	0f 90       	pop	r0
    31b4:	0f 90       	pop	r0
    31b6:	cf 91       	pop	r28
    31b8:	df 91       	pop	r29
    31ba:	08 95       	ret

000031bc <HLCD8_voidGoToPos>:

void HLCD8_voidGoToPos(u8 A_u8RowNum,u8 A_u8ColNum)
{
    31bc:	df 93       	push	r29
    31be:	cf 93       	push	r28
    31c0:	cd b7       	in	r28, 0x3d	; 61
    31c2:	de b7       	in	r29, 0x3e	; 62
    31c4:	63 97       	sbiw	r28, 0x13	; 19
    31c6:	0f b6       	in	r0, 0x3f	; 63
    31c8:	f8 94       	cli
    31ca:	de bf       	out	0x3e, r29	; 62
    31cc:	0f be       	out	0x3f, r0	; 63
    31ce:	cd bf       	out	0x3d, r28	; 61
    31d0:	88 8b       	std	Y+16, r24	; 0x10
    31d2:	69 8b       	std	Y+17, r22	; 0x11
    // }
    // _delay_ms(1);
    /************************************************************/ 
    //Second method
	u8 local_u8Address;
    switch(A_u8RowNum)
    31d4:	88 89       	ldd	r24, Y+16	; 0x10
    31d6:	28 2f       	mov	r18, r24
    31d8:	30 e0       	ldi	r19, 0x00	; 0
    31da:	3b 8b       	std	Y+19, r19	; 0x13
    31dc:	2a 8b       	std	Y+18, r18	; 0x12
    31de:	8a 89       	ldd	r24, Y+18	; 0x12
    31e0:	9b 89       	ldd	r25, Y+19	; 0x13
    31e2:	81 30       	cpi	r24, 0x01	; 1
    31e4:	91 05       	cpc	r25, r1
    31e6:	31 f0       	breq	.+12     	; 0x31f4 <HLCD8_voidGoToPos+0x38>
    31e8:	2a 89       	ldd	r18, Y+18	; 0x12
    31ea:	3b 89       	ldd	r19, Y+19	; 0x13
    31ec:	22 30       	cpi	r18, 0x02	; 2
    31ee:	31 05       	cpc	r19, r1
    31f0:	59 f0       	breq	.+22     	; 0x3208 <HLCD8_voidGoToPos+0x4c>
    31f2:	13 c0       	rjmp	.+38     	; 0x321a <HLCD8_voidGoToPos+0x5e>
    {
        case LCD_ROW_ONE:
        local_u8Address=FIRST_ROW_ADDRESS + A_u8ColNum -1;
    31f4:	89 89       	ldd	r24, Y+17	; 0x11
    31f6:	81 50       	subi	r24, 0x01	; 1
    31f8:	8f 87       	std	Y+15, r24	; 0x0f
        SET_BIT(local_u8Address,PIN7);
    31fa:	8f 85       	ldd	r24, Y+15	; 0x0f
    31fc:	80 68       	ori	r24, 0x80	; 128
    31fe:	8f 87       	std	Y+15, r24	; 0x0f
        HLCD8_voidSendCommand(local_u8Address);
    3200:	8f 85       	ldd	r24, Y+15	; 0x0f
    3202:	0e 94 0a 15 	call	0x2a14	; 0x2a14 <HLCD8_voidSendCommand>
    3206:	09 c0       	rjmp	.+18     	; 0x321a <HLCD8_voidGoToPos+0x5e>
        break;

        case LCD_ROW_TWO:
        local_u8Address=SECOND_ROW_ADDRESS + A_u8ColNum;
    3208:	89 89       	ldd	r24, Y+17	; 0x11
    320a:	81 5c       	subi	r24, 0xC1	; 193
    320c:	8f 87       	std	Y+15, r24	; 0x0f
        SET_BIT(local_u8Address,PIN7);
    320e:	8f 85       	ldd	r24, Y+15	; 0x0f
    3210:	80 68       	ori	r24, 0x80	; 128
    3212:	8f 87       	std	Y+15, r24	; 0x0f
        HLCD8_voidSendCommand(local_u8Address);
    3214:	8f 85       	ldd	r24, Y+15	; 0x0f
    3216:	0e 94 0a 15 	call	0x2a14	; 0x2a14 <HLCD8_voidSendCommand>
    321a:	80 e0       	ldi	r24, 0x00	; 0
    321c:	90 e0       	ldi	r25, 0x00	; 0
    321e:	a0 e8       	ldi	r26, 0x80	; 128
    3220:	bf e3       	ldi	r27, 0x3F	; 63
    3222:	8b 87       	std	Y+11, r24	; 0x0b
    3224:	9c 87       	std	Y+12, r25	; 0x0c
    3226:	ad 87       	std	Y+13, r26	; 0x0d
    3228:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    322a:	6b 85       	ldd	r22, Y+11	; 0x0b
    322c:	7c 85       	ldd	r23, Y+12	; 0x0c
    322e:	8d 85       	ldd	r24, Y+13	; 0x0d
    3230:	9e 85       	ldd	r25, Y+14	; 0x0e
    3232:	20 e0       	ldi	r18, 0x00	; 0
    3234:	30 e0       	ldi	r19, 0x00	; 0
    3236:	4a ef       	ldi	r20, 0xFA	; 250
    3238:	54 e4       	ldi	r21, 0x44	; 68
    323a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    323e:	dc 01       	movw	r26, r24
    3240:	cb 01       	movw	r24, r22
    3242:	8f 83       	std	Y+7, r24	; 0x07
    3244:	98 87       	std	Y+8, r25	; 0x08
    3246:	a9 87       	std	Y+9, r26	; 0x09
    3248:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    324a:	6f 81       	ldd	r22, Y+7	; 0x07
    324c:	78 85       	ldd	r23, Y+8	; 0x08
    324e:	89 85       	ldd	r24, Y+9	; 0x09
    3250:	9a 85       	ldd	r25, Y+10	; 0x0a
    3252:	20 e0       	ldi	r18, 0x00	; 0
    3254:	30 e0       	ldi	r19, 0x00	; 0
    3256:	40 e8       	ldi	r20, 0x80	; 128
    3258:	5f e3       	ldi	r21, 0x3F	; 63
    325a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    325e:	88 23       	and	r24, r24
    3260:	2c f4       	brge	.+10     	; 0x326c <HLCD8_voidGoToPos+0xb0>
		__ticks = 1;
    3262:	81 e0       	ldi	r24, 0x01	; 1
    3264:	90 e0       	ldi	r25, 0x00	; 0
    3266:	9e 83       	std	Y+6, r25	; 0x06
    3268:	8d 83       	std	Y+5, r24	; 0x05
    326a:	3f c0       	rjmp	.+126    	; 0x32ea <HLCD8_voidGoToPos+0x12e>
	else if (__tmp > 65535)
    326c:	6f 81       	ldd	r22, Y+7	; 0x07
    326e:	78 85       	ldd	r23, Y+8	; 0x08
    3270:	89 85       	ldd	r24, Y+9	; 0x09
    3272:	9a 85       	ldd	r25, Y+10	; 0x0a
    3274:	20 e0       	ldi	r18, 0x00	; 0
    3276:	3f ef       	ldi	r19, 0xFF	; 255
    3278:	4f e7       	ldi	r20, 0x7F	; 127
    327a:	57 e4       	ldi	r21, 0x47	; 71
    327c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3280:	18 16       	cp	r1, r24
    3282:	4c f5       	brge	.+82     	; 0x32d6 <HLCD8_voidGoToPos+0x11a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3284:	6b 85       	ldd	r22, Y+11	; 0x0b
    3286:	7c 85       	ldd	r23, Y+12	; 0x0c
    3288:	8d 85       	ldd	r24, Y+13	; 0x0d
    328a:	9e 85       	ldd	r25, Y+14	; 0x0e
    328c:	20 e0       	ldi	r18, 0x00	; 0
    328e:	30 e0       	ldi	r19, 0x00	; 0
    3290:	40 e2       	ldi	r20, 0x20	; 32
    3292:	51 e4       	ldi	r21, 0x41	; 65
    3294:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3298:	dc 01       	movw	r26, r24
    329a:	cb 01       	movw	r24, r22
    329c:	bc 01       	movw	r22, r24
    329e:	cd 01       	movw	r24, r26
    32a0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    32a4:	dc 01       	movw	r26, r24
    32a6:	cb 01       	movw	r24, r22
    32a8:	9e 83       	std	Y+6, r25	; 0x06
    32aa:	8d 83       	std	Y+5, r24	; 0x05
    32ac:	0f c0       	rjmp	.+30     	; 0x32cc <HLCD8_voidGoToPos+0x110>
    32ae:	88 ec       	ldi	r24, 0xC8	; 200
    32b0:	90 e0       	ldi	r25, 0x00	; 0
    32b2:	9c 83       	std	Y+4, r25	; 0x04
    32b4:	8b 83       	std	Y+3, r24	; 0x03
    32b6:	8b 81       	ldd	r24, Y+3	; 0x03
    32b8:	9c 81       	ldd	r25, Y+4	; 0x04
    32ba:	01 97       	sbiw	r24, 0x01	; 1
    32bc:	f1 f7       	brne	.-4      	; 0x32ba <HLCD8_voidGoToPos+0xfe>
    32be:	9c 83       	std	Y+4, r25	; 0x04
    32c0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    32c2:	8d 81       	ldd	r24, Y+5	; 0x05
    32c4:	9e 81       	ldd	r25, Y+6	; 0x06
    32c6:	01 97       	sbiw	r24, 0x01	; 1
    32c8:	9e 83       	std	Y+6, r25	; 0x06
    32ca:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    32cc:	8d 81       	ldd	r24, Y+5	; 0x05
    32ce:	9e 81       	ldd	r25, Y+6	; 0x06
    32d0:	00 97       	sbiw	r24, 0x00	; 0
    32d2:	69 f7       	brne	.-38     	; 0x32ae <HLCD8_voidGoToPos+0xf2>
    32d4:	14 c0       	rjmp	.+40     	; 0x32fe <HLCD8_voidGoToPos+0x142>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    32d6:	6f 81       	ldd	r22, Y+7	; 0x07
    32d8:	78 85       	ldd	r23, Y+8	; 0x08
    32da:	89 85       	ldd	r24, Y+9	; 0x09
    32dc:	9a 85       	ldd	r25, Y+10	; 0x0a
    32de:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    32e2:	dc 01       	movw	r26, r24
    32e4:	cb 01       	movw	r24, r22
    32e6:	9e 83       	std	Y+6, r25	; 0x06
    32e8:	8d 83       	std	Y+5, r24	; 0x05
    32ea:	8d 81       	ldd	r24, Y+5	; 0x05
    32ec:	9e 81       	ldd	r25, Y+6	; 0x06
    32ee:	9a 83       	std	Y+2, r25	; 0x02
    32f0:	89 83       	std	Y+1, r24	; 0x01
    32f2:	89 81       	ldd	r24, Y+1	; 0x01
    32f4:	9a 81       	ldd	r25, Y+2	; 0x02
    32f6:	01 97       	sbiw	r24, 0x01	; 1
    32f8:	f1 f7       	brne	.-4      	; 0x32f6 <HLCD8_voidGoToPos+0x13a>
    32fa:	9a 83       	std	Y+2, r25	; 0x02
    32fc:	89 83       	std	Y+1, r24	; 0x01
        break;

    }
    _delay_ms(1);

}
    32fe:	63 96       	adiw	r28, 0x13	; 19
    3300:	0f b6       	in	r0, 0x3f	; 63
    3302:	f8 94       	cli
    3304:	de bf       	out	0x3e, r29	; 62
    3306:	0f be       	out	0x3f, r0	; 63
    3308:	cd bf       	out	0x3d, r28	; 61
    330a:	cf 91       	pop	r28
    330c:	df 91       	pop	r29
    330e:	08 95       	ret

00003310 <HLCD8_voidDisplayNumber>:

void HLCD8_voidDisplayNumber(u32 A_u32Number)
{
    3310:	df 93       	push	r29
    3312:	cf 93       	push	r28
    3314:	00 d0       	rcall	.+0      	; 0x3316 <HLCD8_voidDisplayNumber+0x6>
    3316:	00 d0       	rcall	.+0      	; 0x3318 <HLCD8_voidDisplayNumber+0x8>
    3318:	cd b7       	in	r28, 0x3d	; 61
    331a:	de b7       	in	r29, 0x3e	; 62
    331c:	9c 83       	std	Y+4, r25	; 0x04
    331e:	8b 83       	std	Y+3, r24	; 0x03
    // u8 local_u8NumToStr[100];
    // itoa(A_u32Number,local_u8NumToStr,10);
    // HLCD8_voidSendString(local_u8NumToStr);
    //****************************************************//
    //third method: it will deal with zero unlike the first method so it's not problem here
    u32 local_u32Number=1;
    3320:	81 e0       	ldi	r24, 0x01	; 1
    3322:	90 e0       	ldi	r25, 0x00	; 0
    3324:	9a 83       	std	Y+2, r25	; 0x02
    3326:	89 83       	std	Y+1, r24	; 0x01
    if(A_u32Number==0)
    3328:	8b 81       	ldd	r24, Y+3	; 0x03
    332a:	9c 81       	ldd	r25, Y+4	; 0x04
    332c:	00 97       	sbiw	r24, 0x00	; 0
    332e:	31 f5       	brne	.+76     	; 0x337c <HLCD8_voidDisplayNumber+0x6c>
    {
        HLCD8_voidSendData('0');
    3330:	80 e3       	ldi	r24, 0x30	; 48
    3332:	0e 94 a8 15 	call	0x2b50	; 0x2b50 <HLCD8_voidSendData>
    3336:	22 c0       	rjmp	.+68     	; 0x337c <HLCD8_voidDisplayNumber+0x6c>
    }   
    while(A_u32Number !=0)
    {
            local_u32Number=((local_u32Number * 10)+(A_u32Number%10));
    3338:	89 81       	ldd	r24, Y+1	; 0x01
    333a:	9a 81       	ldd	r25, Y+2	; 0x02
    333c:	9c 01       	movw	r18, r24
    333e:	22 0f       	add	r18, r18
    3340:	33 1f       	adc	r19, r19
    3342:	c9 01       	movw	r24, r18
    3344:	88 0f       	add	r24, r24
    3346:	99 1f       	adc	r25, r25
    3348:	88 0f       	add	r24, r24
    334a:	99 1f       	adc	r25, r25
    334c:	f9 01       	movw	r30, r18
    334e:	e8 0f       	add	r30, r24
    3350:	f9 1f       	adc	r31, r25
    3352:	8b 81       	ldd	r24, Y+3	; 0x03
    3354:	9c 81       	ldd	r25, Y+4	; 0x04
    3356:	2a e0       	ldi	r18, 0x0A	; 10
    3358:	30 e0       	ldi	r19, 0x00	; 0
    335a:	b9 01       	movw	r22, r18
    335c:	0e 94 b9 1f 	call	0x3f72	; 0x3f72 <__udivmodhi4>
    3360:	8e 0f       	add	r24, r30
    3362:	9f 1f       	adc	r25, r31
    3364:	9a 83       	std	Y+2, r25	; 0x02
    3366:	89 83       	std	Y+1, r24	; 0x01
            A_u32Number=A_u32Number/10;
    3368:	8b 81       	ldd	r24, Y+3	; 0x03
    336a:	9c 81       	ldd	r25, Y+4	; 0x04
    336c:	2a e0       	ldi	r18, 0x0A	; 10
    336e:	30 e0       	ldi	r19, 0x00	; 0
    3370:	b9 01       	movw	r22, r18
    3372:	0e 94 b9 1f 	call	0x3f72	; 0x3f72 <__udivmodhi4>
    3376:	cb 01       	movw	r24, r22
    3378:	9c 83       	std	Y+4, r25	; 0x04
    337a:	8b 83       	std	Y+3, r24	; 0x03
    u32 local_u32Number=1;
    if(A_u32Number==0)
    {
        HLCD8_voidSendData('0');
    }   
    while(A_u32Number !=0)
    337c:	8b 81       	ldd	r24, Y+3	; 0x03
    337e:	9c 81       	ldd	r25, Y+4	; 0x04
    3380:	00 97       	sbiw	r24, 0x00	; 0
    3382:	d1 f6       	brne	.-76     	; 0x3338 <HLCD8_voidDisplayNumber+0x28>
    3384:	14 c0       	rjmp	.+40     	; 0x33ae <HLCD8_voidDisplayNumber+0x9e>
            A_u32Number=A_u32Number/10;

    }
    while (local_u32Number!=1)
    {
        HLCD8_voidSendData((local_u32Number%10)+48);
    3386:	89 81       	ldd	r24, Y+1	; 0x01
    3388:	9a 81       	ldd	r25, Y+2	; 0x02
    338a:	2a e0       	ldi	r18, 0x0A	; 10
    338c:	30 e0       	ldi	r19, 0x00	; 0
    338e:	b9 01       	movw	r22, r18
    3390:	0e 94 b9 1f 	call	0x3f72	; 0x3f72 <__udivmodhi4>
    3394:	80 5d       	subi	r24, 0xD0	; 208
    3396:	0e 94 a8 15 	call	0x2b50	; 0x2b50 <HLCD8_voidSendData>
        local_u32Number=local_u32Number/10;
    339a:	89 81       	ldd	r24, Y+1	; 0x01
    339c:	9a 81       	ldd	r25, Y+2	; 0x02
    339e:	2a e0       	ldi	r18, 0x0A	; 10
    33a0:	30 e0       	ldi	r19, 0x00	; 0
    33a2:	b9 01       	movw	r22, r18
    33a4:	0e 94 b9 1f 	call	0x3f72	; 0x3f72 <__udivmodhi4>
    33a8:	cb 01       	movw	r24, r22
    33aa:	9a 83       	std	Y+2, r25	; 0x02
    33ac:	89 83       	std	Y+1, r24	; 0x01
    {
            local_u32Number=((local_u32Number * 10)+(A_u32Number%10));
            A_u32Number=A_u32Number/10;

    }
    while (local_u32Number!=1)
    33ae:	89 81       	ldd	r24, Y+1	; 0x01
    33b0:	9a 81       	ldd	r25, Y+2	; 0x02
    33b2:	81 30       	cpi	r24, 0x01	; 1
    33b4:	91 05       	cpc	r25, r1
    33b6:	39 f7       	brne	.-50     	; 0x3386 <HLCD8_voidDisplayNumber+0x76>
    {
        HLCD8_voidSendData((local_u32Number%10)+48);
        local_u32Number=local_u32Number/10;
    }
}
    33b8:	0f 90       	pop	r0
    33ba:	0f 90       	pop	r0
    33bc:	0f 90       	pop	r0
    33be:	0f 90       	pop	r0
    33c0:	cf 91       	pop	r28
    33c2:	df 91       	pop	r29
    33c4:	08 95       	ret

000033c6 <HLCD8_voidStoreCustomChar>:

void HLCD8_voidStoreCustomChar(u8 * A_u8Pattern,u8 A_u8CGRAMIndex)
{
    33c6:	df 93       	push	r29
    33c8:	cf 93       	push	r28
    33ca:	cd b7       	in	r28, 0x3d	; 61
    33cc:	de b7       	in	r29, 0x3e	; 62
    33ce:	ab 97       	sbiw	r28, 0x2b	; 43
    33d0:	0f b6       	in	r0, 0x3f	; 63
    33d2:	f8 94       	cli
    33d4:	de bf       	out	0x3e, r29	; 62
    33d6:	0f be       	out	0x3f, r0	; 63
    33d8:	cd bf       	out	0x3d, r28	; 61
    33da:	9a a7       	std	Y+42, r25	; 0x2a
    33dc:	89 a7       	std	Y+41, r24	; 0x29
    33de:	6b a7       	std	Y+43, r22	; 0x2b
    u8 local_u8Address;
    if(A_u8CGRAMIndex<8)
    33e0:	8b a5       	ldd	r24, Y+43	; 0x2b
    33e2:	88 30       	cpi	r24, 0x08	; 8
    33e4:	08 f0       	brcs	.+2      	; 0x33e8 <HLCD8_voidStoreCustomChar+0x22>
    33e6:	e5 c0       	rjmp	.+458    	; 0x35b2 <HLCD8_voidStoreCustomChar+0x1ec>
    {
        A_u8CGRAMIndex=A_u8CGRAMIndex*8;
    33e8:	8b a5       	ldd	r24, Y+43	; 0x2b
    33ea:	88 2f       	mov	r24, r24
    33ec:	90 e0       	ldi	r25, 0x00	; 0
    33ee:	88 0f       	add	r24, r24
    33f0:	99 1f       	adc	r25, r25
    33f2:	88 0f       	add	r24, r24
    33f4:	99 1f       	adc	r25, r25
    33f6:	88 0f       	add	r24, r24
    33f8:	99 1f       	adc	r25, r25
    33fa:	8b a7       	std	Y+43, r24	; 0x2b
        SET_BIT(A_u8CGRAMIndex,PIN6);
    33fc:	8b a5       	ldd	r24, Y+43	; 0x2b
    33fe:	80 64       	ori	r24, 0x40	; 64
    3400:	8b a7       	std	Y+43, r24	; 0x2b
        CLR_BIT(A_u8CGRAMIndex,PIN7);
    3402:	8b a5       	ldd	r24, Y+43	; 0x2b
    3404:	8f 77       	andi	r24, 0x7F	; 127
    3406:	8b a7       	std	Y+43, r24	; 0x2b
        HLCD8_voidSendCommand(A_u8CGRAMIndex);
    3408:	8b a5       	ldd	r24, Y+43	; 0x2b
    340a:	0e 94 0a 15 	call	0x2a14	; 0x2a14 <HLCD8_voidSendCommand>
        for(u8 i=0;i<8;i++)
    340e:	1f a2       	std	Y+39, r1	; 0x27
    3410:	cc c0       	rjmp	.+408    	; 0x35aa <HLCD8_voidStoreCustomChar+0x1e4>
        {
            HLCD8_voidSendData(A_u8Pattern[i]);
    3412:	8f a1       	ldd	r24, Y+39	; 0x27
    3414:	28 2f       	mov	r18, r24
    3416:	30 e0       	ldi	r19, 0x00	; 0
    3418:	89 a5       	ldd	r24, Y+41	; 0x29
    341a:	9a a5       	ldd	r25, Y+42	; 0x2a
    341c:	fc 01       	movw	r30, r24
    341e:	e2 0f       	add	r30, r18
    3420:	f3 1f       	adc	r31, r19
    3422:	80 81       	ld	r24, Z
    3424:	0e 94 a8 15 	call	0x2b50	; 0x2b50 <HLCD8_voidSendData>
    3428:	80 e0       	ldi	r24, 0x00	; 0
    342a:	90 e0       	ldi	r25, 0x00	; 0
    342c:	a0 e7       	ldi	r26, 0x70	; 112
    342e:	b2 e4       	ldi	r27, 0x42	; 66
    3430:	8b a3       	std	Y+35, r24	; 0x23
    3432:	9c a3       	std	Y+36, r25	; 0x24
    3434:	ad a3       	std	Y+37, r26	; 0x25
    3436:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    3438:	6b a1       	ldd	r22, Y+35	; 0x23
    343a:	7c a1       	ldd	r23, Y+36	; 0x24
    343c:	8d a1       	ldd	r24, Y+37	; 0x25
    343e:	9e a1       	ldd	r25, Y+38	; 0x26
    3440:	2b ea       	ldi	r18, 0xAB	; 171
    3442:	3a ea       	ldi	r19, 0xAA	; 170
    3444:	4a e2       	ldi	r20, 0x2A	; 42
    3446:	50 e4       	ldi	r21, 0x40	; 64
    3448:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    344c:	dc 01       	movw	r26, r24
    344e:	cb 01       	movw	r24, r22
    3450:	8f 8f       	std	Y+31, r24	; 0x1f
    3452:	98 a3       	std	Y+32, r25	; 0x20
    3454:	a9 a3       	std	Y+33, r26	; 0x21
    3456:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    3458:	6f 8d       	ldd	r22, Y+31	; 0x1f
    345a:	78 a1       	ldd	r23, Y+32	; 0x20
    345c:	89 a1       	ldd	r24, Y+33	; 0x21
    345e:	9a a1       	ldd	r25, Y+34	; 0x22
    3460:	20 e0       	ldi	r18, 0x00	; 0
    3462:	30 e0       	ldi	r19, 0x00	; 0
    3464:	40 e8       	ldi	r20, 0x80	; 128
    3466:	5f e3       	ldi	r21, 0x3F	; 63
    3468:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    346c:	88 23       	and	r24, r24
    346e:	1c f4       	brge	.+6      	; 0x3476 <HLCD8_voidStoreCustomChar+0xb0>
		__ticks = 1;
    3470:	81 e0       	ldi	r24, 0x01	; 1
    3472:	8e 8f       	std	Y+30, r24	; 0x1e
    3474:	91 c0       	rjmp	.+290    	; 0x3598 <HLCD8_voidStoreCustomChar+0x1d2>
	else if (__tmp > 255)
    3476:	6f 8d       	ldd	r22, Y+31	; 0x1f
    3478:	78 a1       	ldd	r23, Y+32	; 0x20
    347a:	89 a1       	ldd	r24, Y+33	; 0x21
    347c:	9a a1       	ldd	r25, Y+34	; 0x22
    347e:	20 e0       	ldi	r18, 0x00	; 0
    3480:	30 e0       	ldi	r19, 0x00	; 0
    3482:	4f e7       	ldi	r20, 0x7F	; 127
    3484:	53 e4       	ldi	r21, 0x43	; 67
    3486:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    348a:	18 16       	cp	r1, r24
    348c:	0c f0       	brlt	.+2      	; 0x3490 <HLCD8_voidStoreCustomChar+0xca>
    348e:	7b c0       	rjmp	.+246    	; 0x3586 <HLCD8_voidStoreCustomChar+0x1c0>
	{
		_delay_ms(__us / 1000.0);
    3490:	6b a1       	ldd	r22, Y+35	; 0x23
    3492:	7c a1       	ldd	r23, Y+36	; 0x24
    3494:	8d a1       	ldd	r24, Y+37	; 0x25
    3496:	9e a1       	ldd	r25, Y+38	; 0x26
    3498:	20 e0       	ldi	r18, 0x00	; 0
    349a:	30 e0       	ldi	r19, 0x00	; 0
    349c:	4a e7       	ldi	r20, 0x7A	; 122
    349e:	54 e4       	ldi	r21, 0x44	; 68
    34a0:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    34a4:	dc 01       	movw	r26, r24
    34a6:	cb 01       	movw	r24, r22
    34a8:	8a 8f       	std	Y+26, r24	; 0x1a
    34aa:	9b 8f       	std	Y+27, r25	; 0x1b
    34ac:	ac 8f       	std	Y+28, r26	; 0x1c
    34ae:	bd 8f       	std	Y+29, r27	; 0x1d
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    34b0:	6a 8d       	ldd	r22, Y+26	; 0x1a
    34b2:	7b 8d       	ldd	r23, Y+27	; 0x1b
    34b4:	8c 8d       	ldd	r24, Y+28	; 0x1c
    34b6:	9d 8d       	ldd	r25, Y+29	; 0x1d
    34b8:	20 e0       	ldi	r18, 0x00	; 0
    34ba:	30 e0       	ldi	r19, 0x00	; 0
    34bc:	4a ef       	ldi	r20, 0xFA	; 250
    34be:	54 e4       	ldi	r21, 0x44	; 68
    34c0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    34c4:	dc 01       	movw	r26, r24
    34c6:	cb 01       	movw	r24, r22
    34c8:	8e 8b       	std	Y+22, r24	; 0x16
    34ca:	9f 8b       	std	Y+23, r25	; 0x17
    34cc:	a8 8f       	std	Y+24, r26	; 0x18
    34ce:	b9 8f       	std	Y+25, r27	; 0x19
	if (__tmp < 1.0)
    34d0:	6e 89       	ldd	r22, Y+22	; 0x16
    34d2:	7f 89       	ldd	r23, Y+23	; 0x17
    34d4:	88 8d       	ldd	r24, Y+24	; 0x18
    34d6:	99 8d       	ldd	r25, Y+25	; 0x19
    34d8:	20 e0       	ldi	r18, 0x00	; 0
    34da:	30 e0       	ldi	r19, 0x00	; 0
    34dc:	40 e8       	ldi	r20, 0x80	; 128
    34de:	5f e3       	ldi	r21, 0x3F	; 63
    34e0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    34e4:	88 23       	and	r24, r24
    34e6:	2c f4       	brge	.+10     	; 0x34f2 <HLCD8_voidStoreCustomChar+0x12c>
		__ticks = 1;
    34e8:	81 e0       	ldi	r24, 0x01	; 1
    34ea:	90 e0       	ldi	r25, 0x00	; 0
    34ec:	9d 8b       	std	Y+21, r25	; 0x15
    34ee:	8c 8b       	std	Y+20, r24	; 0x14
    34f0:	3f c0       	rjmp	.+126    	; 0x3570 <HLCD8_voidStoreCustomChar+0x1aa>
	else if (__tmp > 65535)
    34f2:	6e 89       	ldd	r22, Y+22	; 0x16
    34f4:	7f 89       	ldd	r23, Y+23	; 0x17
    34f6:	88 8d       	ldd	r24, Y+24	; 0x18
    34f8:	99 8d       	ldd	r25, Y+25	; 0x19
    34fa:	20 e0       	ldi	r18, 0x00	; 0
    34fc:	3f ef       	ldi	r19, 0xFF	; 255
    34fe:	4f e7       	ldi	r20, 0x7F	; 127
    3500:	57 e4       	ldi	r21, 0x47	; 71
    3502:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3506:	18 16       	cp	r1, r24
    3508:	4c f5       	brge	.+82     	; 0x355c <HLCD8_voidStoreCustomChar+0x196>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    350a:	6a 8d       	ldd	r22, Y+26	; 0x1a
    350c:	7b 8d       	ldd	r23, Y+27	; 0x1b
    350e:	8c 8d       	ldd	r24, Y+28	; 0x1c
    3510:	9d 8d       	ldd	r25, Y+29	; 0x1d
    3512:	20 e0       	ldi	r18, 0x00	; 0
    3514:	30 e0       	ldi	r19, 0x00	; 0
    3516:	40 e2       	ldi	r20, 0x20	; 32
    3518:	51 e4       	ldi	r21, 0x41	; 65
    351a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    351e:	dc 01       	movw	r26, r24
    3520:	cb 01       	movw	r24, r22
    3522:	bc 01       	movw	r22, r24
    3524:	cd 01       	movw	r24, r26
    3526:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    352a:	dc 01       	movw	r26, r24
    352c:	cb 01       	movw	r24, r22
    352e:	9d 8b       	std	Y+21, r25	; 0x15
    3530:	8c 8b       	std	Y+20, r24	; 0x14
    3532:	0f c0       	rjmp	.+30     	; 0x3552 <HLCD8_voidStoreCustomChar+0x18c>
    3534:	88 ec       	ldi	r24, 0xC8	; 200
    3536:	90 e0       	ldi	r25, 0x00	; 0
    3538:	9b 8b       	std	Y+19, r25	; 0x13
    353a:	8a 8b       	std	Y+18, r24	; 0x12
    353c:	8a 89       	ldd	r24, Y+18	; 0x12
    353e:	9b 89       	ldd	r25, Y+19	; 0x13
    3540:	01 97       	sbiw	r24, 0x01	; 1
    3542:	f1 f7       	brne	.-4      	; 0x3540 <HLCD8_voidStoreCustomChar+0x17a>
    3544:	9b 8b       	std	Y+19, r25	; 0x13
    3546:	8a 8b       	std	Y+18, r24	; 0x12
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3548:	8c 89       	ldd	r24, Y+20	; 0x14
    354a:	9d 89       	ldd	r25, Y+21	; 0x15
    354c:	01 97       	sbiw	r24, 0x01	; 1
    354e:	9d 8b       	std	Y+21, r25	; 0x15
    3550:	8c 8b       	std	Y+20, r24	; 0x14
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3552:	8c 89       	ldd	r24, Y+20	; 0x14
    3554:	9d 89       	ldd	r25, Y+21	; 0x15
    3556:	00 97       	sbiw	r24, 0x00	; 0
    3558:	69 f7       	brne	.-38     	; 0x3534 <HLCD8_voidStoreCustomChar+0x16e>
    355a:	24 c0       	rjmp	.+72     	; 0x35a4 <HLCD8_voidStoreCustomChar+0x1de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    355c:	6e 89       	ldd	r22, Y+22	; 0x16
    355e:	7f 89       	ldd	r23, Y+23	; 0x17
    3560:	88 8d       	ldd	r24, Y+24	; 0x18
    3562:	99 8d       	ldd	r25, Y+25	; 0x19
    3564:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3568:	dc 01       	movw	r26, r24
    356a:	cb 01       	movw	r24, r22
    356c:	9d 8b       	std	Y+21, r25	; 0x15
    356e:	8c 8b       	std	Y+20, r24	; 0x14
    3570:	8c 89       	ldd	r24, Y+20	; 0x14
    3572:	9d 89       	ldd	r25, Y+21	; 0x15
    3574:	99 8b       	std	Y+17, r25	; 0x11
    3576:	88 8b       	std	Y+16, r24	; 0x10
    3578:	88 89       	ldd	r24, Y+16	; 0x10
    357a:	99 89       	ldd	r25, Y+17	; 0x11
    357c:	01 97       	sbiw	r24, 0x01	; 1
    357e:	f1 f7       	brne	.-4      	; 0x357c <HLCD8_voidStoreCustomChar+0x1b6>
    3580:	99 8b       	std	Y+17, r25	; 0x11
    3582:	88 8b       	std	Y+16, r24	; 0x10
    3584:	0f c0       	rjmp	.+30     	; 0x35a4 <HLCD8_voidStoreCustomChar+0x1de>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    3586:	6f 8d       	ldd	r22, Y+31	; 0x1f
    3588:	78 a1       	ldd	r23, Y+32	; 0x20
    358a:	89 a1       	ldd	r24, Y+33	; 0x21
    358c:	9a a1       	ldd	r25, Y+34	; 0x22
    358e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3592:	dc 01       	movw	r26, r24
    3594:	cb 01       	movw	r24, r22
    3596:	8e 8f       	std	Y+30, r24	; 0x1e
    3598:	8e 8d       	ldd	r24, Y+30	; 0x1e
    359a:	8f 87       	std	Y+15, r24	; 0x0f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    359c:	8f 85       	ldd	r24, Y+15	; 0x0f
    359e:	8a 95       	dec	r24
    35a0:	f1 f7       	brne	.-4      	; 0x359e <HLCD8_voidStoreCustomChar+0x1d8>
    35a2:	8f 87       	std	Y+15, r24	; 0x0f
    {
        A_u8CGRAMIndex=A_u8CGRAMIndex*8;
        SET_BIT(A_u8CGRAMIndex,PIN6);
        CLR_BIT(A_u8CGRAMIndex,PIN7);
        HLCD8_voidSendCommand(A_u8CGRAMIndex);
        for(u8 i=0;i<8;i++)
    35a4:	8f a1       	ldd	r24, Y+39	; 0x27
    35a6:	8f 5f       	subi	r24, 0xFF	; 255
    35a8:	8f a3       	std	Y+39, r24	; 0x27
    35aa:	8f a1       	ldd	r24, Y+39	; 0x27
    35ac:	88 30       	cpi	r24, 0x08	; 8
    35ae:	08 f4       	brcc	.+2      	; 0x35b2 <HLCD8_voidStoreCustomChar+0x1ec>
    35b0:	30 cf       	rjmp	.-416    	; 0x3412 <HLCD8_voidStoreCustomChar+0x4c>
        {
            HLCD8_voidSendData(A_u8Pattern[i]);
            _delay_us(60);
        }
    }
    HLCD8_voidSendCommand(RETURN_HOME);
    35b2:	82 e0       	ldi	r24, 0x02	; 2
    35b4:	0e 94 0a 15 	call	0x2a14	; 0x2a14 <HLCD8_voidSendCommand>
    35b8:	80 e0       	ldi	r24, 0x00	; 0
    35ba:	90 e0       	ldi	r25, 0x00	; 0
    35bc:	a0 e0       	ldi	r26, 0x00	; 0
    35be:	b0 e4       	ldi	r27, 0x40	; 64
    35c0:	8b 87       	std	Y+11, r24	; 0x0b
    35c2:	9c 87       	std	Y+12, r25	; 0x0c
    35c4:	ad 87       	std	Y+13, r26	; 0x0d
    35c6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    35c8:	6b 85       	ldd	r22, Y+11	; 0x0b
    35ca:	7c 85       	ldd	r23, Y+12	; 0x0c
    35cc:	8d 85       	ldd	r24, Y+13	; 0x0d
    35ce:	9e 85       	ldd	r25, Y+14	; 0x0e
    35d0:	20 e0       	ldi	r18, 0x00	; 0
    35d2:	30 e0       	ldi	r19, 0x00	; 0
    35d4:	4a ef       	ldi	r20, 0xFA	; 250
    35d6:	54 e4       	ldi	r21, 0x44	; 68
    35d8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    35dc:	dc 01       	movw	r26, r24
    35de:	cb 01       	movw	r24, r22
    35e0:	8f 83       	std	Y+7, r24	; 0x07
    35e2:	98 87       	std	Y+8, r25	; 0x08
    35e4:	a9 87       	std	Y+9, r26	; 0x09
    35e6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    35e8:	6f 81       	ldd	r22, Y+7	; 0x07
    35ea:	78 85       	ldd	r23, Y+8	; 0x08
    35ec:	89 85       	ldd	r24, Y+9	; 0x09
    35ee:	9a 85       	ldd	r25, Y+10	; 0x0a
    35f0:	20 e0       	ldi	r18, 0x00	; 0
    35f2:	30 e0       	ldi	r19, 0x00	; 0
    35f4:	40 e8       	ldi	r20, 0x80	; 128
    35f6:	5f e3       	ldi	r21, 0x3F	; 63
    35f8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    35fc:	88 23       	and	r24, r24
    35fe:	2c f4       	brge	.+10     	; 0x360a <HLCD8_voidStoreCustomChar+0x244>
		__ticks = 1;
    3600:	81 e0       	ldi	r24, 0x01	; 1
    3602:	90 e0       	ldi	r25, 0x00	; 0
    3604:	9e 83       	std	Y+6, r25	; 0x06
    3606:	8d 83       	std	Y+5, r24	; 0x05
    3608:	3f c0       	rjmp	.+126    	; 0x3688 <HLCD8_voidStoreCustomChar+0x2c2>
	else if (__tmp > 65535)
    360a:	6f 81       	ldd	r22, Y+7	; 0x07
    360c:	78 85       	ldd	r23, Y+8	; 0x08
    360e:	89 85       	ldd	r24, Y+9	; 0x09
    3610:	9a 85       	ldd	r25, Y+10	; 0x0a
    3612:	20 e0       	ldi	r18, 0x00	; 0
    3614:	3f ef       	ldi	r19, 0xFF	; 255
    3616:	4f e7       	ldi	r20, 0x7F	; 127
    3618:	57 e4       	ldi	r21, 0x47	; 71
    361a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    361e:	18 16       	cp	r1, r24
    3620:	4c f5       	brge	.+82     	; 0x3674 <HLCD8_voidStoreCustomChar+0x2ae>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3622:	6b 85       	ldd	r22, Y+11	; 0x0b
    3624:	7c 85       	ldd	r23, Y+12	; 0x0c
    3626:	8d 85       	ldd	r24, Y+13	; 0x0d
    3628:	9e 85       	ldd	r25, Y+14	; 0x0e
    362a:	20 e0       	ldi	r18, 0x00	; 0
    362c:	30 e0       	ldi	r19, 0x00	; 0
    362e:	40 e2       	ldi	r20, 0x20	; 32
    3630:	51 e4       	ldi	r21, 0x41	; 65
    3632:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3636:	dc 01       	movw	r26, r24
    3638:	cb 01       	movw	r24, r22
    363a:	bc 01       	movw	r22, r24
    363c:	cd 01       	movw	r24, r26
    363e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3642:	dc 01       	movw	r26, r24
    3644:	cb 01       	movw	r24, r22
    3646:	9e 83       	std	Y+6, r25	; 0x06
    3648:	8d 83       	std	Y+5, r24	; 0x05
    364a:	0f c0       	rjmp	.+30     	; 0x366a <HLCD8_voidStoreCustomChar+0x2a4>
    364c:	88 ec       	ldi	r24, 0xC8	; 200
    364e:	90 e0       	ldi	r25, 0x00	; 0
    3650:	9c 83       	std	Y+4, r25	; 0x04
    3652:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3654:	8b 81       	ldd	r24, Y+3	; 0x03
    3656:	9c 81       	ldd	r25, Y+4	; 0x04
    3658:	01 97       	sbiw	r24, 0x01	; 1
    365a:	f1 f7       	brne	.-4      	; 0x3658 <HLCD8_voidStoreCustomChar+0x292>
    365c:	9c 83       	std	Y+4, r25	; 0x04
    365e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3660:	8d 81       	ldd	r24, Y+5	; 0x05
    3662:	9e 81       	ldd	r25, Y+6	; 0x06
    3664:	01 97       	sbiw	r24, 0x01	; 1
    3666:	9e 83       	std	Y+6, r25	; 0x06
    3668:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    366a:	8d 81       	ldd	r24, Y+5	; 0x05
    366c:	9e 81       	ldd	r25, Y+6	; 0x06
    366e:	00 97       	sbiw	r24, 0x00	; 0
    3670:	69 f7       	brne	.-38     	; 0x364c <HLCD8_voidStoreCustomChar+0x286>
    3672:	14 c0       	rjmp	.+40     	; 0x369c <HLCD8_voidStoreCustomChar+0x2d6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3674:	6f 81       	ldd	r22, Y+7	; 0x07
    3676:	78 85       	ldd	r23, Y+8	; 0x08
    3678:	89 85       	ldd	r24, Y+9	; 0x09
    367a:	9a 85       	ldd	r25, Y+10	; 0x0a
    367c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3680:	dc 01       	movw	r26, r24
    3682:	cb 01       	movw	r24, r22
    3684:	9e 83       	std	Y+6, r25	; 0x06
    3686:	8d 83       	std	Y+5, r24	; 0x05
    3688:	8d 81       	ldd	r24, Y+5	; 0x05
    368a:	9e 81       	ldd	r25, Y+6	; 0x06
    368c:	9a 83       	std	Y+2, r25	; 0x02
    368e:	89 83       	std	Y+1, r24	; 0x01
    3690:	89 81       	ldd	r24, Y+1	; 0x01
    3692:	9a 81       	ldd	r25, Y+2	; 0x02
    3694:	01 97       	sbiw	r24, 0x01	; 1
    3696:	f1 f7       	brne	.-4      	; 0x3694 <HLCD8_voidStoreCustomChar+0x2ce>
    3698:	9a 83       	std	Y+2, r25	; 0x02
    369a:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(2);

}
    369c:	ab 96       	adiw	r28, 0x2b	; 43
    369e:	0f b6       	in	r0, 0x3f	; 63
    36a0:	f8 94       	cli
    36a2:	de bf       	out	0x3e, r29	; 62
    36a4:	0f be       	out	0x3f, r0	; 63
    36a6:	cd bf       	out	0x3d, r28	; 61
    36a8:	cf 91       	pop	r28
    36aa:	df 91       	pop	r29
    36ac:	08 95       	ret

000036ae <HLCD8_voidDisplayCustomChar>:

void HLCD8_voidDisplayCustomChar(u8 A_u8CGRAMIndex,u8 A_u8Row,u8 A_u8Col)
{
    36ae:	df 93       	push	r29
    36b0:	cf 93       	push	r28
    36b2:	00 d0       	rcall	.+0      	; 0x36b4 <HLCD8_voidDisplayCustomChar+0x6>
    36b4:	0f 92       	push	r0
    36b6:	cd b7       	in	r28, 0x3d	; 61
    36b8:	de b7       	in	r29, 0x3e	; 62
    36ba:	89 83       	std	Y+1, r24	; 0x01
    36bc:	6a 83       	std	Y+2, r22	; 0x02
    36be:	4b 83       	std	Y+3, r20	; 0x03
    HLCD8_voidGoToPos(A_u8Row,A_u8Col);
    36c0:	8a 81       	ldd	r24, Y+2	; 0x02
    36c2:	6b 81       	ldd	r22, Y+3	; 0x03
    36c4:	0e 94 de 18 	call	0x31bc	; 0x31bc <HLCD8_voidGoToPos>
    HLCD8_voidSendData(A_u8CGRAMIndex);
    36c8:	89 81       	ldd	r24, Y+1	; 0x01
    36ca:	0e 94 a8 15 	call	0x2b50	; 0x2b50 <HLCD8_voidSendData>
    36ce:	0f 90       	pop	r0
    36d0:	0f 90       	pop	r0
    36d2:	0f 90       	pop	r0
    36d4:	cf 91       	pop	r28
    36d6:	df 91       	pop	r29
    36d8:	08 95       	ret

000036da <HSSD_voidDisplay>:
#include "../Include/HAL/SSD/SSD_Private.h"
#include "../Include/HAL/SSD/SSD_Configuration.h"

#include <util/delay.h>
void HSSD_voidDisplay(u8 A_u8Number,u8 A_u8PortId)
{
    36da:	df 93       	push	r29
    36dc:	cf 93       	push	r28
    36de:	00 d0       	rcall	.+0      	; 0x36e0 <HSSD_voidDisplay+0x6>
    36e0:	00 d0       	rcall	.+0      	; 0x36e2 <HSSD_voidDisplay+0x8>
    36e2:	cd b7       	in	r28, 0x3d	; 61
    36e4:	de b7       	in	r29, 0x3e	; 62
    36e6:	89 83       	std	Y+1, r24	; 0x01
    36e8:	6a 83       	std	Y+2, r22	; 0x02
	switch(A_u8Number)
    36ea:	89 81       	ldd	r24, Y+1	; 0x01
    36ec:	28 2f       	mov	r18, r24
    36ee:	30 e0       	ldi	r19, 0x00	; 0
    36f0:	3c 83       	std	Y+4, r19	; 0x04
    36f2:	2b 83       	std	Y+3, r18	; 0x03
    36f4:	8b 81       	ldd	r24, Y+3	; 0x03
    36f6:	9c 81       	ldd	r25, Y+4	; 0x04
    36f8:	8b 35       	cpi	r24, 0x5B	; 91
    36fa:	91 05       	cpc	r25, r1
    36fc:	09 f4       	brne	.+2      	; 0x3700 <HSSD_voidDisplay+0x26>
    36fe:	4c c0       	rjmp	.+152    	; 0x3798 <HSSD_voidDisplay+0xbe>
    3700:	2b 81       	ldd	r18, Y+3	; 0x03
    3702:	3c 81       	ldd	r19, Y+4	; 0x04
    3704:	2c 35       	cpi	r18, 0x5C	; 92
    3706:	31 05       	cpc	r19, r1
    3708:	e4 f4       	brge	.+56     	; 0x3742 <HSSD_voidDisplay+0x68>
    370a:	8b 81       	ldd	r24, Y+3	; 0x03
    370c:	9c 81       	ldd	r25, Y+4	; 0x04
    370e:	87 30       	cpi	r24, 0x07	; 7
    3710:	91 05       	cpc	r25, r1
    3712:	09 f4       	brne	.+2      	; 0x3716 <HSSD_voidDisplay+0x3c>
    3714:	5a c0       	rjmp	.+180    	; 0x37ca <HSSD_voidDisplay+0xf0>
    3716:	2b 81       	ldd	r18, Y+3	; 0x03
    3718:	3c 81       	ldd	r19, Y+4	; 0x04
    371a:	28 30       	cpi	r18, 0x08	; 8
    371c:	31 05       	cpc	r19, r1
    371e:	34 f4       	brge	.+12     	; 0x372c <HSSD_voidDisplay+0x52>
    3720:	8b 81       	ldd	r24, Y+3	; 0x03
    3722:	9c 81       	ldd	r25, Y+4	; 0x04
    3724:	86 30       	cpi	r24, 0x06	; 6
    3726:	91 05       	cpc	r25, r1
    3728:	91 f1       	breq	.+100    	; 0x378e <HSSD_voidDisplay+0xb4>
    372a:	5d c0       	rjmp	.+186    	; 0x37e6 <HSSD_voidDisplay+0x10c>
    372c:	2b 81       	ldd	r18, Y+3	; 0x03
    372e:	3c 81       	ldd	r19, Y+4	; 0x04
    3730:	2f 33       	cpi	r18, 0x3F	; 63
    3732:	31 05       	cpc	r19, r1
    3734:	39 f1       	breq	.+78     	; 0x3784 <HSSD_voidDisplay+0xaa>
    3736:	8b 81       	ldd	r24, Y+3	; 0x03
    3738:	9c 81       	ldd	r25, Y+4	; 0x04
    373a:	8f 34       	cpi	r24, 0x4F	; 79
    373c:	91 05       	cpc	r25, r1
    373e:	89 f1       	breq	.+98     	; 0x37a2 <HSSD_voidDisplay+0xc8>
    3740:	52 c0       	rjmp	.+164    	; 0x37e6 <HSSD_voidDisplay+0x10c>
    3742:	2b 81       	ldd	r18, Y+3	; 0x03
    3744:	3c 81       	ldd	r19, Y+4	; 0x04
    3746:	2f 36       	cpi	r18, 0x6F	; 111
    3748:	31 05       	cpc	r19, r1
    374a:	09 f4       	brne	.+2      	; 0x374e <HSSD_voidDisplay+0x74>
    374c:	48 c0       	rjmp	.+144    	; 0x37de <HSSD_voidDisplay+0x104>
    374e:	8b 81       	ldd	r24, Y+3	; 0x03
    3750:	9c 81       	ldd	r25, Y+4	; 0x04
    3752:	80 37       	cpi	r24, 0x70	; 112
    3754:	91 05       	cpc	r25, r1
    3756:	5c f4       	brge	.+22     	; 0x376e <HSSD_voidDisplay+0x94>
    3758:	2b 81       	ldd	r18, Y+3	; 0x03
    375a:	3c 81       	ldd	r19, Y+4	; 0x04
    375c:	26 36       	cpi	r18, 0x66	; 102
    375e:	31 05       	cpc	r19, r1
    3760:	29 f1       	breq	.+74     	; 0x37ac <HSSD_voidDisplay+0xd2>
    3762:	8b 81       	ldd	r24, Y+3	; 0x03
    3764:	9c 81       	ldd	r25, Y+4	; 0x04
    3766:	8d 36       	cpi	r24, 0x6D	; 109
    3768:	91 05       	cpc	r25, r1
    376a:	29 f1       	breq	.+74     	; 0x37b6 <HSSD_voidDisplay+0xdc>
    376c:	3c c0       	rjmp	.+120    	; 0x37e6 <HSSD_voidDisplay+0x10c>
    376e:	2b 81       	ldd	r18, Y+3	; 0x03
    3770:	3c 81       	ldd	r19, Y+4	; 0x04
    3772:	2d 37       	cpi	r18, 0x7D	; 125
    3774:	31 05       	cpc	r19, r1
    3776:	21 f1       	breq	.+72     	; 0x37c0 <HSSD_voidDisplay+0xe6>
    3778:	8b 81       	ldd	r24, Y+3	; 0x03
    377a:	9c 81       	ldd	r25, Y+4	; 0x04
    377c:	8f 37       	cpi	r24, 0x7F	; 127
    377e:	91 05       	cpc	r25, r1
    3780:	49 f1       	breq	.+82     	; 0x37d4 <HSSD_voidDisplay+0xfa>
    3782:	31 c0       	rjmp	.+98     	; 0x37e6 <HSSD_voidDisplay+0x10c>
	{
	case ZERO:
		MDIO_voidSetPortValue(A_u8PortId,ZERO);
    3784:	8a 81       	ldd	r24, Y+2	; 0x02
    3786:	6f e3       	ldi	r22, 0x3F	; 63
    3788:	0e 94 5d 0a 	call	0x14ba	; 0x14ba <MDIO_voidSetPortValue>
    378c:	2c c0       	rjmp	.+88     	; 0x37e6 <HSSD_voidDisplay+0x10c>
		break;
	case ONE:
		MDIO_voidSetPortValue(A_u8PortId,ONE);
    378e:	8a 81       	ldd	r24, Y+2	; 0x02
    3790:	66 e0       	ldi	r22, 0x06	; 6
    3792:	0e 94 5d 0a 	call	0x14ba	; 0x14ba <MDIO_voidSetPortValue>
    3796:	27 c0       	rjmp	.+78     	; 0x37e6 <HSSD_voidDisplay+0x10c>
		break;
	case TWO:
		MDIO_voidSetPortValue(A_u8PortId,TWO);
    3798:	8a 81       	ldd	r24, Y+2	; 0x02
    379a:	6b e5       	ldi	r22, 0x5B	; 91
    379c:	0e 94 5d 0a 	call	0x14ba	; 0x14ba <MDIO_voidSetPortValue>
    37a0:	22 c0       	rjmp	.+68     	; 0x37e6 <HSSD_voidDisplay+0x10c>
		break;
	case THREE:
		MDIO_voidSetPortValue(A_u8PortId,THREE);
    37a2:	8a 81       	ldd	r24, Y+2	; 0x02
    37a4:	6f e4       	ldi	r22, 0x4F	; 79
    37a6:	0e 94 5d 0a 	call	0x14ba	; 0x14ba <MDIO_voidSetPortValue>
    37aa:	1d c0       	rjmp	.+58     	; 0x37e6 <HSSD_voidDisplay+0x10c>
		break;
	case FOUR:
		MDIO_voidSetPortValue(A_u8PortId,FOUR);
    37ac:	8a 81       	ldd	r24, Y+2	; 0x02
    37ae:	66 e6       	ldi	r22, 0x66	; 102
    37b0:	0e 94 5d 0a 	call	0x14ba	; 0x14ba <MDIO_voidSetPortValue>
    37b4:	18 c0       	rjmp	.+48     	; 0x37e6 <HSSD_voidDisplay+0x10c>
		break;
	case FIVE:
		MDIO_voidSetPortValue(A_u8PortId,FIVE);
    37b6:	8a 81       	ldd	r24, Y+2	; 0x02
    37b8:	6d e6       	ldi	r22, 0x6D	; 109
    37ba:	0e 94 5d 0a 	call	0x14ba	; 0x14ba <MDIO_voidSetPortValue>
    37be:	13 c0       	rjmp	.+38     	; 0x37e6 <HSSD_voidDisplay+0x10c>
		break;
	case SIX:
		MDIO_voidSetPortValue(A_u8PortId,SIX);
    37c0:	8a 81       	ldd	r24, Y+2	; 0x02
    37c2:	6d e7       	ldi	r22, 0x7D	; 125
    37c4:	0e 94 5d 0a 	call	0x14ba	; 0x14ba <MDIO_voidSetPortValue>
    37c8:	0e c0       	rjmp	.+28     	; 0x37e6 <HSSD_voidDisplay+0x10c>
		break;
	case SEVEN:
		MDIO_voidSetPortValue(A_u8PortId,SEVEN);
    37ca:	8a 81       	ldd	r24, Y+2	; 0x02
    37cc:	67 e0       	ldi	r22, 0x07	; 7
    37ce:	0e 94 5d 0a 	call	0x14ba	; 0x14ba <MDIO_voidSetPortValue>
    37d2:	09 c0       	rjmp	.+18     	; 0x37e6 <HSSD_voidDisplay+0x10c>
		break;
	case EIGHT:
		MDIO_voidSetPortValue(A_u8PortId,EIGHT);
    37d4:	8a 81       	ldd	r24, Y+2	; 0x02
    37d6:	6f e7       	ldi	r22, 0x7F	; 127
    37d8:	0e 94 5d 0a 	call	0x14ba	; 0x14ba <MDIO_voidSetPortValue>
    37dc:	04 c0       	rjmp	.+8      	; 0x37e6 <HSSD_voidDisplay+0x10c>
		break;
	case NINE:
		MDIO_voidSetPortValue(A_u8PortId,NINE);
    37de:	8a 81       	ldd	r24, Y+2	; 0x02
    37e0:	6f e6       	ldi	r22, 0x6F	; 111
    37e2:	0e 94 5d 0a 	call	0x14ba	; 0x14ba <MDIO_voidSetPortValue>
		break;
	}
}
    37e6:	0f 90       	pop	r0
    37e8:	0f 90       	pop	r0
    37ea:	0f 90       	pop	r0
    37ec:	0f 90       	pop	r0
    37ee:	cf 91       	pop	r28
    37f0:	df 91       	pop	r29
    37f2:	08 95       	ret

000037f4 <HSSD_voidDisplayAscending>:

void HSSD_voidDisplayAscending(u8 A_u8PortId)
{
    37f4:	df 93       	push	r29
    37f6:	cf 93       	push	r28
    37f8:	cd b7       	in	r28, 0x3d	; 61
    37fa:	de b7       	in	r29, 0x3e	; 62
    37fc:	6f 97       	sbiw	r28, 0x1f	; 31
    37fe:	0f b6       	in	r0, 0x3f	; 63
    3800:	f8 94       	cli
    3802:	de bf       	out	0x3e, r29	; 62
    3804:	0f be       	out	0x3f, r0	; 63
    3806:	cd bf       	out	0x3d, r28	; 61
    3808:	8a 8f       	std	Y+26, r24	; 0x1a
u8 arr[]={ZERO,ONE,TWO,THREE,FOUR,FIVE,SIX,SEVEN,EIGHT,NINE};
    380a:	ce 01       	movw	r24, r28
    380c:	40 96       	adiw	r24, 0x10	; 16
    380e:	9c 8f       	std	Y+28, r25	; 0x1c
    3810:	8b 8f       	std	Y+27, r24	; 0x1b
    3812:	e0 e8       	ldi	r30, 0x80	; 128
    3814:	f0 e0       	ldi	r31, 0x00	; 0
    3816:	fe 8f       	std	Y+30, r31	; 0x1e
    3818:	ed 8f       	std	Y+29, r30	; 0x1d
    381a:	fa e0       	ldi	r31, 0x0A	; 10
    381c:	ff 8f       	std	Y+31, r31	; 0x1f
    381e:	ed 8d       	ldd	r30, Y+29	; 0x1d
    3820:	fe 8d       	ldd	r31, Y+30	; 0x1e
    3822:	00 80       	ld	r0, Z
    3824:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3826:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3828:	01 96       	adiw	r24, 0x01	; 1
    382a:	9e 8f       	std	Y+30, r25	; 0x1e
    382c:	8d 8f       	std	Y+29, r24	; 0x1d
    382e:	eb 8d       	ldd	r30, Y+27	; 0x1b
    3830:	fc 8d       	ldd	r31, Y+28	; 0x1c
    3832:	00 82       	st	Z, r0
    3834:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3836:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3838:	01 96       	adiw	r24, 0x01	; 1
    383a:	9c 8f       	std	Y+28, r25	; 0x1c
    383c:	8b 8f       	std	Y+27, r24	; 0x1b
    383e:	9f 8d       	ldd	r25, Y+31	; 0x1f
    3840:	91 50       	subi	r25, 0x01	; 1
    3842:	9f 8f       	std	Y+31, r25	; 0x1f
    3844:	ef 8d       	ldd	r30, Y+31	; 0x1f
    3846:	ee 23       	and	r30, r30
    3848:	51 f7       	brne	.-44     	; 0x381e <HSSD_voidDisplayAscending+0x2a>
	for(u8 i=0;i<10;i++)
    384a:	1f 86       	std	Y+15, r1	; 0x0f
    384c:	81 c0       	rjmp	.+258    	; 0x3950 <HSSD_voidDisplayAscending+0x15c>
	{
		HSSD_voidDisplay(arr[i],A_u8PortId);
    384e:	8f 85       	ldd	r24, Y+15	; 0x0f
    3850:	28 2f       	mov	r18, r24
    3852:	30 e0       	ldi	r19, 0x00	; 0
    3854:	ce 01       	movw	r24, r28
    3856:	40 96       	adiw	r24, 0x10	; 16
    3858:	fc 01       	movw	r30, r24
    385a:	e2 0f       	add	r30, r18
    385c:	f3 1f       	adc	r31, r19
    385e:	80 81       	ld	r24, Z
    3860:	6a 8d       	ldd	r22, Y+26	; 0x1a
    3862:	0e 94 6d 1b 	call	0x36da	; 0x36da <HSSD_voidDisplay>
    3866:	80 e0       	ldi	r24, 0x00	; 0
    3868:	90 e0       	ldi	r25, 0x00	; 0
    386a:	aa e7       	ldi	r26, 0x7A	; 122
    386c:	b4 e4       	ldi	r27, 0x44	; 68
    386e:	8b 87       	std	Y+11, r24	; 0x0b
    3870:	9c 87       	std	Y+12, r25	; 0x0c
    3872:	ad 87       	std	Y+13, r26	; 0x0d
    3874:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3876:	6b 85       	ldd	r22, Y+11	; 0x0b
    3878:	7c 85       	ldd	r23, Y+12	; 0x0c
    387a:	8d 85       	ldd	r24, Y+13	; 0x0d
    387c:	9e 85       	ldd	r25, Y+14	; 0x0e
    387e:	20 e0       	ldi	r18, 0x00	; 0
    3880:	30 e0       	ldi	r19, 0x00	; 0
    3882:	4a ef       	ldi	r20, 0xFA	; 250
    3884:	54 e4       	ldi	r21, 0x44	; 68
    3886:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    388a:	dc 01       	movw	r26, r24
    388c:	cb 01       	movw	r24, r22
    388e:	8f 83       	std	Y+7, r24	; 0x07
    3890:	98 87       	std	Y+8, r25	; 0x08
    3892:	a9 87       	std	Y+9, r26	; 0x09
    3894:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3896:	6f 81       	ldd	r22, Y+7	; 0x07
    3898:	78 85       	ldd	r23, Y+8	; 0x08
    389a:	89 85       	ldd	r24, Y+9	; 0x09
    389c:	9a 85       	ldd	r25, Y+10	; 0x0a
    389e:	20 e0       	ldi	r18, 0x00	; 0
    38a0:	30 e0       	ldi	r19, 0x00	; 0
    38a2:	40 e8       	ldi	r20, 0x80	; 128
    38a4:	5f e3       	ldi	r21, 0x3F	; 63
    38a6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    38aa:	88 23       	and	r24, r24
    38ac:	2c f4       	brge	.+10     	; 0x38b8 <HSSD_voidDisplayAscending+0xc4>
		__ticks = 1;
    38ae:	81 e0       	ldi	r24, 0x01	; 1
    38b0:	90 e0       	ldi	r25, 0x00	; 0
    38b2:	9e 83       	std	Y+6, r25	; 0x06
    38b4:	8d 83       	std	Y+5, r24	; 0x05
    38b6:	3f c0       	rjmp	.+126    	; 0x3936 <HSSD_voidDisplayAscending+0x142>
	else if (__tmp > 65535)
    38b8:	6f 81       	ldd	r22, Y+7	; 0x07
    38ba:	78 85       	ldd	r23, Y+8	; 0x08
    38bc:	89 85       	ldd	r24, Y+9	; 0x09
    38be:	9a 85       	ldd	r25, Y+10	; 0x0a
    38c0:	20 e0       	ldi	r18, 0x00	; 0
    38c2:	3f ef       	ldi	r19, 0xFF	; 255
    38c4:	4f e7       	ldi	r20, 0x7F	; 127
    38c6:	57 e4       	ldi	r21, 0x47	; 71
    38c8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    38cc:	18 16       	cp	r1, r24
    38ce:	4c f5       	brge	.+82     	; 0x3922 <HSSD_voidDisplayAscending+0x12e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    38d0:	6b 85       	ldd	r22, Y+11	; 0x0b
    38d2:	7c 85       	ldd	r23, Y+12	; 0x0c
    38d4:	8d 85       	ldd	r24, Y+13	; 0x0d
    38d6:	9e 85       	ldd	r25, Y+14	; 0x0e
    38d8:	20 e0       	ldi	r18, 0x00	; 0
    38da:	30 e0       	ldi	r19, 0x00	; 0
    38dc:	40 e2       	ldi	r20, 0x20	; 32
    38de:	51 e4       	ldi	r21, 0x41	; 65
    38e0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    38e4:	dc 01       	movw	r26, r24
    38e6:	cb 01       	movw	r24, r22
    38e8:	bc 01       	movw	r22, r24
    38ea:	cd 01       	movw	r24, r26
    38ec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    38f0:	dc 01       	movw	r26, r24
    38f2:	cb 01       	movw	r24, r22
    38f4:	9e 83       	std	Y+6, r25	; 0x06
    38f6:	8d 83       	std	Y+5, r24	; 0x05
    38f8:	0f c0       	rjmp	.+30     	; 0x3918 <HSSD_voidDisplayAscending+0x124>
    38fa:	88 ec       	ldi	r24, 0xC8	; 200
    38fc:	90 e0       	ldi	r25, 0x00	; 0
    38fe:	9c 83       	std	Y+4, r25	; 0x04
    3900:	8b 83       	std	Y+3, r24	; 0x03
    3902:	8b 81       	ldd	r24, Y+3	; 0x03
    3904:	9c 81       	ldd	r25, Y+4	; 0x04
    3906:	01 97       	sbiw	r24, 0x01	; 1
    3908:	f1 f7       	brne	.-4      	; 0x3906 <HSSD_voidDisplayAscending+0x112>
    390a:	9c 83       	std	Y+4, r25	; 0x04
    390c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    390e:	8d 81       	ldd	r24, Y+5	; 0x05
    3910:	9e 81       	ldd	r25, Y+6	; 0x06
    3912:	01 97       	sbiw	r24, 0x01	; 1
    3914:	9e 83       	std	Y+6, r25	; 0x06
    3916:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3918:	8d 81       	ldd	r24, Y+5	; 0x05
    391a:	9e 81       	ldd	r25, Y+6	; 0x06
    391c:	00 97       	sbiw	r24, 0x00	; 0
    391e:	69 f7       	brne	.-38     	; 0x38fa <HSSD_voidDisplayAscending+0x106>
    3920:	14 c0       	rjmp	.+40     	; 0x394a <HSSD_voidDisplayAscending+0x156>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3922:	6f 81       	ldd	r22, Y+7	; 0x07
    3924:	78 85       	ldd	r23, Y+8	; 0x08
    3926:	89 85       	ldd	r24, Y+9	; 0x09
    3928:	9a 85       	ldd	r25, Y+10	; 0x0a
    392a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    392e:	dc 01       	movw	r26, r24
    3930:	cb 01       	movw	r24, r22
    3932:	9e 83       	std	Y+6, r25	; 0x06
    3934:	8d 83       	std	Y+5, r24	; 0x05
    3936:	8d 81       	ldd	r24, Y+5	; 0x05
    3938:	9e 81       	ldd	r25, Y+6	; 0x06
    393a:	9a 83       	std	Y+2, r25	; 0x02
    393c:	89 83       	std	Y+1, r24	; 0x01
    393e:	89 81       	ldd	r24, Y+1	; 0x01
    3940:	9a 81       	ldd	r25, Y+2	; 0x02
    3942:	01 97       	sbiw	r24, 0x01	; 1
    3944:	f1 f7       	brne	.-4      	; 0x3942 <HSSD_voidDisplayAscending+0x14e>
    3946:	9a 83       	std	Y+2, r25	; 0x02
    3948:	89 83       	std	Y+1, r24	; 0x01
}

void HSSD_voidDisplayAscending(u8 A_u8PortId)
{
u8 arr[]={ZERO,ONE,TWO,THREE,FOUR,FIVE,SIX,SEVEN,EIGHT,NINE};
	for(u8 i=0;i<10;i++)
    394a:	8f 85       	ldd	r24, Y+15	; 0x0f
    394c:	8f 5f       	subi	r24, 0xFF	; 255
    394e:	8f 87       	std	Y+15, r24	; 0x0f
    3950:	8f 85       	ldd	r24, Y+15	; 0x0f
    3952:	8a 30       	cpi	r24, 0x0A	; 10
    3954:	08 f4       	brcc	.+2      	; 0x3958 <HSSD_voidDisplayAscending+0x164>
    3956:	7b cf       	rjmp	.-266    	; 0x384e <HSSD_voidDisplayAscending+0x5a>
	{
		HSSD_voidDisplay(arr[i],A_u8PortId);
		_delay_ms(SSD_DELAY);
	}
}
    3958:	6f 96       	adiw	r28, 0x1f	; 31
    395a:	0f b6       	in	r0, 0x3f	; 63
    395c:	f8 94       	cli
    395e:	de bf       	out	0x3e, r29	; 62
    3960:	0f be       	out	0x3f, r0	; 63
    3962:	cd bf       	out	0x3d, r28	; 61
    3964:	cf 91       	pop	r28
    3966:	df 91       	pop	r29
    3968:	08 95       	ret

0000396a <HSSD_voidDisplayDescending>:

void HSSD_voidDisplayDescending(u8 A_u8PortId)
{
    396a:	df 93       	push	r29
    396c:	cf 93       	push	r28
    396e:	cd b7       	in	r28, 0x3d	; 61
    3970:	de b7       	in	r29, 0x3e	; 62
    3972:	6f 97       	sbiw	r28, 0x1f	; 31
    3974:	0f b6       	in	r0, 0x3f	; 63
    3976:	f8 94       	cli
    3978:	de bf       	out	0x3e, r29	; 62
    397a:	0f be       	out	0x3f, r0	; 63
    397c:	cd bf       	out	0x3d, r28	; 61
    397e:	8a 8f       	std	Y+26, r24	; 0x1a
u8 arr[]={ZERO,ONE,TWO,THREE,FOUR,FIVE,SIX,SEVEN,EIGHT,NINE};
    3980:	ce 01       	movw	r24, r28
    3982:	40 96       	adiw	r24, 0x10	; 16
    3984:	9c 8f       	std	Y+28, r25	; 0x1c
    3986:	8b 8f       	std	Y+27, r24	; 0x1b
    3988:	ea e8       	ldi	r30, 0x8A	; 138
    398a:	f0 e0       	ldi	r31, 0x00	; 0
    398c:	fe 8f       	std	Y+30, r31	; 0x1e
    398e:	ed 8f       	std	Y+29, r30	; 0x1d
    3990:	fa e0       	ldi	r31, 0x0A	; 10
    3992:	ff 8f       	std	Y+31, r31	; 0x1f
    3994:	ed 8d       	ldd	r30, Y+29	; 0x1d
    3996:	fe 8d       	ldd	r31, Y+30	; 0x1e
    3998:	00 80       	ld	r0, Z
    399a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    399c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    399e:	01 96       	adiw	r24, 0x01	; 1
    39a0:	9e 8f       	std	Y+30, r25	; 0x1e
    39a2:	8d 8f       	std	Y+29, r24	; 0x1d
    39a4:	eb 8d       	ldd	r30, Y+27	; 0x1b
    39a6:	fc 8d       	ldd	r31, Y+28	; 0x1c
    39a8:	00 82       	st	Z, r0
    39aa:	8b 8d       	ldd	r24, Y+27	; 0x1b
    39ac:	9c 8d       	ldd	r25, Y+28	; 0x1c
    39ae:	01 96       	adiw	r24, 0x01	; 1
    39b0:	9c 8f       	std	Y+28, r25	; 0x1c
    39b2:	8b 8f       	std	Y+27, r24	; 0x1b
    39b4:	9f 8d       	ldd	r25, Y+31	; 0x1f
    39b6:	91 50       	subi	r25, 0x01	; 1
    39b8:	9f 8f       	std	Y+31, r25	; 0x1f
    39ba:	ef 8d       	ldd	r30, Y+31	; 0x1f
    39bc:	ee 23       	and	r30, r30
    39be:	51 f7       	brne	.-44     	; 0x3994 <HSSD_voidDisplayDescending+0x2a>
	for(u8 j=9;j>=0;j--)
    39c0:	89 e0       	ldi	r24, 0x09	; 9
    39c2:	8f 87       	std	Y+15, r24	; 0x0f
	{
		HSSD_voidDisplay(arr[j],A_u8PortId);
    39c4:	8f 85       	ldd	r24, Y+15	; 0x0f
    39c6:	28 2f       	mov	r18, r24
    39c8:	30 e0       	ldi	r19, 0x00	; 0
    39ca:	ce 01       	movw	r24, r28
    39cc:	40 96       	adiw	r24, 0x10	; 16
    39ce:	fc 01       	movw	r30, r24
    39d0:	e2 0f       	add	r30, r18
    39d2:	f3 1f       	adc	r31, r19
    39d4:	80 81       	ld	r24, Z
    39d6:	6a 8d       	ldd	r22, Y+26	; 0x1a
    39d8:	0e 94 6d 1b 	call	0x36da	; 0x36da <HSSD_voidDisplay>
    39dc:	80 e0       	ldi	r24, 0x00	; 0
    39de:	90 e0       	ldi	r25, 0x00	; 0
    39e0:	aa e7       	ldi	r26, 0x7A	; 122
    39e2:	b4 e4       	ldi	r27, 0x44	; 68
    39e4:	8b 87       	std	Y+11, r24	; 0x0b
    39e6:	9c 87       	std	Y+12, r25	; 0x0c
    39e8:	ad 87       	std	Y+13, r26	; 0x0d
    39ea:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    39ec:	6b 85       	ldd	r22, Y+11	; 0x0b
    39ee:	7c 85       	ldd	r23, Y+12	; 0x0c
    39f0:	8d 85       	ldd	r24, Y+13	; 0x0d
    39f2:	9e 85       	ldd	r25, Y+14	; 0x0e
    39f4:	20 e0       	ldi	r18, 0x00	; 0
    39f6:	30 e0       	ldi	r19, 0x00	; 0
    39f8:	4a ef       	ldi	r20, 0xFA	; 250
    39fa:	54 e4       	ldi	r21, 0x44	; 68
    39fc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a00:	dc 01       	movw	r26, r24
    3a02:	cb 01       	movw	r24, r22
    3a04:	8f 83       	std	Y+7, r24	; 0x07
    3a06:	98 87       	std	Y+8, r25	; 0x08
    3a08:	a9 87       	std	Y+9, r26	; 0x09
    3a0a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3a0c:	6f 81       	ldd	r22, Y+7	; 0x07
    3a0e:	78 85       	ldd	r23, Y+8	; 0x08
    3a10:	89 85       	ldd	r24, Y+9	; 0x09
    3a12:	9a 85       	ldd	r25, Y+10	; 0x0a
    3a14:	20 e0       	ldi	r18, 0x00	; 0
    3a16:	30 e0       	ldi	r19, 0x00	; 0
    3a18:	40 e8       	ldi	r20, 0x80	; 128
    3a1a:	5f e3       	ldi	r21, 0x3F	; 63
    3a1c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3a20:	88 23       	and	r24, r24
    3a22:	2c f4       	brge	.+10     	; 0x3a2e <HSSD_voidDisplayDescending+0xc4>
		__ticks = 1;
    3a24:	81 e0       	ldi	r24, 0x01	; 1
    3a26:	90 e0       	ldi	r25, 0x00	; 0
    3a28:	9e 83       	std	Y+6, r25	; 0x06
    3a2a:	8d 83       	std	Y+5, r24	; 0x05
    3a2c:	3f c0       	rjmp	.+126    	; 0x3aac <HSSD_voidDisplayDescending+0x142>
	else if (__tmp > 65535)
    3a2e:	6f 81       	ldd	r22, Y+7	; 0x07
    3a30:	78 85       	ldd	r23, Y+8	; 0x08
    3a32:	89 85       	ldd	r24, Y+9	; 0x09
    3a34:	9a 85       	ldd	r25, Y+10	; 0x0a
    3a36:	20 e0       	ldi	r18, 0x00	; 0
    3a38:	3f ef       	ldi	r19, 0xFF	; 255
    3a3a:	4f e7       	ldi	r20, 0x7F	; 127
    3a3c:	57 e4       	ldi	r21, 0x47	; 71
    3a3e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3a42:	18 16       	cp	r1, r24
    3a44:	4c f5       	brge	.+82     	; 0x3a98 <HSSD_voidDisplayDescending+0x12e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3a46:	6b 85       	ldd	r22, Y+11	; 0x0b
    3a48:	7c 85       	ldd	r23, Y+12	; 0x0c
    3a4a:	8d 85       	ldd	r24, Y+13	; 0x0d
    3a4c:	9e 85       	ldd	r25, Y+14	; 0x0e
    3a4e:	20 e0       	ldi	r18, 0x00	; 0
    3a50:	30 e0       	ldi	r19, 0x00	; 0
    3a52:	40 e2       	ldi	r20, 0x20	; 32
    3a54:	51 e4       	ldi	r21, 0x41	; 65
    3a56:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a5a:	dc 01       	movw	r26, r24
    3a5c:	cb 01       	movw	r24, r22
    3a5e:	bc 01       	movw	r22, r24
    3a60:	cd 01       	movw	r24, r26
    3a62:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3a66:	dc 01       	movw	r26, r24
    3a68:	cb 01       	movw	r24, r22
    3a6a:	9e 83       	std	Y+6, r25	; 0x06
    3a6c:	8d 83       	std	Y+5, r24	; 0x05
    3a6e:	0f c0       	rjmp	.+30     	; 0x3a8e <HSSD_voidDisplayDescending+0x124>
    3a70:	88 ec       	ldi	r24, 0xC8	; 200
    3a72:	90 e0       	ldi	r25, 0x00	; 0
    3a74:	9c 83       	std	Y+4, r25	; 0x04
    3a76:	8b 83       	std	Y+3, r24	; 0x03
    3a78:	8b 81       	ldd	r24, Y+3	; 0x03
    3a7a:	9c 81       	ldd	r25, Y+4	; 0x04
    3a7c:	01 97       	sbiw	r24, 0x01	; 1
    3a7e:	f1 f7       	brne	.-4      	; 0x3a7c <HSSD_voidDisplayDescending+0x112>
    3a80:	9c 83       	std	Y+4, r25	; 0x04
    3a82:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3a84:	8d 81       	ldd	r24, Y+5	; 0x05
    3a86:	9e 81       	ldd	r25, Y+6	; 0x06
    3a88:	01 97       	sbiw	r24, 0x01	; 1
    3a8a:	9e 83       	std	Y+6, r25	; 0x06
    3a8c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3a8e:	8d 81       	ldd	r24, Y+5	; 0x05
    3a90:	9e 81       	ldd	r25, Y+6	; 0x06
    3a92:	00 97       	sbiw	r24, 0x00	; 0
    3a94:	69 f7       	brne	.-38     	; 0x3a70 <HSSD_voidDisplayDescending+0x106>
    3a96:	14 c0       	rjmp	.+40     	; 0x3ac0 <HSSD_voidDisplayDescending+0x156>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3a98:	6f 81       	ldd	r22, Y+7	; 0x07
    3a9a:	78 85       	ldd	r23, Y+8	; 0x08
    3a9c:	89 85       	ldd	r24, Y+9	; 0x09
    3a9e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3aa0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3aa4:	dc 01       	movw	r26, r24
    3aa6:	cb 01       	movw	r24, r22
    3aa8:	9e 83       	std	Y+6, r25	; 0x06
    3aaa:	8d 83       	std	Y+5, r24	; 0x05
    3aac:	8d 81       	ldd	r24, Y+5	; 0x05
    3aae:	9e 81       	ldd	r25, Y+6	; 0x06
    3ab0:	9a 83       	std	Y+2, r25	; 0x02
    3ab2:	89 83       	std	Y+1, r24	; 0x01
    3ab4:	89 81       	ldd	r24, Y+1	; 0x01
    3ab6:	9a 81       	ldd	r25, Y+2	; 0x02
    3ab8:	01 97       	sbiw	r24, 0x01	; 1
    3aba:	f1 f7       	brne	.-4      	; 0x3ab8 <HSSD_voidDisplayDescending+0x14e>
    3abc:	9a 83       	std	Y+2, r25	; 0x02
    3abe:	89 83       	std	Y+1, r24	; 0x01
}

void HSSD_voidDisplayDescending(u8 A_u8PortId)
{
u8 arr[]={ZERO,ONE,TWO,THREE,FOUR,FIVE,SIX,SEVEN,EIGHT,NINE};
	for(u8 j=9;j>=0;j--)
    3ac0:	8f 85       	ldd	r24, Y+15	; 0x0f
    3ac2:	81 50       	subi	r24, 0x01	; 1
    3ac4:	8f 87       	std	Y+15, r24	; 0x0f
    3ac6:	7e cf       	rjmp	.-260    	; 0x39c4 <HSSD_voidDisplayDescending+0x5a>

00003ac8 <HSTEP_voidFullStep>:
#include "../Include/HAL/STEPPER/STEPPER_Private.h"

#include <util/delay.h>

void HSTEP_voidFullStep()
{
    3ac8:	df 93       	push	r29
    3aca:	cf 93       	push	r28
    3acc:	cd b7       	in	r28, 0x3d	; 61
    3ace:	de b7       	in	r29, 0x3e	; 62
    3ad0:	e8 97       	sbiw	r28, 0x38	; 56
    3ad2:	0f b6       	in	r0, 0x3f	; 63
    3ad4:	f8 94       	cli
    3ad6:	de bf       	out	0x3e, r29	; 62
    3ad8:	0f be       	out	0x3f, r0	; 63
    3ada:	cd bf       	out	0x3d, r28	; 61
    MDIO_voidSetPinValue(STEPPER_PORT,BLUE_COIL_PIN,PIN_HIGH);
    3adc:	80 e0       	ldi	r24, 0x00	; 0
    3ade:	60 e0       	ldi	r22, 0x00	; 0
    3ae0:	41 e0       	ldi	r20, 0x01	; 1
    3ae2:	0e 94 31 08 	call	0x1062	; 0x1062 <MDIO_voidSetPinValue>
    MDIO_voidSetPinValue(STEPPER_PORT,PINK_COIL_PIN,PIN_LOW);
    3ae6:	80 e0       	ldi	r24, 0x00	; 0
    3ae8:	61 e0       	ldi	r22, 0x01	; 1
    3aea:	40 e0       	ldi	r20, 0x00	; 0
    3aec:	0e 94 31 08 	call	0x1062	; 0x1062 <MDIO_voidSetPinValue>
    MDIO_voidSetPinValue(STEPPER_PORT,YELLOW_COIL_PIN,PIN_HIGH);
    3af0:	80 e0       	ldi	r24, 0x00	; 0
    3af2:	62 e0       	ldi	r22, 0x02	; 2
    3af4:	41 e0       	ldi	r20, 0x01	; 1
    3af6:	0e 94 31 08 	call	0x1062	; 0x1062 <MDIO_voidSetPinValue>
    MDIO_voidSetPinValue(STEPPER_PORT,ORANGE_COIL_PIN,PIN_HIGH);
    3afa:	80 e0       	ldi	r24, 0x00	; 0
    3afc:	63 e0       	ldi	r22, 0x03	; 3
    3afe:	41 e0       	ldi	r20, 0x01	; 1
    3b00:	0e 94 31 08 	call	0x1062	; 0x1062 <MDIO_voidSetPinValue>
    3b04:	80 e0       	ldi	r24, 0x00	; 0
    3b06:	90 e0       	ldi	r25, 0x00	; 0
    3b08:	a0 e2       	ldi	r26, 0x20	; 32
    3b0a:	b1 e4       	ldi	r27, 0x41	; 65
    3b0c:	8d ab       	std	Y+53, r24	; 0x35
    3b0e:	9e ab       	std	Y+54, r25	; 0x36
    3b10:	af ab       	std	Y+55, r26	; 0x37
    3b12:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3b14:	6d a9       	ldd	r22, Y+53	; 0x35
    3b16:	7e a9       	ldd	r23, Y+54	; 0x36
    3b18:	8f a9       	ldd	r24, Y+55	; 0x37
    3b1a:	98 ad       	ldd	r25, Y+56	; 0x38
    3b1c:	20 e0       	ldi	r18, 0x00	; 0
    3b1e:	30 e0       	ldi	r19, 0x00	; 0
    3b20:	4a ef       	ldi	r20, 0xFA	; 250
    3b22:	54 e4       	ldi	r21, 0x44	; 68
    3b24:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3b28:	dc 01       	movw	r26, r24
    3b2a:	cb 01       	movw	r24, r22
    3b2c:	89 ab       	std	Y+49, r24	; 0x31
    3b2e:	9a ab       	std	Y+50, r25	; 0x32
    3b30:	ab ab       	std	Y+51, r26	; 0x33
    3b32:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    3b34:	69 a9       	ldd	r22, Y+49	; 0x31
    3b36:	7a a9       	ldd	r23, Y+50	; 0x32
    3b38:	8b a9       	ldd	r24, Y+51	; 0x33
    3b3a:	9c a9       	ldd	r25, Y+52	; 0x34
    3b3c:	20 e0       	ldi	r18, 0x00	; 0
    3b3e:	30 e0       	ldi	r19, 0x00	; 0
    3b40:	40 e8       	ldi	r20, 0x80	; 128
    3b42:	5f e3       	ldi	r21, 0x3F	; 63
    3b44:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3b48:	88 23       	and	r24, r24
    3b4a:	2c f4       	brge	.+10     	; 0x3b56 <HSTEP_voidFullStep+0x8e>
		__ticks = 1;
    3b4c:	81 e0       	ldi	r24, 0x01	; 1
    3b4e:	90 e0       	ldi	r25, 0x00	; 0
    3b50:	98 ab       	std	Y+48, r25	; 0x30
    3b52:	8f a7       	std	Y+47, r24	; 0x2f
    3b54:	3f c0       	rjmp	.+126    	; 0x3bd4 <HSTEP_voidFullStep+0x10c>
	else if (__tmp > 65535)
    3b56:	69 a9       	ldd	r22, Y+49	; 0x31
    3b58:	7a a9       	ldd	r23, Y+50	; 0x32
    3b5a:	8b a9       	ldd	r24, Y+51	; 0x33
    3b5c:	9c a9       	ldd	r25, Y+52	; 0x34
    3b5e:	20 e0       	ldi	r18, 0x00	; 0
    3b60:	3f ef       	ldi	r19, 0xFF	; 255
    3b62:	4f e7       	ldi	r20, 0x7F	; 127
    3b64:	57 e4       	ldi	r21, 0x47	; 71
    3b66:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3b6a:	18 16       	cp	r1, r24
    3b6c:	4c f5       	brge	.+82     	; 0x3bc0 <HSTEP_voidFullStep+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3b6e:	6d a9       	ldd	r22, Y+53	; 0x35
    3b70:	7e a9       	ldd	r23, Y+54	; 0x36
    3b72:	8f a9       	ldd	r24, Y+55	; 0x37
    3b74:	98 ad       	ldd	r25, Y+56	; 0x38
    3b76:	20 e0       	ldi	r18, 0x00	; 0
    3b78:	30 e0       	ldi	r19, 0x00	; 0
    3b7a:	40 e2       	ldi	r20, 0x20	; 32
    3b7c:	51 e4       	ldi	r21, 0x41	; 65
    3b7e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3b82:	dc 01       	movw	r26, r24
    3b84:	cb 01       	movw	r24, r22
    3b86:	bc 01       	movw	r22, r24
    3b88:	cd 01       	movw	r24, r26
    3b8a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3b8e:	dc 01       	movw	r26, r24
    3b90:	cb 01       	movw	r24, r22
    3b92:	98 ab       	std	Y+48, r25	; 0x30
    3b94:	8f a7       	std	Y+47, r24	; 0x2f
    3b96:	0f c0       	rjmp	.+30     	; 0x3bb6 <HSTEP_voidFullStep+0xee>
    3b98:	88 ec       	ldi	r24, 0xC8	; 200
    3b9a:	90 e0       	ldi	r25, 0x00	; 0
    3b9c:	9e a7       	std	Y+46, r25	; 0x2e
    3b9e:	8d a7       	std	Y+45, r24	; 0x2d
    3ba0:	8d a5       	ldd	r24, Y+45	; 0x2d
    3ba2:	9e a5       	ldd	r25, Y+46	; 0x2e
    3ba4:	01 97       	sbiw	r24, 0x01	; 1
    3ba6:	f1 f7       	brne	.-4      	; 0x3ba4 <HSTEP_voidFullStep+0xdc>
    3ba8:	9e a7       	std	Y+46, r25	; 0x2e
    3baa:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3bac:	8f a5       	ldd	r24, Y+47	; 0x2f
    3bae:	98 a9       	ldd	r25, Y+48	; 0x30
    3bb0:	01 97       	sbiw	r24, 0x01	; 1
    3bb2:	98 ab       	std	Y+48, r25	; 0x30
    3bb4:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3bb6:	8f a5       	ldd	r24, Y+47	; 0x2f
    3bb8:	98 a9       	ldd	r25, Y+48	; 0x30
    3bba:	00 97       	sbiw	r24, 0x00	; 0
    3bbc:	69 f7       	brne	.-38     	; 0x3b98 <HSTEP_voidFullStep+0xd0>
    3bbe:	14 c0       	rjmp	.+40     	; 0x3be8 <HSTEP_voidFullStep+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3bc0:	69 a9       	ldd	r22, Y+49	; 0x31
    3bc2:	7a a9       	ldd	r23, Y+50	; 0x32
    3bc4:	8b a9       	ldd	r24, Y+51	; 0x33
    3bc6:	9c a9       	ldd	r25, Y+52	; 0x34
    3bc8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3bcc:	dc 01       	movw	r26, r24
    3bce:	cb 01       	movw	r24, r22
    3bd0:	98 ab       	std	Y+48, r25	; 0x30
    3bd2:	8f a7       	std	Y+47, r24	; 0x2f
    3bd4:	8f a5       	ldd	r24, Y+47	; 0x2f
    3bd6:	98 a9       	ldd	r25, Y+48	; 0x30
    3bd8:	9c a7       	std	Y+44, r25	; 0x2c
    3bda:	8b a7       	std	Y+43, r24	; 0x2b
    3bdc:	8b a5       	ldd	r24, Y+43	; 0x2b
    3bde:	9c a5       	ldd	r25, Y+44	; 0x2c
    3be0:	01 97       	sbiw	r24, 0x01	; 1
    3be2:	f1 f7       	brne	.-4      	; 0x3be0 <HSTEP_voidFullStep+0x118>
    3be4:	9c a7       	std	Y+44, r25	; 0x2c
    3be6:	8b a7       	std	Y+43, r24	; 0x2b
    _delay_ms(10);
    MDIO_voidSetPinValue(STEPPER_PORT,BLUE_COIL_PIN,PIN_HIGH);
    3be8:	80 e0       	ldi	r24, 0x00	; 0
    3bea:	60 e0       	ldi	r22, 0x00	; 0
    3bec:	41 e0       	ldi	r20, 0x01	; 1
    3bee:	0e 94 31 08 	call	0x1062	; 0x1062 <MDIO_voidSetPinValue>
    MDIO_voidSetPinValue(STEPPER_PORT,PINK_COIL_PIN,PIN_HIGH);
    3bf2:	80 e0       	ldi	r24, 0x00	; 0
    3bf4:	61 e0       	ldi	r22, 0x01	; 1
    3bf6:	41 e0       	ldi	r20, 0x01	; 1
    3bf8:	0e 94 31 08 	call	0x1062	; 0x1062 <MDIO_voidSetPinValue>
    MDIO_voidSetPinValue(STEPPER_PORT,YELLOW_COIL_PIN,PIN_LOW);
    3bfc:	80 e0       	ldi	r24, 0x00	; 0
    3bfe:	62 e0       	ldi	r22, 0x02	; 2
    3c00:	40 e0       	ldi	r20, 0x00	; 0
    3c02:	0e 94 31 08 	call	0x1062	; 0x1062 <MDIO_voidSetPinValue>
    MDIO_voidSetPinValue(STEPPER_PORT,ORANGE_COIL_PIN,PIN_HIGH);
    3c06:	80 e0       	ldi	r24, 0x00	; 0
    3c08:	63 e0       	ldi	r22, 0x03	; 3
    3c0a:	41 e0       	ldi	r20, 0x01	; 1
    3c0c:	0e 94 31 08 	call	0x1062	; 0x1062 <MDIO_voidSetPinValue>
    3c10:	80 e0       	ldi	r24, 0x00	; 0
    3c12:	90 e0       	ldi	r25, 0x00	; 0
    3c14:	a0 e2       	ldi	r26, 0x20	; 32
    3c16:	b1 e4       	ldi	r27, 0x41	; 65
    3c18:	8f a3       	std	Y+39, r24	; 0x27
    3c1a:	98 a7       	std	Y+40, r25	; 0x28
    3c1c:	a9 a7       	std	Y+41, r26	; 0x29
    3c1e:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3c20:	6f a1       	ldd	r22, Y+39	; 0x27
    3c22:	78 a5       	ldd	r23, Y+40	; 0x28
    3c24:	89 a5       	ldd	r24, Y+41	; 0x29
    3c26:	9a a5       	ldd	r25, Y+42	; 0x2a
    3c28:	20 e0       	ldi	r18, 0x00	; 0
    3c2a:	30 e0       	ldi	r19, 0x00	; 0
    3c2c:	4a ef       	ldi	r20, 0xFA	; 250
    3c2e:	54 e4       	ldi	r21, 0x44	; 68
    3c30:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3c34:	dc 01       	movw	r26, r24
    3c36:	cb 01       	movw	r24, r22
    3c38:	8b a3       	std	Y+35, r24	; 0x23
    3c3a:	9c a3       	std	Y+36, r25	; 0x24
    3c3c:	ad a3       	std	Y+37, r26	; 0x25
    3c3e:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    3c40:	6b a1       	ldd	r22, Y+35	; 0x23
    3c42:	7c a1       	ldd	r23, Y+36	; 0x24
    3c44:	8d a1       	ldd	r24, Y+37	; 0x25
    3c46:	9e a1       	ldd	r25, Y+38	; 0x26
    3c48:	20 e0       	ldi	r18, 0x00	; 0
    3c4a:	30 e0       	ldi	r19, 0x00	; 0
    3c4c:	40 e8       	ldi	r20, 0x80	; 128
    3c4e:	5f e3       	ldi	r21, 0x3F	; 63
    3c50:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3c54:	88 23       	and	r24, r24
    3c56:	2c f4       	brge	.+10     	; 0x3c62 <HSTEP_voidFullStep+0x19a>
		__ticks = 1;
    3c58:	81 e0       	ldi	r24, 0x01	; 1
    3c5a:	90 e0       	ldi	r25, 0x00	; 0
    3c5c:	9a a3       	std	Y+34, r25	; 0x22
    3c5e:	89 a3       	std	Y+33, r24	; 0x21
    3c60:	3f c0       	rjmp	.+126    	; 0x3ce0 <HSTEP_voidFullStep+0x218>
	else if (__tmp > 65535)
    3c62:	6b a1       	ldd	r22, Y+35	; 0x23
    3c64:	7c a1       	ldd	r23, Y+36	; 0x24
    3c66:	8d a1       	ldd	r24, Y+37	; 0x25
    3c68:	9e a1       	ldd	r25, Y+38	; 0x26
    3c6a:	20 e0       	ldi	r18, 0x00	; 0
    3c6c:	3f ef       	ldi	r19, 0xFF	; 255
    3c6e:	4f e7       	ldi	r20, 0x7F	; 127
    3c70:	57 e4       	ldi	r21, 0x47	; 71
    3c72:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3c76:	18 16       	cp	r1, r24
    3c78:	4c f5       	brge	.+82     	; 0x3ccc <HSTEP_voidFullStep+0x204>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3c7a:	6f a1       	ldd	r22, Y+39	; 0x27
    3c7c:	78 a5       	ldd	r23, Y+40	; 0x28
    3c7e:	89 a5       	ldd	r24, Y+41	; 0x29
    3c80:	9a a5       	ldd	r25, Y+42	; 0x2a
    3c82:	20 e0       	ldi	r18, 0x00	; 0
    3c84:	30 e0       	ldi	r19, 0x00	; 0
    3c86:	40 e2       	ldi	r20, 0x20	; 32
    3c88:	51 e4       	ldi	r21, 0x41	; 65
    3c8a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3c8e:	dc 01       	movw	r26, r24
    3c90:	cb 01       	movw	r24, r22
    3c92:	bc 01       	movw	r22, r24
    3c94:	cd 01       	movw	r24, r26
    3c96:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3c9a:	dc 01       	movw	r26, r24
    3c9c:	cb 01       	movw	r24, r22
    3c9e:	9a a3       	std	Y+34, r25	; 0x22
    3ca0:	89 a3       	std	Y+33, r24	; 0x21
    3ca2:	0f c0       	rjmp	.+30     	; 0x3cc2 <HSTEP_voidFullStep+0x1fa>
    3ca4:	88 ec       	ldi	r24, 0xC8	; 200
    3ca6:	90 e0       	ldi	r25, 0x00	; 0
    3ca8:	98 a3       	std	Y+32, r25	; 0x20
    3caa:	8f 8f       	std	Y+31, r24	; 0x1f
    3cac:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3cae:	98 a1       	ldd	r25, Y+32	; 0x20
    3cb0:	01 97       	sbiw	r24, 0x01	; 1
    3cb2:	f1 f7       	brne	.-4      	; 0x3cb0 <HSTEP_voidFullStep+0x1e8>
    3cb4:	98 a3       	std	Y+32, r25	; 0x20
    3cb6:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3cb8:	89 a1       	ldd	r24, Y+33	; 0x21
    3cba:	9a a1       	ldd	r25, Y+34	; 0x22
    3cbc:	01 97       	sbiw	r24, 0x01	; 1
    3cbe:	9a a3       	std	Y+34, r25	; 0x22
    3cc0:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3cc2:	89 a1       	ldd	r24, Y+33	; 0x21
    3cc4:	9a a1       	ldd	r25, Y+34	; 0x22
    3cc6:	00 97       	sbiw	r24, 0x00	; 0
    3cc8:	69 f7       	brne	.-38     	; 0x3ca4 <HSTEP_voidFullStep+0x1dc>
    3cca:	14 c0       	rjmp	.+40     	; 0x3cf4 <HSTEP_voidFullStep+0x22c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3ccc:	6b a1       	ldd	r22, Y+35	; 0x23
    3cce:	7c a1       	ldd	r23, Y+36	; 0x24
    3cd0:	8d a1       	ldd	r24, Y+37	; 0x25
    3cd2:	9e a1       	ldd	r25, Y+38	; 0x26
    3cd4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3cd8:	dc 01       	movw	r26, r24
    3cda:	cb 01       	movw	r24, r22
    3cdc:	9a a3       	std	Y+34, r25	; 0x22
    3cde:	89 a3       	std	Y+33, r24	; 0x21
    3ce0:	89 a1       	ldd	r24, Y+33	; 0x21
    3ce2:	9a a1       	ldd	r25, Y+34	; 0x22
    3ce4:	9e 8f       	std	Y+30, r25	; 0x1e
    3ce6:	8d 8f       	std	Y+29, r24	; 0x1d
    3ce8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3cea:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3cec:	01 97       	sbiw	r24, 0x01	; 1
    3cee:	f1 f7       	brne	.-4      	; 0x3cec <HSTEP_voidFullStep+0x224>
    3cf0:	9e 8f       	std	Y+30, r25	; 0x1e
    3cf2:	8d 8f       	std	Y+29, r24	; 0x1d
    _delay_ms(10);
    MDIO_voidSetPinValue(STEPPER_PORT,BLUE_COIL_PIN,PIN_HIGH);
    3cf4:	80 e0       	ldi	r24, 0x00	; 0
    3cf6:	60 e0       	ldi	r22, 0x00	; 0
    3cf8:	41 e0       	ldi	r20, 0x01	; 1
    3cfa:	0e 94 31 08 	call	0x1062	; 0x1062 <MDIO_voidSetPinValue>
    MDIO_voidSetPinValue(STEPPER_PORT,PINK_COIL_PIN,PIN_HIGH);
    3cfe:	80 e0       	ldi	r24, 0x00	; 0
    3d00:	61 e0       	ldi	r22, 0x01	; 1
    3d02:	41 e0       	ldi	r20, 0x01	; 1
    3d04:	0e 94 31 08 	call	0x1062	; 0x1062 <MDIO_voidSetPinValue>
    MDIO_voidSetPinValue(STEPPER_PORT,YELLOW_COIL_PIN,PIN_HIGH);
    3d08:	80 e0       	ldi	r24, 0x00	; 0
    3d0a:	62 e0       	ldi	r22, 0x02	; 2
    3d0c:	41 e0       	ldi	r20, 0x01	; 1
    3d0e:	0e 94 31 08 	call	0x1062	; 0x1062 <MDIO_voidSetPinValue>
    MDIO_voidSetPinValue(STEPPER_PORT,ORANGE_COIL_PIN,PIN_LOW);
    3d12:	80 e0       	ldi	r24, 0x00	; 0
    3d14:	63 e0       	ldi	r22, 0x03	; 3
    3d16:	40 e0       	ldi	r20, 0x00	; 0
    3d18:	0e 94 31 08 	call	0x1062	; 0x1062 <MDIO_voidSetPinValue>
    3d1c:	80 e0       	ldi	r24, 0x00	; 0
    3d1e:	90 e0       	ldi	r25, 0x00	; 0
    3d20:	a0 e2       	ldi	r26, 0x20	; 32
    3d22:	b1 e4       	ldi	r27, 0x41	; 65
    3d24:	89 8f       	std	Y+25, r24	; 0x19
    3d26:	9a 8f       	std	Y+26, r25	; 0x1a
    3d28:	ab 8f       	std	Y+27, r26	; 0x1b
    3d2a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3d2c:	69 8d       	ldd	r22, Y+25	; 0x19
    3d2e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3d30:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3d32:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3d34:	20 e0       	ldi	r18, 0x00	; 0
    3d36:	30 e0       	ldi	r19, 0x00	; 0
    3d38:	4a ef       	ldi	r20, 0xFA	; 250
    3d3a:	54 e4       	ldi	r21, 0x44	; 68
    3d3c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3d40:	dc 01       	movw	r26, r24
    3d42:	cb 01       	movw	r24, r22
    3d44:	8d 8b       	std	Y+21, r24	; 0x15
    3d46:	9e 8b       	std	Y+22, r25	; 0x16
    3d48:	af 8b       	std	Y+23, r26	; 0x17
    3d4a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3d4c:	6d 89       	ldd	r22, Y+21	; 0x15
    3d4e:	7e 89       	ldd	r23, Y+22	; 0x16
    3d50:	8f 89       	ldd	r24, Y+23	; 0x17
    3d52:	98 8d       	ldd	r25, Y+24	; 0x18
    3d54:	20 e0       	ldi	r18, 0x00	; 0
    3d56:	30 e0       	ldi	r19, 0x00	; 0
    3d58:	40 e8       	ldi	r20, 0x80	; 128
    3d5a:	5f e3       	ldi	r21, 0x3F	; 63
    3d5c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3d60:	88 23       	and	r24, r24
    3d62:	2c f4       	brge	.+10     	; 0x3d6e <HSTEP_voidFullStep+0x2a6>
		__ticks = 1;
    3d64:	81 e0       	ldi	r24, 0x01	; 1
    3d66:	90 e0       	ldi	r25, 0x00	; 0
    3d68:	9c 8b       	std	Y+20, r25	; 0x14
    3d6a:	8b 8b       	std	Y+19, r24	; 0x13
    3d6c:	3f c0       	rjmp	.+126    	; 0x3dec <HSTEP_voidFullStep+0x324>
	else if (__tmp > 65535)
    3d6e:	6d 89       	ldd	r22, Y+21	; 0x15
    3d70:	7e 89       	ldd	r23, Y+22	; 0x16
    3d72:	8f 89       	ldd	r24, Y+23	; 0x17
    3d74:	98 8d       	ldd	r25, Y+24	; 0x18
    3d76:	20 e0       	ldi	r18, 0x00	; 0
    3d78:	3f ef       	ldi	r19, 0xFF	; 255
    3d7a:	4f e7       	ldi	r20, 0x7F	; 127
    3d7c:	57 e4       	ldi	r21, 0x47	; 71
    3d7e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3d82:	18 16       	cp	r1, r24
    3d84:	4c f5       	brge	.+82     	; 0x3dd8 <HSTEP_voidFullStep+0x310>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3d86:	69 8d       	ldd	r22, Y+25	; 0x19
    3d88:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3d8a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3d8c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3d8e:	20 e0       	ldi	r18, 0x00	; 0
    3d90:	30 e0       	ldi	r19, 0x00	; 0
    3d92:	40 e2       	ldi	r20, 0x20	; 32
    3d94:	51 e4       	ldi	r21, 0x41	; 65
    3d96:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3d9a:	dc 01       	movw	r26, r24
    3d9c:	cb 01       	movw	r24, r22
    3d9e:	bc 01       	movw	r22, r24
    3da0:	cd 01       	movw	r24, r26
    3da2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3da6:	dc 01       	movw	r26, r24
    3da8:	cb 01       	movw	r24, r22
    3daa:	9c 8b       	std	Y+20, r25	; 0x14
    3dac:	8b 8b       	std	Y+19, r24	; 0x13
    3dae:	0f c0       	rjmp	.+30     	; 0x3dce <HSTEP_voidFullStep+0x306>
    3db0:	88 ec       	ldi	r24, 0xC8	; 200
    3db2:	90 e0       	ldi	r25, 0x00	; 0
    3db4:	9a 8b       	std	Y+18, r25	; 0x12
    3db6:	89 8b       	std	Y+17, r24	; 0x11
    3db8:	89 89       	ldd	r24, Y+17	; 0x11
    3dba:	9a 89       	ldd	r25, Y+18	; 0x12
    3dbc:	01 97       	sbiw	r24, 0x01	; 1
    3dbe:	f1 f7       	brne	.-4      	; 0x3dbc <HSTEP_voidFullStep+0x2f4>
    3dc0:	9a 8b       	std	Y+18, r25	; 0x12
    3dc2:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3dc4:	8b 89       	ldd	r24, Y+19	; 0x13
    3dc6:	9c 89       	ldd	r25, Y+20	; 0x14
    3dc8:	01 97       	sbiw	r24, 0x01	; 1
    3dca:	9c 8b       	std	Y+20, r25	; 0x14
    3dcc:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3dce:	8b 89       	ldd	r24, Y+19	; 0x13
    3dd0:	9c 89       	ldd	r25, Y+20	; 0x14
    3dd2:	00 97       	sbiw	r24, 0x00	; 0
    3dd4:	69 f7       	brne	.-38     	; 0x3db0 <HSTEP_voidFullStep+0x2e8>
    3dd6:	14 c0       	rjmp	.+40     	; 0x3e00 <HSTEP_voidFullStep+0x338>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3dd8:	6d 89       	ldd	r22, Y+21	; 0x15
    3dda:	7e 89       	ldd	r23, Y+22	; 0x16
    3ddc:	8f 89       	ldd	r24, Y+23	; 0x17
    3dde:	98 8d       	ldd	r25, Y+24	; 0x18
    3de0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3de4:	dc 01       	movw	r26, r24
    3de6:	cb 01       	movw	r24, r22
    3de8:	9c 8b       	std	Y+20, r25	; 0x14
    3dea:	8b 8b       	std	Y+19, r24	; 0x13
    3dec:	8b 89       	ldd	r24, Y+19	; 0x13
    3dee:	9c 89       	ldd	r25, Y+20	; 0x14
    3df0:	98 8b       	std	Y+16, r25	; 0x10
    3df2:	8f 87       	std	Y+15, r24	; 0x0f
    3df4:	8f 85       	ldd	r24, Y+15	; 0x0f
    3df6:	98 89       	ldd	r25, Y+16	; 0x10
    3df8:	01 97       	sbiw	r24, 0x01	; 1
    3dfa:	f1 f7       	brne	.-4      	; 0x3df8 <HSTEP_voidFullStep+0x330>
    3dfc:	98 8b       	std	Y+16, r25	; 0x10
    3dfe:	8f 87       	std	Y+15, r24	; 0x0f
    _delay_ms(10);
    MDIO_voidSetPinValue(STEPPER_PORT,BLUE_COIL_PIN,PIN_LOW);
    3e00:	80 e0       	ldi	r24, 0x00	; 0
    3e02:	60 e0       	ldi	r22, 0x00	; 0
    3e04:	40 e0       	ldi	r20, 0x00	; 0
    3e06:	0e 94 31 08 	call	0x1062	; 0x1062 <MDIO_voidSetPinValue>
    MDIO_voidSetPinValue(STEPPER_PORT,PINK_COIL_PIN,PIN_HIGH);
    3e0a:	80 e0       	ldi	r24, 0x00	; 0
    3e0c:	61 e0       	ldi	r22, 0x01	; 1
    3e0e:	41 e0       	ldi	r20, 0x01	; 1
    3e10:	0e 94 31 08 	call	0x1062	; 0x1062 <MDIO_voidSetPinValue>
    MDIO_voidSetPinValue(STEPPER_PORT,YELLOW_COIL_PIN,PIN_HIGH);
    3e14:	80 e0       	ldi	r24, 0x00	; 0
    3e16:	62 e0       	ldi	r22, 0x02	; 2
    3e18:	41 e0       	ldi	r20, 0x01	; 1
    3e1a:	0e 94 31 08 	call	0x1062	; 0x1062 <MDIO_voidSetPinValue>
    MDIO_voidSetPinValue(STEPPER_PORT,ORANGE_COIL_PIN,PIN_HIGH);
    3e1e:	80 e0       	ldi	r24, 0x00	; 0
    3e20:	63 e0       	ldi	r22, 0x03	; 3
    3e22:	41 e0       	ldi	r20, 0x01	; 1
    3e24:	0e 94 31 08 	call	0x1062	; 0x1062 <MDIO_voidSetPinValue>
    3e28:	80 e0       	ldi	r24, 0x00	; 0
    3e2a:	90 e0       	ldi	r25, 0x00	; 0
    3e2c:	a0 e2       	ldi	r26, 0x20	; 32
    3e2e:	b1 e4       	ldi	r27, 0x41	; 65
    3e30:	8b 87       	std	Y+11, r24	; 0x0b
    3e32:	9c 87       	std	Y+12, r25	; 0x0c
    3e34:	ad 87       	std	Y+13, r26	; 0x0d
    3e36:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3e38:	6b 85       	ldd	r22, Y+11	; 0x0b
    3e3a:	7c 85       	ldd	r23, Y+12	; 0x0c
    3e3c:	8d 85       	ldd	r24, Y+13	; 0x0d
    3e3e:	9e 85       	ldd	r25, Y+14	; 0x0e
    3e40:	20 e0       	ldi	r18, 0x00	; 0
    3e42:	30 e0       	ldi	r19, 0x00	; 0
    3e44:	4a ef       	ldi	r20, 0xFA	; 250
    3e46:	54 e4       	ldi	r21, 0x44	; 68
    3e48:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3e4c:	dc 01       	movw	r26, r24
    3e4e:	cb 01       	movw	r24, r22
    3e50:	8f 83       	std	Y+7, r24	; 0x07
    3e52:	98 87       	std	Y+8, r25	; 0x08
    3e54:	a9 87       	std	Y+9, r26	; 0x09
    3e56:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3e58:	6f 81       	ldd	r22, Y+7	; 0x07
    3e5a:	78 85       	ldd	r23, Y+8	; 0x08
    3e5c:	89 85       	ldd	r24, Y+9	; 0x09
    3e5e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3e60:	20 e0       	ldi	r18, 0x00	; 0
    3e62:	30 e0       	ldi	r19, 0x00	; 0
    3e64:	40 e8       	ldi	r20, 0x80	; 128
    3e66:	5f e3       	ldi	r21, 0x3F	; 63
    3e68:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3e6c:	88 23       	and	r24, r24
    3e6e:	2c f4       	brge	.+10     	; 0x3e7a <HSTEP_voidFullStep+0x3b2>
		__ticks = 1;
    3e70:	81 e0       	ldi	r24, 0x01	; 1
    3e72:	90 e0       	ldi	r25, 0x00	; 0
    3e74:	9e 83       	std	Y+6, r25	; 0x06
    3e76:	8d 83       	std	Y+5, r24	; 0x05
    3e78:	3f c0       	rjmp	.+126    	; 0x3ef8 <HSTEP_voidFullStep+0x430>
	else if (__tmp > 65535)
    3e7a:	6f 81       	ldd	r22, Y+7	; 0x07
    3e7c:	78 85       	ldd	r23, Y+8	; 0x08
    3e7e:	89 85       	ldd	r24, Y+9	; 0x09
    3e80:	9a 85       	ldd	r25, Y+10	; 0x0a
    3e82:	20 e0       	ldi	r18, 0x00	; 0
    3e84:	3f ef       	ldi	r19, 0xFF	; 255
    3e86:	4f e7       	ldi	r20, 0x7F	; 127
    3e88:	57 e4       	ldi	r21, 0x47	; 71
    3e8a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3e8e:	18 16       	cp	r1, r24
    3e90:	4c f5       	brge	.+82     	; 0x3ee4 <HSTEP_voidFullStep+0x41c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3e92:	6b 85       	ldd	r22, Y+11	; 0x0b
    3e94:	7c 85       	ldd	r23, Y+12	; 0x0c
    3e96:	8d 85       	ldd	r24, Y+13	; 0x0d
    3e98:	9e 85       	ldd	r25, Y+14	; 0x0e
    3e9a:	20 e0       	ldi	r18, 0x00	; 0
    3e9c:	30 e0       	ldi	r19, 0x00	; 0
    3e9e:	40 e2       	ldi	r20, 0x20	; 32
    3ea0:	51 e4       	ldi	r21, 0x41	; 65
    3ea2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3ea6:	dc 01       	movw	r26, r24
    3ea8:	cb 01       	movw	r24, r22
    3eaa:	bc 01       	movw	r22, r24
    3eac:	cd 01       	movw	r24, r26
    3eae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3eb2:	dc 01       	movw	r26, r24
    3eb4:	cb 01       	movw	r24, r22
    3eb6:	9e 83       	std	Y+6, r25	; 0x06
    3eb8:	8d 83       	std	Y+5, r24	; 0x05
    3eba:	0f c0       	rjmp	.+30     	; 0x3eda <HSTEP_voidFullStep+0x412>
    3ebc:	88 ec       	ldi	r24, 0xC8	; 200
    3ebe:	90 e0       	ldi	r25, 0x00	; 0
    3ec0:	9c 83       	std	Y+4, r25	; 0x04
    3ec2:	8b 83       	std	Y+3, r24	; 0x03
    3ec4:	8b 81       	ldd	r24, Y+3	; 0x03
    3ec6:	9c 81       	ldd	r25, Y+4	; 0x04
    3ec8:	01 97       	sbiw	r24, 0x01	; 1
    3eca:	f1 f7       	brne	.-4      	; 0x3ec8 <HSTEP_voidFullStep+0x400>
    3ecc:	9c 83       	std	Y+4, r25	; 0x04
    3ece:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3ed0:	8d 81       	ldd	r24, Y+5	; 0x05
    3ed2:	9e 81       	ldd	r25, Y+6	; 0x06
    3ed4:	01 97       	sbiw	r24, 0x01	; 1
    3ed6:	9e 83       	std	Y+6, r25	; 0x06
    3ed8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3eda:	8d 81       	ldd	r24, Y+5	; 0x05
    3edc:	9e 81       	ldd	r25, Y+6	; 0x06
    3ede:	00 97       	sbiw	r24, 0x00	; 0
    3ee0:	69 f7       	brne	.-38     	; 0x3ebc <HSTEP_voidFullStep+0x3f4>
    3ee2:	14 c0       	rjmp	.+40     	; 0x3f0c <HSTEP_voidFullStep+0x444>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3ee4:	6f 81       	ldd	r22, Y+7	; 0x07
    3ee6:	78 85       	ldd	r23, Y+8	; 0x08
    3ee8:	89 85       	ldd	r24, Y+9	; 0x09
    3eea:	9a 85       	ldd	r25, Y+10	; 0x0a
    3eec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3ef0:	dc 01       	movw	r26, r24
    3ef2:	cb 01       	movw	r24, r22
    3ef4:	9e 83       	std	Y+6, r25	; 0x06
    3ef6:	8d 83       	std	Y+5, r24	; 0x05
    3ef8:	8d 81       	ldd	r24, Y+5	; 0x05
    3efa:	9e 81       	ldd	r25, Y+6	; 0x06
    3efc:	9a 83       	std	Y+2, r25	; 0x02
    3efe:	89 83       	std	Y+1, r24	; 0x01
    3f00:	89 81       	ldd	r24, Y+1	; 0x01
    3f02:	9a 81       	ldd	r25, Y+2	; 0x02
    3f04:	01 97       	sbiw	r24, 0x01	; 1
    3f06:	f1 f7       	brne	.-4      	; 0x3f04 <HSTEP_voidFullStep+0x43c>
    3f08:	9a 83       	std	Y+2, r25	; 0x02
    3f0a:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(10);
}
    3f0c:	e8 96       	adiw	r28, 0x38	; 56
    3f0e:	0f b6       	in	r0, 0x3f	; 63
    3f10:	f8 94       	cli
    3f12:	de bf       	out	0x3e, r29	; 62
    3f14:	0f be       	out	0x3f, r0	; 63
    3f16:	cd bf       	out	0x3d, r28	; 61
    3f18:	cf 91       	pop	r28
    3f1a:	df 91       	pop	r29
    3f1c:	08 95       	ret

00003f1e <main>:
#include "../Include/HAL/STEPPER/STEPPER_Interface.h"
#include "../Include/HAL/STEPPER/STEPPER_Configuration.h"


void main(void)
{
    3f1e:	df 93       	push	r29
    3f20:	cf 93       	push	r28
    3f22:	0f 92       	push	r0
    3f24:	cd b7       	in	r28, 0x3d	; 61
    3f26:	de b7       	in	r29, 0x3e	; 62
    u8 local_u8PressedKey;
    MDIO_voidInit();
    3f28:	0e 94 5a 07 	call	0xeb4	; 0xeb4 <MDIO_voidInit>
    MDIO_voidSetPinDirection(PORTA,PIN0,PIN_HIGH);
    3f2c:	80 e0       	ldi	r24, 0x00	; 0
    3f2e:	90 e0       	ldi	r25, 0x00	; 0
    3f30:	60 e0       	ldi	r22, 0x00	; 0
    3f32:	70 e0       	ldi	r23, 0x00	; 0
    3f34:	41 e0       	ldi	r20, 0x01	; 1
    3f36:	50 e0       	ldi	r21, 0x00	; 0
    3f38:	0e 94 47 09 	call	0x128e	; 0x128e <MDIO_voidSetPinDirection>
	MDIO_voidSetPinDirection(PORTA,PIN1,PIN_HIGH);
    3f3c:	80 e0       	ldi	r24, 0x00	; 0
    3f3e:	90 e0       	ldi	r25, 0x00	; 0
    3f40:	61 e0       	ldi	r22, 0x01	; 1
    3f42:	70 e0       	ldi	r23, 0x00	; 0
    3f44:	41 e0       	ldi	r20, 0x01	; 1
    3f46:	50 e0       	ldi	r21, 0x00	; 0
    3f48:	0e 94 47 09 	call	0x128e	; 0x128e <MDIO_voidSetPinDirection>
	MDIO_voidSetPinDirection(PORTA,PIN2,PIN_HIGH);
    3f4c:	80 e0       	ldi	r24, 0x00	; 0
    3f4e:	90 e0       	ldi	r25, 0x00	; 0
    3f50:	62 e0       	ldi	r22, 0x02	; 2
    3f52:	70 e0       	ldi	r23, 0x00	; 0
    3f54:	41 e0       	ldi	r20, 0x01	; 1
    3f56:	50 e0       	ldi	r21, 0x00	; 0
    3f58:	0e 94 47 09 	call	0x128e	; 0x128e <MDIO_voidSetPinDirection>
	MDIO_voidSetPinDirection(PORTA,PIN3,PIN_HIGH);
    3f5c:	80 e0       	ldi	r24, 0x00	; 0
    3f5e:	90 e0       	ldi	r25, 0x00	; 0
    3f60:	63 e0       	ldi	r22, 0x03	; 3
    3f62:	70 e0       	ldi	r23, 0x00	; 0
    3f64:	41 e0       	ldi	r20, 0x01	; 1
    3f66:	50 e0       	ldi	r21, 0x00	; 0
    3f68:	0e 94 47 09 	call	0x128e	; 0x128e <MDIO_voidSetPinDirection>
//        if(local_u8PressedKey!=KEY_NOT_PRESSED)
//        {
//            HLCD4_voidSendData(local_u8PressedKey);
//        }

    HSTEP_voidFullStep();
    3f6c:	0e 94 64 1d 	call	0x3ac8	; 0x3ac8 <HSTEP_voidFullStep>
    3f70:	fd cf       	rjmp	.-6      	; 0x3f6c <main+0x4e>

00003f72 <__udivmodhi4>:
    3f72:	aa 1b       	sub	r26, r26
    3f74:	bb 1b       	sub	r27, r27
    3f76:	51 e1       	ldi	r21, 0x11	; 17
    3f78:	07 c0       	rjmp	.+14     	; 0x3f88 <__udivmodhi4_ep>

00003f7a <__udivmodhi4_loop>:
    3f7a:	aa 1f       	adc	r26, r26
    3f7c:	bb 1f       	adc	r27, r27
    3f7e:	a6 17       	cp	r26, r22
    3f80:	b7 07       	cpc	r27, r23
    3f82:	10 f0       	brcs	.+4      	; 0x3f88 <__udivmodhi4_ep>
    3f84:	a6 1b       	sub	r26, r22
    3f86:	b7 0b       	sbc	r27, r23

00003f88 <__udivmodhi4_ep>:
    3f88:	88 1f       	adc	r24, r24
    3f8a:	99 1f       	adc	r25, r25
    3f8c:	5a 95       	dec	r21
    3f8e:	a9 f7       	brne	.-22     	; 0x3f7a <__udivmodhi4_loop>
    3f90:	80 95       	com	r24
    3f92:	90 95       	com	r25
    3f94:	bc 01       	movw	r22, r24
    3f96:	cd 01       	movw	r24, r26
    3f98:	08 95       	ret

00003f9a <__prologue_saves__>:
    3f9a:	2f 92       	push	r2
    3f9c:	3f 92       	push	r3
    3f9e:	4f 92       	push	r4
    3fa0:	5f 92       	push	r5
    3fa2:	6f 92       	push	r6
    3fa4:	7f 92       	push	r7
    3fa6:	8f 92       	push	r8
    3fa8:	9f 92       	push	r9
    3faa:	af 92       	push	r10
    3fac:	bf 92       	push	r11
    3fae:	cf 92       	push	r12
    3fb0:	df 92       	push	r13
    3fb2:	ef 92       	push	r14
    3fb4:	ff 92       	push	r15
    3fb6:	0f 93       	push	r16
    3fb8:	1f 93       	push	r17
    3fba:	cf 93       	push	r28
    3fbc:	df 93       	push	r29
    3fbe:	cd b7       	in	r28, 0x3d	; 61
    3fc0:	de b7       	in	r29, 0x3e	; 62
    3fc2:	ca 1b       	sub	r28, r26
    3fc4:	db 0b       	sbc	r29, r27
    3fc6:	0f b6       	in	r0, 0x3f	; 63
    3fc8:	f8 94       	cli
    3fca:	de bf       	out	0x3e, r29	; 62
    3fcc:	0f be       	out	0x3f, r0	; 63
    3fce:	cd bf       	out	0x3d, r28	; 61
    3fd0:	09 94       	ijmp

00003fd2 <__epilogue_restores__>:
    3fd2:	2a 88       	ldd	r2, Y+18	; 0x12
    3fd4:	39 88       	ldd	r3, Y+17	; 0x11
    3fd6:	48 88       	ldd	r4, Y+16	; 0x10
    3fd8:	5f 84       	ldd	r5, Y+15	; 0x0f
    3fda:	6e 84       	ldd	r6, Y+14	; 0x0e
    3fdc:	7d 84       	ldd	r7, Y+13	; 0x0d
    3fde:	8c 84       	ldd	r8, Y+12	; 0x0c
    3fe0:	9b 84       	ldd	r9, Y+11	; 0x0b
    3fe2:	aa 84       	ldd	r10, Y+10	; 0x0a
    3fe4:	b9 84       	ldd	r11, Y+9	; 0x09
    3fe6:	c8 84       	ldd	r12, Y+8	; 0x08
    3fe8:	df 80       	ldd	r13, Y+7	; 0x07
    3fea:	ee 80       	ldd	r14, Y+6	; 0x06
    3fec:	fd 80       	ldd	r15, Y+5	; 0x05
    3fee:	0c 81       	ldd	r16, Y+4	; 0x04
    3ff0:	1b 81       	ldd	r17, Y+3	; 0x03
    3ff2:	aa 81       	ldd	r26, Y+2	; 0x02
    3ff4:	b9 81       	ldd	r27, Y+1	; 0x01
    3ff6:	ce 0f       	add	r28, r30
    3ff8:	d1 1d       	adc	r29, r1
    3ffa:	0f b6       	in	r0, 0x3f	; 63
    3ffc:	f8 94       	cli
    3ffe:	de bf       	out	0x3e, r29	; 62
    4000:	0f be       	out	0x3f, r0	; 63
    4002:	cd bf       	out	0x3d, r28	; 61
    4004:	ed 01       	movw	r28, r26
    4006:	08 95       	ret

00004008 <_exit>:
    4008:	f8 94       	cli

0000400a <__stop_program>:
    400a:	ff cf       	rjmp	.-2      	; 0x400a <__stop_program>
