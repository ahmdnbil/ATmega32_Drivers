
ATmega32_Drivers.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004d4c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000003a  00800060  00004d4c  00004de0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000008  0080009a  0080009a  00004e1a  2**0
                  ALLOC
  3 .stab         00004518  00000000  00000000  00004e1c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001247  00000000  00000000  00009334  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000160  00000000  00000000  0000a57b  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000018f  00000000  00000000  0000a6db  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002045  00000000  00000000  0000a86a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001101  00000000  00000000  0000c8af  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000f82  00000000  00000000  0000d9b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000180  00000000  00000000  0000e934  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002c2  00000000  00000000  0000eab4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000088e  00000000  00000000  0000ed76  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000f604  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 b6 0c 	jmp	0x196c	; 0x196c <__vector_1>
       8:	0c 94 e9 0c 	jmp	0x19d2	; 0x19d2 <__vector_2>
       c:	0c 94 1c 0d 	jmp	0x1a38	; 0x1a38 <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec e4       	ldi	r30, 0x4C	; 76
      68:	fd e4       	ldi	r31, 0x4D	; 77
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	aa 39       	cpi	r26, 0x9A	; 154
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	aa e9       	ldi	r26, 0x9A	; 154
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a2 3a       	cpi	r26, 0xA2	; 162
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 72 24 	call	0x48e4	; 0x48e4 <main>
      8a:	0c 94 a4 26 	jmp	0x4d48	; 0x4d48 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 6d 26 	jmp	0x4cda	; 0x4cda <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a6 e6       	ldi	r26, 0x66	; 102
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 89 26 	jmp	0x4d12	; 0x4d12 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 79 26 	jmp	0x4cf2	; 0x4cf2 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 95 26 	jmp	0x4d2a	; 0x4d2a <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 79 26 	jmp	0x4cf2	; 0x4cf2 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 95 26 	jmp	0x4d2a	; 0x4d2a <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 6d 26 	jmp	0x4cda	; 0x4cda <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	86 e6       	ldi	r24, 0x66	; 102
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 89 26 	jmp	0x4d12	; 0x4d12 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 75 26 	jmp	0x4cea	; 0x4cea <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	66 e6       	ldi	r22, 0x66	; 102
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 91 26 	jmp	0x4d22	; 0x4d22 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 79 26 	jmp	0x4cf2	; 0x4cf2 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 95 26 	jmp	0x4d2a	; 0x4d2a <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 79 26 	jmp	0x4cf2	; 0x4cf2 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 95 26 	jmp	0x4d2a	; 0x4d2a <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 79 26 	jmp	0x4cf2	; 0x4cf2 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 95 26 	jmp	0x4d2a	; 0x4d2a <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 7d 26 	jmp	0x4cfa	; 0x4cfa <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 99 26 	jmp	0x4d32	; 0x4d32 <__epilogue_restores__+0x20>

00000952 <__pack_f>:
     952:	df 92       	push	r13
     954:	ef 92       	push	r14
     956:	ff 92       	push	r15
     958:	0f 93       	push	r16
     95a:	1f 93       	push	r17
     95c:	fc 01       	movw	r30, r24
     95e:	e4 80       	ldd	r14, Z+4	; 0x04
     960:	f5 80       	ldd	r15, Z+5	; 0x05
     962:	06 81       	ldd	r16, Z+6	; 0x06
     964:	17 81       	ldd	r17, Z+7	; 0x07
     966:	d1 80       	ldd	r13, Z+1	; 0x01
     968:	80 81       	ld	r24, Z
     96a:	82 30       	cpi	r24, 0x02	; 2
     96c:	48 f4       	brcc	.+18     	; 0x980 <__pack_f+0x2e>
     96e:	80 e0       	ldi	r24, 0x00	; 0
     970:	90 e0       	ldi	r25, 0x00	; 0
     972:	a0 e1       	ldi	r26, 0x10	; 16
     974:	b0 e0       	ldi	r27, 0x00	; 0
     976:	e8 2a       	or	r14, r24
     978:	f9 2a       	or	r15, r25
     97a:	0a 2b       	or	r16, r26
     97c:	1b 2b       	or	r17, r27
     97e:	a5 c0       	rjmp	.+330    	; 0xaca <__pack_f+0x178>
     980:	84 30       	cpi	r24, 0x04	; 4
     982:	09 f4       	brne	.+2      	; 0x986 <__pack_f+0x34>
     984:	9f c0       	rjmp	.+318    	; 0xac4 <__pack_f+0x172>
     986:	82 30       	cpi	r24, 0x02	; 2
     988:	21 f4       	brne	.+8      	; 0x992 <__pack_f+0x40>
     98a:	ee 24       	eor	r14, r14
     98c:	ff 24       	eor	r15, r15
     98e:	87 01       	movw	r16, r14
     990:	05 c0       	rjmp	.+10     	; 0x99c <__pack_f+0x4a>
     992:	e1 14       	cp	r14, r1
     994:	f1 04       	cpc	r15, r1
     996:	01 05       	cpc	r16, r1
     998:	11 05       	cpc	r17, r1
     99a:	19 f4       	brne	.+6      	; 0x9a2 <__pack_f+0x50>
     99c:	e0 e0       	ldi	r30, 0x00	; 0
     99e:	f0 e0       	ldi	r31, 0x00	; 0
     9a0:	96 c0       	rjmp	.+300    	; 0xace <__pack_f+0x17c>
     9a2:	62 81       	ldd	r22, Z+2	; 0x02
     9a4:	73 81       	ldd	r23, Z+3	; 0x03
     9a6:	9f ef       	ldi	r25, 0xFF	; 255
     9a8:	62 38       	cpi	r22, 0x82	; 130
     9aa:	79 07       	cpc	r23, r25
     9ac:	0c f0       	brlt	.+2      	; 0x9b0 <__pack_f+0x5e>
     9ae:	5b c0       	rjmp	.+182    	; 0xa66 <__pack_f+0x114>
     9b0:	22 e8       	ldi	r18, 0x82	; 130
     9b2:	3f ef       	ldi	r19, 0xFF	; 255
     9b4:	26 1b       	sub	r18, r22
     9b6:	37 0b       	sbc	r19, r23
     9b8:	2a 31       	cpi	r18, 0x1A	; 26
     9ba:	31 05       	cpc	r19, r1
     9bc:	2c f0       	brlt	.+10     	; 0x9c8 <__pack_f+0x76>
     9be:	20 e0       	ldi	r18, 0x00	; 0
     9c0:	30 e0       	ldi	r19, 0x00	; 0
     9c2:	40 e0       	ldi	r20, 0x00	; 0
     9c4:	50 e0       	ldi	r21, 0x00	; 0
     9c6:	2a c0       	rjmp	.+84     	; 0xa1c <__pack_f+0xca>
     9c8:	b8 01       	movw	r22, r16
     9ca:	a7 01       	movw	r20, r14
     9cc:	02 2e       	mov	r0, r18
     9ce:	04 c0       	rjmp	.+8      	; 0x9d8 <__pack_f+0x86>
     9d0:	76 95       	lsr	r23
     9d2:	67 95       	ror	r22
     9d4:	57 95       	ror	r21
     9d6:	47 95       	ror	r20
     9d8:	0a 94       	dec	r0
     9da:	d2 f7       	brpl	.-12     	; 0x9d0 <__pack_f+0x7e>
     9dc:	81 e0       	ldi	r24, 0x01	; 1
     9de:	90 e0       	ldi	r25, 0x00	; 0
     9e0:	a0 e0       	ldi	r26, 0x00	; 0
     9e2:	b0 e0       	ldi	r27, 0x00	; 0
     9e4:	04 c0       	rjmp	.+8      	; 0x9ee <__pack_f+0x9c>
     9e6:	88 0f       	add	r24, r24
     9e8:	99 1f       	adc	r25, r25
     9ea:	aa 1f       	adc	r26, r26
     9ec:	bb 1f       	adc	r27, r27
     9ee:	2a 95       	dec	r18
     9f0:	d2 f7       	brpl	.-12     	; 0x9e6 <__pack_f+0x94>
     9f2:	01 97       	sbiw	r24, 0x01	; 1
     9f4:	a1 09       	sbc	r26, r1
     9f6:	b1 09       	sbc	r27, r1
     9f8:	8e 21       	and	r24, r14
     9fa:	9f 21       	and	r25, r15
     9fc:	a0 23       	and	r26, r16
     9fe:	b1 23       	and	r27, r17
     a00:	00 97       	sbiw	r24, 0x00	; 0
     a02:	a1 05       	cpc	r26, r1
     a04:	b1 05       	cpc	r27, r1
     a06:	21 f0       	breq	.+8      	; 0xa10 <__pack_f+0xbe>
     a08:	81 e0       	ldi	r24, 0x01	; 1
     a0a:	90 e0       	ldi	r25, 0x00	; 0
     a0c:	a0 e0       	ldi	r26, 0x00	; 0
     a0e:	b0 e0       	ldi	r27, 0x00	; 0
     a10:	9a 01       	movw	r18, r20
     a12:	ab 01       	movw	r20, r22
     a14:	28 2b       	or	r18, r24
     a16:	39 2b       	or	r19, r25
     a18:	4a 2b       	or	r20, r26
     a1a:	5b 2b       	or	r21, r27
     a1c:	da 01       	movw	r26, r20
     a1e:	c9 01       	movw	r24, r18
     a20:	8f 77       	andi	r24, 0x7F	; 127
     a22:	90 70       	andi	r25, 0x00	; 0
     a24:	a0 70       	andi	r26, 0x00	; 0
     a26:	b0 70       	andi	r27, 0x00	; 0
     a28:	80 34       	cpi	r24, 0x40	; 64
     a2a:	91 05       	cpc	r25, r1
     a2c:	a1 05       	cpc	r26, r1
     a2e:	b1 05       	cpc	r27, r1
     a30:	39 f4       	brne	.+14     	; 0xa40 <__pack_f+0xee>
     a32:	27 ff       	sbrs	r18, 7
     a34:	09 c0       	rjmp	.+18     	; 0xa48 <__pack_f+0xf6>
     a36:	20 5c       	subi	r18, 0xC0	; 192
     a38:	3f 4f       	sbci	r19, 0xFF	; 255
     a3a:	4f 4f       	sbci	r20, 0xFF	; 255
     a3c:	5f 4f       	sbci	r21, 0xFF	; 255
     a3e:	04 c0       	rjmp	.+8      	; 0xa48 <__pack_f+0xf6>
     a40:	21 5c       	subi	r18, 0xC1	; 193
     a42:	3f 4f       	sbci	r19, 0xFF	; 255
     a44:	4f 4f       	sbci	r20, 0xFF	; 255
     a46:	5f 4f       	sbci	r21, 0xFF	; 255
     a48:	e0 e0       	ldi	r30, 0x00	; 0
     a4a:	f0 e0       	ldi	r31, 0x00	; 0
     a4c:	20 30       	cpi	r18, 0x00	; 0
     a4e:	a0 e0       	ldi	r26, 0x00	; 0
     a50:	3a 07       	cpc	r19, r26
     a52:	a0 e0       	ldi	r26, 0x00	; 0
     a54:	4a 07       	cpc	r20, r26
     a56:	a0 e4       	ldi	r26, 0x40	; 64
     a58:	5a 07       	cpc	r21, r26
     a5a:	10 f0       	brcs	.+4      	; 0xa60 <__pack_f+0x10e>
     a5c:	e1 e0       	ldi	r30, 0x01	; 1
     a5e:	f0 e0       	ldi	r31, 0x00	; 0
     a60:	79 01       	movw	r14, r18
     a62:	8a 01       	movw	r16, r20
     a64:	27 c0       	rjmp	.+78     	; 0xab4 <__pack_f+0x162>
     a66:	60 38       	cpi	r22, 0x80	; 128
     a68:	71 05       	cpc	r23, r1
     a6a:	64 f5       	brge	.+88     	; 0xac4 <__pack_f+0x172>
     a6c:	fb 01       	movw	r30, r22
     a6e:	e1 58       	subi	r30, 0x81	; 129
     a70:	ff 4f       	sbci	r31, 0xFF	; 255
     a72:	d8 01       	movw	r26, r16
     a74:	c7 01       	movw	r24, r14
     a76:	8f 77       	andi	r24, 0x7F	; 127
     a78:	90 70       	andi	r25, 0x00	; 0
     a7a:	a0 70       	andi	r26, 0x00	; 0
     a7c:	b0 70       	andi	r27, 0x00	; 0
     a7e:	80 34       	cpi	r24, 0x40	; 64
     a80:	91 05       	cpc	r25, r1
     a82:	a1 05       	cpc	r26, r1
     a84:	b1 05       	cpc	r27, r1
     a86:	39 f4       	brne	.+14     	; 0xa96 <__pack_f+0x144>
     a88:	e7 fe       	sbrs	r14, 7
     a8a:	0d c0       	rjmp	.+26     	; 0xaa6 <__pack_f+0x154>
     a8c:	80 e4       	ldi	r24, 0x40	; 64
     a8e:	90 e0       	ldi	r25, 0x00	; 0
     a90:	a0 e0       	ldi	r26, 0x00	; 0
     a92:	b0 e0       	ldi	r27, 0x00	; 0
     a94:	04 c0       	rjmp	.+8      	; 0xa9e <__pack_f+0x14c>
     a96:	8f e3       	ldi	r24, 0x3F	; 63
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	e8 0e       	add	r14, r24
     aa0:	f9 1e       	adc	r15, r25
     aa2:	0a 1f       	adc	r16, r26
     aa4:	1b 1f       	adc	r17, r27
     aa6:	17 ff       	sbrs	r17, 7
     aa8:	05 c0       	rjmp	.+10     	; 0xab4 <__pack_f+0x162>
     aaa:	16 95       	lsr	r17
     aac:	07 95       	ror	r16
     aae:	f7 94       	ror	r15
     ab0:	e7 94       	ror	r14
     ab2:	31 96       	adiw	r30, 0x01	; 1
     ab4:	87 e0       	ldi	r24, 0x07	; 7
     ab6:	16 95       	lsr	r17
     ab8:	07 95       	ror	r16
     aba:	f7 94       	ror	r15
     abc:	e7 94       	ror	r14
     abe:	8a 95       	dec	r24
     ac0:	d1 f7       	brne	.-12     	; 0xab6 <__pack_f+0x164>
     ac2:	05 c0       	rjmp	.+10     	; 0xace <__pack_f+0x17c>
     ac4:	ee 24       	eor	r14, r14
     ac6:	ff 24       	eor	r15, r15
     ac8:	87 01       	movw	r16, r14
     aca:	ef ef       	ldi	r30, 0xFF	; 255
     acc:	f0 e0       	ldi	r31, 0x00	; 0
     ace:	6e 2f       	mov	r22, r30
     ad0:	67 95       	ror	r22
     ad2:	66 27       	eor	r22, r22
     ad4:	67 95       	ror	r22
     ad6:	90 2f       	mov	r25, r16
     ad8:	9f 77       	andi	r25, 0x7F	; 127
     ada:	d7 94       	ror	r13
     adc:	dd 24       	eor	r13, r13
     ade:	d7 94       	ror	r13
     ae0:	8e 2f       	mov	r24, r30
     ae2:	86 95       	lsr	r24
     ae4:	49 2f       	mov	r20, r25
     ae6:	46 2b       	or	r20, r22
     ae8:	58 2f       	mov	r21, r24
     aea:	5d 29       	or	r21, r13
     aec:	b7 01       	movw	r22, r14
     aee:	ca 01       	movw	r24, r20
     af0:	1f 91       	pop	r17
     af2:	0f 91       	pop	r16
     af4:	ff 90       	pop	r15
     af6:	ef 90       	pop	r14
     af8:	df 90       	pop	r13
     afa:	08 95       	ret

00000afc <__unpack_f>:
     afc:	fc 01       	movw	r30, r24
     afe:	db 01       	movw	r26, r22
     b00:	40 81       	ld	r20, Z
     b02:	51 81       	ldd	r21, Z+1	; 0x01
     b04:	22 81       	ldd	r18, Z+2	; 0x02
     b06:	62 2f       	mov	r22, r18
     b08:	6f 77       	andi	r22, 0x7F	; 127
     b0a:	70 e0       	ldi	r23, 0x00	; 0
     b0c:	22 1f       	adc	r18, r18
     b0e:	22 27       	eor	r18, r18
     b10:	22 1f       	adc	r18, r18
     b12:	93 81       	ldd	r25, Z+3	; 0x03
     b14:	89 2f       	mov	r24, r25
     b16:	88 0f       	add	r24, r24
     b18:	82 2b       	or	r24, r18
     b1a:	28 2f       	mov	r18, r24
     b1c:	30 e0       	ldi	r19, 0x00	; 0
     b1e:	99 1f       	adc	r25, r25
     b20:	99 27       	eor	r25, r25
     b22:	99 1f       	adc	r25, r25
     b24:	11 96       	adiw	r26, 0x01	; 1
     b26:	9c 93       	st	X, r25
     b28:	11 97       	sbiw	r26, 0x01	; 1
     b2a:	21 15       	cp	r18, r1
     b2c:	31 05       	cpc	r19, r1
     b2e:	a9 f5       	brne	.+106    	; 0xb9a <__unpack_f+0x9e>
     b30:	41 15       	cp	r20, r1
     b32:	51 05       	cpc	r21, r1
     b34:	61 05       	cpc	r22, r1
     b36:	71 05       	cpc	r23, r1
     b38:	11 f4       	brne	.+4      	; 0xb3e <__unpack_f+0x42>
     b3a:	82 e0       	ldi	r24, 0x02	; 2
     b3c:	37 c0       	rjmp	.+110    	; 0xbac <__unpack_f+0xb0>
     b3e:	82 e8       	ldi	r24, 0x82	; 130
     b40:	9f ef       	ldi	r25, 0xFF	; 255
     b42:	13 96       	adiw	r26, 0x03	; 3
     b44:	9c 93       	st	X, r25
     b46:	8e 93       	st	-X, r24
     b48:	12 97       	sbiw	r26, 0x02	; 2
     b4a:	9a 01       	movw	r18, r20
     b4c:	ab 01       	movw	r20, r22
     b4e:	67 e0       	ldi	r22, 0x07	; 7
     b50:	22 0f       	add	r18, r18
     b52:	33 1f       	adc	r19, r19
     b54:	44 1f       	adc	r20, r20
     b56:	55 1f       	adc	r21, r21
     b58:	6a 95       	dec	r22
     b5a:	d1 f7       	brne	.-12     	; 0xb50 <__unpack_f+0x54>
     b5c:	83 e0       	ldi	r24, 0x03	; 3
     b5e:	8c 93       	st	X, r24
     b60:	0d c0       	rjmp	.+26     	; 0xb7c <__unpack_f+0x80>
     b62:	22 0f       	add	r18, r18
     b64:	33 1f       	adc	r19, r19
     b66:	44 1f       	adc	r20, r20
     b68:	55 1f       	adc	r21, r21
     b6a:	12 96       	adiw	r26, 0x02	; 2
     b6c:	8d 91       	ld	r24, X+
     b6e:	9c 91       	ld	r25, X
     b70:	13 97       	sbiw	r26, 0x03	; 3
     b72:	01 97       	sbiw	r24, 0x01	; 1
     b74:	13 96       	adiw	r26, 0x03	; 3
     b76:	9c 93       	st	X, r25
     b78:	8e 93       	st	-X, r24
     b7a:	12 97       	sbiw	r26, 0x02	; 2
     b7c:	20 30       	cpi	r18, 0x00	; 0
     b7e:	80 e0       	ldi	r24, 0x00	; 0
     b80:	38 07       	cpc	r19, r24
     b82:	80 e0       	ldi	r24, 0x00	; 0
     b84:	48 07       	cpc	r20, r24
     b86:	80 e4       	ldi	r24, 0x40	; 64
     b88:	58 07       	cpc	r21, r24
     b8a:	58 f3       	brcs	.-42     	; 0xb62 <__unpack_f+0x66>
     b8c:	14 96       	adiw	r26, 0x04	; 4
     b8e:	2d 93       	st	X+, r18
     b90:	3d 93       	st	X+, r19
     b92:	4d 93       	st	X+, r20
     b94:	5c 93       	st	X, r21
     b96:	17 97       	sbiw	r26, 0x07	; 7
     b98:	08 95       	ret
     b9a:	2f 3f       	cpi	r18, 0xFF	; 255
     b9c:	31 05       	cpc	r19, r1
     b9e:	79 f4       	brne	.+30     	; 0xbbe <__unpack_f+0xc2>
     ba0:	41 15       	cp	r20, r1
     ba2:	51 05       	cpc	r21, r1
     ba4:	61 05       	cpc	r22, r1
     ba6:	71 05       	cpc	r23, r1
     ba8:	19 f4       	brne	.+6      	; 0xbb0 <__unpack_f+0xb4>
     baa:	84 e0       	ldi	r24, 0x04	; 4
     bac:	8c 93       	st	X, r24
     bae:	08 95       	ret
     bb0:	64 ff       	sbrs	r22, 4
     bb2:	03 c0       	rjmp	.+6      	; 0xbba <__unpack_f+0xbe>
     bb4:	81 e0       	ldi	r24, 0x01	; 1
     bb6:	8c 93       	st	X, r24
     bb8:	12 c0       	rjmp	.+36     	; 0xbde <__unpack_f+0xe2>
     bba:	1c 92       	st	X, r1
     bbc:	10 c0       	rjmp	.+32     	; 0xbde <__unpack_f+0xe2>
     bbe:	2f 57       	subi	r18, 0x7F	; 127
     bc0:	30 40       	sbci	r19, 0x00	; 0
     bc2:	13 96       	adiw	r26, 0x03	; 3
     bc4:	3c 93       	st	X, r19
     bc6:	2e 93       	st	-X, r18
     bc8:	12 97       	sbiw	r26, 0x02	; 2
     bca:	83 e0       	ldi	r24, 0x03	; 3
     bcc:	8c 93       	st	X, r24
     bce:	87 e0       	ldi	r24, 0x07	; 7
     bd0:	44 0f       	add	r20, r20
     bd2:	55 1f       	adc	r21, r21
     bd4:	66 1f       	adc	r22, r22
     bd6:	77 1f       	adc	r23, r23
     bd8:	8a 95       	dec	r24
     bda:	d1 f7       	brne	.-12     	; 0xbd0 <__unpack_f+0xd4>
     bdc:	70 64       	ori	r23, 0x40	; 64
     bde:	14 96       	adiw	r26, 0x04	; 4
     be0:	4d 93       	st	X+, r20
     be2:	5d 93       	st	X+, r21
     be4:	6d 93       	st	X+, r22
     be6:	7c 93       	st	X, r23
     be8:	17 97       	sbiw	r26, 0x07	; 7
     bea:	08 95       	ret

00000bec <__fpcmp_parts_f>:
     bec:	1f 93       	push	r17
     bee:	dc 01       	movw	r26, r24
     bf0:	fb 01       	movw	r30, r22
     bf2:	9c 91       	ld	r25, X
     bf4:	92 30       	cpi	r25, 0x02	; 2
     bf6:	08 f4       	brcc	.+2      	; 0xbfa <__fpcmp_parts_f+0xe>
     bf8:	47 c0       	rjmp	.+142    	; 0xc88 <__fpcmp_parts_f+0x9c>
     bfa:	80 81       	ld	r24, Z
     bfc:	82 30       	cpi	r24, 0x02	; 2
     bfe:	08 f4       	brcc	.+2      	; 0xc02 <__fpcmp_parts_f+0x16>
     c00:	43 c0       	rjmp	.+134    	; 0xc88 <__fpcmp_parts_f+0x9c>
     c02:	94 30       	cpi	r25, 0x04	; 4
     c04:	51 f4       	brne	.+20     	; 0xc1a <__fpcmp_parts_f+0x2e>
     c06:	11 96       	adiw	r26, 0x01	; 1
     c08:	1c 91       	ld	r17, X
     c0a:	84 30       	cpi	r24, 0x04	; 4
     c0c:	99 f5       	brne	.+102    	; 0xc74 <__fpcmp_parts_f+0x88>
     c0e:	81 81       	ldd	r24, Z+1	; 0x01
     c10:	68 2f       	mov	r22, r24
     c12:	70 e0       	ldi	r23, 0x00	; 0
     c14:	61 1b       	sub	r22, r17
     c16:	71 09       	sbc	r23, r1
     c18:	3f c0       	rjmp	.+126    	; 0xc98 <__fpcmp_parts_f+0xac>
     c1a:	84 30       	cpi	r24, 0x04	; 4
     c1c:	21 f0       	breq	.+8      	; 0xc26 <__fpcmp_parts_f+0x3a>
     c1e:	92 30       	cpi	r25, 0x02	; 2
     c20:	31 f4       	brne	.+12     	; 0xc2e <__fpcmp_parts_f+0x42>
     c22:	82 30       	cpi	r24, 0x02	; 2
     c24:	b9 f1       	breq	.+110    	; 0xc94 <__fpcmp_parts_f+0xa8>
     c26:	81 81       	ldd	r24, Z+1	; 0x01
     c28:	88 23       	and	r24, r24
     c2a:	89 f1       	breq	.+98     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c2c:	2d c0       	rjmp	.+90     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c2e:	11 96       	adiw	r26, 0x01	; 1
     c30:	1c 91       	ld	r17, X
     c32:	11 97       	sbiw	r26, 0x01	; 1
     c34:	82 30       	cpi	r24, 0x02	; 2
     c36:	f1 f0       	breq	.+60     	; 0xc74 <__fpcmp_parts_f+0x88>
     c38:	81 81       	ldd	r24, Z+1	; 0x01
     c3a:	18 17       	cp	r17, r24
     c3c:	d9 f4       	brne	.+54     	; 0xc74 <__fpcmp_parts_f+0x88>
     c3e:	12 96       	adiw	r26, 0x02	; 2
     c40:	2d 91       	ld	r18, X+
     c42:	3c 91       	ld	r19, X
     c44:	13 97       	sbiw	r26, 0x03	; 3
     c46:	82 81       	ldd	r24, Z+2	; 0x02
     c48:	93 81       	ldd	r25, Z+3	; 0x03
     c4a:	82 17       	cp	r24, r18
     c4c:	93 07       	cpc	r25, r19
     c4e:	94 f0       	brlt	.+36     	; 0xc74 <__fpcmp_parts_f+0x88>
     c50:	28 17       	cp	r18, r24
     c52:	39 07       	cpc	r19, r25
     c54:	bc f0       	brlt	.+46     	; 0xc84 <__fpcmp_parts_f+0x98>
     c56:	14 96       	adiw	r26, 0x04	; 4
     c58:	8d 91       	ld	r24, X+
     c5a:	9d 91       	ld	r25, X+
     c5c:	0d 90       	ld	r0, X+
     c5e:	bc 91       	ld	r27, X
     c60:	a0 2d       	mov	r26, r0
     c62:	24 81       	ldd	r18, Z+4	; 0x04
     c64:	35 81       	ldd	r19, Z+5	; 0x05
     c66:	46 81       	ldd	r20, Z+6	; 0x06
     c68:	57 81       	ldd	r21, Z+7	; 0x07
     c6a:	28 17       	cp	r18, r24
     c6c:	39 07       	cpc	r19, r25
     c6e:	4a 07       	cpc	r20, r26
     c70:	5b 07       	cpc	r21, r27
     c72:	18 f4       	brcc	.+6      	; 0xc7a <__fpcmp_parts_f+0x8e>
     c74:	11 23       	and	r17, r17
     c76:	41 f0       	breq	.+16     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c78:	0a c0       	rjmp	.+20     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c7a:	82 17       	cp	r24, r18
     c7c:	93 07       	cpc	r25, r19
     c7e:	a4 07       	cpc	r26, r20
     c80:	b5 07       	cpc	r27, r21
     c82:	40 f4       	brcc	.+16     	; 0xc94 <__fpcmp_parts_f+0xa8>
     c84:	11 23       	and	r17, r17
     c86:	19 f0       	breq	.+6      	; 0xc8e <__fpcmp_parts_f+0xa2>
     c88:	61 e0       	ldi	r22, 0x01	; 1
     c8a:	70 e0       	ldi	r23, 0x00	; 0
     c8c:	05 c0       	rjmp	.+10     	; 0xc98 <__fpcmp_parts_f+0xac>
     c8e:	6f ef       	ldi	r22, 0xFF	; 255
     c90:	7f ef       	ldi	r23, 0xFF	; 255
     c92:	02 c0       	rjmp	.+4      	; 0xc98 <__fpcmp_parts_f+0xac>
     c94:	60 e0       	ldi	r22, 0x00	; 0
     c96:	70 e0       	ldi	r23, 0x00	; 0
     c98:	cb 01       	movw	r24, r22
     c9a:	1f 91       	pop	r17
     c9c:	08 95       	ret

00000c9e <MADC_voidInit>:
#include "../Include/MCAL/ADC/ADC_Private.h"
#include "../Include/MCAL/ADC/ADC_Configurations.h"


void MADC_voidInit()
{
     c9e:	df 93       	push	r29
     ca0:	cf 93       	push	r28
     ca2:	cd b7       	in	r28, 0x3d	; 61
     ca4:	de b7       	in	r29, 0x3e	; 62
    //reference selection
    ADMUX&=~(0b11<<REFS0);
     ca6:	a7 e2       	ldi	r26, 0x27	; 39
     ca8:	b0 e0       	ldi	r27, 0x00	; 0
     caa:	e7 e2       	ldi	r30, 0x27	; 39
     cac:	f0 e0       	ldi	r31, 0x00	; 0
     cae:	80 81       	ld	r24, Z
     cb0:	8f 73       	andi	r24, 0x3F	; 63
     cb2:	8c 93       	st	X, r24
    ADMUX|=(REF_VOLTAGE<<REFS0);
     cb4:	a7 e2       	ldi	r26, 0x27	; 39
     cb6:	b0 e0       	ldi	r27, 0x00	; 0
     cb8:	e7 e2       	ldi	r30, 0x27	; 39
     cba:	f0 e0       	ldi	r31, 0x00	; 0
     cbc:	80 81       	ld	r24, Z
     cbe:	80 64       	ori	r24, 0x40	; 64
     cc0:	8c 93       	st	X, r24

    //left or right adjust
    #if ADC_LEFT_ADJUST==TRUE
    SET_BIT(ADMUX,ADLAR);
    #else
    CLR_BIT(ADMUX,ADLAR);
     cc2:	a7 e2       	ldi	r26, 0x27	; 39
     cc4:	b0 e0       	ldi	r27, 0x00	; 0
     cc6:	e7 e2       	ldi	r30, 0x27	; 39
     cc8:	f0 e0       	ldi	r31, 0x00	; 0
     cca:	80 81       	ld	r24, Z
     ccc:	8f 7d       	andi	r24, 0xDF	; 223
     cce:	8c 93       	st	X, r24
    #endif

    
    //Making ADC enable
    SET_BIT(ADCSRA,ADEN);
     cd0:	a6 e2       	ldi	r26, 0x26	; 38
     cd2:	b0 e0       	ldi	r27, 0x00	; 0
     cd4:	e6 e2       	ldi	r30, 0x26	; 38
     cd6:	f0 e0       	ldi	r31, 0x00	; 0
     cd8:	80 81       	ld	r24, Z
     cda:	80 68       	ori	r24, 0x80	; 128
     cdc:	8c 93       	st	X, r24
    
    //auto triggering
    #if AUTO_TRIGGERING == TRUE
    SET_BIT(ADCSRA,ADATE);
    #else
    CLR_BIT(ADCSRA,ADATE);
     cde:	a6 e2       	ldi	r26, 0x26	; 38
     ce0:	b0 e0       	ldi	r27, 0x00	; 0
     ce2:	e6 e2       	ldi	r30, 0x26	; 38
     ce4:	f0 e0       	ldi	r31, 0x00	; 0
     ce6:	80 81       	ld	r24, Z
     ce8:	8f 7d       	andi	r24, 0xDF	; 223
     cea:	8c 93       	st	X, r24
    
    //interrupt enable
    #if ADC_INTERRUPT == TRUE
    SET_BIT(ADCSRA,ADIE);
    #else
    CLR_BIT(ADCSRA,ADIE);
     cec:	a6 e2       	ldi	r26, 0x26	; 38
     cee:	b0 e0       	ldi	r27, 0x00	; 0
     cf0:	e6 e2       	ldi	r30, 0x26	; 38
     cf2:	f0 e0       	ldi	r31, 0x00	; 0
     cf4:	80 81       	ld	r24, Z
     cf6:	87 7f       	andi	r24, 0xF7	; 247
     cf8:	8c 93       	st	X, r24
    #endif

    //prescaler division factor
    ADCSRA&=~(0b111<<ADPS0);
     cfa:	a6 e2       	ldi	r26, 0x26	; 38
     cfc:	b0 e0       	ldi	r27, 0x00	; 0
     cfe:	e6 e2       	ldi	r30, 0x26	; 38
     d00:	f0 e0       	ldi	r31, 0x00	; 0
     d02:	80 81       	ld	r24, Z
     d04:	88 7f       	andi	r24, 0xF8	; 248
     d06:	8c 93       	st	X, r24
    ADCSRA|=(ADC_PRESCALER<<ADPS0);
     d08:	a6 e2       	ldi	r26, 0x26	; 38
     d0a:	b0 e0       	ldi	r27, 0x00	; 0
     d0c:	e6 e2       	ldi	r30, 0x26	; 38
     d0e:	f0 e0       	ldi	r31, 0x00	; 0
     d10:	80 81       	ld	r24, Z
     d12:	86 60       	ori	r24, 0x06	; 6
     d14:	8c 93       	st	X, r24

}
     d16:	cf 91       	pop	r28
     d18:	df 91       	pop	r29
     d1a:	08 95       	ret

00000d1c <MADC_u16GetDigitalValue>:

u16 MADC_u16GetDigitalValue(u8 A_u8Channel)
{
     d1c:	df 93       	push	r29
     d1e:	cf 93       	push	r28
     d20:	00 d0       	rcall	.+0      	; 0xd22 <MADC_u16GetDigitalValue+0x6>
     d22:	0f 92       	push	r0
     d24:	cd b7       	in	r28, 0x3d	; 61
     d26:	de b7       	in	r29, 0x3e	; 62
     d28:	8b 83       	std	Y+3, r24	; 0x03

    u16 local_u16DigitalValue=0;
     d2a:	1a 82       	std	Y+2, r1	; 0x02
     d2c:	19 82       	std	Y+1, r1	; 0x01
    
    if (A_u8Channel <=32)
     d2e:	8b 81       	ldd	r24, Y+3	; 0x03
     d30:	81 32       	cpi	r24, 0x21	; 33
     d32:	90 f5       	brcc	.+100    	; 0xd98 <MADC_u16GetDigitalValue+0x7c>
    {
        //chosing channel
        ADMUX&=~(0b11111<< MUX0);
     d34:	a7 e2       	ldi	r26, 0x27	; 39
     d36:	b0 e0       	ldi	r27, 0x00	; 0
     d38:	e7 e2       	ldi	r30, 0x27	; 39
     d3a:	f0 e0       	ldi	r31, 0x00	; 0
     d3c:	80 81       	ld	r24, Z
     d3e:	80 7e       	andi	r24, 0xE0	; 224
     d40:	8c 93       	st	X, r24
        ADMUX|=(A_u8Channel<< MUX0);
     d42:	a7 e2       	ldi	r26, 0x27	; 39
     d44:	b0 e0       	ldi	r27, 0x00	; 0
     d46:	e7 e2       	ldi	r30, 0x27	; 39
     d48:	f0 e0       	ldi	r31, 0x00	; 0
     d4a:	90 81       	ld	r25, Z
     d4c:	8b 81       	ldd	r24, Y+3	; 0x03
     d4e:	89 2b       	or	r24, r25
     d50:	8c 93       	st	X, r24

        //starting conversion
        SET_BIT(ADCSRA,ADCS);
     d52:	a6 e2       	ldi	r26, 0x26	; 38
     d54:	b0 e0       	ldi	r27, 0x00	; 0
     d56:	e6 e2       	ldi	r30, 0x26	; 38
     d58:	f0 e0       	ldi	r31, 0x00	; 0
     d5a:	80 81       	ld	r24, Z
     d5c:	80 64       	ori	r24, 0x40	; 64
     d5e:	8c 93       	st	X, r24

        //polling on flag until the conversion is finished
        while(GET_BIT(ADCSRA,ADIF)==0);
     d60:	e6 e2       	ldi	r30, 0x26	; 38
     d62:	f0 e0       	ldi	r31, 0x00	; 0
     d64:	80 81       	ld	r24, Z
     d66:	88 2f       	mov	r24, r24
     d68:	90 e0       	ldi	r25, 0x00	; 0
     d6a:	9c 01       	movw	r18, r24
     d6c:	2f 7e       	andi	r18, 0xEF	; 239
     d6e:	e6 e2       	ldi	r30, 0x26	; 38
     d70:	f0 e0       	ldi	r31, 0x00	; 0
     d72:	80 81       	ld	r24, Z
     d74:	88 2f       	mov	r24, r24
     d76:	90 e0       	ldi	r25, 0x00	; 0
     d78:	28 17       	cp	r18, r24
     d7a:	39 07       	cpc	r19, r25
     d7c:	89 f3       	breq	.-30     	; 0xd60 <MADC_u16GetDigitalValue+0x44>
        //writing one to clear the flag
        SET_BIT(ADCSRA,ADIF);
     d7e:	a6 e2       	ldi	r26, 0x26	; 38
     d80:	b0 e0       	ldi	r27, 0x00	; 0
     d82:	e6 e2       	ldi	r30, 0x26	; 38
     d84:	f0 e0       	ldi	r31, 0x00	; 0
     d86:	80 81       	ld	r24, Z
     d88:	80 61       	ori	r24, 0x10	; 16
     d8a:	8c 93       	st	X, r24
        //Read value
        local_u16DigitalValue=ADCLH;
     d8c:	e4 e2       	ldi	r30, 0x24	; 36
     d8e:	f0 e0       	ldi	r31, 0x00	; 0
     d90:	80 81       	ld	r24, Z
     d92:	91 81       	ldd	r25, Z+1	; 0x01
     d94:	9a 83       	std	Y+2, r25	; 0x02
     d96:	89 83       	std	Y+1, r24	; 0x01
    }

    return local_u16DigitalValue;
     d98:	89 81       	ldd	r24, Y+1	; 0x01
     d9a:	9a 81       	ldd	r25, Y+2	; 0x02
     d9c:	0f 90       	pop	r0
     d9e:	0f 90       	pop	r0
     da0:	0f 90       	pop	r0
     da2:	cf 91       	pop	r28
     da4:	df 91       	pop	r29
     da6:	08 95       	ret

00000da8 <HDCMOTOR_voidHBridge>:

#include <util/delay.h>

//H-bridge using 4npn transistors 2N2222
void HDCMOTOR_voidHBridge()
{
     da8:	df 93       	push	r29
     daa:	cf 93       	push	r28
     dac:	cd b7       	in	r28, 0x3d	; 61
     dae:	de b7       	in	r29, 0x3e	; 62
     db0:	6c 97       	sbiw	r28, 0x1c	; 28
     db2:	0f b6       	in	r0, 0x3f	; 63
     db4:	f8 94       	cli
     db6:	de bf       	out	0x3e, r29	; 62
     db8:	0f be       	out	0x3f, r0	; 63
     dba:	cd bf       	out	0x3d, r28	; 61
    MDIO_voidSetPinValue(DC_MOTOR_PORT,DC_MOTOR_PIN1,PIN_HIGH);
     dbc:	80 e0       	ldi	r24, 0x00	; 0
     dbe:	60 e0       	ldi	r22, 0x00	; 0
     dc0:	41 e0       	ldi	r20, 0x01	; 1
     dc2:	0e 94 b6 08 	call	0x116c	; 0x116c <MDIO_voidSetPinValue>
    MDIO_voidSetPinValue(DC_MOTOR_PORT,DC_MOTOR_PIN2,PIN_LOW);
     dc6:	80 e0       	ldi	r24, 0x00	; 0
     dc8:	61 e0       	ldi	r22, 0x01	; 1
     dca:	40 e0       	ldi	r20, 0x00	; 0
     dcc:	0e 94 b6 08 	call	0x116c	; 0x116c <MDIO_voidSetPinValue>
     dd0:	80 e0       	ldi	r24, 0x00	; 0
     dd2:	90 e0       	ldi	r25, 0x00	; 0
     dd4:	aa e7       	ldi	r26, 0x7A	; 122
     dd6:	b4 e4       	ldi	r27, 0x44	; 68
     dd8:	89 8f       	std	Y+25, r24	; 0x19
     dda:	9a 8f       	std	Y+26, r25	; 0x1a
     ddc:	ab 8f       	std	Y+27, r26	; 0x1b
     dde:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     de0:	69 8d       	ldd	r22, Y+25	; 0x19
     de2:	7a 8d       	ldd	r23, Y+26	; 0x1a
     de4:	8b 8d       	ldd	r24, Y+27	; 0x1b
     de6:	9c 8d       	ldd	r25, Y+28	; 0x1c
     de8:	20 e0       	ldi	r18, 0x00	; 0
     dea:	30 e0       	ldi	r19, 0x00	; 0
     dec:	4a ef       	ldi	r20, 0xFA	; 250
     dee:	54 e4       	ldi	r21, 0x44	; 68
     df0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     df4:	dc 01       	movw	r26, r24
     df6:	cb 01       	movw	r24, r22
     df8:	8d 8b       	std	Y+21, r24	; 0x15
     dfa:	9e 8b       	std	Y+22, r25	; 0x16
     dfc:	af 8b       	std	Y+23, r26	; 0x17
     dfe:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     e00:	6d 89       	ldd	r22, Y+21	; 0x15
     e02:	7e 89       	ldd	r23, Y+22	; 0x16
     e04:	8f 89       	ldd	r24, Y+23	; 0x17
     e06:	98 8d       	ldd	r25, Y+24	; 0x18
     e08:	20 e0       	ldi	r18, 0x00	; 0
     e0a:	30 e0       	ldi	r19, 0x00	; 0
     e0c:	40 e8       	ldi	r20, 0x80	; 128
     e0e:	5f e3       	ldi	r21, 0x3F	; 63
     e10:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
     e14:	88 23       	and	r24, r24
     e16:	2c f4       	brge	.+10     	; 0xe22 <HDCMOTOR_voidHBridge+0x7a>
		__ticks = 1;
     e18:	81 e0       	ldi	r24, 0x01	; 1
     e1a:	90 e0       	ldi	r25, 0x00	; 0
     e1c:	9c 8b       	std	Y+20, r25	; 0x14
     e1e:	8b 8b       	std	Y+19, r24	; 0x13
     e20:	3f c0       	rjmp	.+126    	; 0xea0 <HDCMOTOR_voidHBridge+0xf8>
	else if (__tmp > 65535)
     e22:	6d 89       	ldd	r22, Y+21	; 0x15
     e24:	7e 89       	ldd	r23, Y+22	; 0x16
     e26:	8f 89       	ldd	r24, Y+23	; 0x17
     e28:	98 8d       	ldd	r25, Y+24	; 0x18
     e2a:	20 e0       	ldi	r18, 0x00	; 0
     e2c:	3f ef       	ldi	r19, 0xFF	; 255
     e2e:	4f e7       	ldi	r20, 0x7F	; 127
     e30:	57 e4       	ldi	r21, 0x47	; 71
     e32:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
     e36:	18 16       	cp	r1, r24
     e38:	4c f5       	brge	.+82     	; 0xe8c <HDCMOTOR_voidHBridge+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     e3a:	69 8d       	ldd	r22, Y+25	; 0x19
     e3c:	7a 8d       	ldd	r23, Y+26	; 0x1a
     e3e:	8b 8d       	ldd	r24, Y+27	; 0x1b
     e40:	9c 8d       	ldd	r25, Y+28	; 0x1c
     e42:	20 e0       	ldi	r18, 0x00	; 0
     e44:	30 e0       	ldi	r19, 0x00	; 0
     e46:	40 e2       	ldi	r20, 0x20	; 32
     e48:	51 e4       	ldi	r21, 0x41	; 65
     e4a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e4e:	dc 01       	movw	r26, r24
     e50:	cb 01       	movw	r24, r22
     e52:	bc 01       	movw	r22, r24
     e54:	cd 01       	movw	r24, r26
     e56:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e5a:	dc 01       	movw	r26, r24
     e5c:	cb 01       	movw	r24, r22
     e5e:	9c 8b       	std	Y+20, r25	; 0x14
     e60:	8b 8b       	std	Y+19, r24	; 0x13
     e62:	0f c0       	rjmp	.+30     	; 0xe82 <HDCMOTOR_voidHBridge+0xda>
     e64:	88 ec       	ldi	r24, 0xC8	; 200
     e66:	90 e0       	ldi	r25, 0x00	; 0
     e68:	9a 8b       	std	Y+18, r25	; 0x12
     e6a:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     e6c:	89 89       	ldd	r24, Y+17	; 0x11
     e6e:	9a 89       	ldd	r25, Y+18	; 0x12
     e70:	01 97       	sbiw	r24, 0x01	; 1
     e72:	f1 f7       	brne	.-4      	; 0xe70 <HDCMOTOR_voidHBridge+0xc8>
     e74:	9a 8b       	std	Y+18, r25	; 0x12
     e76:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e78:	8b 89       	ldd	r24, Y+19	; 0x13
     e7a:	9c 89       	ldd	r25, Y+20	; 0x14
     e7c:	01 97       	sbiw	r24, 0x01	; 1
     e7e:	9c 8b       	std	Y+20, r25	; 0x14
     e80:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e82:	8b 89       	ldd	r24, Y+19	; 0x13
     e84:	9c 89       	ldd	r25, Y+20	; 0x14
     e86:	00 97       	sbiw	r24, 0x00	; 0
     e88:	69 f7       	brne	.-38     	; 0xe64 <HDCMOTOR_voidHBridge+0xbc>
     e8a:	14 c0       	rjmp	.+40     	; 0xeb4 <HDCMOTOR_voidHBridge+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     e8c:	6d 89       	ldd	r22, Y+21	; 0x15
     e8e:	7e 89       	ldd	r23, Y+22	; 0x16
     e90:	8f 89       	ldd	r24, Y+23	; 0x17
     e92:	98 8d       	ldd	r25, Y+24	; 0x18
     e94:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e98:	dc 01       	movw	r26, r24
     e9a:	cb 01       	movw	r24, r22
     e9c:	9c 8b       	std	Y+20, r25	; 0x14
     e9e:	8b 8b       	std	Y+19, r24	; 0x13
     ea0:	8b 89       	ldd	r24, Y+19	; 0x13
     ea2:	9c 89       	ldd	r25, Y+20	; 0x14
     ea4:	98 8b       	std	Y+16, r25	; 0x10
     ea6:	8f 87       	std	Y+15, r24	; 0x0f
     ea8:	8f 85       	ldd	r24, Y+15	; 0x0f
     eaa:	98 89       	ldd	r25, Y+16	; 0x10
     eac:	01 97       	sbiw	r24, 0x01	; 1
     eae:	f1 f7       	brne	.-4      	; 0xeac <HDCMOTOR_voidHBridge+0x104>
     eb0:	98 8b       	std	Y+16, r25	; 0x10
     eb2:	8f 87       	std	Y+15, r24	; 0x0f
    _delay_ms(INVERSE_MOTOR_DELAY);
    MDIO_voidSetPinValue(DC_MOTOR_PORT,DC_MOTOR_PIN1,PIN_LOW);
     eb4:	80 e0       	ldi	r24, 0x00	; 0
     eb6:	60 e0       	ldi	r22, 0x00	; 0
     eb8:	40 e0       	ldi	r20, 0x00	; 0
     eba:	0e 94 b6 08 	call	0x116c	; 0x116c <MDIO_voidSetPinValue>
    MDIO_voidSetPinValue(DC_MOTOR_PORT,DC_MOTOR_PIN2,PIN_HIGH);
     ebe:	80 e0       	ldi	r24, 0x00	; 0
     ec0:	61 e0       	ldi	r22, 0x01	; 1
     ec2:	41 e0       	ldi	r20, 0x01	; 1
     ec4:	0e 94 b6 08 	call	0x116c	; 0x116c <MDIO_voidSetPinValue>
     ec8:	80 e0       	ldi	r24, 0x00	; 0
     eca:	90 e0       	ldi	r25, 0x00	; 0
     ecc:	aa e7       	ldi	r26, 0x7A	; 122
     ece:	b4 e4       	ldi	r27, 0x44	; 68
     ed0:	8b 87       	std	Y+11, r24	; 0x0b
     ed2:	9c 87       	std	Y+12, r25	; 0x0c
     ed4:	ad 87       	std	Y+13, r26	; 0x0d
     ed6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     ed8:	6b 85       	ldd	r22, Y+11	; 0x0b
     eda:	7c 85       	ldd	r23, Y+12	; 0x0c
     edc:	8d 85       	ldd	r24, Y+13	; 0x0d
     ede:	9e 85       	ldd	r25, Y+14	; 0x0e
     ee0:	20 e0       	ldi	r18, 0x00	; 0
     ee2:	30 e0       	ldi	r19, 0x00	; 0
     ee4:	4a ef       	ldi	r20, 0xFA	; 250
     ee6:	54 e4       	ldi	r21, 0x44	; 68
     ee8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     eec:	dc 01       	movw	r26, r24
     eee:	cb 01       	movw	r24, r22
     ef0:	8f 83       	std	Y+7, r24	; 0x07
     ef2:	98 87       	std	Y+8, r25	; 0x08
     ef4:	a9 87       	std	Y+9, r26	; 0x09
     ef6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     ef8:	6f 81       	ldd	r22, Y+7	; 0x07
     efa:	78 85       	ldd	r23, Y+8	; 0x08
     efc:	89 85       	ldd	r24, Y+9	; 0x09
     efe:	9a 85       	ldd	r25, Y+10	; 0x0a
     f00:	20 e0       	ldi	r18, 0x00	; 0
     f02:	30 e0       	ldi	r19, 0x00	; 0
     f04:	40 e8       	ldi	r20, 0x80	; 128
     f06:	5f e3       	ldi	r21, 0x3F	; 63
     f08:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
     f0c:	88 23       	and	r24, r24
     f0e:	2c f4       	brge	.+10     	; 0xf1a <HDCMOTOR_voidHBridge+0x172>
		__ticks = 1;
     f10:	81 e0       	ldi	r24, 0x01	; 1
     f12:	90 e0       	ldi	r25, 0x00	; 0
     f14:	9e 83       	std	Y+6, r25	; 0x06
     f16:	8d 83       	std	Y+5, r24	; 0x05
     f18:	3f c0       	rjmp	.+126    	; 0xf98 <HDCMOTOR_voidHBridge+0x1f0>
	else if (__tmp > 65535)
     f1a:	6f 81       	ldd	r22, Y+7	; 0x07
     f1c:	78 85       	ldd	r23, Y+8	; 0x08
     f1e:	89 85       	ldd	r24, Y+9	; 0x09
     f20:	9a 85       	ldd	r25, Y+10	; 0x0a
     f22:	20 e0       	ldi	r18, 0x00	; 0
     f24:	3f ef       	ldi	r19, 0xFF	; 255
     f26:	4f e7       	ldi	r20, 0x7F	; 127
     f28:	57 e4       	ldi	r21, 0x47	; 71
     f2a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
     f2e:	18 16       	cp	r1, r24
     f30:	4c f5       	brge	.+82     	; 0xf84 <HDCMOTOR_voidHBridge+0x1dc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     f32:	6b 85       	ldd	r22, Y+11	; 0x0b
     f34:	7c 85       	ldd	r23, Y+12	; 0x0c
     f36:	8d 85       	ldd	r24, Y+13	; 0x0d
     f38:	9e 85       	ldd	r25, Y+14	; 0x0e
     f3a:	20 e0       	ldi	r18, 0x00	; 0
     f3c:	30 e0       	ldi	r19, 0x00	; 0
     f3e:	40 e2       	ldi	r20, 0x20	; 32
     f40:	51 e4       	ldi	r21, 0x41	; 65
     f42:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f46:	dc 01       	movw	r26, r24
     f48:	cb 01       	movw	r24, r22
     f4a:	bc 01       	movw	r22, r24
     f4c:	cd 01       	movw	r24, r26
     f4e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f52:	dc 01       	movw	r26, r24
     f54:	cb 01       	movw	r24, r22
     f56:	9e 83       	std	Y+6, r25	; 0x06
     f58:	8d 83       	std	Y+5, r24	; 0x05
     f5a:	0f c0       	rjmp	.+30     	; 0xf7a <HDCMOTOR_voidHBridge+0x1d2>
     f5c:	88 ec       	ldi	r24, 0xC8	; 200
     f5e:	90 e0       	ldi	r25, 0x00	; 0
     f60:	9c 83       	std	Y+4, r25	; 0x04
     f62:	8b 83       	std	Y+3, r24	; 0x03
     f64:	8b 81       	ldd	r24, Y+3	; 0x03
     f66:	9c 81       	ldd	r25, Y+4	; 0x04
     f68:	01 97       	sbiw	r24, 0x01	; 1
     f6a:	f1 f7       	brne	.-4      	; 0xf68 <HDCMOTOR_voidHBridge+0x1c0>
     f6c:	9c 83       	std	Y+4, r25	; 0x04
     f6e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f70:	8d 81       	ldd	r24, Y+5	; 0x05
     f72:	9e 81       	ldd	r25, Y+6	; 0x06
     f74:	01 97       	sbiw	r24, 0x01	; 1
     f76:	9e 83       	std	Y+6, r25	; 0x06
     f78:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f7a:	8d 81       	ldd	r24, Y+5	; 0x05
     f7c:	9e 81       	ldd	r25, Y+6	; 0x06
     f7e:	00 97       	sbiw	r24, 0x00	; 0
     f80:	69 f7       	brne	.-38     	; 0xf5c <HDCMOTOR_voidHBridge+0x1b4>
     f82:	14 c0       	rjmp	.+40     	; 0xfac <HDCMOTOR_voidHBridge+0x204>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     f84:	6f 81       	ldd	r22, Y+7	; 0x07
     f86:	78 85       	ldd	r23, Y+8	; 0x08
     f88:	89 85       	ldd	r24, Y+9	; 0x09
     f8a:	9a 85       	ldd	r25, Y+10	; 0x0a
     f8c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f90:	dc 01       	movw	r26, r24
     f92:	cb 01       	movw	r24, r22
     f94:	9e 83       	std	Y+6, r25	; 0x06
     f96:	8d 83       	std	Y+5, r24	; 0x05
     f98:	8d 81       	ldd	r24, Y+5	; 0x05
     f9a:	9e 81       	ldd	r25, Y+6	; 0x06
     f9c:	9a 83       	std	Y+2, r25	; 0x02
     f9e:	89 83       	std	Y+1, r24	; 0x01
     fa0:	89 81       	ldd	r24, Y+1	; 0x01
     fa2:	9a 81       	ldd	r25, Y+2	; 0x02
     fa4:	01 97       	sbiw	r24, 0x01	; 1
     fa6:	f1 f7       	brne	.-4      	; 0xfa4 <HDCMOTOR_voidHBridge+0x1fc>
     fa8:	9a 83       	std	Y+2, r25	; 0x02
     faa:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(INVERSE_MOTOR_DELAY);
    
}
     fac:	6c 96       	adiw	r28, 0x1c	; 28
     fae:	0f b6       	in	r0, 0x3f	; 63
     fb0:	f8 94       	cli
     fb2:	de bf       	out	0x3e, r29	; 62
     fb4:	0f be       	out	0x3f, r0	; 63
     fb6:	cd bf       	out	0x3d, r28	; 61
     fb8:	cf 91       	pop	r28
     fba:	df 91       	pop	r29
     fbc:	08 95       	ret

00000fbe <MDIO_voidInit>:
#include "../Include/MCAL/DIO/DIO_Private.h"
#include "../Include/MCAL/DIO/DIO_Configuration.h"
#include "../Include/MCAL/DIO/DIO_Interface.h"

void MDIO_voidInit()
{
     fbe:	df 93       	push	r29
     fc0:	cf 93       	push	r28
     fc2:	cd b7       	in	r28, 0x3d	; 61
     fc4:	de b7       	in	r29, 0x3e	; 62
    PORTA_REG=CONC_BIT(PORTA_PIN7_VALUE,PORTA_PIN6_VALUE,PORTA_PIN5_VALUE,PORTA_PIN4_VALUE,PORTA_PIN3_VALUE,PORTA_PIN2_VALUE,PORTA_PIN1_VALUE,PORTA_PIN0_VALUE);
     fc6:	eb e3       	ldi	r30, 0x3B	; 59
     fc8:	f0 e0       	ldi	r31, 0x00	; 0
     fca:	10 82       	st	Z, r1
    PORTB_REG=CONC_BIT(PORTB_PIN7_VALUE,PORTB_PIN6_VALUE,PORTB_PIN5_VALUE,PORTB_PIN4_VALUE,PORTB_PIN3_VALUE,PORTB_PIN2_VALUE,PORTB_PIN1_VALUE,PORTB_PIN0_VALUE);
     fcc:	e8 e3       	ldi	r30, 0x38	; 56
     fce:	f0 e0       	ldi	r31, 0x00	; 0
     fd0:	10 82       	st	Z, r1
    PORTC_REG=CONC_BIT(PORTC_PIN7_VALUE,PORTC_PIN6_VALUE,PORTC_PIN5_VALUE,PORTC_PIN4_VALUE,PORTC_PIN3_VALUE,PORTC_PIN2_VALUE,PORTC_PIN1_VALUE,PORTC_PIN0_VALUE);
     fd2:	e5 e3       	ldi	r30, 0x35	; 53
     fd4:	f0 e0       	ldi	r31, 0x00	; 0
     fd6:	10 82       	st	Z, r1
    PORTD_REG=CONC_BIT(PORTD_PIN7_VALUE,PORTD_PIN6_VALUE,PORTD_PIN5_VALUE,PORTD_PIN4_VALUE,PORTD_PIN3_VALUE,PORTD_PIN2_VALUE,PORTD_PIN1_VALUE,PORTD_PIN0_VALUE);
     fd8:	e2 e3       	ldi	r30, 0x32	; 50
     fda:	f0 e0       	ldi	r31, 0x00	; 0
     fdc:	10 82       	st	Z, r1
    
    DDRA_REG=CONC_BIT(DDRA_PIN7_DIRECTION,DDRA_PIN6_DIRECTION,DDRA_PIN5_DIRECTION,DDRA_PIN4_DIRECTION,DDRA_PIN3_DIRECTION,DDRA_PIN2_DIRECTION,DDRA_PIN1_DIRECTION,DDRA_PIN0_DIRECTION);
     fde:	ea e3       	ldi	r30, 0x3A	; 58
     fe0:	f0 e0       	ldi	r31, 0x00	; 0
     fe2:	8e ef       	ldi	r24, 0xFE	; 254
     fe4:	80 83       	st	Z, r24
    DDRB_REG=CONC_BIT(DDRB_PIN7_DIRECTION,DDRB_PIN6_DIRECTION,DDRB_PIN5_DIRECTION,DDRB_PIN4_DIRECTION,DDRB_PIN3_DIRECTION,DDRB_PIN2_DIRECTION,DDRB_PIN1_DIRECTION,DDRB_PIN0_DIRECTION);
     fe6:	e7 e3       	ldi	r30, 0x37	; 55
     fe8:	f0 e0       	ldi	r31, 0x00	; 0
     fea:	8f ef       	ldi	r24, 0xFF	; 255
     fec:	80 83       	st	Z, r24
    DDRC_REG=CONC_BIT(DDRC_PIN7_DIRECTION,DDRC_PIN6_DIRECTION,DDRC_PIN5_DIRECTION,DDRC_PIN4_DIRECTION,DDRC_PIN3_DIRECTION,DDRC_PIN2_DIRECTION,DDRC_PIN1_DIRECTION,DDRC_PIN0_DIRECTION);
     fee:	e4 e3       	ldi	r30, 0x34	; 52
     ff0:	f0 e0       	ldi	r31, 0x00	; 0
     ff2:	8f ef       	ldi	r24, 0xFF	; 255
     ff4:	80 83       	st	Z, r24
    DDRD_REG=CONC_BIT(DDRD_PIN7_DIRECTION,DDRD_PIN6_DIRECTION,DDRD_PIN5_DIRECTION,DDRD_PIN4_DIRECTION,DDRD_PIN3_DIRECTION,DDRD_PIN2_DIRECTION,DDRD_PIN1_DIRECTION,DDRD_PIN0_DIRECTION);
     ff6:	e1 e3       	ldi	r30, 0x31	; 49
     ff8:	f0 e0       	ldi	r31, 0x00	; 0
     ffa:	8f ef       	ldi	r24, 0xFF	; 255
     ffc:	80 83       	st	Z, r24

}
     ffe:	cf 91       	pop	r28
    1000:	df 91       	pop	r29
    1002:	08 95       	ret

00001004 <MDIO_u8GetPinValue>:

u8 MDIO_u8GetPinValue(u8 A_u8Port,u8 A_u8Pin)
{
    1004:	df 93       	push	r29
    1006:	cf 93       	push	r28
    1008:	00 d0       	rcall	.+0      	; 0x100a <MDIO_u8GetPinValue+0x6>
    100a:	00 d0       	rcall	.+0      	; 0x100c <MDIO_u8GetPinValue+0x8>
    100c:	0f 92       	push	r0
    100e:	cd b7       	in	r28, 0x3d	; 61
    1010:	de b7       	in	r29, 0x3e	; 62
    1012:	8a 83       	std	Y+2, r24	; 0x02
    1014:	6b 83       	std	Y+3, r22	; 0x03
    u8 local_u8Value;
    switch(A_u8Port)
    1016:	8a 81       	ldd	r24, Y+2	; 0x02
    1018:	28 2f       	mov	r18, r24
    101a:	30 e0       	ldi	r19, 0x00	; 0
    101c:	3d 83       	std	Y+5, r19	; 0x05
    101e:	2c 83       	std	Y+4, r18	; 0x04
    1020:	8c 81       	ldd	r24, Y+4	; 0x04
    1022:	9d 81       	ldd	r25, Y+5	; 0x05
    1024:	81 30       	cpi	r24, 0x01	; 1
    1026:	91 05       	cpc	r25, r1
    1028:	c1 f1       	breq	.+112    	; 0x109a <MDIO_u8GetPinValue+0x96>
    102a:	2c 81       	ldd	r18, Y+4	; 0x04
    102c:	3d 81       	ldd	r19, Y+5	; 0x05
    102e:	22 30       	cpi	r18, 0x02	; 2
    1030:	31 05       	cpc	r19, r1
    1032:	2c f4       	brge	.+10     	; 0x103e <MDIO_u8GetPinValue+0x3a>
    1034:	8c 81       	ldd	r24, Y+4	; 0x04
    1036:	9d 81       	ldd	r25, Y+5	; 0x05
    1038:	00 97       	sbiw	r24, 0x00	; 0
    103a:	71 f0       	breq	.+28     	; 0x1058 <MDIO_u8GetPinValue+0x54>
    103c:	8e c0       	rjmp	.+284    	; 0x115a <MDIO_u8GetPinValue+0x156>
    103e:	2c 81       	ldd	r18, Y+4	; 0x04
    1040:	3d 81       	ldd	r19, Y+5	; 0x05
    1042:	22 30       	cpi	r18, 0x02	; 2
    1044:	31 05       	cpc	r19, r1
    1046:	09 f4       	brne	.+2      	; 0x104a <MDIO_u8GetPinValue+0x46>
    1048:	49 c0       	rjmp	.+146    	; 0x10dc <MDIO_u8GetPinValue+0xd8>
    104a:	8c 81       	ldd	r24, Y+4	; 0x04
    104c:	9d 81       	ldd	r25, Y+5	; 0x05
    104e:	83 30       	cpi	r24, 0x03	; 3
    1050:	91 05       	cpc	r25, r1
    1052:	09 f4       	brne	.+2      	; 0x1056 <MDIO_u8GetPinValue+0x52>
    1054:	63 c0       	rjmp	.+198    	; 0x111c <MDIO_u8GetPinValue+0x118>
    1056:	81 c0       	rjmp	.+258    	; 0x115a <MDIO_u8GetPinValue+0x156>
    {
        case PORTA: local_u8Value=GET_BIT(PINA_REG,A_u8Pin);
    1058:	e9 e3       	ldi	r30, 0x39	; 57
    105a:	f0 e0       	ldi	r31, 0x00	; 0
    105c:	80 81       	ld	r24, Z
    105e:	48 2f       	mov	r20, r24
    1060:	50 e0       	ldi	r21, 0x00	; 0
    1062:	8b 81       	ldd	r24, Y+3	; 0x03
    1064:	28 2f       	mov	r18, r24
    1066:	30 e0       	ldi	r19, 0x00	; 0
    1068:	81 e0       	ldi	r24, 0x01	; 1
    106a:	90 e0       	ldi	r25, 0x00	; 0
    106c:	02 c0       	rjmp	.+4      	; 0x1072 <MDIO_u8GetPinValue+0x6e>
    106e:	88 0f       	add	r24, r24
    1070:	99 1f       	adc	r25, r25
    1072:	2a 95       	dec	r18
    1074:	e2 f7       	brpl	.-8      	; 0x106e <MDIO_u8GetPinValue+0x6a>
    1076:	80 95       	com	r24
    1078:	90 95       	com	r25
    107a:	9a 01       	movw	r18, r20
    107c:	28 23       	and	r18, r24
    107e:	39 23       	and	r19, r25
    1080:	e9 e3       	ldi	r30, 0x39	; 57
    1082:	f0 e0       	ldi	r31, 0x00	; 0
    1084:	80 81       	ld	r24, Z
    1086:	88 2f       	mov	r24, r24
    1088:	90 e0       	ldi	r25, 0x00	; 0
    108a:	19 82       	std	Y+1, r1	; 0x01
    108c:	28 17       	cp	r18, r24
    108e:	39 07       	cpc	r19, r25
    1090:	09 f4       	brne	.+2      	; 0x1094 <MDIO_u8GetPinValue+0x90>
    1092:	63 c0       	rjmp	.+198    	; 0x115a <MDIO_u8GetPinValue+0x156>
    1094:	81 e0       	ldi	r24, 0x01	; 1
    1096:	89 83       	std	Y+1, r24	; 0x01
    1098:	60 c0       	rjmp	.+192    	; 0x115a <MDIO_u8GetPinValue+0x156>
        break;
        case PORTB: local_u8Value=GET_BIT(PINB_REG,A_u8Pin);
    109a:	e6 e3       	ldi	r30, 0x36	; 54
    109c:	f0 e0       	ldi	r31, 0x00	; 0
    109e:	80 81       	ld	r24, Z
    10a0:	48 2f       	mov	r20, r24
    10a2:	50 e0       	ldi	r21, 0x00	; 0
    10a4:	8b 81       	ldd	r24, Y+3	; 0x03
    10a6:	28 2f       	mov	r18, r24
    10a8:	30 e0       	ldi	r19, 0x00	; 0
    10aa:	81 e0       	ldi	r24, 0x01	; 1
    10ac:	90 e0       	ldi	r25, 0x00	; 0
    10ae:	02 c0       	rjmp	.+4      	; 0x10b4 <MDIO_u8GetPinValue+0xb0>
    10b0:	88 0f       	add	r24, r24
    10b2:	99 1f       	adc	r25, r25
    10b4:	2a 95       	dec	r18
    10b6:	e2 f7       	brpl	.-8      	; 0x10b0 <MDIO_u8GetPinValue+0xac>
    10b8:	80 95       	com	r24
    10ba:	90 95       	com	r25
    10bc:	9a 01       	movw	r18, r20
    10be:	28 23       	and	r18, r24
    10c0:	39 23       	and	r19, r25
    10c2:	e6 e3       	ldi	r30, 0x36	; 54
    10c4:	f0 e0       	ldi	r31, 0x00	; 0
    10c6:	80 81       	ld	r24, Z
    10c8:	88 2f       	mov	r24, r24
    10ca:	90 e0       	ldi	r25, 0x00	; 0
    10cc:	19 82       	std	Y+1, r1	; 0x01
    10ce:	28 17       	cp	r18, r24
    10d0:	39 07       	cpc	r19, r25
    10d2:	09 f4       	brne	.+2      	; 0x10d6 <MDIO_u8GetPinValue+0xd2>
    10d4:	42 c0       	rjmp	.+132    	; 0x115a <MDIO_u8GetPinValue+0x156>
    10d6:	81 e0       	ldi	r24, 0x01	; 1
    10d8:	89 83       	std	Y+1, r24	; 0x01
    10da:	3f c0       	rjmp	.+126    	; 0x115a <MDIO_u8GetPinValue+0x156>
        break;
        case PORTC: local_u8Value=GET_BIT(PINC_REG,A_u8Pin);
    10dc:	e3 e3       	ldi	r30, 0x33	; 51
    10de:	f0 e0       	ldi	r31, 0x00	; 0
    10e0:	80 81       	ld	r24, Z
    10e2:	48 2f       	mov	r20, r24
    10e4:	50 e0       	ldi	r21, 0x00	; 0
    10e6:	8b 81       	ldd	r24, Y+3	; 0x03
    10e8:	28 2f       	mov	r18, r24
    10ea:	30 e0       	ldi	r19, 0x00	; 0
    10ec:	81 e0       	ldi	r24, 0x01	; 1
    10ee:	90 e0       	ldi	r25, 0x00	; 0
    10f0:	02 c0       	rjmp	.+4      	; 0x10f6 <MDIO_u8GetPinValue+0xf2>
    10f2:	88 0f       	add	r24, r24
    10f4:	99 1f       	adc	r25, r25
    10f6:	2a 95       	dec	r18
    10f8:	e2 f7       	brpl	.-8      	; 0x10f2 <MDIO_u8GetPinValue+0xee>
    10fa:	80 95       	com	r24
    10fc:	90 95       	com	r25
    10fe:	9a 01       	movw	r18, r20
    1100:	28 23       	and	r18, r24
    1102:	39 23       	and	r19, r25
    1104:	e3 e3       	ldi	r30, 0x33	; 51
    1106:	f0 e0       	ldi	r31, 0x00	; 0
    1108:	80 81       	ld	r24, Z
    110a:	88 2f       	mov	r24, r24
    110c:	90 e0       	ldi	r25, 0x00	; 0
    110e:	19 82       	std	Y+1, r1	; 0x01
    1110:	28 17       	cp	r18, r24
    1112:	39 07       	cpc	r19, r25
    1114:	11 f1       	breq	.+68     	; 0x115a <MDIO_u8GetPinValue+0x156>
    1116:	81 e0       	ldi	r24, 0x01	; 1
    1118:	89 83       	std	Y+1, r24	; 0x01
    111a:	1f c0       	rjmp	.+62     	; 0x115a <MDIO_u8GetPinValue+0x156>
        break;
        case PORTD: local_u8Value=GET_BIT(PIND_REG,A_u8Pin);
    111c:	e0 e3       	ldi	r30, 0x30	; 48
    111e:	f0 e0       	ldi	r31, 0x00	; 0
    1120:	80 81       	ld	r24, Z
    1122:	48 2f       	mov	r20, r24
    1124:	50 e0       	ldi	r21, 0x00	; 0
    1126:	8b 81       	ldd	r24, Y+3	; 0x03
    1128:	28 2f       	mov	r18, r24
    112a:	30 e0       	ldi	r19, 0x00	; 0
    112c:	81 e0       	ldi	r24, 0x01	; 1
    112e:	90 e0       	ldi	r25, 0x00	; 0
    1130:	02 c0       	rjmp	.+4      	; 0x1136 <MDIO_u8GetPinValue+0x132>
    1132:	88 0f       	add	r24, r24
    1134:	99 1f       	adc	r25, r25
    1136:	2a 95       	dec	r18
    1138:	e2 f7       	brpl	.-8      	; 0x1132 <MDIO_u8GetPinValue+0x12e>
    113a:	80 95       	com	r24
    113c:	90 95       	com	r25
    113e:	9a 01       	movw	r18, r20
    1140:	28 23       	and	r18, r24
    1142:	39 23       	and	r19, r25
    1144:	e0 e3       	ldi	r30, 0x30	; 48
    1146:	f0 e0       	ldi	r31, 0x00	; 0
    1148:	80 81       	ld	r24, Z
    114a:	88 2f       	mov	r24, r24
    114c:	90 e0       	ldi	r25, 0x00	; 0
    114e:	19 82       	std	Y+1, r1	; 0x01
    1150:	28 17       	cp	r18, r24
    1152:	39 07       	cpc	r19, r25
    1154:	11 f0       	breq	.+4      	; 0x115a <MDIO_u8GetPinValue+0x156>
    1156:	81 e0       	ldi	r24, 0x01	; 1
    1158:	89 83       	std	Y+1, r24	; 0x01
        break;
    }
    return local_u8Value;
    115a:	89 81       	ldd	r24, Y+1	; 0x01
}
    115c:	0f 90       	pop	r0
    115e:	0f 90       	pop	r0
    1160:	0f 90       	pop	r0
    1162:	0f 90       	pop	r0
    1164:	0f 90       	pop	r0
    1166:	cf 91       	pop	r28
    1168:	df 91       	pop	r29
    116a:	08 95       	ret

0000116c <MDIO_voidSetPinValue>:

void MDIO_voidSetPinValue(u8 A_u8Port,u8 A_u8Pin, u8 A_u8Value)
{
    116c:	df 93       	push	r29
    116e:	cf 93       	push	r28
    1170:	cd b7       	in	r28, 0x3d	; 61
    1172:	de b7       	in	r29, 0x3e	; 62
    1174:	2d 97       	sbiw	r28, 0x0d	; 13
    1176:	0f b6       	in	r0, 0x3f	; 63
    1178:	f8 94       	cli
    117a:	de bf       	out	0x3e, r29	; 62
    117c:	0f be       	out	0x3f, r0	; 63
    117e:	cd bf       	out	0x3d, r28	; 61
    1180:	89 83       	std	Y+1, r24	; 0x01
    1182:	6a 83       	std	Y+2, r22	; 0x02
    1184:	4b 83       	std	Y+3, r20	; 0x03
    switch(A_u8Port)
    1186:	89 81       	ldd	r24, Y+1	; 0x01
    1188:	28 2f       	mov	r18, r24
    118a:	30 e0       	ldi	r19, 0x00	; 0
    118c:	3d 87       	std	Y+13, r19	; 0x0d
    118e:	2c 87       	std	Y+12, r18	; 0x0c
    1190:	8c 85       	ldd	r24, Y+12	; 0x0c
    1192:	9d 85       	ldd	r25, Y+13	; 0x0d
    1194:	81 30       	cpi	r24, 0x01	; 1
    1196:	91 05       	cpc	r25, r1
    1198:	09 f4       	brne	.+2      	; 0x119c <MDIO_voidSetPinValue+0x30>
    119a:	4f c0       	rjmp	.+158    	; 0x123a <MDIO_voidSetPinValue+0xce>
    119c:	2c 85       	ldd	r18, Y+12	; 0x0c
    119e:	3d 85       	ldd	r19, Y+13	; 0x0d
    11a0:	22 30       	cpi	r18, 0x02	; 2
    11a2:	31 05       	cpc	r19, r1
    11a4:	2c f4       	brge	.+10     	; 0x11b0 <MDIO_voidSetPinValue+0x44>
    11a6:	8c 85       	ldd	r24, Y+12	; 0x0c
    11a8:	9d 85       	ldd	r25, Y+13	; 0x0d
    11aa:	00 97       	sbiw	r24, 0x00	; 0
    11ac:	71 f0       	breq	.+28     	; 0x11ca <MDIO_voidSetPinValue+0x5e>
    11ae:	eb c0       	rjmp	.+470    	; 0x1386 <MDIO_voidSetPinValue+0x21a>
    11b0:	2c 85       	ldd	r18, Y+12	; 0x0c
    11b2:	3d 85       	ldd	r19, Y+13	; 0x0d
    11b4:	22 30       	cpi	r18, 0x02	; 2
    11b6:	31 05       	cpc	r19, r1
    11b8:	09 f4       	brne	.+2      	; 0x11bc <MDIO_voidSetPinValue+0x50>
    11ba:	77 c0       	rjmp	.+238    	; 0x12aa <MDIO_voidSetPinValue+0x13e>
    11bc:	8c 85       	ldd	r24, Y+12	; 0x0c
    11be:	9d 85       	ldd	r25, Y+13	; 0x0d
    11c0:	83 30       	cpi	r24, 0x03	; 3
    11c2:	91 05       	cpc	r25, r1
    11c4:	09 f4       	brne	.+2      	; 0x11c8 <MDIO_voidSetPinValue+0x5c>
    11c6:	a9 c0       	rjmp	.+338    	; 0x131a <MDIO_voidSetPinValue+0x1ae>
    11c8:	de c0       	rjmp	.+444    	; 0x1386 <MDIO_voidSetPinValue+0x21a>
    {
        case PORTA:
        switch (A_u8Value)
    11ca:	8b 81       	ldd	r24, Y+3	; 0x03
    11cc:	28 2f       	mov	r18, r24
    11ce:	30 e0       	ldi	r19, 0x00	; 0
    11d0:	3b 87       	std	Y+11, r19	; 0x0b
    11d2:	2a 87       	std	Y+10, r18	; 0x0a
    11d4:	8a 85       	ldd	r24, Y+10	; 0x0a
    11d6:	9b 85       	ldd	r25, Y+11	; 0x0b
    11d8:	00 97       	sbiw	r24, 0x00	; 0
    11da:	d1 f0       	breq	.+52     	; 0x1210 <MDIO_voidSetPinValue+0xa4>
    11dc:	2a 85       	ldd	r18, Y+10	; 0x0a
    11de:	3b 85       	ldd	r19, Y+11	; 0x0b
    11e0:	21 30       	cpi	r18, 0x01	; 1
    11e2:	31 05       	cpc	r19, r1
    11e4:	09 f0       	breq	.+2      	; 0x11e8 <MDIO_voidSetPinValue+0x7c>
    11e6:	cf c0       	rjmp	.+414    	; 0x1386 <MDIO_voidSetPinValue+0x21a>
        {
            case PIN_HIGH: SET_BIT(PORTA_REG,A_u8Pin);
    11e8:	ab e3       	ldi	r26, 0x3B	; 59
    11ea:	b0 e0       	ldi	r27, 0x00	; 0
    11ec:	eb e3       	ldi	r30, 0x3B	; 59
    11ee:	f0 e0       	ldi	r31, 0x00	; 0
    11f0:	80 81       	ld	r24, Z
    11f2:	48 2f       	mov	r20, r24
    11f4:	8a 81       	ldd	r24, Y+2	; 0x02
    11f6:	28 2f       	mov	r18, r24
    11f8:	30 e0       	ldi	r19, 0x00	; 0
    11fa:	81 e0       	ldi	r24, 0x01	; 1
    11fc:	90 e0       	ldi	r25, 0x00	; 0
    11fe:	02 2e       	mov	r0, r18
    1200:	02 c0       	rjmp	.+4      	; 0x1206 <MDIO_voidSetPinValue+0x9a>
    1202:	88 0f       	add	r24, r24
    1204:	99 1f       	adc	r25, r25
    1206:	0a 94       	dec	r0
    1208:	e2 f7       	brpl	.-8      	; 0x1202 <MDIO_voidSetPinValue+0x96>
    120a:	84 2b       	or	r24, r20
    120c:	8c 93       	st	X, r24
    120e:	bb c0       	rjmp	.+374    	; 0x1386 <MDIO_voidSetPinValue+0x21a>
            break;

            case PIN_LOW: CLR_BIT(PORTA_REG,A_u8Pin);
    1210:	ab e3       	ldi	r26, 0x3B	; 59
    1212:	b0 e0       	ldi	r27, 0x00	; 0
    1214:	eb e3       	ldi	r30, 0x3B	; 59
    1216:	f0 e0       	ldi	r31, 0x00	; 0
    1218:	80 81       	ld	r24, Z
    121a:	48 2f       	mov	r20, r24
    121c:	8a 81       	ldd	r24, Y+2	; 0x02
    121e:	28 2f       	mov	r18, r24
    1220:	30 e0       	ldi	r19, 0x00	; 0
    1222:	81 e0       	ldi	r24, 0x01	; 1
    1224:	90 e0       	ldi	r25, 0x00	; 0
    1226:	02 2e       	mov	r0, r18
    1228:	02 c0       	rjmp	.+4      	; 0x122e <MDIO_voidSetPinValue+0xc2>
    122a:	88 0f       	add	r24, r24
    122c:	99 1f       	adc	r25, r25
    122e:	0a 94       	dec	r0
    1230:	e2 f7       	brpl	.-8      	; 0x122a <MDIO_voidSetPinValue+0xbe>
    1232:	80 95       	com	r24
    1234:	84 23       	and	r24, r20
    1236:	8c 93       	st	X, r24
    1238:	a6 c0       	rjmp	.+332    	; 0x1386 <MDIO_voidSetPinValue+0x21a>
            break;
        };
        break;

        case PORTB:
        switch (A_u8Value)
    123a:	8b 81       	ldd	r24, Y+3	; 0x03
    123c:	28 2f       	mov	r18, r24
    123e:	30 e0       	ldi	r19, 0x00	; 0
    1240:	39 87       	std	Y+9, r19	; 0x09
    1242:	28 87       	std	Y+8, r18	; 0x08
    1244:	88 85       	ldd	r24, Y+8	; 0x08
    1246:	99 85       	ldd	r25, Y+9	; 0x09
    1248:	00 97       	sbiw	r24, 0x00	; 0
    124a:	d1 f0       	breq	.+52     	; 0x1280 <MDIO_voidSetPinValue+0x114>
    124c:	28 85       	ldd	r18, Y+8	; 0x08
    124e:	39 85       	ldd	r19, Y+9	; 0x09
    1250:	21 30       	cpi	r18, 0x01	; 1
    1252:	31 05       	cpc	r19, r1
    1254:	09 f0       	breq	.+2      	; 0x1258 <MDIO_voidSetPinValue+0xec>
    1256:	97 c0       	rjmp	.+302    	; 0x1386 <MDIO_voidSetPinValue+0x21a>
        {
            case PIN_HIGH: SET_BIT(PORTB_REG,A_u8Pin);
    1258:	a8 e3       	ldi	r26, 0x38	; 56
    125a:	b0 e0       	ldi	r27, 0x00	; 0
    125c:	e8 e3       	ldi	r30, 0x38	; 56
    125e:	f0 e0       	ldi	r31, 0x00	; 0
    1260:	80 81       	ld	r24, Z
    1262:	48 2f       	mov	r20, r24
    1264:	8a 81       	ldd	r24, Y+2	; 0x02
    1266:	28 2f       	mov	r18, r24
    1268:	30 e0       	ldi	r19, 0x00	; 0
    126a:	81 e0       	ldi	r24, 0x01	; 1
    126c:	90 e0       	ldi	r25, 0x00	; 0
    126e:	02 2e       	mov	r0, r18
    1270:	02 c0       	rjmp	.+4      	; 0x1276 <MDIO_voidSetPinValue+0x10a>
    1272:	88 0f       	add	r24, r24
    1274:	99 1f       	adc	r25, r25
    1276:	0a 94       	dec	r0
    1278:	e2 f7       	brpl	.-8      	; 0x1272 <MDIO_voidSetPinValue+0x106>
    127a:	84 2b       	or	r24, r20
    127c:	8c 93       	st	X, r24
    127e:	83 c0       	rjmp	.+262    	; 0x1386 <MDIO_voidSetPinValue+0x21a>
            break;

            case PIN_LOW: CLR_BIT(PORTB_REG,A_u8Pin);
    1280:	a8 e3       	ldi	r26, 0x38	; 56
    1282:	b0 e0       	ldi	r27, 0x00	; 0
    1284:	e8 e3       	ldi	r30, 0x38	; 56
    1286:	f0 e0       	ldi	r31, 0x00	; 0
    1288:	80 81       	ld	r24, Z
    128a:	48 2f       	mov	r20, r24
    128c:	8a 81       	ldd	r24, Y+2	; 0x02
    128e:	28 2f       	mov	r18, r24
    1290:	30 e0       	ldi	r19, 0x00	; 0
    1292:	81 e0       	ldi	r24, 0x01	; 1
    1294:	90 e0       	ldi	r25, 0x00	; 0
    1296:	02 2e       	mov	r0, r18
    1298:	02 c0       	rjmp	.+4      	; 0x129e <MDIO_voidSetPinValue+0x132>
    129a:	88 0f       	add	r24, r24
    129c:	99 1f       	adc	r25, r25
    129e:	0a 94       	dec	r0
    12a0:	e2 f7       	brpl	.-8      	; 0x129a <MDIO_voidSetPinValue+0x12e>
    12a2:	80 95       	com	r24
    12a4:	84 23       	and	r24, r20
    12a6:	8c 93       	st	X, r24
    12a8:	6e c0       	rjmp	.+220    	; 0x1386 <MDIO_voidSetPinValue+0x21a>
            break;
        };
        break;

        case PORTC:
        switch (A_u8Value)
    12aa:	8b 81       	ldd	r24, Y+3	; 0x03
    12ac:	28 2f       	mov	r18, r24
    12ae:	30 e0       	ldi	r19, 0x00	; 0
    12b0:	3f 83       	std	Y+7, r19	; 0x07
    12b2:	2e 83       	std	Y+6, r18	; 0x06
    12b4:	8e 81       	ldd	r24, Y+6	; 0x06
    12b6:	9f 81       	ldd	r25, Y+7	; 0x07
    12b8:	00 97       	sbiw	r24, 0x00	; 0
    12ba:	d1 f0       	breq	.+52     	; 0x12f0 <MDIO_voidSetPinValue+0x184>
    12bc:	2e 81       	ldd	r18, Y+6	; 0x06
    12be:	3f 81       	ldd	r19, Y+7	; 0x07
    12c0:	21 30       	cpi	r18, 0x01	; 1
    12c2:	31 05       	cpc	r19, r1
    12c4:	09 f0       	breq	.+2      	; 0x12c8 <MDIO_voidSetPinValue+0x15c>
    12c6:	5f c0       	rjmp	.+190    	; 0x1386 <MDIO_voidSetPinValue+0x21a>
        {
            case PIN_HIGH: SET_BIT(PORTC_REG,A_u8Pin);
    12c8:	a5 e3       	ldi	r26, 0x35	; 53
    12ca:	b0 e0       	ldi	r27, 0x00	; 0
    12cc:	e5 e3       	ldi	r30, 0x35	; 53
    12ce:	f0 e0       	ldi	r31, 0x00	; 0
    12d0:	80 81       	ld	r24, Z
    12d2:	48 2f       	mov	r20, r24
    12d4:	8a 81       	ldd	r24, Y+2	; 0x02
    12d6:	28 2f       	mov	r18, r24
    12d8:	30 e0       	ldi	r19, 0x00	; 0
    12da:	81 e0       	ldi	r24, 0x01	; 1
    12dc:	90 e0       	ldi	r25, 0x00	; 0
    12de:	02 2e       	mov	r0, r18
    12e0:	02 c0       	rjmp	.+4      	; 0x12e6 <MDIO_voidSetPinValue+0x17a>
    12e2:	88 0f       	add	r24, r24
    12e4:	99 1f       	adc	r25, r25
    12e6:	0a 94       	dec	r0
    12e8:	e2 f7       	brpl	.-8      	; 0x12e2 <MDIO_voidSetPinValue+0x176>
    12ea:	84 2b       	or	r24, r20
    12ec:	8c 93       	st	X, r24
    12ee:	4b c0       	rjmp	.+150    	; 0x1386 <MDIO_voidSetPinValue+0x21a>
            break;

            case PIN_LOW: CLR_BIT(PORTC_REG,A_u8Pin);
    12f0:	a5 e3       	ldi	r26, 0x35	; 53
    12f2:	b0 e0       	ldi	r27, 0x00	; 0
    12f4:	e5 e3       	ldi	r30, 0x35	; 53
    12f6:	f0 e0       	ldi	r31, 0x00	; 0
    12f8:	80 81       	ld	r24, Z
    12fa:	48 2f       	mov	r20, r24
    12fc:	8a 81       	ldd	r24, Y+2	; 0x02
    12fe:	28 2f       	mov	r18, r24
    1300:	30 e0       	ldi	r19, 0x00	; 0
    1302:	81 e0       	ldi	r24, 0x01	; 1
    1304:	90 e0       	ldi	r25, 0x00	; 0
    1306:	02 2e       	mov	r0, r18
    1308:	02 c0       	rjmp	.+4      	; 0x130e <MDIO_voidSetPinValue+0x1a2>
    130a:	88 0f       	add	r24, r24
    130c:	99 1f       	adc	r25, r25
    130e:	0a 94       	dec	r0
    1310:	e2 f7       	brpl	.-8      	; 0x130a <MDIO_voidSetPinValue+0x19e>
    1312:	80 95       	com	r24
    1314:	84 23       	and	r24, r20
    1316:	8c 93       	st	X, r24
    1318:	36 c0       	rjmp	.+108    	; 0x1386 <MDIO_voidSetPinValue+0x21a>
            break;
        };
        break;

        case PORTD:
        switch (A_u8Value)
    131a:	8b 81       	ldd	r24, Y+3	; 0x03
    131c:	28 2f       	mov	r18, r24
    131e:	30 e0       	ldi	r19, 0x00	; 0
    1320:	3d 83       	std	Y+5, r19	; 0x05
    1322:	2c 83       	std	Y+4, r18	; 0x04
    1324:	8c 81       	ldd	r24, Y+4	; 0x04
    1326:	9d 81       	ldd	r25, Y+5	; 0x05
    1328:	00 97       	sbiw	r24, 0x00	; 0
    132a:	c9 f0       	breq	.+50     	; 0x135e <MDIO_voidSetPinValue+0x1f2>
    132c:	2c 81       	ldd	r18, Y+4	; 0x04
    132e:	3d 81       	ldd	r19, Y+5	; 0x05
    1330:	21 30       	cpi	r18, 0x01	; 1
    1332:	31 05       	cpc	r19, r1
    1334:	41 f5       	brne	.+80     	; 0x1386 <MDIO_voidSetPinValue+0x21a>
        {
            case PIN_HIGH: SET_BIT(PORTD_REG,A_u8Pin);
    1336:	a2 e3       	ldi	r26, 0x32	; 50
    1338:	b0 e0       	ldi	r27, 0x00	; 0
    133a:	e2 e3       	ldi	r30, 0x32	; 50
    133c:	f0 e0       	ldi	r31, 0x00	; 0
    133e:	80 81       	ld	r24, Z
    1340:	48 2f       	mov	r20, r24
    1342:	8a 81       	ldd	r24, Y+2	; 0x02
    1344:	28 2f       	mov	r18, r24
    1346:	30 e0       	ldi	r19, 0x00	; 0
    1348:	81 e0       	ldi	r24, 0x01	; 1
    134a:	90 e0       	ldi	r25, 0x00	; 0
    134c:	02 2e       	mov	r0, r18
    134e:	02 c0       	rjmp	.+4      	; 0x1354 <MDIO_voidSetPinValue+0x1e8>
    1350:	88 0f       	add	r24, r24
    1352:	99 1f       	adc	r25, r25
    1354:	0a 94       	dec	r0
    1356:	e2 f7       	brpl	.-8      	; 0x1350 <MDIO_voidSetPinValue+0x1e4>
    1358:	84 2b       	or	r24, r20
    135a:	8c 93       	st	X, r24
    135c:	14 c0       	rjmp	.+40     	; 0x1386 <MDIO_voidSetPinValue+0x21a>
            break;

            case PIN_LOW: CLR_BIT(PORTD_REG,A_u8Pin);
    135e:	a2 e3       	ldi	r26, 0x32	; 50
    1360:	b0 e0       	ldi	r27, 0x00	; 0
    1362:	e2 e3       	ldi	r30, 0x32	; 50
    1364:	f0 e0       	ldi	r31, 0x00	; 0
    1366:	80 81       	ld	r24, Z
    1368:	48 2f       	mov	r20, r24
    136a:	8a 81       	ldd	r24, Y+2	; 0x02
    136c:	28 2f       	mov	r18, r24
    136e:	30 e0       	ldi	r19, 0x00	; 0
    1370:	81 e0       	ldi	r24, 0x01	; 1
    1372:	90 e0       	ldi	r25, 0x00	; 0
    1374:	02 2e       	mov	r0, r18
    1376:	02 c0       	rjmp	.+4      	; 0x137c <MDIO_voidSetPinValue+0x210>
    1378:	88 0f       	add	r24, r24
    137a:	99 1f       	adc	r25, r25
    137c:	0a 94       	dec	r0
    137e:	e2 f7       	brpl	.-8      	; 0x1378 <MDIO_voidSetPinValue+0x20c>
    1380:	80 95       	com	r24
    1382:	84 23       	and	r24, r20
    1384:	8c 93       	st	X, r24
            break;
        };
        break;
    }
}
    1386:	2d 96       	adiw	r28, 0x0d	; 13
    1388:	0f b6       	in	r0, 0x3f	; 63
    138a:	f8 94       	cli
    138c:	de bf       	out	0x3e, r29	; 62
    138e:	0f be       	out	0x3f, r0	; 63
    1390:	cd bf       	out	0x3d, r28	; 61
    1392:	cf 91       	pop	r28
    1394:	df 91       	pop	r29
    1396:	08 95       	ret

00001398 <MDIO_voidSetPinDirection>:

void MDIO_voidSetPinDirection(u8 A_u8Port,u8 A_u8Pin, u8 A_u8Value)
{
    1398:	df 93       	push	r29
    139a:	cf 93       	push	r28
    139c:	cd b7       	in	r28, 0x3d	; 61
    139e:	de b7       	in	r29, 0x3e	; 62
    13a0:	2d 97       	sbiw	r28, 0x0d	; 13
    13a2:	0f b6       	in	r0, 0x3f	; 63
    13a4:	f8 94       	cli
    13a6:	de bf       	out	0x3e, r29	; 62
    13a8:	0f be       	out	0x3f, r0	; 63
    13aa:	cd bf       	out	0x3d, r28	; 61
    13ac:	89 83       	std	Y+1, r24	; 0x01
    13ae:	6a 83       	std	Y+2, r22	; 0x02
    13b0:	4b 83       	std	Y+3, r20	; 0x03
    switch(A_u8Port)
    13b2:	89 81       	ldd	r24, Y+1	; 0x01
    13b4:	28 2f       	mov	r18, r24
    13b6:	30 e0       	ldi	r19, 0x00	; 0
    13b8:	3d 87       	std	Y+13, r19	; 0x0d
    13ba:	2c 87       	std	Y+12, r18	; 0x0c
    13bc:	8c 85       	ldd	r24, Y+12	; 0x0c
    13be:	9d 85       	ldd	r25, Y+13	; 0x0d
    13c0:	81 30       	cpi	r24, 0x01	; 1
    13c2:	91 05       	cpc	r25, r1
    13c4:	09 f4       	brne	.+2      	; 0x13c8 <MDIO_voidSetPinDirection+0x30>
    13c6:	4f c0       	rjmp	.+158    	; 0x1466 <MDIO_voidSetPinDirection+0xce>
    13c8:	2c 85       	ldd	r18, Y+12	; 0x0c
    13ca:	3d 85       	ldd	r19, Y+13	; 0x0d
    13cc:	22 30       	cpi	r18, 0x02	; 2
    13ce:	31 05       	cpc	r19, r1
    13d0:	2c f4       	brge	.+10     	; 0x13dc <MDIO_voidSetPinDirection+0x44>
    13d2:	8c 85       	ldd	r24, Y+12	; 0x0c
    13d4:	9d 85       	ldd	r25, Y+13	; 0x0d
    13d6:	00 97       	sbiw	r24, 0x00	; 0
    13d8:	71 f0       	breq	.+28     	; 0x13f6 <MDIO_voidSetPinDirection+0x5e>
    13da:	eb c0       	rjmp	.+470    	; 0x15b2 <MDIO_voidSetPinDirection+0x21a>
    13dc:	2c 85       	ldd	r18, Y+12	; 0x0c
    13de:	3d 85       	ldd	r19, Y+13	; 0x0d
    13e0:	22 30       	cpi	r18, 0x02	; 2
    13e2:	31 05       	cpc	r19, r1
    13e4:	09 f4       	brne	.+2      	; 0x13e8 <MDIO_voidSetPinDirection+0x50>
    13e6:	77 c0       	rjmp	.+238    	; 0x14d6 <MDIO_voidSetPinDirection+0x13e>
    13e8:	8c 85       	ldd	r24, Y+12	; 0x0c
    13ea:	9d 85       	ldd	r25, Y+13	; 0x0d
    13ec:	83 30       	cpi	r24, 0x03	; 3
    13ee:	91 05       	cpc	r25, r1
    13f0:	09 f4       	brne	.+2      	; 0x13f4 <MDIO_voidSetPinDirection+0x5c>
    13f2:	a9 c0       	rjmp	.+338    	; 0x1546 <MDIO_voidSetPinDirection+0x1ae>
    13f4:	de c0       	rjmp	.+444    	; 0x15b2 <MDIO_voidSetPinDirection+0x21a>
    {
        case PORTA:
        switch (A_u8Value)
    13f6:	8b 81       	ldd	r24, Y+3	; 0x03
    13f8:	28 2f       	mov	r18, r24
    13fa:	30 e0       	ldi	r19, 0x00	; 0
    13fc:	3b 87       	std	Y+11, r19	; 0x0b
    13fe:	2a 87       	std	Y+10, r18	; 0x0a
    1400:	8a 85       	ldd	r24, Y+10	; 0x0a
    1402:	9b 85       	ldd	r25, Y+11	; 0x0b
    1404:	00 97       	sbiw	r24, 0x00	; 0
    1406:	d1 f0       	breq	.+52     	; 0x143c <MDIO_voidSetPinDirection+0xa4>
    1408:	2a 85       	ldd	r18, Y+10	; 0x0a
    140a:	3b 85       	ldd	r19, Y+11	; 0x0b
    140c:	21 30       	cpi	r18, 0x01	; 1
    140e:	31 05       	cpc	r19, r1
    1410:	09 f0       	breq	.+2      	; 0x1414 <MDIO_voidSetPinDirection+0x7c>
    1412:	cf c0       	rjmp	.+414    	; 0x15b2 <MDIO_voidSetPinDirection+0x21a>
        {
            case PIN_OUTPUT: SET_BIT(DDRA_REG,A_u8Pin);
    1414:	aa e3       	ldi	r26, 0x3A	; 58
    1416:	b0 e0       	ldi	r27, 0x00	; 0
    1418:	ea e3       	ldi	r30, 0x3A	; 58
    141a:	f0 e0       	ldi	r31, 0x00	; 0
    141c:	80 81       	ld	r24, Z
    141e:	48 2f       	mov	r20, r24
    1420:	8a 81       	ldd	r24, Y+2	; 0x02
    1422:	28 2f       	mov	r18, r24
    1424:	30 e0       	ldi	r19, 0x00	; 0
    1426:	81 e0       	ldi	r24, 0x01	; 1
    1428:	90 e0       	ldi	r25, 0x00	; 0
    142a:	02 2e       	mov	r0, r18
    142c:	02 c0       	rjmp	.+4      	; 0x1432 <MDIO_voidSetPinDirection+0x9a>
    142e:	88 0f       	add	r24, r24
    1430:	99 1f       	adc	r25, r25
    1432:	0a 94       	dec	r0
    1434:	e2 f7       	brpl	.-8      	; 0x142e <MDIO_voidSetPinDirection+0x96>
    1436:	84 2b       	or	r24, r20
    1438:	8c 93       	st	X, r24
    143a:	bb c0       	rjmp	.+374    	; 0x15b2 <MDIO_voidSetPinDirection+0x21a>
            break;

            case PIN_INPUT: CLR_BIT(DDRA_REG,A_u8Pin);
    143c:	aa e3       	ldi	r26, 0x3A	; 58
    143e:	b0 e0       	ldi	r27, 0x00	; 0
    1440:	ea e3       	ldi	r30, 0x3A	; 58
    1442:	f0 e0       	ldi	r31, 0x00	; 0
    1444:	80 81       	ld	r24, Z
    1446:	48 2f       	mov	r20, r24
    1448:	8a 81       	ldd	r24, Y+2	; 0x02
    144a:	28 2f       	mov	r18, r24
    144c:	30 e0       	ldi	r19, 0x00	; 0
    144e:	81 e0       	ldi	r24, 0x01	; 1
    1450:	90 e0       	ldi	r25, 0x00	; 0
    1452:	02 2e       	mov	r0, r18
    1454:	02 c0       	rjmp	.+4      	; 0x145a <MDIO_voidSetPinDirection+0xc2>
    1456:	88 0f       	add	r24, r24
    1458:	99 1f       	adc	r25, r25
    145a:	0a 94       	dec	r0
    145c:	e2 f7       	brpl	.-8      	; 0x1456 <MDIO_voidSetPinDirection+0xbe>
    145e:	80 95       	com	r24
    1460:	84 23       	and	r24, r20
    1462:	8c 93       	st	X, r24
    1464:	a6 c0       	rjmp	.+332    	; 0x15b2 <MDIO_voidSetPinDirection+0x21a>
            break;
        };
        break;

        case PORTB:
        switch (A_u8Value)
    1466:	8b 81       	ldd	r24, Y+3	; 0x03
    1468:	28 2f       	mov	r18, r24
    146a:	30 e0       	ldi	r19, 0x00	; 0
    146c:	39 87       	std	Y+9, r19	; 0x09
    146e:	28 87       	std	Y+8, r18	; 0x08
    1470:	88 85       	ldd	r24, Y+8	; 0x08
    1472:	99 85       	ldd	r25, Y+9	; 0x09
    1474:	00 97       	sbiw	r24, 0x00	; 0
    1476:	d1 f0       	breq	.+52     	; 0x14ac <MDIO_voidSetPinDirection+0x114>
    1478:	28 85       	ldd	r18, Y+8	; 0x08
    147a:	39 85       	ldd	r19, Y+9	; 0x09
    147c:	21 30       	cpi	r18, 0x01	; 1
    147e:	31 05       	cpc	r19, r1
    1480:	09 f0       	breq	.+2      	; 0x1484 <MDIO_voidSetPinDirection+0xec>
    1482:	97 c0       	rjmp	.+302    	; 0x15b2 <MDIO_voidSetPinDirection+0x21a>
        {
            case PIN_OUTPUT: SET_BIT(DDRB_REG,A_u8Pin);
    1484:	a7 e3       	ldi	r26, 0x37	; 55
    1486:	b0 e0       	ldi	r27, 0x00	; 0
    1488:	e7 e3       	ldi	r30, 0x37	; 55
    148a:	f0 e0       	ldi	r31, 0x00	; 0
    148c:	80 81       	ld	r24, Z
    148e:	48 2f       	mov	r20, r24
    1490:	8a 81       	ldd	r24, Y+2	; 0x02
    1492:	28 2f       	mov	r18, r24
    1494:	30 e0       	ldi	r19, 0x00	; 0
    1496:	81 e0       	ldi	r24, 0x01	; 1
    1498:	90 e0       	ldi	r25, 0x00	; 0
    149a:	02 2e       	mov	r0, r18
    149c:	02 c0       	rjmp	.+4      	; 0x14a2 <MDIO_voidSetPinDirection+0x10a>
    149e:	88 0f       	add	r24, r24
    14a0:	99 1f       	adc	r25, r25
    14a2:	0a 94       	dec	r0
    14a4:	e2 f7       	brpl	.-8      	; 0x149e <MDIO_voidSetPinDirection+0x106>
    14a6:	84 2b       	or	r24, r20
    14a8:	8c 93       	st	X, r24
    14aa:	83 c0       	rjmp	.+262    	; 0x15b2 <MDIO_voidSetPinDirection+0x21a>
            break;

            case PIN_INPUT: CLR_BIT(DDRB_REG,A_u8Pin);
    14ac:	a7 e3       	ldi	r26, 0x37	; 55
    14ae:	b0 e0       	ldi	r27, 0x00	; 0
    14b0:	e7 e3       	ldi	r30, 0x37	; 55
    14b2:	f0 e0       	ldi	r31, 0x00	; 0
    14b4:	80 81       	ld	r24, Z
    14b6:	48 2f       	mov	r20, r24
    14b8:	8a 81       	ldd	r24, Y+2	; 0x02
    14ba:	28 2f       	mov	r18, r24
    14bc:	30 e0       	ldi	r19, 0x00	; 0
    14be:	81 e0       	ldi	r24, 0x01	; 1
    14c0:	90 e0       	ldi	r25, 0x00	; 0
    14c2:	02 2e       	mov	r0, r18
    14c4:	02 c0       	rjmp	.+4      	; 0x14ca <MDIO_voidSetPinDirection+0x132>
    14c6:	88 0f       	add	r24, r24
    14c8:	99 1f       	adc	r25, r25
    14ca:	0a 94       	dec	r0
    14cc:	e2 f7       	brpl	.-8      	; 0x14c6 <MDIO_voidSetPinDirection+0x12e>
    14ce:	80 95       	com	r24
    14d0:	84 23       	and	r24, r20
    14d2:	8c 93       	st	X, r24
    14d4:	6e c0       	rjmp	.+220    	; 0x15b2 <MDIO_voidSetPinDirection+0x21a>
            break;
        };
        break;

        case PORTC:
        switch (A_u8Value)
    14d6:	8b 81       	ldd	r24, Y+3	; 0x03
    14d8:	28 2f       	mov	r18, r24
    14da:	30 e0       	ldi	r19, 0x00	; 0
    14dc:	3f 83       	std	Y+7, r19	; 0x07
    14de:	2e 83       	std	Y+6, r18	; 0x06
    14e0:	8e 81       	ldd	r24, Y+6	; 0x06
    14e2:	9f 81       	ldd	r25, Y+7	; 0x07
    14e4:	00 97       	sbiw	r24, 0x00	; 0
    14e6:	d1 f0       	breq	.+52     	; 0x151c <MDIO_voidSetPinDirection+0x184>
    14e8:	2e 81       	ldd	r18, Y+6	; 0x06
    14ea:	3f 81       	ldd	r19, Y+7	; 0x07
    14ec:	21 30       	cpi	r18, 0x01	; 1
    14ee:	31 05       	cpc	r19, r1
    14f0:	09 f0       	breq	.+2      	; 0x14f4 <MDIO_voidSetPinDirection+0x15c>
    14f2:	5f c0       	rjmp	.+190    	; 0x15b2 <MDIO_voidSetPinDirection+0x21a>
        {
            case PIN_OUTPUT: SET_BIT(DDRC_REG,A_u8Pin);
    14f4:	a4 e3       	ldi	r26, 0x34	; 52
    14f6:	b0 e0       	ldi	r27, 0x00	; 0
    14f8:	e4 e3       	ldi	r30, 0x34	; 52
    14fa:	f0 e0       	ldi	r31, 0x00	; 0
    14fc:	80 81       	ld	r24, Z
    14fe:	48 2f       	mov	r20, r24
    1500:	8a 81       	ldd	r24, Y+2	; 0x02
    1502:	28 2f       	mov	r18, r24
    1504:	30 e0       	ldi	r19, 0x00	; 0
    1506:	81 e0       	ldi	r24, 0x01	; 1
    1508:	90 e0       	ldi	r25, 0x00	; 0
    150a:	02 2e       	mov	r0, r18
    150c:	02 c0       	rjmp	.+4      	; 0x1512 <MDIO_voidSetPinDirection+0x17a>
    150e:	88 0f       	add	r24, r24
    1510:	99 1f       	adc	r25, r25
    1512:	0a 94       	dec	r0
    1514:	e2 f7       	brpl	.-8      	; 0x150e <MDIO_voidSetPinDirection+0x176>
    1516:	84 2b       	or	r24, r20
    1518:	8c 93       	st	X, r24
    151a:	4b c0       	rjmp	.+150    	; 0x15b2 <MDIO_voidSetPinDirection+0x21a>
            break;

            case PIN_INPUT: CLR_BIT(DDRC_REG,A_u8Pin);
    151c:	a4 e3       	ldi	r26, 0x34	; 52
    151e:	b0 e0       	ldi	r27, 0x00	; 0
    1520:	e4 e3       	ldi	r30, 0x34	; 52
    1522:	f0 e0       	ldi	r31, 0x00	; 0
    1524:	80 81       	ld	r24, Z
    1526:	48 2f       	mov	r20, r24
    1528:	8a 81       	ldd	r24, Y+2	; 0x02
    152a:	28 2f       	mov	r18, r24
    152c:	30 e0       	ldi	r19, 0x00	; 0
    152e:	81 e0       	ldi	r24, 0x01	; 1
    1530:	90 e0       	ldi	r25, 0x00	; 0
    1532:	02 2e       	mov	r0, r18
    1534:	02 c0       	rjmp	.+4      	; 0x153a <MDIO_voidSetPinDirection+0x1a2>
    1536:	88 0f       	add	r24, r24
    1538:	99 1f       	adc	r25, r25
    153a:	0a 94       	dec	r0
    153c:	e2 f7       	brpl	.-8      	; 0x1536 <MDIO_voidSetPinDirection+0x19e>
    153e:	80 95       	com	r24
    1540:	84 23       	and	r24, r20
    1542:	8c 93       	st	X, r24
    1544:	36 c0       	rjmp	.+108    	; 0x15b2 <MDIO_voidSetPinDirection+0x21a>
            break;
        };
        break;

        case PORTD:
        switch (A_u8Value)
    1546:	8b 81       	ldd	r24, Y+3	; 0x03
    1548:	28 2f       	mov	r18, r24
    154a:	30 e0       	ldi	r19, 0x00	; 0
    154c:	3d 83       	std	Y+5, r19	; 0x05
    154e:	2c 83       	std	Y+4, r18	; 0x04
    1550:	8c 81       	ldd	r24, Y+4	; 0x04
    1552:	9d 81       	ldd	r25, Y+5	; 0x05
    1554:	00 97       	sbiw	r24, 0x00	; 0
    1556:	c9 f0       	breq	.+50     	; 0x158a <MDIO_voidSetPinDirection+0x1f2>
    1558:	2c 81       	ldd	r18, Y+4	; 0x04
    155a:	3d 81       	ldd	r19, Y+5	; 0x05
    155c:	21 30       	cpi	r18, 0x01	; 1
    155e:	31 05       	cpc	r19, r1
    1560:	41 f5       	brne	.+80     	; 0x15b2 <MDIO_voidSetPinDirection+0x21a>
        {
            case PIN_OUTPUT: SET_BIT(DDRD_REG,A_u8Pin);
    1562:	a1 e3       	ldi	r26, 0x31	; 49
    1564:	b0 e0       	ldi	r27, 0x00	; 0
    1566:	e1 e3       	ldi	r30, 0x31	; 49
    1568:	f0 e0       	ldi	r31, 0x00	; 0
    156a:	80 81       	ld	r24, Z
    156c:	48 2f       	mov	r20, r24
    156e:	8a 81       	ldd	r24, Y+2	; 0x02
    1570:	28 2f       	mov	r18, r24
    1572:	30 e0       	ldi	r19, 0x00	; 0
    1574:	81 e0       	ldi	r24, 0x01	; 1
    1576:	90 e0       	ldi	r25, 0x00	; 0
    1578:	02 2e       	mov	r0, r18
    157a:	02 c0       	rjmp	.+4      	; 0x1580 <MDIO_voidSetPinDirection+0x1e8>
    157c:	88 0f       	add	r24, r24
    157e:	99 1f       	adc	r25, r25
    1580:	0a 94       	dec	r0
    1582:	e2 f7       	brpl	.-8      	; 0x157c <MDIO_voidSetPinDirection+0x1e4>
    1584:	84 2b       	or	r24, r20
    1586:	8c 93       	st	X, r24
    1588:	14 c0       	rjmp	.+40     	; 0x15b2 <MDIO_voidSetPinDirection+0x21a>
            break;

            case PIN_INPUT: CLR_BIT(DDRD_REG,A_u8Pin);
    158a:	a1 e3       	ldi	r26, 0x31	; 49
    158c:	b0 e0       	ldi	r27, 0x00	; 0
    158e:	e1 e3       	ldi	r30, 0x31	; 49
    1590:	f0 e0       	ldi	r31, 0x00	; 0
    1592:	80 81       	ld	r24, Z
    1594:	48 2f       	mov	r20, r24
    1596:	8a 81       	ldd	r24, Y+2	; 0x02
    1598:	28 2f       	mov	r18, r24
    159a:	30 e0       	ldi	r19, 0x00	; 0
    159c:	81 e0       	ldi	r24, 0x01	; 1
    159e:	90 e0       	ldi	r25, 0x00	; 0
    15a0:	02 2e       	mov	r0, r18
    15a2:	02 c0       	rjmp	.+4      	; 0x15a8 <MDIO_voidSetPinDirection+0x210>
    15a4:	88 0f       	add	r24, r24
    15a6:	99 1f       	adc	r25, r25
    15a8:	0a 94       	dec	r0
    15aa:	e2 f7       	brpl	.-8      	; 0x15a4 <MDIO_voidSetPinDirection+0x20c>
    15ac:	80 95       	com	r24
    15ae:	84 23       	and	r24, r20
    15b0:	8c 93       	st	X, r24
            break;
        };
        break;
    }
}
    15b2:	2d 96       	adiw	r28, 0x0d	; 13
    15b4:	0f b6       	in	r0, 0x3f	; 63
    15b6:	f8 94       	cli
    15b8:	de bf       	out	0x3e, r29	; 62
    15ba:	0f be       	out	0x3f, r0	; 63
    15bc:	cd bf       	out	0x3d, r28	; 61
    15be:	cf 91       	pop	r28
    15c0:	df 91       	pop	r29
    15c2:	08 95       	ret

000015c4 <MDIO_voidSetPortValue>:


void MDIO_voidSetPortValue(u8 A_u8Port,u8 A_u8Value)
{
    15c4:	df 93       	push	r29
    15c6:	cf 93       	push	r28
    15c8:	00 d0       	rcall	.+0      	; 0x15ca <MDIO_voidSetPortValue+0x6>
    15ca:	00 d0       	rcall	.+0      	; 0x15cc <MDIO_voidSetPortValue+0x8>
    15cc:	cd b7       	in	r28, 0x3d	; 61
    15ce:	de b7       	in	r29, 0x3e	; 62
    15d0:	89 83       	std	Y+1, r24	; 0x01
    15d2:	6a 83       	std	Y+2, r22	; 0x02
    switch(A_u8Port)
    15d4:	89 81       	ldd	r24, Y+1	; 0x01
    15d6:	28 2f       	mov	r18, r24
    15d8:	30 e0       	ldi	r19, 0x00	; 0
    15da:	3c 83       	std	Y+4, r19	; 0x04
    15dc:	2b 83       	std	Y+3, r18	; 0x03
    15de:	8b 81       	ldd	r24, Y+3	; 0x03
    15e0:	9c 81       	ldd	r25, Y+4	; 0x04
    15e2:	81 30       	cpi	r24, 0x01	; 1
    15e4:	91 05       	cpc	r25, r1
    15e6:	d1 f0       	breq	.+52     	; 0x161c <MDIO_voidSetPortValue+0x58>
    15e8:	2b 81       	ldd	r18, Y+3	; 0x03
    15ea:	3c 81       	ldd	r19, Y+4	; 0x04
    15ec:	22 30       	cpi	r18, 0x02	; 2
    15ee:	31 05       	cpc	r19, r1
    15f0:	2c f4       	brge	.+10     	; 0x15fc <MDIO_voidSetPortValue+0x38>
    15f2:	8b 81       	ldd	r24, Y+3	; 0x03
    15f4:	9c 81       	ldd	r25, Y+4	; 0x04
    15f6:	00 97       	sbiw	r24, 0x00	; 0
    15f8:	61 f0       	breq	.+24     	; 0x1612 <MDIO_voidSetPortValue+0x4e>
    15fa:	1e c0       	rjmp	.+60     	; 0x1638 <MDIO_voidSetPortValue+0x74>
    15fc:	2b 81       	ldd	r18, Y+3	; 0x03
    15fe:	3c 81       	ldd	r19, Y+4	; 0x04
    1600:	22 30       	cpi	r18, 0x02	; 2
    1602:	31 05       	cpc	r19, r1
    1604:	81 f0       	breq	.+32     	; 0x1626 <MDIO_voidSetPortValue+0x62>
    1606:	8b 81       	ldd	r24, Y+3	; 0x03
    1608:	9c 81       	ldd	r25, Y+4	; 0x04
    160a:	83 30       	cpi	r24, 0x03	; 3
    160c:	91 05       	cpc	r25, r1
    160e:	81 f0       	breq	.+32     	; 0x1630 <MDIO_voidSetPortValue+0x6c>
    1610:	13 c0       	rjmp	.+38     	; 0x1638 <MDIO_voidSetPortValue+0x74>
    {
        case PORTA:PORTA_REG=A_u8Value;
    1612:	eb e3       	ldi	r30, 0x3B	; 59
    1614:	f0 e0       	ldi	r31, 0x00	; 0
    1616:	8a 81       	ldd	r24, Y+2	; 0x02
    1618:	80 83       	st	Z, r24
    161a:	0e c0       	rjmp	.+28     	; 0x1638 <MDIO_voidSetPortValue+0x74>
        break;
        case PORTB:PORTB_REG=A_u8Value;
    161c:	e8 e3       	ldi	r30, 0x38	; 56
    161e:	f0 e0       	ldi	r31, 0x00	; 0
    1620:	8a 81       	ldd	r24, Y+2	; 0x02
    1622:	80 83       	st	Z, r24
    1624:	09 c0       	rjmp	.+18     	; 0x1638 <MDIO_voidSetPortValue+0x74>
        break;
        case PORTC:PORTC_REG=A_u8Value;
    1626:	e5 e3       	ldi	r30, 0x35	; 53
    1628:	f0 e0       	ldi	r31, 0x00	; 0
    162a:	8a 81       	ldd	r24, Y+2	; 0x02
    162c:	80 83       	st	Z, r24
    162e:	04 c0       	rjmp	.+8      	; 0x1638 <MDIO_voidSetPortValue+0x74>
        break;
        case PORTD:PORTD_REG=A_u8Value;
    1630:	e2 e3       	ldi	r30, 0x32	; 50
    1632:	f0 e0       	ldi	r31, 0x00	; 0
    1634:	8a 81       	ldd	r24, Y+2	; 0x02
    1636:	80 83       	st	Z, r24
        break;
    }
}
    1638:	0f 90       	pop	r0
    163a:	0f 90       	pop	r0
    163c:	0f 90       	pop	r0
    163e:	0f 90       	pop	r0
    1640:	cf 91       	pop	r28
    1642:	df 91       	pop	r29
    1644:	08 95       	ret

00001646 <MDIO_voidSetPortDirection>:

void MDIO_voidSetPortDirection(u8 A_u8Port,u8 A_u8Value)
{
    1646:	df 93       	push	r29
    1648:	cf 93       	push	r28
    164a:	00 d0       	rcall	.+0      	; 0x164c <MDIO_voidSetPortDirection+0x6>
    164c:	00 d0       	rcall	.+0      	; 0x164e <MDIO_voidSetPortDirection+0x8>
    164e:	cd b7       	in	r28, 0x3d	; 61
    1650:	de b7       	in	r29, 0x3e	; 62
    1652:	89 83       	std	Y+1, r24	; 0x01
    1654:	6a 83       	std	Y+2, r22	; 0x02
    switch(A_u8Port)
    1656:	89 81       	ldd	r24, Y+1	; 0x01
    1658:	28 2f       	mov	r18, r24
    165a:	30 e0       	ldi	r19, 0x00	; 0
    165c:	3c 83       	std	Y+4, r19	; 0x04
    165e:	2b 83       	std	Y+3, r18	; 0x03
    1660:	8b 81       	ldd	r24, Y+3	; 0x03
    1662:	9c 81       	ldd	r25, Y+4	; 0x04
    1664:	81 30       	cpi	r24, 0x01	; 1
    1666:	91 05       	cpc	r25, r1
    1668:	d1 f0       	breq	.+52     	; 0x169e <MDIO_voidSetPortDirection+0x58>
    166a:	2b 81       	ldd	r18, Y+3	; 0x03
    166c:	3c 81       	ldd	r19, Y+4	; 0x04
    166e:	22 30       	cpi	r18, 0x02	; 2
    1670:	31 05       	cpc	r19, r1
    1672:	2c f4       	brge	.+10     	; 0x167e <MDIO_voidSetPortDirection+0x38>
    1674:	8b 81       	ldd	r24, Y+3	; 0x03
    1676:	9c 81       	ldd	r25, Y+4	; 0x04
    1678:	00 97       	sbiw	r24, 0x00	; 0
    167a:	61 f0       	breq	.+24     	; 0x1694 <MDIO_voidSetPortDirection+0x4e>
    167c:	1e c0       	rjmp	.+60     	; 0x16ba <MDIO_voidSetPortDirection+0x74>
    167e:	2b 81       	ldd	r18, Y+3	; 0x03
    1680:	3c 81       	ldd	r19, Y+4	; 0x04
    1682:	22 30       	cpi	r18, 0x02	; 2
    1684:	31 05       	cpc	r19, r1
    1686:	81 f0       	breq	.+32     	; 0x16a8 <MDIO_voidSetPortDirection+0x62>
    1688:	8b 81       	ldd	r24, Y+3	; 0x03
    168a:	9c 81       	ldd	r25, Y+4	; 0x04
    168c:	83 30       	cpi	r24, 0x03	; 3
    168e:	91 05       	cpc	r25, r1
    1690:	81 f0       	breq	.+32     	; 0x16b2 <MDIO_voidSetPortDirection+0x6c>
    1692:	13 c0       	rjmp	.+38     	; 0x16ba <MDIO_voidSetPortDirection+0x74>
    {
        case PORTA:DDRA_REG=A_u8Value;
    1694:	ea e3       	ldi	r30, 0x3A	; 58
    1696:	f0 e0       	ldi	r31, 0x00	; 0
    1698:	8a 81       	ldd	r24, Y+2	; 0x02
    169a:	80 83       	st	Z, r24
    169c:	0e c0       	rjmp	.+28     	; 0x16ba <MDIO_voidSetPortDirection+0x74>
        break;
        case PORTB:DDRB_REG=A_u8Value;
    169e:	e7 e3       	ldi	r30, 0x37	; 55
    16a0:	f0 e0       	ldi	r31, 0x00	; 0
    16a2:	8a 81       	ldd	r24, Y+2	; 0x02
    16a4:	80 83       	st	Z, r24
    16a6:	09 c0       	rjmp	.+18     	; 0x16ba <MDIO_voidSetPortDirection+0x74>
        break;
        case PORTC:DDRC_REG=A_u8Value;
    16a8:	e4 e3       	ldi	r30, 0x34	; 52
    16aa:	f0 e0       	ldi	r31, 0x00	; 0
    16ac:	8a 81       	ldd	r24, Y+2	; 0x02
    16ae:	80 83       	st	Z, r24
    16b0:	04 c0       	rjmp	.+8      	; 0x16ba <MDIO_voidSetPortDirection+0x74>
        break;
        case PORTD:DDRD_REG=A_u8Value;
    16b2:	e1 e3       	ldi	r30, 0x31	; 49
    16b4:	f0 e0       	ldi	r31, 0x00	; 0
    16b6:	8a 81       	ldd	r24, Y+2	; 0x02
    16b8:	80 83       	st	Z, r24
        break;
    }
    16ba:	0f 90       	pop	r0
    16bc:	0f 90       	pop	r0
    16be:	0f 90       	pop	r0
    16c0:	0f 90       	pop	r0
    16c2:	cf 91       	pop	r28
    16c4:	df 91       	pop	r29
    16c6:	08 95       	ret

000016c8 <MEXTI_voidConfig>:
void (*EXTI0_CallBack)(void)=NULL;
void (*EXTI1_CallBack)(void)=NULL;
void (*EXTI2_CallBack)(void)=NULL;

void MEXTI_voidConfig(u8 A_u8EXTINo,u8 A_u8SenseMode)
{
    16c8:	df 93       	push	r29
    16ca:	cf 93       	push	r28
    16cc:	00 d0       	rcall	.+0      	; 0x16ce <MEXTI_voidConfig+0x6>
    16ce:	00 d0       	rcall	.+0      	; 0x16d0 <MEXTI_voidConfig+0x8>
    16d0:	00 d0       	rcall	.+0      	; 0x16d2 <MEXTI_voidConfig+0xa>
    16d2:	cd b7       	in	r28, 0x3d	; 61
    16d4:	de b7       	in	r29, 0x3e	; 62
    16d6:	89 83       	std	Y+1, r24	; 0x01
    16d8:	6a 83       	std	Y+2, r22	; 0x02
    if(A_u8SenseMode <4)
    16da:	8a 81       	ldd	r24, Y+2	; 0x02
    16dc:	84 30       	cpi	r24, 0x04	; 4
    16de:	08 f0       	brcs	.+2      	; 0x16e2 <MEXTI_voidConfig+0x1a>
    16e0:	5a c0       	rjmp	.+180    	; 0x1796 <MEXTI_voidConfig+0xce>
    {
        switch (A_u8EXTINo)
    16e2:	89 81       	ldd	r24, Y+1	; 0x01
    16e4:	28 2f       	mov	r18, r24
    16e6:	30 e0       	ldi	r19, 0x00	; 0
    16e8:	3e 83       	std	Y+6, r19	; 0x06
    16ea:	2d 83       	std	Y+5, r18	; 0x05
    16ec:	8d 81       	ldd	r24, Y+5	; 0x05
    16ee:	9e 81       	ldd	r25, Y+6	; 0x06
    16f0:	81 30       	cpi	r24, 0x01	; 1
    16f2:	91 05       	cpc	r25, r1
    16f4:	d1 f0       	breq	.+52     	; 0x172a <MEXTI_voidConfig+0x62>
    16f6:	2d 81       	ldd	r18, Y+5	; 0x05
    16f8:	3e 81       	ldd	r19, Y+6	; 0x06
    16fa:	22 30       	cpi	r18, 0x02	; 2
    16fc:	31 05       	cpc	r19, r1
    16fe:	61 f1       	breq	.+88     	; 0x1758 <MEXTI_voidConfig+0x90>
    1700:	8d 81       	ldd	r24, Y+5	; 0x05
    1702:	9e 81       	ldd	r25, Y+6	; 0x06
    1704:	00 97       	sbiw	r24, 0x00	; 0
    1706:	09 f0       	breq	.+2      	; 0x170a <MEXTI_voidConfig+0x42>
    1708:	46 c0       	rjmp	.+140    	; 0x1796 <MEXTI_voidConfig+0xce>
        {
        case EXTI0:
            MCUCR &=~(SENSE_MODE_MASK<<ISC00); //clearing bits
    170a:	a5 e5       	ldi	r26, 0x55	; 85
    170c:	b0 e0       	ldi	r27, 0x00	; 0
    170e:	e5 e5       	ldi	r30, 0x55	; 85
    1710:	f0 e0       	ldi	r31, 0x00	; 0
    1712:	80 81       	ld	r24, Z
    1714:	8c 7f       	andi	r24, 0xFC	; 252
    1716:	8c 93       	st	X, r24
            MCUCR |=(A_u8SenseMode<<ISC00); //puting values
    1718:	a5 e5       	ldi	r26, 0x55	; 85
    171a:	b0 e0       	ldi	r27, 0x00	; 0
    171c:	e5 e5       	ldi	r30, 0x55	; 85
    171e:	f0 e0       	ldi	r31, 0x00	; 0
    1720:	90 81       	ld	r25, Z
    1722:	8a 81       	ldd	r24, Y+2	; 0x02
    1724:	89 2b       	or	r24, r25
    1726:	8c 93       	st	X, r24
    1728:	36 c0       	rjmp	.+108    	; 0x1796 <MEXTI_voidConfig+0xce>
            break;

        case EXTI1:
            MCUCR &=~(SENSE_MODE_MASK<<ISC10); //clearing bits
    172a:	a5 e5       	ldi	r26, 0x55	; 85
    172c:	b0 e0       	ldi	r27, 0x00	; 0
    172e:	e5 e5       	ldi	r30, 0x55	; 85
    1730:	f0 e0       	ldi	r31, 0x00	; 0
    1732:	80 81       	ld	r24, Z
    1734:	83 7f       	andi	r24, 0xF3	; 243
    1736:	8c 93       	st	X, r24
            MCUCR |=(A_u8SenseMode<<ISC10); //puting values
    1738:	a5 e5       	ldi	r26, 0x55	; 85
    173a:	b0 e0       	ldi	r27, 0x00	; 0
    173c:	e5 e5       	ldi	r30, 0x55	; 85
    173e:	f0 e0       	ldi	r31, 0x00	; 0
    1740:	80 81       	ld	r24, Z
    1742:	28 2f       	mov	r18, r24
    1744:	8a 81       	ldd	r24, Y+2	; 0x02
    1746:	88 2f       	mov	r24, r24
    1748:	90 e0       	ldi	r25, 0x00	; 0
    174a:	88 0f       	add	r24, r24
    174c:	99 1f       	adc	r25, r25
    174e:	88 0f       	add	r24, r24
    1750:	99 1f       	adc	r25, r25
    1752:	82 2b       	or	r24, r18
    1754:	8c 93       	st	X, r24
    1756:	1f c0       	rjmp	.+62     	; 0x1796 <MEXTI_voidConfig+0xce>
            break;
        
        case EXTI2:
            switch (A_u8SenseMode)
    1758:	8a 81       	ldd	r24, Y+2	; 0x02
    175a:	28 2f       	mov	r18, r24
    175c:	30 e0       	ldi	r19, 0x00	; 0
    175e:	3c 83       	std	Y+4, r19	; 0x04
    1760:	2b 83       	std	Y+3, r18	; 0x03
    1762:	8b 81       	ldd	r24, Y+3	; 0x03
    1764:	9c 81       	ldd	r25, Y+4	; 0x04
    1766:	82 30       	cpi	r24, 0x02	; 2
    1768:	91 05       	cpc	r25, r1
    176a:	31 f0       	breq	.+12     	; 0x1778 <MEXTI_voidConfig+0xb0>
    176c:	2b 81       	ldd	r18, Y+3	; 0x03
    176e:	3c 81       	ldd	r19, Y+4	; 0x04
    1770:	23 30       	cpi	r18, 0x03	; 3
    1772:	31 05       	cpc	r19, r1
    1774:	49 f0       	breq	.+18     	; 0x1788 <MEXTI_voidConfig+0xc0>
    1776:	0f c0       	rjmp	.+30     	; 0x1796 <MEXTI_voidConfig+0xce>
            {
                case FALLING_EDGE:CLR_BIT(MCUCSR,ISC2);
    1778:	a4 e5       	ldi	r26, 0x54	; 84
    177a:	b0 e0       	ldi	r27, 0x00	; 0
    177c:	e4 e5       	ldi	r30, 0x54	; 84
    177e:	f0 e0       	ldi	r31, 0x00	; 0
    1780:	80 81       	ld	r24, Z
    1782:	8f 7b       	andi	r24, 0xBF	; 191
    1784:	8c 93       	st	X, r24
    1786:	07 c0       	rjmp	.+14     	; 0x1796 <MEXTI_voidConfig+0xce>
                break;

                case RISING_EDGE:SET_BIT(MCUCSR,ISC2);
    1788:	a4 e5       	ldi	r26, 0x54	; 84
    178a:	b0 e0       	ldi	r27, 0x00	; 0
    178c:	e4 e5       	ldi	r30, 0x54	; 84
    178e:	f0 e0       	ldi	r31, 0x00	; 0
    1790:	80 81       	ld	r24, Z
    1792:	80 64       	ori	r24, 0x40	; 64
    1794:	8c 93       	st	X, r24
        
        default:
            break;
        }
    }
}
    1796:	26 96       	adiw	r28, 0x06	; 6
    1798:	0f b6       	in	r0, 0x3f	; 63
    179a:	f8 94       	cli
    179c:	de bf       	out	0x3e, r29	; 62
    179e:	0f be       	out	0x3f, r0	; 63
    17a0:	cd bf       	out	0x3d, r28	; 61
    17a2:	cf 91       	pop	r28
    17a4:	df 91       	pop	r29
    17a6:	08 95       	ret

000017a8 <MEXTI_voidEnable>:

void MEXTI_voidEnable(u8 A_u8EXTI)
{
    17a8:	df 93       	push	r29
    17aa:	cf 93       	push	r28
    17ac:	00 d0       	rcall	.+0      	; 0x17ae <MEXTI_voidEnable+0x6>
    17ae:	0f 92       	push	r0
    17b0:	cd b7       	in	r28, 0x3d	; 61
    17b2:	de b7       	in	r29, 0x3e	; 62
    17b4:	89 83       	std	Y+1, r24	; 0x01
    switch(A_u8EXTI)
    17b6:	89 81       	ldd	r24, Y+1	; 0x01
    17b8:	28 2f       	mov	r18, r24
    17ba:	30 e0       	ldi	r19, 0x00	; 0
    17bc:	3b 83       	std	Y+3, r19	; 0x03
    17be:	2a 83       	std	Y+2, r18	; 0x02
    17c0:	8a 81       	ldd	r24, Y+2	; 0x02
    17c2:	9b 81       	ldd	r25, Y+3	; 0x03
    17c4:	81 30       	cpi	r24, 0x01	; 1
    17c6:	91 05       	cpc	r25, r1
    17c8:	89 f0       	breq	.+34     	; 0x17ec <MEXTI_voidEnable+0x44>
    17ca:	2a 81       	ldd	r18, Y+2	; 0x02
    17cc:	3b 81       	ldd	r19, Y+3	; 0x03
    17ce:	22 30       	cpi	r18, 0x02	; 2
    17d0:	31 05       	cpc	r19, r1
    17d2:	a1 f0       	breq	.+40     	; 0x17fc <MEXTI_voidEnable+0x54>
    17d4:	8a 81       	ldd	r24, Y+2	; 0x02
    17d6:	9b 81       	ldd	r25, Y+3	; 0x03
    17d8:	00 97       	sbiw	r24, 0x00	; 0
    17da:	b9 f4       	brne	.+46     	; 0x180a <MEXTI_voidEnable+0x62>
    {
        case EXTI0: SET_BIT(GICR,INT0);
    17dc:	ab e5       	ldi	r26, 0x5B	; 91
    17de:	b0 e0       	ldi	r27, 0x00	; 0
    17e0:	eb e5       	ldi	r30, 0x5B	; 91
    17e2:	f0 e0       	ldi	r31, 0x00	; 0
    17e4:	80 81       	ld	r24, Z
    17e6:	80 64       	ori	r24, 0x40	; 64
    17e8:	8c 93       	st	X, r24
    17ea:	0f c0       	rjmp	.+30     	; 0x180a <MEXTI_voidEnable+0x62>
        break;
        case EXTI1: SET_BIT(GICR,INT1);
    17ec:	ab e5       	ldi	r26, 0x5B	; 91
    17ee:	b0 e0       	ldi	r27, 0x00	; 0
    17f0:	eb e5       	ldi	r30, 0x5B	; 91
    17f2:	f0 e0       	ldi	r31, 0x00	; 0
    17f4:	80 81       	ld	r24, Z
    17f6:	80 68       	ori	r24, 0x80	; 128
    17f8:	8c 93       	st	X, r24
    17fa:	07 c0       	rjmp	.+14     	; 0x180a <MEXTI_voidEnable+0x62>
        break;
        case EXTI2: SET_BIT(GICR,INT2);
    17fc:	ab e5       	ldi	r26, 0x5B	; 91
    17fe:	b0 e0       	ldi	r27, 0x00	; 0
    1800:	eb e5       	ldi	r30, 0x5B	; 91
    1802:	f0 e0       	ldi	r31, 0x00	; 0
    1804:	80 81       	ld	r24, Z
    1806:	80 62       	ori	r24, 0x20	; 32
    1808:	8c 93       	st	X, r24
        break;
    }
}
    180a:	0f 90       	pop	r0
    180c:	0f 90       	pop	r0
    180e:	0f 90       	pop	r0
    1810:	cf 91       	pop	r28
    1812:	df 91       	pop	r29
    1814:	08 95       	ret

00001816 <MEXTI_voidDisable>:

void MEXTI_voidDisable(u8 A_u8EXTI)
{
    1816:	df 93       	push	r29
    1818:	cf 93       	push	r28
    181a:	00 d0       	rcall	.+0      	; 0x181c <MEXTI_voidDisable+0x6>
    181c:	0f 92       	push	r0
    181e:	cd b7       	in	r28, 0x3d	; 61
    1820:	de b7       	in	r29, 0x3e	; 62
    1822:	89 83       	std	Y+1, r24	; 0x01
    switch(A_u8EXTI)
    1824:	89 81       	ldd	r24, Y+1	; 0x01
    1826:	28 2f       	mov	r18, r24
    1828:	30 e0       	ldi	r19, 0x00	; 0
    182a:	3b 83       	std	Y+3, r19	; 0x03
    182c:	2a 83       	std	Y+2, r18	; 0x02
    182e:	8a 81       	ldd	r24, Y+2	; 0x02
    1830:	9b 81       	ldd	r25, Y+3	; 0x03
    1832:	81 30       	cpi	r24, 0x01	; 1
    1834:	91 05       	cpc	r25, r1
    1836:	89 f0       	breq	.+34     	; 0x185a <MEXTI_voidDisable+0x44>
    1838:	2a 81       	ldd	r18, Y+2	; 0x02
    183a:	3b 81       	ldd	r19, Y+3	; 0x03
    183c:	22 30       	cpi	r18, 0x02	; 2
    183e:	31 05       	cpc	r19, r1
    1840:	a1 f0       	breq	.+40     	; 0x186a <MEXTI_voidDisable+0x54>
    1842:	8a 81       	ldd	r24, Y+2	; 0x02
    1844:	9b 81       	ldd	r25, Y+3	; 0x03
    1846:	00 97       	sbiw	r24, 0x00	; 0
    1848:	b9 f4       	brne	.+46     	; 0x1878 <MEXTI_voidDisable+0x62>
    {
        case EXTI0: CLR_BIT(GICR,INT0);
    184a:	ab e5       	ldi	r26, 0x5B	; 91
    184c:	b0 e0       	ldi	r27, 0x00	; 0
    184e:	eb e5       	ldi	r30, 0x5B	; 91
    1850:	f0 e0       	ldi	r31, 0x00	; 0
    1852:	80 81       	ld	r24, Z
    1854:	8f 7b       	andi	r24, 0xBF	; 191
    1856:	8c 93       	st	X, r24
    1858:	0f c0       	rjmp	.+30     	; 0x1878 <MEXTI_voidDisable+0x62>
        break;
        case EXTI1: CLR_BIT(GICR,INT1);
    185a:	ab e5       	ldi	r26, 0x5B	; 91
    185c:	b0 e0       	ldi	r27, 0x00	; 0
    185e:	eb e5       	ldi	r30, 0x5B	; 91
    1860:	f0 e0       	ldi	r31, 0x00	; 0
    1862:	80 81       	ld	r24, Z
    1864:	8f 77       	andi	r24, 0x7F	; 127
    1866:	8c 93       	st	X, r24
    1868:	07 c0       	rjmp	.+14     	; 0x1878 <MEXTI_voidDisable+0x62>
        break;
        case EXTI2: CLR_BIT(GICR,INT2);
    186a:	ab e5       	ldi	r26, 0x5B	; 91
    186c:	b0 e0       	ldi	r27, 0x00	; 0
    186e:	eb e5       	ldi	r30, 0x5B	; 91
    1870:	f0 e0       	ldi	r31, 0x00	; 0
    1872:	80 81       	ld	r24, Z
    1874:	8f 7d       	andi	r24, 0xDF	; 223
    1876:	8c 93       	st	X, r24
        break;
    }
}
    1878:	0f 90       	pop	r0
    187a:	0f 90       	pop	r0
    187c:	0f 90       	pop	r0
    187e:	cf 91       	pop	r28
    1880:	df 91       	pop	r29
    1882:	08 95       	ret

00001884 <MEXTI_voidClearFlag>:

void MEXTI_voidClearFlag(u8 A_u8EXTI)
{
    1884:	df 93       	push	r29
    1886:	cf 93       	push	r28
    1888:	00 d0       	rcall	.+0      	; 0x188a <MEXTI_voidClearFlag+0x6>
    188a:	0f 92       	push	r0
    188c:	cd b7       	in	r28, 0x3d	; 61
    188e:	de b7       	in	r29, 0x3e	; 62
    1890:	89 83       	std	Y+1, r24	; 0x01
    switch(A_u8EXTI)
    1892:	89 81       	ldd	r24, Y+1	; 0x01
    1894:	28 2f       	mov	r18, r24
    1896:	30 e0       	ldi	r19, 0x00	; 0
    1898:	3b 83       	std	Y+3, r19	; 0x03
    189a:	2a 83       	std	Y+2, r18	; 0x02
    189c:	8a 81       	ldd	r24, Y+2	; 0x02
    189e:	9b 81       	ldd	r25, Y+3	; 0x03
    18a0:	81 30       	cpi	r24, 0x01	; 1
    18a2:	91 05       	cpc	r25, r1
    18a4:	89 f0       	breq	.+34     	; 0x18c8 <MEXTI_voidClearFlag+0x44>
    18a6:	2a 81       	ldd	r18, Y+2	; 0x02
    18a8:	3b 81       	ldd	r19, Y+3	; 0x03
    18aa:	22 30       	cpi	r18, 0x02	; 2
    18ac:	31 05       	cpc	r19, r1
    18ae:	a1 f0       	breq	.+40     	; 0x18d8 <MEXTI_voidClearFlag+0x54>
    18b0:	8a 81       	ldd	r24, Y+2	; 0x02
    18b2:	9b 81       	ldd	r25, Y+3	; 0x03
    18b4:	00 97       	sbiw	r24, 0x00	; 0
    18b6:	b9 f4       	brne	.+46     	; 0x18e6 <MEXTI_voidClearFlag+0x62>
    {
        case EXTI0: SET_BIT(GIFR,INTF0);
    18b8:	aa e5       	ldi	r26, 0x5A	; 90
    18ba:	b0 e0       	ldi	r27, 0x00	; 0
    18bc:	ea e5       	ldi	r30, 0x5A	; 90
    18be:	f0 e0       	ldi	r31, 0x00	; 0
    18c0:	80 81       	ld	r24, Z
    18c2:	80 64       	ori	r24, 0x40	; 64
    18c4:	8c 93       	st	X, r24
    18c6:	0f c0       	rjmp	.+30     	; 0x18e6 <MEXTI_voidClearFlag+0x62>
        break;
        case EXTI1: SET_BIT(GIFR,INTF1);
    18c8:	aa e5       	ldi	r26, 0x5A	; 90
    18ca:	b0 e0       	ldi	r27, 0x00	; 0
    18cc:	ea e5       	ldi	r30, 0x5A	; 90
    18ce:	f0 e0       	ldi	r31, 0x00	; 0
    18d0:	80 81       	ld	r24, Z
    18d2:	80 68       	ori	r24, 0x80	; 128
    18d4:	8c 93       	st	X, r24
    18d6:	07 c0       	rjmp	.+14     	; 0x18e6 <MEXTI_voidClearFlag+0x62>
        break;
        case EXTI2: SET_BIT(GIFR,INTF2);
    18d8:	aa e5       	ldi	r26, 0x5A	; 90
    18da:	b0 e0       	ldi	r27, 0x00	; 0
    18dc:	ea e5       	ldi	r30, 0x5A	; 90
    18de:	f0 e0       	ldi	r31, 0x00	; 0
    18e0:	80 81       	ld	r24, Z
    18e2:	80 62       	ori	r24, 0x20	; 32
    18e4:	8c 93       	st	X, r24
        break;
    }
}
    18e6:	0f 90       	pop	r0
    18e8:	0f 90       	pop	r0
    18ea:	0f 90       	pop	r0
    18ec:	cf 91       	pop	r28
    18ee:	df 91       	pop	r29
    18f0:	08 95       	ret

000018f2 <MEXTI_voidSetCallBack>:

void MEXTI_voidSetCallBack(u8 A_u8EXTI,void (*ptrToFunc)(void))
{
    18f2:	df 93       	push	r29
    18f4:	cf 93       	push	r28
    18f6:	00 d0       	rcall	.+0      	; 0x18f8 <MEXTI_voidSetCallBack+0x6>
    18f8:	00 d0       	rcall	.+0      	; 0x18fa <MEXTI_voidSetCallBack+0x8>
    18fa:	0f 92       	push	r0
    18fc:	cd b7       	in	r28, 0x3d	; 61
    18fe:	de b7       	in	r29, 0x3e	; 62
    1900:	89 83       	std	Y+1, r24	; 0x01
    1902:	7b 83       	std	Y+3, r23	; 0x03
    1904:	6a 83       	std	Y+2, r22	; 0x02
    if(ptrToFunc!=NULL)
    1906:	8a 81       	ldd	r24, Y+2	; 0x02
    1908:	9b 81       	ldd	r25, Y+3	; 0x03
    190a:	00 97       	sbiw	r24, 0x00	; 0
    190c:	39 f1       	breq	.+78     	; 0x195c <MEXTI_voidSetCallBack+0x6a>
    {
        switch (A_u8EXTI)
    190e:	89 81       	ldd	r24, Y+1	; 0x01
    1910:	28 2f       	mov	r18, r24
    1912:	30 e0       	ldi	r19, 0x00	; 0
    1914:	3d 83       	std	Y+5, r19	; 0x05
    1916:	2c 83       	std	Y+4, r18	; 0x04
    1918:	8c 81       	ldd	r24, Y+4	; 0x04
    191a:	9d 81       	ldd	r25, Y+5	; 0x05
    191c:	81 30       	cpi	r24, 0x01	; 1
    191e:	91 05       	cpc	r25, r1
    1920:	81 f0       	breq	.+32     	; 0x1942 <MEXTI_voidSetCallBack+0x50>
    1922:	2c 81       	ldd	r18, Y+4	; 0x04
    1924:	3d 81       	ldd	r19, Y+5	; 0x05
    1926:	22 30       	cpi	r18, 0x02	; 2
    1928:	31 05       	cpc	r19, r1
    192a:	91 f0       	breq	.+36     	; 0x1950 <MEXTI_voidSetCallBack+0x5e>
    192c:	8c 81       	ldd	r24, Y+4	; 0x04
    192e:	9d 81       	ldd	r25, Y+5	; 0x05
    1930:	00 97       	sbiw	r24, 0x00	; 0
    1932:	a1 f4       	brne	.+40     	; 0x195c <MEXTI_voidSetCallBack+0x6a>
        {
        case EXTI0:EXTI0_CallBack=ptrToFunc;break;
    1934:	8a 81       	ldd	r24, Y+2	; 0x02
    1936:	9b 81       	ldd	r25, Y+3	; 0x03
    1938:	90 93 9b 00 	sts	0x009B, r25
    193c:	80 93 9a 00 	sts	0x009A, r24
    1940:	0d c0       	rjmp	.+26     	; 0x195c <MEXTI_voidSetCallBack+0x6a>
        case EXTI1:EXTI1_CallBack=ptrToFunc;break;
    1942:	8a 81       	ldd	r24, Y+2	; 0x02
    1944:	9b 81       	ldd	r25, Y+3	; 0x03
    1946:	90 93 9d 00 	sts	0x009D, r25
    194a:	80 93 9c 00 	sts	0x009C, r24
    194e:	06 c0       	rjmp	.+12     	; 0x195c <MEXTI_voidSetCallBack+0x6a>
        case EXTI2:EXTI2_CallBack=ptrToFunc;break;
    1950:	8a 81       	ldd	r24, Y+2	; 0x02
    1952:	9b 81       	ldd	r25, Y+3	; 0x03
    1954:	90 93 9f 00 	sts	0x009F, r25
    1958:	80 93 9e 00 	sts	0x009E, r24
        default:
            break;
        }
    }
}
    195c:	0f 90       	pop	r0
    195e:	0f 90       	pop	r0
    1960:	0f 90       	pop	r0
    1962:	0f 90       	pop	r0
    1964:	0f 90       	pop	r0
    1966:	cf 91       	pop	r28
    1968:	df 91       	pop	r29
    196a:	08 95       	ret

0000196c <__vector_1>:



void __vector_1(void)  __attribute__((signal)); //__attribute__ for linker to recognize as ISR
void __vector_1(void)
{
    196c:	1f 92       	push	r1
    196e:	0f 92       	push	r0
    1970:	0f b6       	in	r0, 0x3f	; 63
    1972:	0f 92       	push	r0
    1974:	11 24       	eor	r1, r1
    1976:	2f 93       	push	r18
    1978:	3f 93       	push	r19
    197a:	4f 93       	push	r20
    197c:	5f 93       	push	r21
    197e:	6f 93       	push	r22
    1980:	7f 93       	push	r23
    1982:	8f 93       	push	r24
    1984:	9f 93       	push	r25
    1986:	af 93       	push	r26
    1988:	bf 93       	push	r27
    198a:	ef 93       	push	r30
    198c:	ff 93       	push	r31
    198e:	df 93       	push	r29
    1990:	cf 93       	push	r28
    1992:	cd b7       	in	r28, 0x3d	; 61
    1994:	de b7       	in	r29, 0x3e	; 62
    if(EXTI0_CallBack!=NULL)
    1996:	80 91 9a 00 	lds	r24, 0x009A
    199a:	90 91 9b 00 	lds	r25, 0x009B
    199e:	00 97       	sbiw	r24, 0x00	; 0
    19a0:	29 f0       	breq	.+10     	; 0x19ac <__vector_1+0x40>
    {
        EXTI0_CallBack();
    19a2:	e0 91 9a 00 	lds	r30, 0x009A
    19a6:	f0 91 9b 00 	lds	r31, 0x009B
    19aa:	09 95       	icall
    }
}
    19ac:	cf 91       	pop	r28
    19ae:	df 91       	pop	r29
    19b0:	ff 91       	pop	r31
    19b2:	ef 91       	pop	r30
    19b4:	bf 91       	pop	r27
    19b6:	af 91       	pop	r26
    19b8:	9f 91       	pop	r25
    19ba:	8f 91       	pop	r24
    19bc:	7f 91       	pop	r23
    19be:	6f 91       	pop	r22
    19c0:	5f 91       	pop	r21
    19c2:	4f 91       	pop	r20
    19c4:	3f 91       	pop	r19
    19c6:	2f 91       	pop	r18
    19c8:	0f 90       	pop	r0
    19ca:	0f be       	out	0x3f, r0	; 63
    19cc:	0f 90       	pop	r0
    19ce:	1f 90       	pop	r1
    19d0:	18 95       	reti

000019d2 <__vector_2>:

void __vector_2(void)  __attribute__((signal)); //__attribute__ for linker to recognize as ISR
void __vector_2(void)
{
    19d2:	1f 92       	push	r1
    19d4:	0f 92       	push	r0
    19d6:	0f b6       	in	r0, 0x3f	; 63
    19d8:	0f 92       	push	r0
    19da:	11 24       	eor	r1, r1
    19dc:	2f 93       	push	r18
    19de:	3f 93       	push	r19
    19e0:	4f 93       	push	r20
    19e2:	5f 93       	push	r21
    19e4:	6f 93       	push	r22
    19e6:	7f 93       	push	r23
    19e8:	8f 93       	push	r24
    19ea:	9f 93       	push	r25
    19ec:	af 93       	push	r26
    19ee:	bf 93       	push	r27
    19f0:	ef 93       	push	r30
    19f2:	ff 93       	push	r31
    19f4:	df 93       	push	r29
    19f6:	cf 93       	push	r28
    19f8:	cd b7       	in	r28, 0x3d	; 61
    19fa:	de b7       	in	r29, 0x3e	; 62
    if(EXTI1_CallBack!=NULL)
    19fc:	80 91 9c 00 	lds	r24, 0x009C
    1a00:	90 91 9d 00 	lds	r25, 0x009D
    1a04:	00 97       	sbiw	r24, 0x00	; 0
    1a06:	29 f0       	breq	.+10     	; 0x1a12 <__vector_2+0x40>
    {
        EXTI1_CallBack();
    1a08:	e0 91 9c 00 	lds	r30, 0x009C
    1a0c:	f0 91 9d 00 	lds	r31, 0x009D
    1a10:	09 95       	icall
    }
}
    1a12:	cf 91       	pop	r28
    1a14:	df 91       	pop	r29
    1a16:	ff 91       	pop	r31
    1a18:	ef 91       	pop	r30
    1a1a:	bf 91       	pop	r27
    1a1c:	af 91       	pop	r26
    1a1e:	9f 91       	pop	r25
    1a20:	8f 91       	pop	r24
    1a22:	7f 91       	pop	r23
    1a24:	6f 91       	pop	r22
    1a26:	5f 91       	pop	r21
    1a28:	4f 91       	pop	r20
    1a2a:	3f 91       	pop	r19
    1a2c:	2f 91       	pop	r18
    1a2e:	0f 90       	pop	r0
    1a30:	0f be       	out	0x3f, r0	; 63
    1a32:	0f 90       	pop	r0
    1a34:	1f 90       	pop	r1
    1a36:	18 95       	reti

00001a38 <__vector_3>:
void __vector_3(void)  __attribute__((signal)); //__attribute__ for linker to recognize as ISR
void __vector_3(void)
{
    1a38:	1f 92       	push	r1
    1a3a:	0f 92       	push	r0
    1a3c:	0f b6       	in	r0, 0x3f	; 63
    1a3e:	0f 92       	push	r0
    1a40:	11 24       	eor	r1, r1
    1a42:	2f 93       	push	r18
    1a44:	3f 93       	push	r19
    1a46:	4f 93       	push	r20
    1a48:	5f 93       	push	r21
    1a4a:	6f 93       	push	r22
    1a4c:	7f 93       	push	r23
    1a4e:	8f 93       	push	r24
    1a50:	9f 93       	push	r25
    1a52:	af 93       	push	r26
    1a54:	bf 93       	push	r27
    1a56:	ef 93       	push	r30
    1a58:	ff 93       	push	r31
    1a5a:	df 93       	push	r29
    1a5c:	cf 93       	push	r28
    1a5e:	cd b7       	in	r28, 0x3d	; 61
    1a60:	de b7       	in	r29, 0x3e	; 62
    if(EXTI2_CallBack!=NULL)
    1a62:	80 91 9e 00 	lds	r24, 0x009E
    1a66:	90 91 9f 00 	lds	r25, 0x009F
    1a6a:	00 97       	sbiw	r24, 0x00	; 0
    1a6c:	29 f0       	breq	.+10     	; 0x1a78 <__vector_3+0x40>
    {
        EXTI2_CallBack();
    1a6e:	e0 91 9e 00 	lds	r30, 0x009E
    1a72:	f0 91 9f 00 	lds	r31, 0x009F
    1a76:	09 95       	icall
    }
    1a78:	cf 91       	pop	r28
    1a7a:	df 91       	pop	r29
    1a7c:	ff 91       	pop	r31
    1a7e:	ef 91       	pop	r30
    1a80:	bf 91       	pop	r27
    1a82:	af 91       	pop	r26
    1a84:	9f 91       	pop	r25
    1a86:	8f 91       	pop	r24
    1a88:	7f 91       	pop	r23
    1a8a:	6f 91       	pop	r22
    1a8c:	5f 91       	pop	r21
    1a8e:	4f 91       	pop	r20
    1a90:	3f 91       	pop	r19
    1a92:	2f 91       	pop	r18
    1a94:	0f 90       	pop	r0
    1a96:	0f be       	out	0x3f, r0	; 63
    1a98:	0f 90       	pop	r0
    1a9a:	1f 90       	pop	r1
    1a9c:	18 95       	reti

00001a9e <MGI_voidEnable>:
#include "../Include/MCAL/GI/GI_Configuration.h"



void MGI_voidEnable()
{
    1a9e:	df 93       	push	r29
    1aa0:	cf 93       	push	r28
    1aa2:	cd b7       	in	r28, 0x3d	; 61
    1aa4:	de b7       	in	r29, 0x3e	; 62
    SET_BIT(SREG,I_BIT);
    1aa6:	af e5       	ldi	r26, 0x5F	; 95
    1aa8:	b0 e0       	ldi	r27, 0x00	; 0
    1aaa:	ef e5       	ldi	r30, 0x5F	; 95
    1aac:	f0 e0       	ldi	r31, 0x00	; 0
    1aae:	80 81       	ld	r24, Z
    1ab0:	80 68       	ori	r24, 0x80	; 128
    1ab2:	8c 93       	st	X, r24
}
    1ab4:	cf 91       	pop	r28
    1ab6:	df 91       	pop	r29
    1ab8:	08 95       	ret

00001aba <MGI_voidDisable>:

void MGI_voidDisable()
{
    1aba:	df 93       	push	r29
    1abc:	cf 93       	push	r28
    1abe:	cd b7       	in	r28, 0x3d	; 61
    1ac0:	de b7       	in	r29, 0x3e	; 62
    
    CLR_BIT(SREG,I_BIT);
    1ac2:	af e5       	ldi	r26, 0x5F	; 95
    1ac4:	b0 e0       	ldi	r27, 0x00	; 0
    1ac6:	ef e5       	ldi	r30, 0x5F	; 95
    1ac8:	f0 e0       	ldi	r31, 0x00	; 0
    1aca:	80 81       	ld	r24, Z
    1acc:	8f 77       	andi	r24, 0x7F	; 127
    1ace:	8c 93       	st	X, r24
    1ad0:	cf 91       	pop	r28
    1ad2:	df 91       	pop	r29
    1ad4:	08 95       	ret

00001ad6 <HKEYPAD_u8GetPressedKey>:
u8 keypadRow[ROWS_NUMBER]=ROW_PINS;
u8 keypadCol[COLS_NUMBER]=COL_PINS;


u8 HKEYPAD_u8GetPressedKey()
{
    1ad6:	df 93       	push	r29
    1ad8:	cf 93       	push	r28
    1ada:	cd b7       	in	r28, 0x3d	; 61
    1adc:	de b7       	in	r29, 0x3e	; 62
    1ade:	62 97       	sbiw	r28, 0x12	; 18
    1ae0:	0f b6       	in	r0, 0x3f	; 63
    1ae2:	f8 94       	cli
    1ae4:	de bf       	out	0x3e, r29	; 62
    1ae6:	0f be       	out	0x3f, r0	; 63
    1ae8:	cd bf       	out	0x3d, r28	; 61
    u8 local_u8RowCounter,local_u8ColCounter,local_u8Flag=FLAG_DOWN,local_u8PressedKey=KEY_NOT_PRESSED;
    1aea:	18 8a       	std	Y+16, r1	; 0x10
    1aec:	8f ef       	ldi	r24, 0xFF	; 255
    1aee:	8f 87       	std	Y+15, r24	; 0x0f
    
    for(local_u8RowCounter=0;local_u8RowCounter<ROWS_NUMBER;local_u8RowCounter++)
    1af0:	1a 8a       	std	Y+18, r1	; 0x12
    1af2:	c9 c0       	rjmp	.+402    	; 0x1c86 <HKEYPAD_u8GetPressedKey+0x1b0>
    {
        MDIO_voidSetPinValue(KEYPAD_PORT,keypadRow[local_u8RowCounter],PIN_LOW);
    1af4:	8a 89       	ldd	r24, Y+18	; 0x12
    1af6:	88 2f       	mov	r24, r24
    1af8:	90 e0       	ldi	r25, 0x00	; 0
    1afa:	fc 01       	movw	r30, r24
    1afc:	e2 58       	subi	r30, 0x82	; 130
    1afe:	ff 4f       	sbci	r31, 0xFF	; 255
    1b00:	90 81       	ld	r25, Z
    1b02:	80 e0       	ldi	r24, 0x00	; 0
    1b04:	69 2f       	mov	r22, r25
    1b06:	40 e0       	ldi	r20, 0x00	; 0
    1b08:	0e 94 b6 08 	call	0x116c	; 0x116c <MDIO_voidSetPinValue>
        for(local_u8ColCounter=0;local_u8ColCounter<COLS_NUMBER;local_u8ColCounter++)
    1b0c:	19 8a       	std	Y+17, r1	; 0x11
    1b0e:	a5 c0       	rjmp	.+330    	; 0x1c5a <HKEYPAD_u8GetPressedKey+0x184>
        {
            if (MDIO_u8GetPinValue(KEYPAD_PORT,keypadCol[local_u8ColCounter])==PIN_LOW)
    1b10:	89 89       	ldd	r24, Y+17	; 0x11
    1b12:	88 2f       	mov	r24, r24
    1b14:	90 e0       	ldi	r25, 0x00	; 0
    1b16:	fc 01       	movw	r30, r24
    1b18:	ee 57       	subi	r30, 0x7E	; 126
    1b1a:	ff 4f       	sbci	r31, 0xFF	; 255
    1b1c:	90 81       	ld	r25, Z
    1b1e:	80 e0       	ldi	r24, 0x00	; 0
    1b20:	69 2f       	mov	r22, r25
    1b22:	0e 94 02 08 	call	0x1004	; 0x1004 <MDIO_u8GetPinValue>
    1b26:	88 23       	and	r24, r24
    1b28:	09 f0       	breq	.+2      	; 0x1b2c <HKEYPAD_u8GetPressedKey+0x56>
    1b2a:	94 c0       	rjmp	.+296    	; 0x1c54 <HKEYPAD_u8GetPressedKey+0x17e>
    1b2c:	80 e0       	ldi	r24, 0x00	; 0
    1b2e:	90 e0       	ldi	r25, 0x00	; 0
    1b30:	a6 e1       	ldi	r26, 0x16	; 22
    1b32:	b3 e4       	ldi	r27, 0x43	; 67
    1b34:	8b 87       	std	Y+11, r24	; 0x0b
    1b36:	9c 87       	std	Y+12, r25	; 0x0c
    1b38:	ad 87       	std	Y+13, r26	; 0x0d
    1b3a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b3c:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b3e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b40:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b42:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b44:	20 e0       	ldi	r18, 0x00	; 0
    1b46:	30 e0       	ldi	r19, 0x00	; 0
    1b48:	4a ef       	ldi	r20, 0xFA	; 250
    1b4a:	54 e4       	ldi	r21, 0x44	; 68
    1b4c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b50:	dc 01       	movw	r26, r24
    1b52:	cb 01       	movw	r24, r22
    1b54:	8f 83       	std	Y+7, r24	; 0x07
    1b56:	98 87       	std	Y+8, r25	; 0x08
    1b58:	a9 87       	std	Y+9, r26	; 0x09
    1b5a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1b5c:	6f 81       	ldd	r22, Y+7	; 0x07
    1b5e:	78 85       	ldd	r23, Y+8	; 0x08
    1b60:	89 85       	ldd	r24, Y+9	; 0x09
    1b62:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b64:	20 e0       	ldi	r18, 0x00	; 0
    1b66:	30 e0       	ldi	r19, 0x00	; 0
    1b68:	40 e8       	ldi	r20, 0x80	; 128
    1b6a:	5f e3       	ldi	r21, 0x3F	; 63
    1b6c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1b70:	88 23       	and	r24, r24
    1b72:	2c f4       	brge	.+10     	; 0x1b7e <HKEYPAD_u8GetPressedKey+0xa8>
		__ticks = 1;
    1b74:	81 e0       	ldi	r24, 0x01	; 1
    1b76:	90 e0       	ldi	r25, 0x00	; 0
    1b78:	9e 83       	std	Y+6, r25	; 0x06
    1b7a:	8d 83       	std	Y+5, r24	; 0x05
    1b7c:	3f c0       	rjmp	.+126    	; 0x1bfc <HKEYPAD_u8GetPressedKey+0x126>
	else if (__tmp > 65535)
    1b7e:	6f 81       	ldd	r22, Y+7	; 0x07
    1b80:	78 85       	ldd	r23, Y+8	; 0x08
    1b82:	89 85       	ldd	r24, Y+9	; 0x09
    1b84:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b86:	20 e0       	ldi	r18, 0x00	; 0
    1b88:	3f ef       	ldi	r19, 0xFF	; 255
    1b8a:	4f e7       	ldi	r20, 0x7F	; 127
    1b8c:	57 e4       	ldi	r21, 0x47	; 71
    1b8e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1b92:	18 16       	cp	r1, r24
    1b94:	4c f5       	brge	.+82     	; 0x1be8 <HKEYPAD_u8GetPressedKey+0x112>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b96:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b98:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b9a:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b9c:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b9e:	20 e0       	ldi	r18, 0x00	; 0
    1ba0:	30 e0       	ldi	r19, 0x00	; 0
    1ba2:	40 e2       	ldi	r20, 0x20	; 32
    1ba4:	51 e4       	ldi	r21, 0x41	; 65
    1ba6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1baa:	dc 01       	movw	r26, r24
    1bac:	cb 01       	movw	r24, r22
    1bae:	bc 01       	movw	r22, r24
    1bb0:	cd 01       	movw	r24, r26
    1bb2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bb6:	dc 01       	movw	r26, r24
    1bb8:	cb 01       	movw	r24, r22
    1bba:	9e 83       	std	Y+6, r25	; 0x06
    1bbc:	8d 83       	std	Y+5, r24	; 0x05
    1bbe:	0f c0       	rjmp	.+30     	; 0x1bde <HKEYPAD_u8GetPressedKey+0x108>
    1bc0:	88 ec       	ldi	r24, 0xC8	; 200
    1bc2:	90 e0       	ldi	r25, 0x00	; 0
    1bc4:	9c 83       	std	Y+4, r25	; 0x04
    1bc6:	8b 83       	std	Y+3, r24	; 0x03
    1bc8:	8b 81       	ldd	r24, Y+3	; 0x03
    1bca:	9c 81       	ldd	r25, Y+4	; 0x04
    1bcc:	01 97       	sbiw	r24, 0x01	; 1
    1bce:	f1 f7       	brne	.-4      	; 0x1bcc <HKEYPAD_u8GetPressedKey+0xf6>
    1bd0:	9c 83       	std	Y+4, r25	; 0x04
    1bd2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1bd4:	8d 81       	ldd	r24, Y+5	; 0x05
    1bd6:	9e 81       	ldd	r25, Y+6	; 0x06
    1bd8:	01 97       	sbiw	r24, 0x01	; 1
    1bda:	9e 83       	std	Y+6, r25	; 0x06
    1bdc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1bde:	8d 81       	ldd	r24, Y+5	; 0x05
    1be0:	9e 81       	ldd	r25, Y+6	; 0x06
    1be2:	00 97       	sbiw	r24, 0x00	; 0
    1be4:	69 f7       	brne	.-38     	; 0x1bc0 <HKEYPAD_u8GetPressedKey+0xea>
    1be6:	14 c0       	rjmp	.+40     	; 0x1c10 <HKEYPAD_u8GetPressedKey+0x13a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1be8:	6f 81       	ldd	r22, Y+7	; 0x07
    1bea:	78 85       	ldd	r23, Y+8	; 0x08
    1bec:	89 85       	ldd	r24, Y+9	; 0x09
    1bee:	9a 85       	ldd	r25, Y+10	; 0x0a
    1bf0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bf4:	dc 01       	movw	r26, r24
    1bf6:	cb 01       	movw	r24, r22
    1bf8:	9e 83       	std	Y+6, r25	; 0x06
    1bfa:	8d 83       	std	Y+5, r24	; 0x05
    1bfc:	8d 81       	ldd	r24, Y+5	; 0x05
    1bfe:	9e 81       	ldd	r25, Y+6	; 0x06
    1c00:	9a 83       	std	Y+2, r25	; 0x02
    1c02:	89 83       	std	Y+1, r24	; 0x01
    1c04:	89 81       	ldd	r24, Y+1	; 0x01
    1c06:	9a 81       	ldd	r25, Y+2	; 0x02
    1c08:	01 97       	sbiw	r24, 0x01	; 1
    1c0a:	f1 f7       	brne	.-4      	; 0x1c08 <HKEYPAD_u8GetPressedKey+0x132>
    1c0c:	9a 83       	std	Y+2, r25	; 0x02
    1c0e:	89 83       	std	Y+1, r24	; 0x01
            {
                //to avoid "debounce effect"
                _delay_ms(DEBOUNCING_DELAY);
                local_u8Flag=FLAG_UP;
    1c10:	81 e0       	ldi	r24, 0x01	; 1
    1c12:	88 8b       	std	Y+16, r24	; 0x10
                //to make sure it will not print the character more than once if the user still press the button
                while(MDIO_u8GetPinValue(KEYPAD_PORT,keypadCol[local_u8ColCounter])==PIN_LOW);
    1c14:	89 89       	ldd	r24, Y+17	; 0x11
    1c16:	88 2f       	mov	r24, r24
    1c18:	90 e0       	ldi	r25, 0x00	; 0
    1c1a:	fc 01       	movw	r30, r24
    1c1c:	ee 57       	subi	r30, 0x7E	; 126
    1c1e:	ff 4f       	sbci	r31, 0xFF	; 255
    1c20:	90 81       	ld	r25, Z
    1c22:	80 e0       	ldi	r24, 0x00	; 0
    1c24:	69 2f       	mov	r22, r25
    1c26:	0e 94 02 08 	call	0x1004	; 0x1004 <MDIO_u8GetPinValue>
    1c2a:	88 23       	and	r24, r24
    1c2c:	99 f3       	breq	.-26     	; 0x1c14 <HKEYPAD_u8GetPressedKey+0x13e>
                local_u8PressedKey=KeypadArr[local_u8RowCounter][local_u8ColCounter];
    1c2e:	8a 89       	ldd	r24, Y+18	; 0x12
    1c30:	48 2f       	mov	r20, r24
    1c32:	50 e0       	ldi	r21, 0x00	; 0
    1c34:	89 89       	ldd	r24, Y+17	; 0x11
    1c36:	28 2f       	mov	r18, r24
    1c38:	30 e0       	ldi	r19, 0x00	; 0
    1c3a:	ca 01       	movw	r24, r20
    1c3c:	88 0f       	add	r24, r24
    1c3e:	99 1f       	adc	r25, r25
    1c40:	88 0f       	add	r24, r24
    1c42:	99 1f       	adc	r25, r25
    1c44:	82 0f       	add	r24, r18
    1c46:	93 1f       	adc	r25, r19
    1c48:	fc 01       	movw	r30, r24
    1c4a:	e2 59       	subi	r30, 0x92	; 146
    1c4c:	ff 4f       	sbci	r31, 0xFF	; 255
    1c4e:	80 81       	ld	r24, Z
    1c50:	8f 87       	std	Y+15, r24	; 0x0f
    1c52:	07 c0       	rjmp	.+14     	; 0x1c62 <HKEYPAD_u8GetPressedKey+0x18c>
    u8 local_u8RowCounter,local_u8ColCounter,local_u8Flag=FLAG_DOWN,local_u8PressedKey=KEY_NOT_PRESSED;
    
    for(local_u8RowCounter=0;local_u8RowCounter<ROWS_NUMBER;local_u8RowCounter++)
    {
        MDIO_voidSetPinValue(KEYPAD_PORT,keypadRow[local_u8RowCounter],PIN_LOW);
        for(local_u8ColCounter=0;local_u8ColCounter<COLS_NUMBER;local_u8ColCounter++)
    1c54:	89 89       	ldd	r24, Y+17	; 0x11
    1c56:	8f 5f       	subi	r24, 0xFF	; 255
    1c58:	89 8b       	std	Y+17, r24	; 0x11
    1c5a:	89 89       	ldd	r24, Y+17	; 0x11
    1c5c:	84 30       	cpi	r24, 0x04	; 4
    1c5e:	08 f4       	brcc	.+2      	; 0x1c62 <HKEYPAD_u8GetPressedKey+0x18c>
    1c60:	57 cf       	rjmp	.-338    	; 0x1b10 <HKEYPAD_u8GetPressedKey+0x3a>
                while(MDIO_u8GetPinValue(KEYPAD_PORT,keypadCol[local_u8ColCounter])==PIN_LOW);
                local_u8PressedKey=KeypadArr[local_u8RowCounter][local_u8ColCounter];
                break;
            }
        }
        MDIO_voidSetPinValue(KEYPAD_PORT,keypadRow[local_u8RowCounter],PIN_HIGH);
    1c62:	8a 89       	ldd	r24, Y+18	; 0x12
    1c64:	88 2f       	mov	r24, r24
    1c66:	90 e0       	ldi	r25, 0x00	; 0
    1c68:	fc 01       	movw	r30, r24
    1c6a:	e2 58       	subi	r30, 0x82	; 130
    1c6c:	ff 4f       	sbci	r31, 0xFF	; 255
    1c6e:	90 81       	ld	r25, Z
    1c70:	80 e0       	ldi	r24, 0x00	; 0
    1c72:	69 2f       	mov	r22, r25
    1c74:	41 e0       	ldi	r20, 0x01	; 1
    1c76:	0e 94 b6 08 	call	0x116c	; 0x116c <MDIO_voidSetPinValue>
        if(local_u8Flag)
    1c7a:	88 89       	ldd	r24, Y+16	; 0x10
    1c7c:	88 23       	and	r24, r24
    1c7e:	39 f4       	brne	.+14     	; 0x1c8e <HKEYPAD_u8GetPressedKey+0x1b8>

u8 HKEYPAD_u8GetPressedKey()
{
    u8 local_u8RowCounter,local_u8ColCounter,local_u8Flag=FLAG_DOWN,local_u8PressedKey=KEY_NOT_PRESSED;
    
    for(local_u8RowCounter=0;local_u8RowCounter<ROWS_NUMBER;local_u8RowCounter++)
    1c80:	8a 89       	ldd	r24, Y+18	; 0x12
    1c82:	8f 5f       	subi	r24, 0xFF	; 255
    1c84:	8a 8b       	std	Y+18, r24	; 0x12
    1c86:	8a 89       	ldd	r24, Y+18	; 0x12
    1c88:	84 30       	cpi	r24, 0x04	; 4
    1c8a:	08 f4       	brcc	.+2      	; 0x1c8e <HKEYPAD_u8GetPressedKey+0x1b8>
    1c8c:	33 cf       	rjmp	.-410    	; 0x1af4 <HKEYPAD_u8GetPressedKey+0x1e>
        if(local_u8Flag)
        {
            break;
        }
    }
    return local_u8PressedKey;
    1c8e:	8f 85       	ldd	r24, Y+15	; 0x0f
}
    1c90:	62 96       	adiw	r28, 0x12	; 18
    1c92:	0f b6       	in	r0, 0x3f	; 63
    1c94:	f8 94       	cli
    1c96:	de bf       	out	0x3e, r29	; 62
    1c98:	0f be       	out	0x3f, r0	; 63
    1c9a:	cd bf       	out	0x3d, r28	; 61
    1c9c:	cf 91       	pop	r28
    1c9e:	df 91       	pop	r29
    1ca0:	08 95       	ret

00001ca2 <HLCD4_voidSendCommand>:


static u8 global_u8Init=0;

void HLCD4_voidSendCommand(u8 A_u8Command)
{
    1ca2:	df 93       	push	r29
    1ca4:	cf 93       	push	r28
    1ca6:	cd b7       	in	r28, 0x3d	; 61
    1ca8:	de b7       	in	r29, 0x3e	; 62
    1caa:	ab 97       	sbiw	r28, 0x2b	; 43
    1cac:	0f b6       	in	r0, 0x3f	; 63
    1cae:	f8 94       	cli
    1cb0:	de bf       	out	0x3e, r29	; 62
    1cb2:	0f be       	out	0x3f, r0	; 63
    1cb4:	cd bf       	out	0x3d, r28	; 61
    1cb6:	8b a7       	std	Y+43, r24	; 0x2b
    //RS=0 RW=0
    MDIO_voidSetPinValue(LCD_CONTROL_PORT,RS_PIN,PIN_LOW);
    1cb8:	82 e0       	ldi	r24, 0x02	; 2
    1cba:	60 e0       	ldi	r22, 0x00	; 0
    1cbc:	40 e0       	ldi	r20, 0x00	; 0
    1cbe:	0e 94 b6 08 	call	0x116c	; 0x116c <MDIO_voidSetPinValue>
    MDIO_voidSetPinValue(LCD_CONTROL_PORT,RW_PIN,PIN_LOW);
    1cc2:	82 e0       	ldi	r24, 0x02	; 2
    1cc4:	61 e0       	ldi	r22, 0x01	; 1
    1cc6:	40 e0       	ldi	r20, 0x00	; 0
    1cc8:	0e 94 b6 08 	call	0x116c	; 0x116c <MDIO_voidSetPinValue>

    //send UPPER Bits (B7 to B4)
    MDIO_voidSetPortValue(LCD_DATA_PORT,A_u8Command);
    1ccc:	83 e0       	ldi	r24, 0x03	; 3
    1cce:	6b a5       	ldd	r22, Y+43	; 0x2b
    1cd0:	0e 94 e2 0a 	call	0x15c4	; 0x15c4 <MDIO_voidSetPortValue>


    //pulse HIGH to LOW to ENABLE PIN
    MDIO_voidSetPinValue(LCD_CONTROL_PORT,E_PIN,PIN_HIGH);
    1cd4:	82 e0       	ldi	r24, 0x02	; 2
    1cd6:	62 e0       	ldi	r22, 0x02	; 2
    1cd8:	41 e0       	ldi	r20, 0x01	; 1
    1cda:	0e 94 b6 08 	call	0x116c	; 0x116c <MDIO_voidSetPinValue>
    1cde:	80 e0       	ldi	r24, 0x00	; 0
    1ce0:	90 e0       	ldi	r25, 0x00	; 0
    1ce2:	a0 e8       	ldi	r26, 0x80	; 128
    1ce4:	bf e3       	ldi	r27, 0x3F	; 63
    1ce6:	8f a3       	std	Y+39, r24	; 0x27
    1ce8:	98 a7       	std	Y+40, r25	; 0x28
    1cea:	a9 a7       	std	Y+41, r26	; 0x29
    1cec:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1cee:	6f a1       	ldd	r22, Y+39	; 0x27
    1cf0:	78 a5       	ldd	r23, Y+40	; 0x28
    1cf2:	89 a5       	ldd	r24, Y+41	; 0x29
    1cf4:	9a a5       	ldd	r25, Y+42	; 0x2a
    1cf6:	20 e0       	ldi	r18, 0x00	; 0
    1cf8:	30 e0       	ldi	r19, 0x00	; 0
    1cfa:	4a ef       	ldi	r20, 0xFA	; 250
    1cfc:	54 e4       	ldi	r21, 0x44	; 68
    1cfe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d02:	dc 01       	movw	r26, r24
    1d04:	cb 01       	movw	r24, r22
    1d06:	8b a3       	std	Y+35, r24	; 0x23
    1d08:	9c a3       	std	Y+36, r25	; 0x24
    1d0a:	ad a3       	std	Y+37, r26	; 0x25
    1d0c:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1d0e:	6b a1       	ldd	r22, Y+35	; 0x23
    1d10:	7c a1       	ldd	r23, Y+36	; 0x24
    1d12:	8d a1       	ldd	r24, Y+37	; 0x25
    1d14:	9e a1       	ldd	r25, Y+38	; 0x26
    1d16:	20 e0       	ldi	r18, 0x00	; 0
    1d18:	30 e0       	ldi	r19, 0x00	; 0
    1d1a:	40 e8       	ldi	r20, 0x80	; 128
    1d1c:	5f e3       	ldi	r21, 0x3F	; 63
    1d1e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1d22:	88 23       	and	r24, r24
    1d24:	2c f4       	brge	.+10     	; 0x1d30 <HLCD4_voidSendCommand+0x8e>
		__ticks = 1;
    1d26:	81 e0       	ldi	r24, 0x01	; 1
    1d28:	90 e0       	ldi	r25, 0x00	; 0
    1d2a:	9a a3       	std	Y+34, r25	; 0x22
    1d2c:	89 a3       	std	Y+33, r24	; 0x21
    1d2e:	3f c0       	rjmp	.+126    	; 0x1dae <HLCD4_voidSendCommand+0x10c>
	else if (__tmp > 65535)
    1d30:	6b a1       	ldd	r22, Y+35	; 0x23
    1d32:	7c a1       	ldd	r23, Y+36	; 0x24
    1d34:	8d a1       	ldd	r24, Y+37	; 0x25
    1d36:	9e a1       	ldd	r25, Y+38	; 0x26
    1d38:	20 e0       	ldi	r18, 0x00	; 0
    1d3a:	3f ef       	ldi	r19, 0xFF	; 255
    1d3c:	4f e7       	ldi	r20, 0x7F	; 127
    1d3e:	57 e4       	ldi	r21, 0x47	; 71
    1d40:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1d44:	18 16       	cp	r1, r24
    1d46:	4c f5       	brge	.+82     	; 0x1d9a <HLCD4_voidSendCommand+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d48:	6f a1       	ldd	r22, Y+39	; 0x27
    1d4a:	78 a5       	ldd	r23, Y+40	; 0x28
    1d4c:	89 a5       	ldd	r24, Y+41	; 0x29
    1d4e:	9a a5       	ldd	r25, Y+42	; 0x2a
    1d50:	20 e0       	ldi	r18, 0x00	; 0
    1d52:	30 e0       	ldi	r19, 0x00	; 0
    1d54:	40 e2       	ldi	r20, 0x20	; 32
    1d56:	51 e4       	ldi	r21, 0x41	; 65
    1d58:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d5c:	dc 01       	movw	r26, r24
    1d5e:	cb 01       	movw	r24, r22
    1d60:	bc 01       	movw	r22, r24
    1d62:	cd 01       	movw	r24, r26
    1d64:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d68:	dc 01       	movw	r26, r24
    1d6a:	cb 01       	movw	r24, r22
    1d6c:	9a a3       	std	Y+34, r25	; 0x22
    1d6e:	89 a3       	std	Y+33, r24	; 0x21
    1d70:	0f c0       	rjmp	.+30     	; 0x1d90 <HLCD4_voidSendCommand+0xee>
    1d72:	88 ec       	ldi	r24, 0xC8	; 200
    1d74:	90 e0       	ldi	r25, 0x00	; 0
    1d76:	98 a3       	std	Y+32, r25	; 0x20
    1d78:	8f 8f       	std	Y+31, r24	; 0x1f
    1d7a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1d7c:	98 a1       	ldd	r25, Y+32	; 0x20
    1d7e:	01 97       	sbiw	r24, 0x01	; 1
    1d80:	f1 f7       	brne	.-4      	; 0x1d7e <HLCD4_voidSendCommand+0xdc>
    1d82:	98 a3       	std	Y+32, r25	; 0x20
    1d84:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d86:	89 a1       	ldd	r24, Y+33	; 0x21
    1d88:	9a a1       	ldd	r25, Y+34	; 0x22
    1d8a:	01 97       	sbiw	r24, 0x01	; 1
    1d8c:	9a a3       	std	Y+34, r25	; 0x22
    1d8e:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d90:	89 a1       	ldd	r24, Y+33	; 0x21
    1d92:	9a a1       	ldd	r25, Y+34	; 0x22
    1d94:	00 97       	sbiw	r24, 0x00	; 0
    1d96:	69 f7       	brne	.-38     	; 0x1d72 <HLCD4_voidSendCommand+0xd0>
    1d98:	14 c0       	rjmp	.+40     	; 0x1dc2 <HLCD4_voidSendCommand+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d9a:	6b a1       	ldd	r22, Y+35	; 0x23
    1d9c:	7c a1       	ldd	r23, Y+36	; 0x24
    1d9e:	8d a1       	ldd	r24, Y+37	; 0x25
    1da0:	9e a1       	ldd	r25, Y+38	; 0x26
    1da2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1da6:	dc 01       	movw	r26, r24
    1da8:	cb 01       	movw	r24, r22
    1daa:	9a a3       	std	Y+34, r25	; 0x22
    1dac:	89 a3       	std	Y+33, r24	; 0x21
    1dae:	89 a1       	ldd	r24, Y+33	; 0x21
    1db0:	9a a1       	ldd	r25, Y+34	; 0x22
    1db2:	9e 8f       	std	Y+30, r25	; 0x1e
    1db4:	8d 8f       	std	Y+29, r24	; 0x1d
    1db6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1db8:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1dba:	01 97       	sbiw	r24, 0x01	; 1
    1dbc:	f1 f7       	brne	.-4      	; 0x1dba <HLCD4_voidSendCommand+0x118>
    1dbe:	9e 8f       	std	Y+30, r25	; 0x1e
    1dc0:	8d 8f       	std	Y+29, r24	; 0x1d
    _delay_ms(1);
    MDIO_voidSetPinValue(LCD_CONTROL_PORT,E_PIN,PIN_LOW);
    1dc2:	82 e0       	ldi	r24, 0x02	; 2
    1dc4:	62 e0       	ldi	r22, 0x02	; 2
    1dc6:	40 e0       	ldi	r20, 0x00	; 0
    1dc8:	0e 94 b6 08 	call	0x116c	; 0x116c <MDIO_voidSetPinValue>

    if(global_u8Init)
    1dcc:	80 91 a0 00 	lds	r24, 0x00A0
    1dd0:	88 23       	and	r24, r24
    1dd2:	09 f4       	brne	.+2      	; 0x1dd6 <HLCD4_voidSendCommand+0x134>
    1dd4:	84 c0       	rjmp	.+264    	; 0x1ede <HLCD4_voidSendCommand+0x23c>
    {

        //send LOWR Bits (B3 to B0)
        MDIO_voidSetPortValue(LCD_DATA_PORT,A_u8Command<<4);
    1dd6:	8b a5       	ldd	r24, Y+43	; 0x2b
    1dd8:	98 2f       	mov	r25, r24
    1dda:	92 95       	swap	r25
    1ddc:	90 7f       	andi	r25, 0xF0	; 240
    1dde:	83 e0       	ldi	r24, 0x03	; 3
    1de0:	69 2f       	mov	r22, r25
    1de2:	0e 94 e2 0a 	call	0x15c4	; 0x15c4 <MDIO_voidSetPortValue>

        //pulse HIGH to LOW to ENABLE PIN
        MDIO_voidSetPinValue(LCD_CONTROL_PORT,E_PIN,PIN_HIGH);
    1de6:	82 e0       	ldi	r24, 0x02	; 2
    1de8:	62 e0       	ldi	r22, 0x02	; 2
    1dea:	41 e0       	ldi	r20, 0x01	; 1
    1dec:	0e 94 b6 08 	call	0x116c	; 0x116c <MDIO_voidSetPinValue>
    1df0:	80 e0       	ldi	r24, 0x00	; 0
    1df2:	90 e0       	ldi	r25, 0x00	; 0
    1df4:	a0 e8       	ldi	r26, 0x80	; 128
    1df6:	bf e3       	ldi	r27, 0x3F	; 63
    1df8:	89 8f       	std	Y+25, r24	; 0x19
    1dfa:	9a 8f       	std	Y+26, r25	; 0x1a
    1dfc:	ab 8f       	std	Y+27, r26	; 0x1b
    1dfe:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e00:	69 8d       	ldd	r22, Y+25	; 0x19
    1e02:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1e04:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1e06:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1e08:	20 e0       	ldi	r18, 0x00	; 0
    1e0a:	30 e0       	ldi	r19, 0x00	; 0
    1e0c:	4a ef       	ldi	r20, 0xFA	; 250
    1e0e:	54 e4       	ldi	r21, 0x44	; 68
    1e10:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e14:	dc 01       	movw	r26, r24
    1e16:	cb 01       	movw	r24, r22
    1e18:	8d 8b       	std	Y+21, r24	; 0x15
    1e1a:	9e 8b       	std	Y+22, r25	; 0x16
    1e1c:	af 8b       	std	Y+23, r26	; 0x17
    1e1e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1e20:	6d 89       	ldd	r22, Y+21	; 0x15
    1e22:	7e 89       	ldd	r23, Y+22	; 0x16
    1e24:	8f 89       	ldd	r24, Y+23	; 0x17
    1e26:	98 8d       	ldd	r25, Y+24	; 0x18
    1e28:	20 e0       	ldi	r18, 0x00	; 0
    1e2a:	30 e0       	ldi	r19, 0x00	; 0
    1e2c:	40 e8       	ldi	r20, 0x80	; 128
    1e2e:	5f e3       	ldi	r21, 0x3F	; 63
    1e30:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1e34:	88 23       	and	r24, r24
    1e36:	2c f4       	brge	.+10     	; 0x1e42 <HLCD4_voidSendCommand+0x1a0>
		__ticks = 1;
    1e38:	81 e0       	ldi	r24, 0x01	; 1
    1e3a:	90 e0       	ldi	r25, 0x00	; 0
    1e3c:	9c 8b       	std	Y+20, r25	; 0x14
    1e3e:	8b 8b       	std	Y+19, r24	; 0x13
    1e40:	3f c0       	rjmp	.+126    	; 0x1ec0 <HLCD4_voidSendCommand+0x21e>
	else if (__tmp > 65535)
    1e42:	6d 89       	ldd	r22, Y+21	; 0x15
    1e44:	7e 89       	ldd	r23, Y+22	; 0x16
    1e46:	8f 89       	ldd	r24, Y+23	; 0x17
    1e48:	98 8d       	ldd	r25, Y+24	; 0x18
    1e4a:	20 e0       	ldi	r18, 0x00	; 0
    1e4c:	3f ef       	ldi	r19, 0xFF	; 255
    1e4e:	4f e7       	ldi	r20, 0x7F	; 127
    1e50:	57 e4       	ldi	r21, 0x47	; 71
    1e52:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1e56:	18 16       	cp	r1, r24
    1e58:	4c f5       	brge	.+82     	; 0x1eac <HLCD4_voidSendCommand+0x20a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e5a:	69 8d       	ldd	r22, Y+25	; 0x19
    1e5c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1e5e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1e60:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1e62:	20 e0       	ldi	r18, 0x00	; 0
    1e64:	30 e0       	ldi	r19, 0x00	; 0
    1e66:	40 e2       	ldi	r20, 0x20	; 32
    1e68:	51 e4       	ldi	r21, 0x41	; 65
    1e6a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e6e:	dc 01       	movw	r26, r24
    1e70:	cb 01       	movw	r24, r22
    1e72:	bc 01       	movw	r22, r24
    1e74:	cd 01       	movw	r24, r26
    1e76:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e7a:	dc 01       	movw	r26, r24
    1e7c:	cb 01       	movw	r24, r22
    1e7e:	9c 8b       	std	Y+20, r25	; 0x14
    1e80:	8b 8b       	std	Y+19, r24	; 0x13
    1e82:	0f c0       	rjmp	.+30     	; 0x1ea2 <HLCD4_voidSendCommand+0x200>
    1e84:	88 ec       	ldi	r24, 0xC8	; 200
    1e86:	90 e0       	ldi	r25, 0x00	; 0
    1e88:	9a 8b       	std	Y+18, r25	; 0x12
    1e8a:	89 8b       	std	Y+17, r24	; 0x11
    1e8c:	89 89       	ldd	r24, Y+17	; 0x11
    1e8e:	9a 89       	ldd	r25, Y+18	; 0x12
    1e90:	01 97       	sbiw	r24, 0x01	; 1
    1e92:	f1 f7       	brne	.-4      	; 0x1e90 <HLCD4_voidSendCommand+0x1ee>
    1e94:	9a 8b       	std	Y+18, r25	; 0x12
    1e96:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e98:	8b 89       	ldd	r24, Y+19	; 0x13
    1e9a:	9c 89       	ldd	r25, Y+20	; 0x14
    1e9c:	01 97       	sbiw	r24, 0x01	; 1
    1e9e:	9c 8b       	std	Y+20, r25	; 0x14
    1ea0:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ea2:	8b 89       	ldd	r24, Y+19	; 0x13
    1ea4:	9c 89       	ldd	r25, Y+20	; 0x14
    1ea6:	00 97       	sbiw	r24, 0x00	; 0
    1ea8:	69 f7       	brne	.-38     	; 0x1e84 <HLCD4_voidSendCommand+0x1e2>
    1eaa:	14 c0       	rjmp	.+40     	; 0x1ed4 <HLCD4_voidSendCommand+0x232>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1eac:	6d 89       	ldd	r22, Y+21	; 0x15
    1eae:	7e 89       	ldd	r23, Y+22	; 0x16
    1eb0:	8f 89       	ldd	r24, Y+23	; 0x17
    1eb2:	98 8d       	ldd	r25, Y+24	; 0x18
    1eb4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1eb8:	dc 01       	movw	r26, r24
    1eba:	cb 01       	movw	r24, r22
    1ebc:	9c 8b       	std	Y+20, r25	; 0x14
    1ebe:	8b 8b       	std	Y+19, r24	; 0x13
    1ec0:	8b 89       	ldd	r24, Y+19	; 0x13
    1ec2:	9c 89       	ldd	r25, Y+20	; 0x14
    1ec4:	98 8b       	std	Y+16, r25	; 0x10
    1ec6:	8f 87       	std	Y+15, r24	; 0x0f
    1ec8:	8f 85       	ldd	r24, Y+15	; 0x0f
    1eca:	98 89       	ldd	r25, Y+16	; 0x10
    1ecc:	01 97       	sbiw	r24, 0x01	; 1
    1ece:	f1 f7       	brne	.-4      	; 0x1ecc <HLCD4_voidSendCommand+0x22a>
    1ed0:	98 8b       	std	Y+16, r25	; 0x10
    1ed2:	8f 87       	std	Y+15, r24	; 0x0f
        _delay_ms(1);
        MDIO_voidSetPinValue(LCD_CONTROL_PORT,E_PIN,PIN_LOW);
    1ed4:	82 e0       	ldi	r24, 0x02	; 2
    1ed6:	62 e0       	ldi	r22, 0x02	; 2
    1ed8:	40 e0       	ldi	r20, 0x00	; 0
    1eda:	0e 94 b6 08 	call	0x116c	; 0x116c <MDIO_voidSetPinValue>
    1ede:	80 e0       	ldi	r24, 0x00	; 0
    1ee0:	90 e0       	ldi	r25, 0x00	; 0
    1ee2:	a0 e0       	ldi	r26, 0x00	; 0
    1ee4:	b0 e4       	ldi	r27, 0x40	; 64
    1ee6:	8b 87       	std	Y+11, r24	; 0x0b
    1ee8:	9c 87       	std	Y+12, r25	; 0x0c
    1eea:	ad 87       	std	Y+13, r26	; 0x0d
    1eec:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1eee:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ef0:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ef2:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ef4:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ef6:	20 e0       	ldi	r18, 0x00	; 0
    1ef8:	30 e0       	ldi	r19, 0x00	; 0
    1efa:	4a ef       	ldi	r20, 0xFA	; 250
    1efc:	54 e4       	ldi	r21, 0x44	; 68
    1efe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f02:	dc 01       	movw	r26, r24
    1f04:	cb 01       	movw	r24, r22
    1f06:	8f 83       	std	Y+7, r24	; 0x07
    1f08:	98 87       	std	Y+8, r25	; 0x08
    1f0a:	a9 87       	std	Y+9, r26	; 0x09
    1f0c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1f0e:	6f 81       	ldd	r22, Y+7	; 0x07
    1f10:	78 85       	ldd	r23, Y+8	; 0x08
    1f12:	89 85       	ldd	r24, Y+9	; 0x09
    1f14:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f16:	20 e0       	ldi	r18, 0x00	; 0
    1f18:	30 e0       	ldi	r19, 0x00	; 0
    1f1a:	40 e8       	ldi	r20, 0x80	; 128
    1f1c:	5f e3       	ldi	r21, 0x3F	; 63
    1f1e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1f22:	88 23       	and	r24, r24
    1f24:	2c f4       	brge	.+10     	; 0x1f30 <HLCD4_voidSendCommand+0x28e>
		__ticks = 1;
    1f26:	81 e0       	ldi	r24, 0x01	; 1
    1f28:	90 e0       	ldi	r25, 0x00	; 0
    1f2a:	9e 83       	std	Y+6, r25	; 0x06
    1f2c:	8d 83       	std	Y+5, r24	; 0x05
    1f2e:	3f c0       	rjmp	.+126    	; 0x1fae <HLCD4_voidSendCommand+0x30c>
	else if (__tmp > 65535)
    1f30:	6f 81       	ldd	r22, Y+7	; 0x07
    1f32:	78 85       	ldd	r23, Y+8	; 0x08
    1f34:	89 85       	ldd	r24, Y+9	; 0x09
    1f36:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f38:	20 e0       	ldi	r18, 0x00	; 0
    1f3a:	3f ef       	ldi	r19, 0xFF	; 255
    1f3c:	4f e7       	ldi	r20, 0x7F	; 127
    1f3e:	57 e4       	ldi	r21, 0x47	; 71
    1f40:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1f44:	18 16       	cp	r1, r24
    1f46:	4c f5       	brge	.+82     	; 0x1f9a <HLCD4_voidSendCommand+0x2f8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f48:	6b 85       	ldd	r22, Y+11	; 0x0b
    1f4a:	7c 85       	ldd	r23, Y+12	; 0x0c
    1f4c:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f4e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f50:	20 e0       	ldi	r18, 0x00	; 0
    1f52:	30 e0       	ldi	r19, 0x00	; 0
    1f54:	40 e2       	ldi	r20, 0x20	; 32
    1f56:	51 e4       	ldi	r21, 0x41	; 65
    1f58:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f5c:	dc 01       	movw	r26, r24
    1f5e:	cb 01       	movw	r24, r22
    1f60:	bc 01       	movw	r22, r24
    1f62:	cd 01       	movw	r24, r26
    1f64:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f68:	dc 01       	movw	r26, r24
    1f6a:	cb 01       	movw	r24, r22
    1f6c:	9e 83       	std	Y+6, r25	; 0x06
    1f6e:	8d 83       	std	Y+5, r24	; 0x05
    1f70:	0f c0       	rjmp	.+30     	; 0x1f90 <HLCD4_voidSendCommand+0x2ee>
    1f72:	88 ec       	ldi	r24, 0xC8	; 200
    1f74:	90 e0       	ldi	r25, 0x00	; 0
    1f76:	9c 83       	std	Y+4, r25	; 0x04
    1f78:	8b 83       	std	Y+3, r24	; 0x03
    1f7a:	8b 81       	ldd	r24, Y+3	; 0x03
    1f7c:	9c 81       	ldd	r25, Y+4	; 0x04
    1f7e:	01 97       	sbiw	r24, 0x01	; 1
    1f80:	f1 f7       	brne	.-4      	; 0x1f7e <HLCD4_voidSendCommand+0x2dc>
    1f82:	9c 83       	std	Y+4, r25	; 0x04
    1f84:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f86:	8d 81       	ldd	r24, Y+5	; 0x05
    1f88:	9e 81       	ldd	r25, Y+6	; 0x06
    1f8a:	01 97       	sbiw	r24, 0x01	; 1
    1f8c:	9e 83       	std	Y+6, r25	; 0x06
    1f8e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f90:	8d 81       	ldd	r24, Y+5	; 0x05
    1f92:	9e 81       	ldd	r25, Y+6	; 0x06
    1f94:	00 97       	sbiw	r24, 0x00	; 0
    1f96:	69 f7       	brne	.-38     	; 0x1f72 <HLCD4_voidSendCommand+0x2d0>
    1f98:	14 c0       	rjmp	.+40     	; 0x1fc2 <HLCD4_voidSendCommand+0x320>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f9a:	6f 81       	ldd	r22, Y+7	; 0x07
    1f9c:	78 85       	ldd	r23, Y+8	; 0x08
    1f9e:	89 85       	ldd	r24, Y+9	; 0x09
    1fa0:	9a 85       	ldd	r25, Y+10	; 0x0a
    1fa2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fa6:	dc 01       	movw	r26, r24
    1fa8:	cb 01       	movw	r24, r22
    1faa:	9e 83       	std	Y+6, r25	; 0x06
    1fac:	8d 83       	std	Y+5, r24	; 0x05
    1fae:	8d 81       	ldd	r24, Y+5	; 0x05
    1fb0:	9e 81       	ldd	r25, Y+6	; 0x06
    1fb2:	9a 83       	std	Y+2, r25	; 0x02
    1fb4:	89 83       	std	Y+1, r24	; 0x01
    1fb6:	89 81       	ldd	r24, Y+1	; 0x01
    1fb8:	9a 81       	ldd	r25, Y+2	; 0x02
    1fba:	01 97       	sbiw	r24, 0x01	; 1
    1fbc:	f1 f7       	brne	.-4      	; 0x1fba <HLCD4_voidSendCommand+0x318>
    1fbe:	9a 83       	std	Y+2, r25	; 0x02
    1fc0:	89 83       	std	Y+1, r24	; 0x01
    }
    _delay_ms(2);
}
    1fc2:	ab 96       	adiw	r28, 0x2b	; 43
    1fc4:	0f b6       	in	r0, 0x3f	; 63
    1fc6:	f8 94       	cli
    1fc8:	de bf       	out	0x3e, r29	; 62
    1fca:	0f be       	out	0x3f, r0	; 63
    1fcc:	cd bf       	out	0x3d, r28	; 61
    1fce:	cf 91       	pop	r28
    1fd0:	df 91       	pop	r29
    1fd2:	08 95       	ret

00001fd4 <HLCD4_voidSendData>:


void HLCD4_voidSendData(u8 A_u8Data)
{
    1fd4:	df 93       	push	r29
    1fd6:	cf 93       	push	r28
    1fd8:	cd b7       	in	r28, 0x3d	; 61
    1fda:	de b7       	in	r29, 0x3e	; 62
    1fdc:	ab 97       	sbiw	r28, 0x2b	; 43
    1fde:	0f b6       	in	r0, 0x3f	; 63
    1fe0:	f8 94       	cli
    1fe2:	de bf       	out	0x3e, r29	; 62
    1fe4:	0f be       	out	0x3f, r0	; 63
    1fe6:	cd bf       	out	0x3d, r28	; 61
    1fe8:	8b a7       	std	Y+43, r24	; 0x2b
    //RS=1 RW=0
    MDIO_voidSetPinValue(LCD_CONTROL_PORT,RS_PIN,PIN_HIGH);
    1fea:	82 e0       	ldi	r24, 0x02	; 2
    1fec:	60 e0       	ldi	r22, 0x00	; 0
    1fee:	41 e0       	ldi	r20, 0x01	; 1
    1ff0:	0e 94 b6 08 	call	0x116c	; 0x116c <MDIO_voidSetPinValue>
    MDIO_voidSetPinValue(LCD_CONTROL_PORT,RW_PIN,PIN_LOW);
    1ff4:	82 e0       	ldi	r24, 0x02	; 2
    1ff6:	61 e0       	ldi	r22, 0x01	; 1
    1ff8:	40 e0       	ldi	r20, 0x00	; 0
    1ffa:	0e 94 b6 08 	call	0x116c	; 0x116c <MDIO_voidSetPinValue>

	MDIO_voidSetPortValue(LCD_DATA_PORT,A_u8Data);
    1ffe:	83 e0       	ldi	r24, 0x03	; 3
    2000:	6b a5       	ldd	r22, Y+43	; 0x2b
    2002:	0e 94 e2 0a 	call	0x15c4	; 0x15c4 <MDIO_voidSetPortValue>


    MDIO_voidSetPinValue(LCD_CONTROL_PORT,E_PIN,PIN_HIGH);
    2006:	82 e0       	ldi	r24, 0x02	; 2
    2008:	62 e0       	ldi	r22, 0x02	; 2
    200a:	41 e0       	ldi	r20, 0x01	; 1
    200c:	0e 94 b6 08 	call	0x116c	; 0x116c <MDIO_voidSetPinValue>
    2010:	80 e0       	ldi	r24, 0x00	; 0
    2012:	90 e0       	ldi	r25, 0x00	; 0
    2014:	a0 e8       	ldi	r26, 0x80	; 128
    2016:	bf e3       	ldi	r27, 0x3F	; 63
    2018:	8f a3       	std	Y+39, r24	; 0x27
    201a:	98 a7       	std	Y+40, r25	; 0x28
    201c:	a9 a7       	std	Y+41, r26	; 0x29
    201e:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2020:	6f a1       	ldd	r22, Y+39	; 0x27
    2022:	78 a5       	ldd	r23, Y+40	; 0x28
    2024:	89 a5       	ldd	r24, Y+41	; 0x29
    2026:	9a a5       	ldd	r25, Y+42	; 0x2a
    2028:	20 e0       	ldi	r18, 0x00	; 0
    202a:	30 e0       	ldi	r19, 0x00	; 0
    202c:	4a ef       	ldi	r20, 0xFA	; 250
    202e:	54 e4       	ldi	r21, 0x44	; 68
    2030:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2034:	dc 01       	movw	r26, r24
    2036:	cb 01       	movw	r24, r22
    2038:	8b a3       	std	Y+35, r24	; 0x23
    203a:	9c a3       	std	Y+36, r25	; 0x24
    203c:	ad a3       	std	Y+37, r26	; 0x25
    203e:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2040:	6b a1       	ldd	r22, Y+35	; 0x23
    2042:	7c a1       	ldd	r23, Y+36	; 0x24
    2044:	8d a1       	ldd	r24, Y+37	; 0x25
    2046:	9e a1       	ldd	r25, Y+38	; 0x26
    2048:	20 e0       	ldi	r18, 0x00	; 0
    204a:	30 e0       	ldi	r19, 0x00	; 0
    204c:	40 e8       	ldi	r20, 0x80	; 128
    204e:	5f e3       	ldi	r21, 0x3F	; 63
    2050:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2054:	88 23       	and	r24, r24
    2056:	2c f4       	brge	.+10     	; 0x2062 <HLCD4_voidSendData+0x8e>
		__ticks = 1;
    2058:	81 e0       	ldi	r24, 0x01	; 1
    205a:	90 e0       	ldi	r25, 0x00	; 0
    205c:	9a a3       	std	Y+34, r25	; 0x22
    205e:	89 a3       	std	Y+33, r24	; 0x21
    2060:	3f c0       	rjmp	.+126    	; 0x20e0 <HLCD4_voidSendData+0x10c>
	else if (__tmp > 65535)
    2062:	6b a1       	ldd	r22, Y+35	; 0x23
    2064:	7c a1       	ldd	r23, Y+36	; 0x24
    2066:	8d a1       	ldd	r24, Y+37	; 0x25
    2068:	9e a1       	ldd	r25, Y+38	; 0x26
    206a:	20 e0       	ldi	r18, 0x00	; 0
    206c:	3f ef       	ldi	r19, 0xFF	; 255
    206e:	4f e7       	ldi	r20, 0x7F	; 127
    2070:	57 e4       	ldi	r21, 0x47	; 71
    2072:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2076:	18 16       	cp	r1, r24
    2078:	4c f5       	brge	.+82     	; 0x20cc <HLCD4_voidSendData+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    207a:	6f a1       	ldd	r22, Y+39	; 0x27
    207c:	78 a5       	ldd	r23, Y+40	; 0x28
    207e:	89 a5       	ldd	r24, Y+41	; 0x29
    2080:	9a a5       	ldd	r25, Y+42	; 0x2a
    2082:	20 e0       	ldi	r18, 0x00	; 0
    2084:	30 e0       	ldi	r19, 0x00	; 0
    2086:	40 e2       	ldi	r20, 0x20	; 32
    2088:	51 e4       	ldi	r21, 0x41	; 65
    208a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    208e:	dc 01       	movw	r26, r24
    2090:	cb 01       	movw	r24, r22
    2092:	bc 01       	movw	r22, r24
    2094:	cd 01       	movw	r24, r26
    2096:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    209a:	dc 01       	movw	r26, r24
    209c:	cb 01       	movw	r24, r22
    209e:	9a a3       	std	Y+34, r25	; 0x22
    20a0:	89 a3       	std	Y+33, r24	; 0x21
    20a2:	0f c0       	rjmp	.+30     	; 0x20c2 <HLCD4_voidSendData+0xee>
    20a4:	88 ec       	ldi	r24, 0xC8	; 200
    20a6:	90 e0       	ldi	r25, 0x00	; 0
    20a8:	98 a3       	std	Y+32, r25	; 0x20
    20aa:	8f 8f       	std	Y+31, r24	; 0x1f
    20ac:	8f 8d       	ldd	r24, Y+31	; 0x1f
    20ae:	98 a1       	ldd	r25, Y+32	; 0x20
    20b0:	01 97       	sbiw	r24, 0x01	; 1
    20b2:	f1 f7       	brne	.-4      	; 0x20b0 <HLCD4_voidSendData+0xdc>
    20b4:	98 a3       	std	Y+32, r25	; 0x20
    20b6:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    20b8:	89 a1       	ldd	r24, Y+33	; 0x21
    20ba:	9a a1       	ldd	r25, Y+34	; 0x22
    20bc:	01 97       	sbiw	r24, 0x01	; 1
    20be:	9a a3       	std	Y+34, r25	; 0x22
    20c0:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    20c2:	89 a1       	ldd	r24, Y+33	; 0x21
    20c4:	9a a1       	ldd	r25, Y+34	; 0x22
    20c6:	00 97       	sbiw	r24, 0x00	; 0
    20c8:	69 f7       	brne	.-38     	; 0x20a4 <HLCD4_voidSendData+0xd0>
    20ca:	14 c0       	rjmp	.+40     	; 0x20f4 <HLCD4_voidSendData+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    20cc:	6b a1       	ldd	r22, Y+35	; 0x23
    20ce:	7c a1       	ldd	r23, Y+36	; 0x24
    20d0:	8d a1       	ldd	r24, Y+37	; 0x25
    20d2:	9e a1       	ldd	r25, Y+38	; 0x26
    20d4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20d8:	dc 01       	movw	r26, r24
    20da:	cb 01       	movw	r24, r22
    20dc:	9a a3       	std	Y+34, r25	; 0x22
    20de:	89 a3       	std	Y+33, r24	; 0x21
    20e0:	89 a1       	ldd	r24, Y+33	; 0x21
    20e2:	9a a1       	ldd	r25, Y+34	; 0x22
    20e4:	9e 8f       	std	Y+30, r25	; 0x1e
    20e6:	8d 8f       	std	Y+29, r24	; 0x1d
    20e8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    20ea:	9e 8d       	ldd	r25, Y+30	; 0x1e
    20ec:	01 97       	sbiw	r24, 0x01	; 1
    20ee:	f1 f7       	brne	.-4      	; 0x20ec <HLCD4_voidSendData+0x118>
    20f0:	9e 8f       	std	Y+30, r25	; 0x1e
    20f2:	8d 8f       	std	Y+29, r24	; 0x1d
    _delay_ms(1);
    MDIO_voidSetPinValue(LCD_CONTROL_PORT,E_PIN,PIN_LOW);
    20f4:	82 e0       	ldi	r24, 0x02	; 2
    20f6:	62 e0       	ldi	r22, 0x02	; 2
    20f8:	40 e0       	ldi	r20, 0x00	; 0
    20fa:	0e 94 b6 08 	call	0x116c	; 0x116c <MDIO_voidSetPinValue>

    MDIO_voidSetPortValue(LCD_DATA_PORT,A_u8Data<<4);
    20fe:	8b a5       	ldd	r24, Y+43	; 0x2b
    2100:	98 2f       	mov	r25, r24
    2102:	92 95       	swap	r25
    2104:	90 7f       	andi	r25, 0xF0	; 240
    2106:	83 e0       	ldi	r24, 0x03	; 3
    2108:	69 2f       	mov	r22, r25
    210a:	0e 94 e2 0a 	call	0x15c4	; 0x15c4 <MDIO_voidSetPortValue>


    MDIO_voidSetPinValue(LCD_CONTROL_PORT,E_PIN,PIN_HIGH);
    210e:	82 e0       	ldi	r24, 0x02	; 2
    2110:	62 e0       	ldi	r22, 0x02	; 2
    2112:	41 e0       	ldi	r20, 0x01	; 1
    2114:	0e 94 b6 08 	call	0x116c	; 0x116c <MDIO_voidSetPinValue>
    2118:	80 e0       	ldi	r24, 0x00	; 0
    211a:	90 e0       	ldi	r25, 0x00	; 0
    211c:	a0 e8       	ldi	r26, 0x80	; 128
    211e:	bf e3       	ldi	r27, 0x3F	; 63
    2120:	89 8f       	std	Y+25, r24	; 0x19
    2122:	9a 8f       	std	Y+26, r25	; 0x1a
    2124:	ab 8f       	std	Y+27, r26	; 0x1b
    2126:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2128:	69 8d       	ldd	r22, Y+25	; 0x19
    212a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    212c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    212e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2130:	20 e0       	ldi	r18, 0x00	; 0
    2132:	30 e0       	ldi	r19, 0x00	; 0
    2134:	4a ef       	ldi	r20, 0xFA	; 250
    2136:	54 e4       	ldi	r21, 0x44	; 68
    2138:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    213c:	dc 01       	movw	r26, r24
    213e:	cb 01       	movw	r24, r22
    2140:	8d 8b       	std	Y+21, r24	; 0x15
    2142:	9e 8b       	std	Y+22, r25	; 0x16
    2144:	af 8b       	std	Y+23, r26	; 0x17
    2146:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2148:	6d 89       	ldd	r22, Y+21	; 0x15
    214a:	7e 89       	ldd	r23, Y+22	; 0x16
    214c:	8f 89       	ldd	r24, Y+23	; 0x17
    214e:	98 8d       	ldd	r25, Y+24	; 0x18
    2150:	20 e0       	ldi	r18, 0x00	; 0
    2152:	30 e0       	ldi	r19, 0x00	; 0
    2154:	40 e8       	ldi	r20, 0x80	; 128
    2156:	5f e3       	ldi	r21, 0x3F	; 63
    2158:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    215c:	88 23       	and	r24, r24
    215e:	2c f4       	brge	.+10     	; 0x216a <HLCD4_voidSendData+0x196>
		__ticks = 1;
    2160:	81 e0       	ldi	r24, 0x01	; 1
    2162:	90 e0       	ldi	r25, 0x00	; 0
    2164:	9c 8b       	std	Y+20, r25	; 0x14
    2166:	8b 8b       	std	Y+19, r24	; 0x13
    2168:	3f c0       	rjmp	.+126    	; 0x21e8 <HLCD4_voidSendData+0x214>
	else if (__tmp > 65535)
    216a:	6d 89       	ldd	r22, Y+21	; 0x15
    216c:	7e 89       	ldd	r23, Y+22	; 0x16
    216e:	8f 89       	ldd	r24, Y+23	; 0x17
    2170:	98 8d       	ldd	r25, Y+24	; 0x18
    2172:	20 e0       	ldi	r18, 0x00	; 0
    2174:	3f ef       	ldi	r19, 0xFF	; 255
    2176:	4f e7       	ldi	r20, 0x7F	; 127
    2178:	57 e4       	ldi	r21, 0x47	; 71
    217a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    217e:	18 16       	cp	r1, r24
    2180:	4c f5       	brge	.+82     	; 0x21d4 <HLCD4_voidSendData+0x200>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2182:	69 8d       	ldd	r22, Y+25	; 0x19
    2184:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2186:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2188:	9c 8d       	ldd	r25, Y+28	; 0x1c
    218a:	20 e0       	ldi	r18, 0x00	; 0
    218c:	30 e0       	ldi	r19, 0x00	; 0
    218e:	40 e2       	ldi	r20, 0x20	; 32
    2190:	51 e4       	ldi	r21, 0x41	; 65
    2192:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2196:	dc 01       	movw	r26, r24
    2198:	cb 01       	movw	r24, r22
    219a:	bc 01       	movw	r22, r24
    219c:	cd 01       	movw	r24, r26
    219e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21a2:	dc 01       	movw	r26, r24
    21a4:	cb 01       	movw	r24, r22
    21a6:	9c 8b       	std	Y+20, r25	; 0x14
    21a8:	8b 8b       	std	Y+19, r24	; 0x13
    21aa:	0f c0       	rjmp	.+30     	; 0x21ca <HLCD4_voidSendData+0x1f6>
    21ac:	88 ec       	ldi	r24, 0xC8	; 200
    21ae:	90 e0       	ldi	r25, 0x00	; 0
    21b0:	9a 8b       	std	Y+18, r25	; 0x12
    21b2:	89 8b       	std	Y+17, r24	; 0x11
    21b4:	89 89       	ldd	r24, Y+17	; 0x11
    21b6:	9a 89       	ldd	r25, Y+18	; 0x12
    21b8:	01 97       	sbiw	r24, 0x01	; 1
    21ba:	f1 f7       	brne	.-4      	; 0x21b8 <HLCD4_voidSendData+0x1e4>
    21bc:	9a 8b       	std	Y+18, r25	; 0x12
    21be:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21c0:	8b 89       	ldd	r24, Y+19	; 0x13
    21c2:	9c 89       	ldd	r25, Y+20	; 0x14
    21c4:	01 97       	sbiw	r24, 0x01	; 1
    21c6:	9c 8b       	std	Y+20, r25	; 0x14
    21c8:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21ca:	8b 89       	ldd	r24, Y+19	; 0x13
    21cc:	9c 89       	ldd	r25, Y+20	; 0x14
    21ce:	00 97       	sbiw	r24, 0x00	; 0
    21d0:	69 f7       	brne	.-38     	; 0x21ac <HLCD4_voidSendData+0x1d8>
    21d2:	14 c0       	rjmp	.+40     	; 0x21fc <HLCD4_voidSendData+0x228>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    21d4:	6d 89       	ldd	r22, Y+21	; 0x15
    21d6:	7e 89       	ldd	r23, Y+22	; 0x16
    21d8:	8f 89       	ldd	r24, Y+23	; 0x17
    21da:	98 8d       	ldd	r25, Y+24	; 0x18
    21dc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21e0:	dc 01       	movw	r26, r24
    21e2:	cb 01       	movw	r24, r22
    21e4:	9c 8b       	std	Y+20, r25	; 0x14
    21e6:	8b 8b       	std	Y+19, r24	; 0x13
    21e8:	8b 89       	ldd	r24, Y+19	; 0x13
    21ea:	9c 89       	ldd	r25, Y+20	; 0x14
    21ec:	98 8b       	std	Y+16, r25	; 0x10
    21ee:	8f 87       	std	Y+15, r24	; 0x0f
    21f0:	8f 85       	ldd	r24, Y+15	; 0x0f
    21f2:	98 89       	ldd	r25, Y+16	; 0x10
    21f4:	01 97       	sbiw	r24, 0x01	; 1
    21f6:	f1 f7       	brne	.-4      	; 0x21f4 <HLCD4_voidSendData+0x220>
    21f8:	98 8b       	std	Y+16, r25	; 0x10
    21fa:	8f 87       	std	Y+15, r24	; 0x0f
    _delay_ms(1);
    MDIO_voidSetPinValue(LCD_CONTROL_PORT,E_PIN,PIN_LOW);
    21fc:	82 e0       	ldi	r24, 0x02	; 2
    21fe:	62 e0       	ldi	r22, 0x02	; 2
    2200:	40 e0       	ldi	r20, 0x00	; 0
    2202:	0e 94 b6 08 	call	0x116c	; 0x116c <MDIO_voidSetPinValue>
    2206:	80 e0       	ldi	r24, 0x00	; 0
    2208:	90 e0       	ldi	r25, 0x00	; 0
    220a:	a0 e0       	ldi	r26, 0x00	; 0
    220c:	b0 e4       	ldi	r27, 0x40	; 64
    220e:	8b 87       	std	Y+11, r24	; 0x0b
    2210:	9c 87       	std	Y+12, r25	; 0x0c
    2212:	ad 87       	std	Y+13, r26	; 0x0d
    2214:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2216:	6b 85       	ldd	r22, Y+11	; 0x0b
    2218:	7c 85       	ldd	r23, Y+12	; 0x0c
    221a:	8d 85       	ldd	r24, Y+13	; 0x0d
    221c:	9e 85       	ldd	r25, Y+14	; 0x0e
    221e:	20 e0       	ldi	r18, 0x00	; 0
    2220:	30 e0       	ldi	r19, 0x00	; 0
    2222:	4a ef       	ldi	r20, 0xFA	; 250
    2224:	54 e4       	ldi	r21, 0x44	; 68
    2226:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    222a:	dc 01       	movw	r26, r24
    222c:	cb 01       	movw	r24, r22
    222e:	8f 83       	std	Y+7, r24	; 0x07
    2230:	98 87       	std	Y+8, r25	; 0x08
    2232:	a9 87       	std	Y+9, r26	; 0x09
    2234:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2236:	6f 81       	ldd	r22, Y+7	; 0x07
    2238:	78 85       	ldd	r23, Y+8	; 0x08
    223a:	89 85       	ldd	r24, Y+9	; 0x09
    223c:	9a 85       	ldd	r25, Y+10	; 0x0a
    223e:	20 e0       	ldi	r18, 0x00	; 0
    2240:	30 e0       	ldi	r19, 0x00	; 0
    2242:	40 e8       	ldi	r20, 0x80	; 128
    2244:	5f e3       	ldi	r21, 0x3F	; 63
    2246:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    224a:	88 23       	and	r24, r24
    224c:	2c f4       	brge	.+10     	; 0x2258 <HLCD4_voidSendData+0x284>
		__ticks = 1;
    224e:	81 e0       	ldi	r24, 0x01	; 1
    2250:	90 e0       	ldi	r25, 0x00	; 0
    2252:	9e 83       	std	Y+6, r25	; 0x06
    2254:	8d 83       	std	Y+5, r24	; 0x05
    2256:	3f c0       	rjmp	.+126    	; 0x22d6 <HLCD4_voidSendData+0x302>
	else if (__tmp > 65535)
    2258:	6f 81       	ldd	r22, Y+7	; 0x07
    225a:	78 85       	ldd	r23, Y+8	; 0x08
    225c:	89 85       	ldd	r24, Y+9	; 0x09
    225e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2260:	20 e0       	ldi	r18, 0x00	; 0
    2262:	3f ef       	ldi	r19, 0xFF	; 255
    2264:	4f e7       	ldi	r20, 0x7F	; 127
    2266:	57 e4       	ldi	r21, 0x47	; 71
    2268:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    226c:	18 16       	cp	r1, r24
    226e:	4c f5       	brge	.+82     	; 0x22c2 <HLCD4_voidSendData+0x2ee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2270:	6b 85       	ldd	r22, Y+11	; 0x0b
    2272:	7c 85       	ldd	r23, Y+12	; 0x0c
    2274:	8d 85       	ldd	r24, Y+13	; 0x0d
    2276:	9e 85       	ldd	r25, Y+14	; 0x0e
    2278:	20 e0       	ldi	r18, 0x00	; 0
    227a:	30 e0       	ldi	r19, 0x00	; 0
    227c:	40 e2       	ldi	r20, 0x20	; 32
    227e:	51 e4       	ldi	r21, 0x41	; 65
    2280:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2284:	dc 01       	movw	r26, r24
    2286:	cb 01       	movw	r24, r22
    2288:	bc 01       	movw	r22, r24
    228a:	cd 01       	movw	r24, r26
    228c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2290:	dc 01       	movw	r26, r24
    2292:	cb 01       	movw	r24, r22
    2294:	9e 83       	std	Y+6, r25	; 0x06
    2296:	8d 83       	std	Y+5, r24	; 0x05
    2298:	0f c0       	rjmp	.+30     	; 0x22b8 <HLCD4_voidSendData+0x2e4>
    229a:	88 ec       	ldi	r24, 0xC8	; 200
    229c:	90 e0       	ldi	r25, 0x00	; 0
    229e:	9c 83       	std	Y+4, r25	; 0x04
    22a0:	8b 83       	std	Y+3, r24	; 0x03
    22a2:	8b 81       	ldd	r24, Y+3	; 0x03
    22a4:	9c 81       	ldd	r25, Y+4	; 0x04
    22a6:	01 97       	sbiw	r24, 0x01	; 1
    22a8:	f1 f7       	brne	.-4      	; 0x22a6 <HLCD4_voidSendData+0x2d2>
    22aa:	9c 83       	std	Y+4, r25	; 0x04
    22ac:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    22ae:	8d 81       	ldd	r24, Y+5	; 0x05
    22b0:	9e 81       	ldd	r25, Y+6	; 0x06
    22b2:	01 97       	sbiw	r24, 0x01	; 1
    22b4:	9e 83       	std	Y+6, r25	; 0x06
    22b6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    22b8:	8d 81       	ldd	r24, Y+5	; 0x05
    22ba:	9e 81       	ldd	r25, Y+6	; 0x06
    22bc:	00 97       	sbiw	r24, 0x00	; 0
    22be:	69 f7       	brne	.-38     	; 0x229a <HLCD4_voidSendData+0x2c6>
    22c0:	14 c0       	rjmp	.+40     	; 0x22ea <HLCD4_voidSendData+0x316>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    22c2:	6f 81       	ldd	r22, Y+7	; 0x07
    22c4:	78 85       	ldd	r23, Y+8	; 0x08
    22c6:	89 85       	ldd	r24, Y+9	; 0x09
    22c8:	9a 85       	ldd	r25, Y+10	; 0x0a
    22ca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22ce:	dc 01       	movw	r26, r24
    22d0:	cb 01       	movw	r24, r22
    22d2:	9e 83       	std	Y+6, r25	; 0x06
    22d4:	8d 83       	std	Y+5, r24	; 0x05
    22d6:	8d 81       	ldd	r24, Y+5	; 0x05
    22d8:	9e 81       	ldd	r25, Y+6	; 0x06
    22da:	9a 83       	std	Y+2, r25	; 0x02
    22dc:	89 83       	std	Y+1, r24	; 0x01
    22de:	89 81       	ldd	r24, Y+1	; 0x01
    22e0:	9a 81       	ldd	r25, Y+2	; 0x02
    22e2:	01 97       	sbiw	r24, 0x01	; 1
    22e4:	f1 f7       	brne	.-4      	; 0x22e2 <HLCD4_voidSendData+0x30e>
    22e6:	9a 83       	std	Y+2, r25	; 0x02
    22e8:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(2);
}
    22ea:	ab 96       	adiw	r28, 0x2b	; 43
    22ec:	0f b6       	in	r0, 0x3f	; 63
    22ee:	f8 94       	cli
    22f0:	de bf       	out	0x3e, r29	; 62
    22f2:	0f be       	out	0x3f, r0	; 63
    22f4:	cd bf       	out	0x3d, r28	; 61
    22f6:	cf 91       	pop	r28
    22f8:	df 91       	pop	r29
    22fa:	08 95       	ret

000022fc <HLCD4_voidInit>:



void HLCD4_voidInit()
{
    22fc:	0f 93       	push	r16
    22fe:	1f 93       	push	r17
    2300:	df 93       	push	r29
    2302:	cf 93       	push	r28
    2304:	cd b7       	in	r28, 0x3d	; 61
    2306:	de b7       	in	r29, 0x3e	; 62
    2308:	cc 54       	subi	r28, 0x4C	; 76
    230a:	d0 40       	sbci	r29, 0x00	; 0
    230c:	0f b6       	in	r0, 0x3f	; 63
    230e:	f8 94       	cli
    2310:	de bf       	out	0x3e, r29	; 62
    2312:	0f be       	out	0x3f, r0	; 63
    2314:	cd bf       	out	0x3d, r28	; 61
    2316:	fe 01       	movw	r30, r28
    2318:	e7 5b       	subi	r30, 0xB7	; 183
    231a:	ff 4f       	sbci	r31, 0xFF	; 255
    231c:	80 e0       	ldi	r24, 0x00	; 0
    231e:	90 e0       	ldi	r25, 0x00	; 0
    2320:	a0 ef       	ldi	r26, 0xF0	; 240
    2322:	b1 e4       	ldi	r27, 0x41	; 65
    2324:	80 83       	st	Z, r24
    2326:	91 83       	std	Z+1, r25	; 0x01
    2328:	a2 83       	std	Z+2, r26	; 0x02
    232a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    232c:	8e 01       	movw	r16, r28
    232e:	0b 5b       	subi	r16, 0xBB	; 187
    2330:	1f 4f       	sbci	r17, 0xFF	; 255
    2332:	fe 01       	movw	r30, r28
    2334:	e7 5b       	subi	r30, 0xB7	; 183
    2336:	ff 4f       	sbci	r31, 0xFF	; 255
    2338:	60 81       	ld	r22, Z
    233a:	71 81       	ldd	r23, Z+1	; 0x01
    233c:	82 81       	ldd	r24, Z+2	; 0x02
    233e:	93 81       	ldd	r25, Z+3	; 0x03
    2340:	20 e0       	ldi	r18, 0x00	; 0
    2342:	30 e0       	ldi	r19, 0x00	; 0
    2344:	4a ef       	ldi	r20, 0xFA	; 250
    2346:	54 e4       	ldi	r21, 0x44	; 68
    2348:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    234c:	dc 01       	movw	r26, r24
    234e:	cb 01       	movw	r24, r22
    2350:	f8 01       	movw	r30, r16
    2352:	80 83       	st	Z, r24
    2354:	91 83       	std	Z+1, r25	; 0x01
    2356:	a2 83       	std	Z+2, r26	; 0x02
    2358:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    235a:	fe 01       	movw	r30, r28
    235c:	eb 5b       	subi	r30, 0xBB	; 187
    235e:	ff 4f       	sbci	r31, 0xFF	; 255
    2360:	60 81       	ld	r22, Z
    2362:	71 81       	ldd	r23, Z+1	; 0x01
    2364:	82 81       	ldd	r24, Z+2	; 0x02
    2366:	93 81       	ldd	r25, Z+3	; 0x03
    2368:	20 e0       	ldi	r18, 0x00	; 0
    236a:	30 e0       	ldi	r19, 0x00	; 0
    236c:	40 e8       	ldi	r20, 0x80	; 128
    236e:	5f e3       	ldi	r21, 0x3F	; 63
    2370:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2374:	88 23       	and	r24, r24
    2376:	44 f4       	brge	.+16     	; 0x2388 <HLCD4_voidInit+0x8c>
		__ticks = 1;
    2378:	fe 01       	movw	r30, r28
    237a:	ed 5b       	subi	r30, 0xBD	; 189
    237c:	ff 4f       	sbci	r31, 0xFF	; 255
    237e:	81 e0       	ldi	r24, 0x01	; 1
    2380:	90 e0       	ldi	r25, 0x00	; 0
    2382:	91 83       	std	Z+1, r25	; 0x01
    2384:	80 83       	st	Z, r24
    2386:	64 c0       	rjmp	.+200    	; 0x2450 <HLCD4_voidInit+0x154>
	else if (__tmp > 65535)
    2388:	fe 01       	movw	r30, r28
    238a:	eb 5b       	subi	r30, 0xBB	; 187
    238c:	ff 4f       	sbci	r31, 0xFF	; 255
    238e:	60 81       	ld	r22, Z
    2390:	71 81       	ldd	r23, Z+1	; 0x01
    2392:	82 81       	ldd	r24, Z+2	; 0x02
    2394:	93 81       	ldd	r25, Z+3	; 0x03
    2396:	20 e0       	ldi	r18, 0x00	; 0
    2398:	3f ef       	ldi	r19, 0xFF	; 255
    239a:	4f e7       	ldi	r20, 0x7F	; 127
    239c:	57 e4       	ldi	r21, 0x47	; 71
    239e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    23a2:	18 16       	cp	r1, r24
    23a4:	0c f0       	brlt	.+2      	; 0x23a8 <HLCD4_voidInit+0xac>
    23a6:	43 c0       	rjmp	.+134    	; 0x242e <HLCD4_voidInit+0x132>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    23a8:	fe 01       	movw	r30, r28
    23aa:	e7 5b       	subi	r30, 0xB7	; 183
    23ac:	ff 4f       	sbci	r31, 0xFF	; 255
    23ae:	60 81       	ld	r22, Z
    23b0:	71 81       	ldd	r23, Z+1	; 0x01
    23b2:	82 81       	ldd	r24, Z+2	; 0x02
    23b4:	93 81       	ldd	r25, Z+3	; 0x03
    23b6:	20 e0       	ldi	r18, 0x00	; 0
    23b8:	30 e0       	ldi	r19, 0x00	; 0
    23ba:	40 e2       	ldi	r20, 0x20	; 32
    23bc:	51 e4       	ldi	r21, 0x41	; 65
    23be:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23c2:	dc 01       	movw	r26, r24
    23c4:	cb 01       	movw	r24, r22
    23c6:	8e 01       	movw	r16, r28
    23c8:	0d 5b       	subi	r16, 0xBD	; 189
    23ca:	1f 4f       	sbci	r17, 0xFF	; 255
    23cc:	bc 01       	movw	r22, r24
    23ce:	cd 01       	movw	r24, r26
    23d0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23d4:	dc 01       	movw	r26, r24
    23d6:	cb 01       	movw	r24, r22
    23d8:	f8 01       	movw	r30, r16
    23da:	91 83       	std	Z+1, r25	; 0x01
    23dc:	80 83       	st	Z, r24
    23de:	1f c0       	rjmp	.+62     	; 0x241e <HLCD4_voidInit+0x122>
    23e0:	fe 01       	movw	r30, r28
    23e2:	ef 5b       	subi	r30, 0xBF	; 191
    23e4:	ff 4f       	sbci	r31, 0xFF	; 255
    23e6:	88 ec       	ldi	r24, 0xC8	; 200
    23e8:	90 e0       	ldi	r25, 0x00	; 0
    23ea:	91 83       	std	Z+1, r25	; 0x01
    23ec:	80 83       	st	Z, r24
    23ee:	fe 01       	movw	r30, r28
    23f0:	ef 5b       	subi	r30, 0xBF	; 191
    23f2:	ff 4f       	sbci	r31, 0xFF	; 255
    23f4:	80 81       	ld	r24, Z
    23f6:	91 81       	ldd	r25, Z+1	; 0x01
    23f8:	01 97       	sbiw	r24, 0x01	; 1
    23fa:	f1 f7       	brne	.-4      	; 0x23f8 <HLCD4_voidInit+0xfc>
    23fc:	fe 01       	movw	r30, r28
    23fe:	ef 5b       	subi	r30, 0xBF	; 191
    2400:	ff 4f       	sbci	r31, 0xFF	; 255
    2402:	91 83       	std	Z+1, r25	; 0x01
    2404:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2406:	de 01       	movw	r26, r28
    2408:	ad 5b       	subi	r26, 0xBD	; 189
    240a:	bf 4f       	sbci	r27, 0xFF	; 255
    240c:	fe 01       	movw	r30, r28
    240e:	ed 5b       	subi	r30, 0xBD	; 189
    2410:	ff 4f       	sbci	r31, 0xFF	; 255
    2412:	80 81       	ld	r24, Z
    2414:	91 81       	ldd	r25, Z+1	; 0x01
    2416:	01 97       	sbiw	r24, 0x01	; 1
    2418:	11 96       	adiw	r26, 0x01	; 1
    241a:	9c 93       	st	X, r25
    241c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    241e:	fe 01       	movw	r30, r28
    2420:	ed 5b       	subi	r30, 0xBD	; 189
    2422:	ff 4f       	sbci	r31, 0xFF	; 255
    2424:	80 81       	ld	r24, Z
    2426:	91 81       	ldd	r25, Z+1	; 0x01
    2428:	00 97       	sbiw	r24, 0x00	; 0
    242a:	d1 f6       	brne	.-76     	; 0x23e0 <HLCD4_voidInit+0xe4>
    242c:	24 c0       	rjmp	.+72     	; 0x2476 <HLCD4_voidInit+0x17a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    242e:	8e 01       	movw	r16, r28
    2430:	0d 5b       	subi	r16, 0xBD	; 189
    2432:	1f 4f       	sbci	r17, 0xFF	; 255
    2434:	fe 01       	movw	r30, r28
    2436:	eb 5b       	subi	r30, 0xBB	; 187
    2438:	ff 4f       	sbci	r31, 0xFF	; 255
    243a:	60 81       	ld	r22, Z
    243c:	71 81       	ldd	r23, Z+1	; 0x01
    243e:	82 81       	ldd	r24, Z+2	; 0x02
    2440:	93 81       	ldd	r25, Z+3	; 0x03
    2442:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2446:	dc 01       	movw	r26, r24
    2448:	cb 01       	movw	r24, r22
    244a:	f8 01       	movw	r30, r16
    244c:	91 83       	std	Z+1, r25	; 0x01
    244e:	80 83       	st	Z, r24
    2450:	fe 01       	movw	r30, r28
    2452:	ed 5b       	subi	r30, 0xBD	; 189
    2454:	ff 4f       	sbci	r31, 0xFF	; 255
    2456:	80 81       	ld	r24, Z
    2458:	91 81       	ldd	r25, Z+1	; 0x01
    245a:	fe 01       	movw	r30, r28
    245c:	ff 96       	adiw	r30, 0x3f	; 63
    245e:	91 83       	std	Z+1, r25	; 0x01
    2460:	80 83       	st	Z, r24
    2462:	fe 01       	movw	r30, r28
    2464:	ff 96       	adiw	r30, 0x3f	; 63
    2466:	80 81       	ld	r24, Z
    2468:	91 81       	ldd	r25, Z+1	; 0x01
    246a:	01 97       	sbiw	r24, 0x01	; 1
    246c:	f1 f7       	brne	.-4      	; 0x246a <HLCD4_voidInit+0x16e>
    246e:	fe 01       	movw	r30, r28
    2470:	ff 96       	adiw	r30, 0x3f	; 63
    2472:	91 83       	std	Z+1, r25	; 0x01
    2474:	80 83       	st	Z, r24
    _delay_ms(30);
    HLCD4_voidSendCommand(FUNCTION_SET1);
    2476:	80 e2       	ldi	r24, 0x20	; 32
    2478:	0e 94 51 0e 	call	0x1ca2	; 0x1ca2 <HLCD4_voidSendCommand>
    HLCD4_voidSendCommand(FUNCTION_SET2);
    247c:	80 e2       	ldi	r24, 0x20	; 32
    247e:	0e 94 51 0e 	call	0x1ca2	; 0x1ca2 <HLCD4_voidSendCommand>
    HLCD4_voidSendCommand(FUNCTION_SET3);
    2482:	80 e8       	ldi	r24, 0x80	; 128
    2484:	0e 94 51 0e 	call	0x1ca2	; 0x1ca2 <HLCD4_voidSendCommand>
    2488:	80 e0       	ldi	r24, 0x00	; 0
    248a:	90 e0       	ldi	r25, 0x00	; 0
    248c:	a0 e2       	ldi	r26, 0x20	; 32
    248e:	b2 e4       	ldi	r27, 0x42	; 66
    2490:	8b af       	std	Y+59, r24	; 0x3b
    2492:	9c af       	std	Y+60, r25	; 0x3c
    2494:	ad af       	std	Y+61, r26	; 0x3d
    2496:	be af       	std	Y+62, r27	; 0x3e
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2498:	6b ad       	ldd	r22, Y+59	; 0x3b
    249a:	7c ad       	ldd	r23, Y+60	; 0x3c
    249c:	8d ad       	ldd	r24, Y+61	; 0x3d
    249e:	9e ad       	ldd	r25, Y+62	; 0x3e
    24a0:	2b ea       	ldi	r18, 0xAB	; 171
    24a2:	3a ea       	ldi	r19, 0xAA	; 170
    24a4:	4a e2       	ldi	r20, 0x2A	; 42
    24a6:	50 e4       	ldi	r21, 0x40	; 64
    24a8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24ac:	dc 01       	movw	r26, r24
    24ae:	cb 01       	movw	r24, r22
    24b0:	8f ab       	std	Y+55, r24	; 0x37
    24b2:	98 af       	std	Y+56, r25	; 0x38
    24b4:	a9 af       	std	Y+57, r26	; 0x39
    24b6:	ba af       	std	Y+58, r27	; 0x3a
	if (__tmp < 1.0)
    24b8:	6f a9       	ldd	r22, Y+55	; 0x37
    24ba:	78 ad       	ldd	r23, Y+56	; 0x38
    24bc:	89 ad       	ldd	r24, Y+57	; 0x39
    24be:	9a ad       	ldd	r25, Y+58	; 0x3a
    24c0:	20 e0       	ldi	r18, 0x00	; 0
    24c2:	30 e0       	ldi	r19, 0x00	; 0
    24c4:	40 e8       	ldi	r20, 0x80	; 128
    24c6:	5f e3       	ldi	r21, 0x3F	; 63
    24c8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    24cc:	88 23       	and	r24, r24
    24ce:	1c f4       	brge	.+6      	; 0x24d6 <HLCD4_voidInit+0x1da>
		__ticks = 1;
    24d0:	81 e0       	ldi	r24, 0x01	; 1
    24d2:	8e ab       	std	Y+54, r24	; 0x36
    24d4:	91 c0       	rjmp	.+290    	; 0x25f8 <HLCD4_voidInit+0x2fc>
	else if (__tmp > 255)
    24d6:	6f a9       	ldd	r22, Y+55	; 0x37
    24d8:	78 ad       	ldd	r23, Y+56	; 0x38
    24da:	89 ad       	ldd	r24, Y+57	; 0x39
    24dc:	9a ad       	ldd	r25, Y+58	; 0x3a
    24de:	20 e0       	ldi	r18, 0x00	; 0
    24e0:	30 e0       	ldi	r19, 0x00	; 0
    24e2:	4f e7       	ldi	r20, 0x7F	; 127
    24e4:	53 e4       	ldi	r21, 0x43	; 67
    24e6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    24ea:	18 16       	cp	r1, r24
    24ec:	0c f0       	brlt	.+2      	; 0x24f0 <HLCD4_voidInit+0x1f4>
    24ee:	7b c0       	rjmp	.+246    	; 0x25e6 <HLCD4_voidInit+0x2ea>
	{
		_delay_ms(__us / 1000.0);
    24f0:	6b ad       	ldd	r22, Y+59	; 0x3b
    24f2:	7c ad       	ldd	r23, Y+60	; 0x3c
    24f4:	8d ad       	ldd	r24, Y+61	; 0x3d
    24f6:	9e ad       	ldd	r25, Y+62	; 0x3e
    24f8:	20 e0       	ldi	r18, 0x00	; 0
    24fa:	30 e0       	ldi	r19, 0x00	; 0
    24fc:	4a e7       	ldi	r20, 0x7A	; 122
    24fe:	54 e4       	ldi	r21, 0x44	; 68
    2500:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2504:	dc 01       	movw	r26, r24
    2506:	cb 01       	movw	r24, r22
    2508:	8a ab       	std	Y+50, r24	; 0x32
    250a:	9b ab       	std	Y+51, r25	; 0x33
    250c:	ac ab       	std	Y+52, r26	; 0x34
    250e:	bd ab       	std	Y+53, r27	; 0x35
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2510:	6a a9       	ldd	r22, Y+50	; 0x32
    2512:	7b a9       	ldd	r23, Y+51	; 0x33
    2514:	8c a9       	ldd	r24, Y+52	; 0x34
    2516:	9d a9       	ldd	r25, Y+53	; 0x35
    2518:	20 e0       	ldi	r18, 0x00	; 0
    251a:	30 e0       	ldi	r19, 0x00	; 0
    251c:	4a ef       	ldi	r20, 0xFA	; 250
    251e:	54 e4       	ldi	r21, 0x44	; 68
    2520:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2524:	dc 01       	movw	r26, r24
    2526:	cb 01       	movw	r24, r22
    2528:	8e a7       	std	Y+46, r24	; 0x2e
    252a:	9f a7       	std	Y+47, r25	; 0x2f
    252c:	a8 ab       	std	Y+48, r26	; 0x30
    252e:	b9 ab       	std	Y+49, r27	; 0x31
	if (__tmp < 1.0)
    2530:	6e a5       	ldd	r22, Y+46	; 0x2e
    2532:	7f a5       	ldd	r23, Y+47	; 0x2f
    2534:	88 a9       	ldd	r24, Y+48	; 0x30
    2536:	99 a9       	ldd	r25, Y+49	; 0x31
    2538:	20 e0       	ldi	r18, 0x00	; 0
    253a:	30 e0       	ldi	r19, 0x00	; 0
    253c:	40 e8       	ldi	r20, 0x80	; 128
    253e:	5f e3       	ldi	r21, 0x3F	; 63
    2540:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2544:	88 23       	and	r24, r24
    2546:	2c f4       	brge	.+10     	; 0x2552 <HLCD4_voidInit+0x256>
		__ticks = 1;
    2548:	81 e0       	ldi	r24, 0x01	; 1
    254a:	90 e0       	ldi	r25, 0x00	; 0
    254c:	9d a7       	std	Y+45, r25	; 0x2d
    254e:	8c a7       	std	Y+44, r24	; 0x2c
    2550:	3f c0       	rjmp	.+126    	; 0x25d0 <HLCD4_voidInit+0x2d4>
	else if (__tmp > 65535)
    2552:	6e a5       	ldd	r22, Y+46	; 0x2e
    2554:	7f a5       	ldd	r23, Y+47	; 0x2f
    2556:	88 a9       	ldd	r24, Y+48	; 0x30
    2558:	99 a9       	ldd	r25, Y+49	; 0x31
    255a:	20 e0       	ldi	r18, 0x00	; 0
    255c:	3f ef       	ldi	r19, 0xFF	; 255
    255e:	4f e7       	ldi	r20, 0x7F	; 127
    2560:	57 e4       	ldi	r21, 0x47	; 71
    2562:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2566:	18 16       	cp	r1, r24
    2568:	4c f5       	brge	.+82     	; 0x25bc <HLCD4_voidInit+0x2c0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    256a:	6a a9       	ldd	r22, Y+50	; 0x32
    256c:	7b a9       	ldd	r23, Y+51	; 0x33
    256e:	8c a9       	ldd	r24, Y+52	; 0x34
    2570:	9d a9       	ldd	r25, Y+53	; 0x35
    2572:	20 e0       	ldi	r18, 0x00	; 0
    2574:	30 e0       	ldi	r19, 0x00	; 0
    2576:	40 e2       	ldi	r20, 0x20	; 32
    2578:	51 e4       	ldi	r21, 0x41	; 65
    257a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    257e:	dc 01       	movw	r26, r24
    2580:	cb 01       	movw	r24, r22
    2582:	bc 01       	movw	r22, r24
    2584:	cd 01       	movw	r24, r26
    2586:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    258a:	dc 01       	movw	r26, r24
    258c:	cb 01       	movw	r24, r22
    258e:	9d a7       	std	Y+45, r25	; 0x2d
    2590:	8c a7       	std	Y+44, r24	; 0x2c
    2592:	0f c0       	rjmp	.+30     	; 0x25b2 <HLCD4_voidInit+0x2b6>
    2594:	88 ec       	ldi	r24, 0xC8	; 200
    2596:	90 e0       	ldi	r25, 0x00	; 0
    2598:	9b a7       	std	Y+43, r25	; 0x2b
    259a:	8a a7       	std	Y+42, r24	; 0x2a
    259c:	8a a5       	ldd	r24, Y+42	; 0x2a
    259e:	9b a5       	ldd	r25, Y+43	; 0x2b
    25a0:	01 97       	sbiw	r24, 0x01	; 1
    25a2:	f1 f7       	brne	.-4      	; 0x25a0 <HLCD4_voidInit+0x2a4>
    25a4:	9b a7       	std	Y+43, r25	; 0x2b
    25a6:	8a a7       	std	Y+42, r24	; 0x2a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    25a8:	8c a5       	ldd	r24, Y+44	; 0x2c
    25aa:	9d a5       	ldd	r25, Y+45	; 0x2d
    25ac:	01 97       	sbiw	r24, 0x01	; 1
    25ae:	9d a7       	std	Y+45, r25	; 0x2d
    25b0:	8c a7       	std	Y+44, r24	; 0x2c
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    25b2:	8c a5       	ldd	r24, Y+44	; 0x2c
    25b4:	9d a5       	ldd	r25, Y+45	; 0x2d
    25b6:	00 97       	sbiw	r24, 0x00	; 0
    25b8:	69 f7       	brne	.-38     	; 0x2594 <HLCD4_voidInit+0x298>
    25ba:	24 c0       	rjmp	.+72     	; 0x2604 <HLCD4_voidInit+0x308>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    25bc:	6e a5       	ldd	r22, Y+46	; 0x2e
    25be:	7f a5       	ldd	r23, Y+47	; 0x2f
    25c0:	88 a9       	ldd	r24, Y+48	; 0x30
    25c2:	99 a9       	ldd	r25, Y+49	; 0x31
    25c4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25c8:	dc 01       	movw	r26, r24
    25ca:	cb 01       	movw	r24, r22
    25cc:	9d a7       	std	Y+45, r25	; 0x2d
    25ce:	8c a7       	std	Y+44, r24	; 0x2c
    25d0:	8c a5       	ldd	r24, Y+44	; 0x2c
    25d2:	9d a5       	ldd	r25, Y+45	; 0x2d
    25d4:	99 a7       	std	Y+41, r25	; 0x29
    25d6:	88 a7       	std	Y+40, r24	; 0x28
    25d8:	88 a5       	ldd	r24, Y+40	; 0x28
    25da:	99 a5       	ldd	r25, Y+41	; 0x29
    25dc:	01 97       	sbiw	r24, 0x01	; 1
    25de:	f1 f7       	brne	.-4      	; 0x25dc <HLCD4_voidInit+0x2e0>
    25e0:	99 a7       	std	Y+41, r25	; 0x29
    25e2:	88 a7       	std	Y+40, r24	; 0x28
    25e4:	0f c0       	rjmp	.+30     	; 0x2604 <HLCD4_voidInit+0x308>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    25e6:	6f a9       	ldd	r22, Y+55	; 0x37
    25e8:	78 ad       	ldd	r23, Y+56	; 0x38
    25ea:	89 ad       	ldd	r24, Y+57	; 0x39
    25ec:	9a ad       	ldd	r25, Y+58	; 0x3a
    25ee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25f2:	dc 01       	movw	r26, r24
    25f4:	cb 01       	movw	r24, r22
    25f6:	8e ab       	std	Y+54, r24	; 0x36
    25f8:	8e a9       	ldd	r24, Y+54	; 0x36
    25fa:	8f a3       	std	Y+39, r24	; 0x27
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    25fc:	8f a1       	ldd	r24, Y+39	; 0x27
    25fe:	8a 95       	dec	r24
    2600:	f1 f7       	brne	.-4      	; 0x25fe <HLCD4_voidInit+0x302>
    2602:	8f a3       	std	Y+39, r24	; 0x27
    _delay_us(40);
    HLCD4_voidSendCommand(ON_OFF_CONTROL1);
    2604:	80 e0       	ldi	r24, 0x00	; 0
    2606:	0e 94 51 0e 	call	0x1ca2	; 0x1ca2 <HLCD4_voidSendCommand>
    HLCD4_voidSendCommand(ON_OFF_CONTROL2);
    260a:	80 ec       	ldi	r24, 0xC0	; 192
    260c:	0e 94 51 0e 	call	0x1ca2	; 0x1ca2 <HLCD4_voidSendCommand>
    2610:	80 e0       	ldi	r24, 0x00	; 0
    2612:	90 e0       	ldi	r25, 0x00	; 0
    2614:	a0 e2       	ldi	r26, 0x20	; 32
    2616:	b2 e4       	ldi	r27, 0x42	; 66
    2618:	8b a3       	std	Y+35, r24	; 0x23
    261a:	9c a3       	std	Y+36, r25	; 0x24
    261c:	ad a3       	std	Y+37, r26	; 0x25
    261e:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2620:	6b a1       	ldd	r22, Y+35	; 0x23
    2622:	7c a1       	ldd	r23, Y+36	; 0x24
    2624:	8d a1       	ldd	r24, Y+37	; 0x25
    2626:	9e a1       	ldd	r25, Y+38	; 0x26
    2628:	2b ea       	ldi	r18, 0xAB	; 171
    262a:	3a ea       	ldi	r19, 0xAA	; 170
    262c:	4a e2       	ldi	r20, 0x2A	; 42
    262e:	50 e4       	ldi	r21, 0x40	; 64
    2630:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2634:	dc 01       	movw	r26, r24
    2636:	cb 01       	movw	r24, r22
    2638:	8f 8f       	std	Y+31, r24	; 0x1f
    263a:	98 a3       	std	Y+32, r25	; 0x20
    263c:	a9 a3       	std	Y+33, r26	; 0x21
    263e:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    2640:	6f 8d       	ldd	r22, Y+31	; 0x1f
    2642:	78 a1       	ldd	r23, Y+32	; 0x20
    2644:	89 a1       	ldd	r24, Y+33	; 0x21
    2646:	9a a1       	ldd	r25, Y+34	; 0x22
    2648:	20 e0       	ldi	r18, 0x00	; 0
    264a:	30 e0       	ldi	r19, 0x00	; 0
    264c:	40 e8       	ldi	r20, 0x80	; 128
    264e:	5f e3       	ldi	r21, 0x3F	; 63
    2650:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2654:	88 23       	and	r24, r24
    2656:	1c f4       	brge	.+6      	; 0x265e <HLCD4_voidInit+0x362>
		__ticks = 1;
    2658:	81 e0       	ldi	r24, 0x01	; 1
    265a:	8e 8f       	std	Y+30, r24	; 0x1e
    265c:	91 c0       	rjmp	.+290    	; 0x2780 <HLCD4_voidInit+0x484>
	else if (__tmp > 255)
    265e:	6f 8d       	ldd	r22, Y+31	; 0x1f
    2660:	78 a1       	ldd	r23, Y+32	; 0x20
    2662:	89 a1       	ldd	r24, Y+33	; 0x21
    2664:	9a a1       	ldd	r25, Y+34	; 0x22
    2666:	20 e0       	ldi	r18, 0x00	; 0
    2668:	30 e0       	ldi	r19, 0x00	; 0
    266a:	4f e7       	ldi	r20, 0x7F	; 127
    266c:	53 e4       	ldi	r21, 0x43	; 67
    266e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2672:	18 16       	cp	r1, r24
    2674:	0c f0       	brlt	.+2      	; 0x2678 <HLCD4_voidInit+0x37c>
    2676:	7b c0       	rjmp	.+246    	; 0x276e <HLCD4_voidInit+0x472>
	{
		_delay_ms(__us / 1000.0);
    2678:	6b a1       	ldd	r22, Y+35	; 0x23
    267a:	7c a1       	ldd	r23, Y+36	; 0x24
    267c:	8d a1       	ldd	r24, Y+37	; 0x25
    267e:	9e a1       	ldd	r25, Y+38	; 0x26
    2680:	20 e0       	ldi	r18, 0x00	; 0
    2682:	30 e0       	ldi	r19, 0x00	; 0
    2684:	4a e7       	ldi	r20, 0x7A	; 122
    2686:	54 e4       	ldi	r21, 0x44	; 68
    2688:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    268c:	dc 01       	movw	r26, r24
    268e:	cb 01       	movw	r24, r22
    2690:	8a 8f       	std	Y+26, r24	; 0x1a
    2692:	9b 8f       	std	Y+27, r25	; 0x1b
    2694:	ac 8f       	std	Y+28, r26	; 0x1c
    2696:	bd 8f       	std	Y+29, r27	; 0x1d
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2698:	6a 8d       	ldd	r22, Y+26	; 0x1a
    269a:	7b 8d       	ldd	r23, Y+27	; 0x1b
    269c:	8c 8d       	ldd	r24, Y+28	; 0x1c
    269e:	9d 8d       	ldd	r25, Y+29	; 0x1d
    26a0:	20 e0       	ldi	r18, 0x00	; 0
    26a2:	30 e0       	ldi	r19, 0x00	; 0
    26a4:	4a ef       	ldi	r20, 0xFA	; 250
    26a6:	54 e4       	ldi	r21, 0x44	; 68
    26a8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26ac:	dc 01       	movw	r26, r24
    26ae:	cb 01       	movw	r24, r22
    26b0:	8e 8b       	std	Y+22, r24	; 0x16
    26b2:	9f 8b       	std	Y+23, r25	; 0x17
    26b4:	a8 8f       	std	Y+24, r26	; 0x18
    26b6:	b9 8f       	std	Y+25, r27	; 0x19
	if (__tmp < 1.0)
    26b8:	6e 89       	ldd	r22, Y+22	; 0x16
    26ba:	7f 89       	ldd	r23, Y+23	; 0x17
    26bc:	88 8d       	ldd	r24, Y+24	; 0x18
    26be:	99 8d       	ldd	r25, Y+25	; 0x19
    26c0:	20 e0       	ldi	r18, 0x00	; 0
    26c2:	30 e0       	ldi	r19, 0x00	; 0
    26c4:	40 e8       	ldi	r20, 0x80	; 128
    26c6:	5f e3       	ldi	r21, 0x3F	; 63
    26c8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    26cc:	88 23       	and	r24, r24
    26ce:	2c f4       	brge	.+10     	; 0x26da <HLCD4_voidInit+0x3de>
		__ticks = 1;
    26d0:	81 e0       	ldi	r24, 0x01	; 1
    26d2:	90 e0       	ldi	r25, 0x00	; 0
    26d4:	9d 8b       	std	Y+21, r25	; 0x15
    26d6:	8c 8b       	std	Y+20, r24	; 0x14
    26d8:	3f c0       	rjmp	.+126    	; 0x2758 <HLCD4_voidInit+0x45c>
	else if (__tmp > 65535)
    26da:	6e 89       	ldd	r22, Y+22	; 0x16
    26dc:	7f 89       	ldd	r23, Y+23	; 0x17
    26de:	88 8d       	ldd	r24, Y+24	; 0x18
    26e0:	99 8d       	ldd	r25, Y+25	; 0x19
    26e2:	20 e0       	ldi	r18, 0x00	; 0
    26e4:	3f ef       	ldi	r19, 0xFF	; 255
    26e6:	4f e7       	ldi	r20, 0x7F	; 127
    26e8:	57 e4       	ldi	r21, 0x47	; 71
    26ea:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    26ee:	18 16       	cp	r1, r24
    26f0:	4c f5       	brge	.+82     	; 0x2744 <HLCD4_voidInit+0x448>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    26f2:	6a 8d       	ldd	r22, Y+26	; 0x1a
    26f4:	7b 8d       	ldd	r23, Y+27	; 0x1b
    26f6:	8c 8d       	ldd	r24, Y+28	; 0x1c
    26f8:	9d 8d       	ldd	r25, Y+29	; 0x1d
    26fa:	20 e0       	ldi	r18, 0x00	; 0
    26fc:	30 e0       	ldi	r19, 0x00	; 0
    26fe:	40 e2       	ldi	r20, 0x20	; 32
    2700:	51 e4       	ldi	r21, 0x41	; 65
    2702:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2706:	dc 01       	movw	r26, r24
    2708:	cb 01       	movw	r24, r22
    270a:	bc 01       	movw	r22, r24
    270c:	cd 01       	movw	r24, r26
    270e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2712:	dc 01       	movw	r26, r24
    2714:	cb 01       	movw	r24, r22
    2716:	9d 8b       	std	Y+21, r25	; 0x15
    2718:	8c 8b       	std	Y+20, r24	; 0x14
    271a:	0f c0       	rjmp	.+30     	; 0x273a <HLCD4_voidInit+0x43e>
    271c:	88 ec       	ldi	r24, 0xC8	; 200
    271e:	90 e0       	ldi	r25, 0x00	; 0
    2720:	9b 8b       	std	Y+19, r25	; 0x13
    2722:	8a 8b       	std	Y+18, r24	; 0x12
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2724:	8a 89       	ldd	r24, Y+18	; 0x12
    2726:	9b 89       	ldd	r25, Y+19	; 0x13
    2728:	01 97       	sbiw	r24, 0x01	; 1
    272a:	f1 f7       	brne	.-4      	; 0x2728 <HLCD4_voidInit+0x42c>
    272c:	9b 8b       	std	Y+19, r25	; 0x13
    272e:	8a 8b       	std	Y+18, r24	; 0x12
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2730:	8c 89       	ldd	r24, Y+20	; 0x14
    2732:	9d 89       	ldd	r25, Y+21	; 0x15
    2734:	01 97       	sbiw	r24, 0x01	; 1
    2736:	9d 8b       	std	Y+21, r25	; 0x15
    2738:	8c 8b       	std	Y+20, r24	; 0x14
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    273a:	8c 89       	ldd	r24, Y+20	; 0x14
    273c:	9d 89       	ldd	r25, Y+21	; 0x15
    273e:	00 97       	sbiw	r24, 0x00	; 0
    2740:	69 f7       	brne	.-38     	; 0x271c <HLCD4_voidInit+0x420>
    2742:	24 c0       	rjmp	.+72     	; 0x278c <HLCD4_voidInit+0x490>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2744:	6e 89       	ldd	r22, Y+22	; 0x16
    2746:	7f 89       	ldd	r23, Y+23	; 0x17
    2748:	88 8d       	ldd	r24, Y+24	; 0x18
    274a:	99 8d       	ldd	r25, Y+25	; 0x19
    274c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2750:	dc 01       	movw	r26, r24
    2752:	cb 01       	movw	r24, r22
    2754:	9d 8b       	std	Y+21, r25	; 0x15
    2756:	8c 8b       	std	Y+20, r24	; 0x14
    2758:	8c 89       	ldd	r24, Y+20	; 0x14
    275a:	9d 89       	ldd	r25, Y+21	; 0x15
    275c:	99 8b       	std	Y+17, r25	; 0x11
    275e:	88 8b       	std	Y+16, r24	; 0x10
    2760:	88 89       	ldd	r24, Y+16	; 0x10
    2762:	99 89       	ldd	r25, Y+17	; 0x11
    2764:	01 97       	sbiw	r24, 0x01	; 1
    2766:	f1 f7       	brne	.-4      	; 0x2764 <HLCD4_voidInit+0x468>
    2768:	99 8b       	std	Y+17, r25	; 0x11
    276a:	88 8b       	std	Y+16, r24	; 0x10
    276c:	0f c0       	rjmp	.+30     	; 0x278c <HLCD4_voidInit+0x490>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    276e:	6f 8d       	ldd	r22, Y+31	; 0x1f
    2770:	78 a1       	ldd	r23, Y+32	; 0x20
    2772:	89 a1       	ldd	r24, Y+33	; 0x21
    2774:	9a a1       	ldd	r25, Y+34	; 0x22
    2776:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    277a:	dc 01       	movw	r26, r24
    277c:	cb 01       	movw	r24, r22
    277e:	8e 8f       	std	Y+30, r24	; 0x1e
    2780:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2782:	8f 87       	std	Y+15, r24	; 0x0f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2784:	8f 85       	ldd	r24, Y+15	; 0x0f
    2786:	8a 95       	dec	r24
    2788:	f1 f7       	brne	.-4      	; 0x2786 <HLCD4_voidInit+0x48a>
    278a:	8f 87       	std	Y+15, r24	; 0x0f
    _delay_us(40);
    HLCD4_voidSendCommand(DISPLAY_CLEAR1);
    278c:	80 e0       	ldi	r24, 0x00	; 0
    278e:	0e 94 51 0e 	call	0x1ca2	; 0x1ca2 <HLCD4_voidSendCommand>
    HLCD4_voidSendCommand(DISPLAY_CLEAR2);
    2792:	80 e1       	ldi	r24, 0x10	; 16
    2794:	0e 94 51 0e 	call	0x1ca2	; 0x1ca2 <HLCD4_voidSendCommand>
    2798:	80 e0       	ldi	r24, 0x00	; 0
    279a:	90 e0       	ldi	r25, 0x00	; 0
    279c:	a0 e0       	ldi	r26, 0x00	; 0
    279e:	b0 e4       	ldi	r27, 0x40	; 64
    27a0:	8b 87       	std	Y+11, r24	; 0x0b
    27a2:	9c 87       	std	Y+12, r25	; 0x0c
    27a4:	ad 87       	std	Y+13, r26	; 0x0d
    27a6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    27a8:	6b 85       	ldd	r22, Y+11	; 0x0b
    27aa:	7c 85       	ldd	r23, Y+12	; 0x0c
    27ac:	8d 85       	ldd	r24, Y+13	; 0x0d
    27ae:	9e 85       	ldd	r25, Y+14	; 0x0e
    27b0:	20 e0       	ldi	r18, 0x00	; 0
    27b2:	30 e0       	ldi	r19, 0x00	; 0
    27b4:	4a ef       	ldi	r20, 0xFA	; 250
    27b6:	54 e4       	ldi	r21, 0x44	; 68
    27b8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27bc:	dc 01       	movw	r26, r24
    27be:	cb 01       	movw	r24, r22
    27c0:	8f 83       	std	Y+7, r24	; 0x07
    27c2:	98 87       	std	Y+8, r25	; 0x08
    27c4:	a9 87       	std	Y+9, r26	; 0x09
    27c6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    27c8:	6f 81       	ldd	r22, Y+7	; 0x07
    27ca:	78 85       	ldd	r23, Y+8	; 0x08
    27cc:	89 85       	ldd	r24, Y+9	; 0x09
    27ce:	9a 85       	ldd	r25, Y+10	; 0x0a
    27d0:	20 e0       	ldi	r18, 0x00	; 0
    27d2:	30 e0       	ldi	r19, 0x00	; 0
    27d4:	40 e8       	ldi	r20, 0x80	; 128
    27d6:	5f e3       	ldi	r21, 0x3F	; 63
    27d8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    27dc:	88 23       	and	r24, r24
    27de:	2c f4       	brge	.+10     	; 0x27ea <HLCD4_voidInit+0x4ee>
		__ticks = 1;
    27e0:	81 e0       	ldi	r24, 0x01	; 1
    27e2:	90 e0       	ldi	r25, 0x00	; 0
    27e4:	9e 83       	std	Y+6, r25	; 0x06
    27e6:	8d 83       	std	Y+5, r24	; 0x05
    27e8:	3f c0       	rjmp	.+126    	; 0x2868 <HLCD4_voidInit+0x56c>
	else if (__tmp > 65535)
    27ea:	6f 81       	ldd	r22, Y+7	; 0x07
    27ec:	78 85       	ldd	r23, Y+8	; 0x08
    27ee:	89 85       	ldd	r24, Y+9	; 0x09
    27f0:	9a 85       	ldd	r25, Y+10	; 0x0a
    27f2:	20 e0       	ldi	r18, 0x00	; 0
    27f4:	3f ef       	ldi	r19, 0xFF	; 255
    27f6:	4f e7       	ldi	r20, 0x7F	; 127
    27f8:	57 e4       	ldi	r21, 0x47	; 71
    27fa:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    27fe:	18 16       	cp	r1, r24
    2800:	4c f5       	brge	.+82     	; 0x2854 <HLCD4_voidInit+0x558>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2802:	6b 85       	ldd	r22, Y+11	; 0x0b
    2804:	7c 85       	ldd	r23, Y+12	; 0x0c
    2806:	8d 85       	ldd	r24, Y+13	; 0x0d
    2808:	9e 85       	ldd	r25, Y+14	; 0x0e
    280a:	20 e0       	ldi	r18, 0x00	; 0
    280c:	30 e0       	ldi	r19, 0x00	; 0
    280e:	40 e2       	ldi	r20, 0x20	; 32
    2810:	51 e4       	ldi	r21, 0x41	; 65
    2812:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2816:	dc 01       	movw	r26, r24
    2818:	cb 01       	movw	r24, r22
    281a:	bc 01       	movw	r22, r24
    281c:	cd 01       	movw	r24, r26
    281e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2822:	dc 01       	movw	r26, r24
    2824:	cb 01       	movw	r24, r22
    2826:	9e 83       	std	Y+6, r25	; 0x06
    2828:	8d 83       	std	Y+5, r24	; 0x05
    282a:	0f c0       	rjmp	.+30     	; 0x284a <HLCD4_voidInit+0x54e>
    282c:	88 ec       	ldi	r24, 0xC8	; 200
    282e:	90 e0       	ldi	r25, 0x00	; 0
    2830:	9c 83       	std	Y+4, r25	; 0x04
    2832:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2834:	8b 81       	ldd	r24, Y+3	; 0x03
    2836:	9c 81       	ldd	r25, Y+4	; 0x04
    2838:	01 97       	sbiw	r24, 0x01	; 1
    283a:	f1 f7       	brne	.-4      	; 0x2838 <HLCD4_voidInit+0x53c>
    283c:	9c 83       	std	Y+4, r25	; 0x04
    283e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2840:	8d 81       	ldd	r24, Y+5	; 0x05
    2842:	9e 81       	ldd	r25, Y+6	; 0x06
    2844:	01 97       	sbiw	r24, 0x01	; 1
    2846:	9e 83       	std	Y+6, r25	; 0x06
    2848:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    284a:	8d 81       	ldd	r24, Y+5	; 0x05
    284c:	9e 81       	ldd	r25, Y+6	; 0x06
    284e:	00 97       	sbiw	r24, 0x00	; 0
    2850:	69 f7       	brne	.-38     	; 0x282c <HLCD4_voidInit+0x530>
    2852:	14 c0       	rjmp	.+40     	; 0x287c <HLCD4_voidInit+0x580>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2854:	6f 81       	ldd	r22, Y+7	; 0x07
    2856:	78 85       	ldd	r23, Y+8	; 0x08
    2858:	89 85       	ldd	r24, Y+9	; 0x09
    285a:	9a 85       	ldd	r25, Y+10	; 0x0a
    285c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2860:	dc 01       	movw	r26, r24
    2862:	cb 01       	movw	r24, r22
    2864:	9e 83       	std	Y+6, r25	; 0x06
    2866:	8d 83       	std	Y+5, r24	; 0x05
    2868:	8d 81       	ldd	r24, Y+5	; 0x05
    286a:	9e 81       	ldd	r25, Y+6	; 0x06
    286c:	9a 83       	std	Y+2, r25	; 0x02
    286e:	89 83       	std	Y+1, r24	; 0x01
    2870:	89 81       	ldd	r24, Y+1	; 0x01
    2872:	9a 81       	ldd	r25, Y+2	; 0x02
    2874:	01 97       	sbiw	r24, 0x01	; 1
    2876:	f1 f7       	brne	.-4      	; 0x2874 <HLCD4_voidInit+0x578>
    2878:	9a 83       	std	Y+2, r25	; 0x02
    287a:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(2);
    HLCD4_voidSendCommand(ENTRY_MODE_SET1);
    287c:	80 e0       	ldi	r24, 0x00	; 0
    287e:	0e 94 51 0e 	call	0x1ca2	; 0x1ca2 <HLCD4_voidSendCommand>
    HLCD4_voidSendCommand(ENTRY_MODE_SET2);
    2882:	80 e6       	ldi	r24, 0x60	; 96
    2884:	0e 94 51 0e 	call	0x1ca2	; 0x1ca2 <HLCD4_voidSendCommand>
    global_u8Init=1;
    2888:	81 e0       	ldi	r24, 0x01	; 1
    288a:	80 93 a0 00 	sts	0x00A0, r24
} 
    288e:	c4 5b       	subi	r28, 0xB4	; 180
    2890:	df 4f       	sbci	r29, 0xFF	; 255
    2892:	0f b6       	in	r0, 0x3f	; 63
    2894:	f8 94       	cli
    2896:	de bf       	out	0x3e, r29	; 62
    2898:	0f be       	out	0x3f, r0	; 63
    289a:	cd bf       	out	0x3d, r28	; 61
    289c:	cf 91       	pop	r28
    289e:	df 91       	pop	r29
    28a0:	1f 91       	pop	r17
    28a2:	0f 91       	pop	r16
    28a4:	08 95       	ret

000028a6 <HLCD4_voidClearDisplay>:

void HLCD4_voidClearDisplay(void)
{
    28a6:	df 93       	push	r29
    28a8:	cf 93       	push	r28
    28aa:	cd b7       	in	r28, 0x3d	; 61
    28ac:	de b7       	in	r29, 0x3e	; 62
    28ae:	2e 97       	sbiw	r28, 0x0e	; 14
    28b0:	0f b6       	in	r0, 0x3f	; 63
    28b2:	f8 94       	cli
    28b4:	de bf       	out	0x3e, r29	; 62
    28b6:	0f be       	out	0x3f, r0	; 63
    28b8:	cd bf       	out	0x3d, r28	; 61
    HLCD4_voidSendCommand(DISPLAY_CLEAR);
    28ba:	81 e0       	ldi	r24, 0x01	; 1
    28bc:	0e 94 51 0e 	call	0x1ca2	; 0x1ca2 <HLCD4_voidSendCommand>
    28c0:	80 e0       	ldi	r24, 0x00	; 0
    28c2:	90 e0       	ldi	r25, 0x00	; 0
    28c4:	a0 e0       	ldi	r26, 0x00	; 0
    28c6:	b0 e4       	ldi	r27, 0x40	; 64
    28c8:	8b 87       	std	Y+11, r24	; 0x0b
    28ca:	9c 87       	std	Y+12, r25	; 0x0c
    28cc:	ad 87       	std	Y+13, r26	; 0x0d
    28ce:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    28d0:	6b 85       	ldd	r22, Y+11	; 0x0b
    28d2:	7c 85       	ldd	r23, Y+12	; 0x0c
    28d4:	8d 85       	ldd	r24, Y+13	; 0x0d
    28d6:	9e 85       	ldd	r25, Y+14	; 0x0e
    28d8:	20 e0       	ldi	r18, 0x00	; 0
    28da:	30 e0       	ldi	r19, 0x00	; 0
    28dc:	4a ef       	ldi	r20, 0xFA	; 250
    28de:	54 e4       	ldi	r21, 0x44	; 68
    28e0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28e4:	dc 01       	movw	r26, r24
    28e6:	cb 01       	movw	r24, r22
    28e8:	8f 83       	std	Y+7, r24	; 0x07
    28ea:	98 87       	std	Y+8, r25	; 0x08
    28ec:	a9 87       	std	Y+9, r26	; 0x09
    28ee:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    28f0:	6f 81       	ldd	r22, Y+7	; 0x07
    28f2:	78 85       	ldd	r23, Y+8	; 0x08
    28f4:	89 85       	ldd	r24, Y+9	; 0x09
    28f6:	9a 85       	ldd	r25, Y+10	; 0x0a
    28f8:	20 e0       	ldi	r18, 0x00	; 0
    28fa:	30 e0       	ldi	r19, 0x00	; 0
    28fc:	40 e8       	ldi	r20, 0x80	; 128
    28fe:	5f e3       	ldi	r21, 0x3F	; 63
    2900:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2904:	88 23       	and	r24, r24
    2906:	2c f4       	brge	.+10     	; 0x2912 <HLCD4_voidClearDisplay+0x6c>
		__ticks = 1;
    2908:	81 e0       	ldi	r24, 0x01	; 1
    290a:	90 e0       	ldi	r25, 0x00	; 0
    290c:	9e 83       	std	Y+6, r25	; 0x06
    290e:	8d 83       	std	Y+5, r24	; 0x05
    2910:	3f c0       	rjmp	.+126    	; 0x2990 <HLCD4_voidClearDisplay+0xea>
	else if (__tmp > 65535)
    2912:	6f 81       	ldd	r22, Y+7	; 0x07
    2914:	78 85       	ldd	r23, Y+8	; 0x08
    2916:	89 85       	ldd	r24, Y+9	; 0x09
    2918:	9a 85       	ldd	r25, Y+10	; 0x0a
    291a:	20 e0       	ldi	r18, 0x00	; 0
    291c:	3f ef       	ldi	r19, 0xFF	; 255
    291e:	4f e7       	ldi	r20, 0x7F	; 127
    2920:	57 e4       	ldi	r21, 0x47	; 71
    2922:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2926:	18 16       	cp	r1, r24
    2928:	4c f5       	brge	.+82     	; 0x297c <HLCD4_voidClearDisplay+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    292a:	6b 85       	ldd	r22, Y+11	; 0x0b
    292c:	7c 85       	ldd	r23, Y+12	; 0x0c
    292e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2930:	9e 85       	ldd	r25, Y+14	; 0x0e
    2932:	20 e0       	ldi	r18, 0x00	; 0
    2934:	30 e0       	ldi	r19, 0x00	; 0
    2936:	40 e2       	ldi	r20, 0x20	; 32
    2938:	51 e4       	ldi	r21, 0x41	; 65
    293a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    293e:	dc 01       	movw	r26, r24
    2940:	cb 01       	movw	r24, r22
    2942:	bc 01       	movw	r22, r24
    2944:	cd 01       	movw	r24, r26
    2946:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    294a:	dc 01       	movw	r26, r24
    294c:	cb 01       	movw	r24, r22
    294e:	9e 83       	std	Y+6, r25	; 0x06
    2950:	8d 83       	std	Y+5, r24	; 0x05
    2952:	0f c0       	rjmp	.+30     	; 0x2972 <HLCD4_voidClearDisplay+0xcc>
    2954:	88 ec       	ldi	r24, 0xC8	; 200
    2956:	90 e0       	ldi	r25, 0x00	; 0
    2958:	9c 83       	std	Y+4, r25	; 0x04
    295a:	8b 83       	std	Y+3, r24	; 0x03
    295c:	8b 81       	ldd	r24, Y+3	; 0x03
    295e:	9c 81       	ldd	r25, Y+4	; 0x04
    2960:	01 97       	sbiw	r24, 0x01	; 1
    2962:	f1 f7       	brne	.-4      	; 0x2960 <HLCD4_voidClearDisplay+0xba>
    2964:	9c 83       	std	Y+4, r25	; 0x04
    2966:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2968:	8d 81       	ldd	r24, Y+5	; 0x05
    296a:	9e 81       	ldd	r25, Y+6	; 0x06
    296c:	01 97       	sbiw	r24, 0x01	; 1
    296e:	9e 83       	std	Y+6, r25	; 0x06
    2970:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2972:	8d 81       	ldd	r24, Y+5	; 0x05
    2974:	9e 81       	ldd	r25, Y+6	; 0x06
    2976:	00 97       	sbiw	r24, 0x00	; 0
    2978:	69 f7       	brne	.-38     	; 0x2954 <HLCD4_voidClearDisplay+0xae>
    297a:	14 c0       	rjmp	.+40     	; 0x29a4 <HLCD4_voidClearDisplay+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    297c:	6f 81       	ldd	r22, Y+7	; 0x07
    297e:	78 85       	ldd	r23, Y+8	; 0x08
    2980:	89 85       	ldd	r24, Y+9	; 0x09
    2982:	9a 85       	ldd	r25, Y+10	; 0x0a
    2984:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2988:	dc 01       	movw	r26, r24
    298a:	cb 01       	movw	r24, r22
    298c:	9e 83       	std	Y+6, r25	; 0x06
    298e:	8d 83       	std	Y+5, r24	; 0x05
    2990:	8d 81       	ldd	r24, Y+5	; 0x05
    2992:	9e 81       	ldd	r25, Y+6	; 0x06
    2994:	9a 83       	std	Y+2, r25	; 0x02
    2996:	89 83       	std	Y+1, r24	; 0x01
    2998:	89 81       	ldd	r24, Y+1	; 0x01
    299a:	9a 81       	ldd	r25, Y+2	; 0x02
    299c:	01 97       	sbiw	r24, 0x01	; 1
    299e:	f1 f7       	brne	.-4      	; 0x299c <HLCD4_voidClearDisplay+0xf6>
    29a0:	9a 83       	std	Y+2, r25	; 0x02
    29a2:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(2);
}
    29a4:	2e 96       	adiw	r28, 0x0e	; 14
    29a6:	0f b6       	in	r0, 0x3f	; 63
    29a8:	f8 94       	cli
    29aa:	de bf       	out	0x3e, r29	; 62
    29ac:	0f be       	out	0x3f, r0	; 63
    29ae:	cd bf       	out	0x3d, r28	; 61
    29b0:	cf 91       	pop	r28
    29b2:	df 91       	pop	r29
    29b4:	08 95       	ret

000029b6 <HLCD4_voidSendString>:

void HLCD4_voidSendString(u8 * A_Pu8String)
{
    29b6:	df 93       	push	r29
    29b8:	cf 93       	push	r28
    29ba:	00 d0       	rcall	.+0      	; 0x29bc <HLCD4_voidSendString+0x6>
    29bc:	0f 92       	push	r0
    29be:	cd b7       	in	r28, 0x3d	; 61
    29c0:	de b7       	in	r29, 0x3e	; 62
    29c2:	9b 83       	std	Y+3, r25	; 0x03
    29c4:	8a 83       	std	Y+2, r24	; 0x02
    u8 local_u8Couter=0;
    29c6:	19 82       	std	Y+1, r1	; 0x01
    29c8:	0e c0       	rjmp	.+28     	; 0x29e6 <HLCD4_voidSendString+0x30>
    while (A_Pu8String[local_u8Couter]!='\0')
    {
        HLCD4_voidSendData(A_Pu8String[local_u8Couter]);
    29ca:	89 81       	ldd	r24, Y+1	; 0x01
    29cc:	28 2f       	mov	r18, r24
    29ce:	30 e0       	ldi	r19, 0x00	; 0
    29d0:	8a 81       	ldd	r24, Y+2	; 0x02
    29d2:	9b 81       	ldd	r25, Y+3	; 0x03
    29d4:	fc 01       	movw	r30, r24
    29d6:	e2 0f       	add	r30, r18
    29d8:	f3 1f       	adc	r31, r19
    29da:	80 81       	ld	r24, Z
    29dc:	0e 94 ea 0f 	call	0x1fd4	; 0x1fd4 <HLCD4_voidSendData>
        local_u8Couter++;
    29e0:	89 81       	ldd	r24, Y+1	; 0x01
    29e2:	8f 5f       	subi	r24, 0xFF	; 255
    29e4:	89 83       	std	Y+1, r24	; 0x01
}

void HLCD4_voidSendString(u8 * A_Pu8String)
{
    u8 local_u8Couter=0;
    while (A_Pu8String[local_u8Couter]!='\0')
    29e6:	89 81       	ldd	r24, Y+1	; 0x01
    29e8:	28 2f       	mov	r18, r24
    29ea:	30 e0       	ldi	r19, 0x00	; 0
    29ec:	8a 81       	ldd	r24, Y+2	; 0x02
    29ee:	9b 81       	ldd	r25, Y+3	; 0x03
    29f0:	fc 01       	movw	r30, r24
    29f2:	e2 0f       	add	r30, r18
    29f4:	f3 1f       	adc	r31, r19
    29f6:	80 81       	ld	r24, Z
    29f8:	88 23       	and	r24, r24
    29fa:	39 f7       	brne	.-50     	; 0x29ca <HLCD4_voidSendString+0x14>
    {
        HLCD4_voidSendData(A_Pu8String[local_u8Couter]);
        local_u8Couter++;
    }
    
}
    29fc:	0f 90       	pop	r0
    29fe:	0f 90       	pop	r0
    2a00:	0f 90       	pop	r0
    2a02:	cf 91       	pop	r28
    2a04:	df 91       	pop	r29
    2a06:	08 95       	ret

00002a08 <HLCD4_voidGoToPos>:

void HLCD4_voidGoToPos(u8 A_u8RowNum,u8 A_u8ColNum)
{
    2a08:	df 93       	push	r29
    2a0a:	cf 93       	push	r28
    2a0c:	cd b7       	in	r28, 0x3d	; 61
    2a0e:	de b7       	in	r29, 0x3e	; 62
    2a10:	63 97       	sbiw	r28, 0x13	; 19
    2a12:	0f b6       	in	r0, 0x3f	; 63
    2a14:	f8 94       	cli
    2a16:	de bf       	out	0x3e, r29	; 62
    2a18:	0f be       	out	0x3f, r0	; 63
    2a1a:	cd bf       	out	0x3d, r28	; 61
    2a1c:	88 8b       	std	Y+16, r24	; 0x10
    2a1e:	69 8b       	std	Y+17, r22	; 0x11
    // _delay_ms(1);

    //*******************************//
    //Second method
	u8 local_u8Address;
    switch(A_u8RowNum)
    2a20:	88 89       	ldd	r24, Y+16	; 0x10
    2a22:	28 2f       	mov	r18, r24
    2a24:	30 e0       	ldi	r19, 0x00	; 0
    2a26:	3b 8b       	std	Y+19, r19	; 0x13
    2a28:	2a 8b       	std	Y+18, r18	; 0x12
    2a2a:	8a 89       	ldd	r24, Y+18	; 0x12
    2a2c:	9b 89       	ldd	r25, Y+19	; 0x13
    2a2e:	81 30       	cpi	r24, 0x01	; 1
    2a30:	91 05       	cpc	r25, r1
    2a32:	31 f0       	breq	.+12     	; 0x2a40 <HLCD4_voidGoToPos+0x38>
    2a34:	2a 89       	ldd	r18, Y+18	; 0x12
    2a36:	3b 89       	ldd	r19, Y+19	; 0x13
    2a38:	22 30       	cpi	r18, 0x02	; 2
    2a3a:	31 05       	cpc	r19, r1
    2a3c:	59 f0       	breq	.+22     	; 0x2a54 <HLCD4_voidGoToPos+0x4c>
    2a3e:	13 c0       	rjmp	.+38     	; 0x2a66 <HLCD4_voidGoToPos+0x5e>
    {
        case LCD_ROW_ONE:
        local_u8Address=FIRST_ROW_ADDRESS + A_u8ColNum -1;
    2a40:	89 89       	ldd	r24, Y+17	; 0x11
    2a42:	81 50       	subi	r24, 0x01	; 1
    2a44:	8f 87       	std	Y+15, r24	; 0x0f
        SET_BIT(local_u8Address,PIN7);
    2a46:	8f 85       	ldd	r24, Y+15	; 0x0f
    2a48:	80 68       	ori	r24, 0x80	; 128
    2a4a:	8f 87       	std	Y+15, r24	; 0x0f
        HLCD4_voidSendCommand(local_u8Address);
    2a4c:	8f 85       	ldd	r24, Y+15	; 0x0f
    2a4e:	0e 94 51 0e 	call	0x1ca2	; 0x1ca2 <HLCD4_voidSendCommand>
    2a52:	09 c0       	rjmp	.+18     	; 0x2a66 <HLCD4_voidGoToPos+0x5e>
        break;

        case LCD_ROW_TWO:
        local_u8Address=SECOND_ROW_ADDRESS + A_u8ColNum;
    2a54:	89 89       	ldd	r24, Y+17	; 0x11
    2a56:	81 5c       	subi	r24, 0xC1	; 193
    2a58:	8f 87       	std	Y+15, r24	; 0x0f
        SET_BIT(local_u8Address,PIN7);
    2a5a:	8f 85       	ldd	r24, Y+15	; 0x0f
    2a5c:	80 68       	ori	r24, 0x80	; 128
    2a5e:	8f 87       	std	Y+15, r24	; 0x0f
        HLCD4_voidSendCommand(local_u8Address);
    2a60:	8f 85       	ldd	r24, Y+15	; 0x0f
    2a62:	0e 94 51 0e 	call	0x1ca2	; 0x1ca2 <HLCD4_voidSendCommand>
    2a66:	80 e0       	ldi	r24, 0x00	; 0
    2a68:	90 e0       	ldi	r25, 0x00	; 0
    2a6a:	a0 e8       	ldi	r26, 0x80	; 128
    2a6c:	bf e3       	ldi	r27, 0x3F	; 63
    2a6e:	8b 87       	std	Y+11, r24	; 0x0b
    2a70:	9c 87       	std	Y+12, r25	; 0x0c
    2a72:	ad 87       	std	Y+13, r26	; 0x0d
    2a74:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a76:	6b 85       	ldd	r22, Y+11	; 0x0b
    2a78:	7c 85       	ldd	r23, Y+12	; 0x0c
    2a7a:	8d 85       	ldd	r24, Y+13	; 0x0d
    2a7c:	9e 85       	ldd	r25, Y+14	; 0x0e
    2a7e:	20 e0       	ldi	r18, 0x00	; 0
    2a80:	30 e0       	ldi	r19, 0x00	; 0
    2a82:	4a ef       	ldi	r20, 0xFA	; 250
    2a84:	54 e4       	ldi	r21, 0x44	; 68
    2a86:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a8a:	dc 01       	movw	r26, r24
    2a8c:	cb 01       	movw	r24, r22
    2a8e:	8f 83       	std	Y+7, r24	; 0x07
    2a90:	98 87       	std	Y+8, r25	; 0x08
    2a92:	a9 87       	std	Y+9, r26	; 0x09
    2a94:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2a96:	6f 81       	ldd	r22, Y+7	; 0x07
    2a98:	78 85       	ldd	r23, Y+8	; 0x08
    2a9a:	89 85       	ldd	r24, Y+9	; 0x09
    2a9c:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a9e:	20 e0       	ldi	r18, 0x00	; 0
    2aa0:	30 e0       	ldi	r19, 0x00	; 0
    2aa2:	40 e8       	ldi	r20, 0x80	; 128
    2aa4:	5f e3       	ldi	r21, 0x3F	; 63
    2aa6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2aaa:	88 23       	and	r24, r24
    2aac:	2c f4       	brge	.+10     	; 0x2ab8 <HLCD4_voidGoToPos+0xb0>
		__ticks = 1;
    2aae:	81 e0       	ldi	r24, 0x01	; 1
    2ab0:	90 e0       	ldi	r25, 0x00	; 0
    2ab2:	9e 83       	std	Y+6, r25	; 0x06
    2ab4:	8d 83       	std	Y+5, r24	; 0x05
    2ab6:	3f c0       	rjmp	.+126    	; 0x2b36 <HLCD4_voidGoToPos+0x12e>
	else if (__tmp > 65535)
    2ab8:	6f 81       	ldd	r22, Y+7	; 0x07
    2aba:	78 85       	ldd	r23, Y+8	; 0x08
    2abc:	89 85       	ldd	r24, Y+9	; 0x09
    2abe:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ac0:	20 e0       	ldi	r18, 0x00	; 0
    2ac2:	3f ef       	ldi	r19, 0xFF	; 255
    2ac4:	4f e7       	ldi	r20, 0x7F	; 127
    2ac6:	57 e4       	ldi	r21, 0x47	; 71
    2ac8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2acc:	18 16       	cp	r1, r24
    2ace:	4c f5       	brge	.+82     	; 0x2b22 <HLCD4_voidGoToPos+0x11a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ad0:	6b 85       	ldd	r22, Y+11	; 0x0b
    2ad2:	7c 85       	ldd	r23, Y+12	; 0x0c
    2ad4:	8d 85       	ldd	r24, Y+13	; 0x0d
    2ad6:	9e 85       	ldd	r25, Y+14	; 0x0e
    2ad8:	20 e0       	ldi	r18, 0x00	; 0
    2ada:	30 e0       	ldi	r19, 0x00	; 0
    2adc:	40 e2       	ldi	r20, 0x20	; 32
    2ade:	51 e4       	ldi	r21, 0x41	; 65
    2ae0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ae4:	dc 01       	movw	r26, r24
    2ae6:	cb 01       	movw	r24, r22
    2ae8:	bc 01       	movw	r22, r24
    2aea:	cd 01       	movw	r24, r26
    2aec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2af0:	dc 01       	movw	r26, r24
    2af2:	cb 01       	movw	r24, r22
    2af4:	9e 83       	std	Y+6, r25	; 0x06
    2af6:	8d 83       	std	Y+5, r24	; 0x05
    2af8:	0f c0       	rjmp	.+30     	; 0x2b18 <HLCD4_voidGoToPos+0x110>
    2afa:	88 ec       	ldi	r24, 0xC8	; 200
    2afc:	90 e0       	ldi	r25, 0x00	; 0
    2afe:	9c 83       	std	Y+4, r25	; 0x04
    2b00:	8b 83       	std	Y+3, r24	; 0x03
    2b02:	8b 81       	ldd	r24, Y+3	; 0x03
    2b04:	9c 81       	ldd	r25, Y+4	; 0x04
    2b06:	01 97       	sbiw	r24, 0x01	; 1
    2b08:	f1 f7       	brne	.-4      	; 0x2b06 <HLCD4_voidGoToPos+0xfe>
    2b0a:	9c 83       	std	Y+4, r25	; 0x04
    2b0c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b0e:	8d 81       	ldd	r24, Y+5	; 0x05
    2b10:	9e 81       	ldd	r25, Y+6	; 0x06
    2b12:	01 97       	sbiw	r24, 0x01	; 1
    2b14:	9e 83       	std	Y+6, r25	; 0x06
    2b16:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b18:	8d 81       	ldd	r24, Y+5	; 0x05
    2b1a:	9e 81       	ldd	r25, Y+6	; 0x06
    2b1c:	00 97       	sbiw	r24, 0x00	; 0
    2b1e:	69 f7       	brne	.-38     	; 0x2afa <HLCD4_voidGoToPos+0xf2>
    2b20:	14 c0       	rjmp	.+40     	; 0x2b4a <HLCD4_voidGoToPos+0x142>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b22:	6f 81       	ldd	r22, Y+7	; 0x07
    2b24:	78 85       	ldd	r23, Y+8	; 0x08
    2b26:	89 85       	ldd	r24, Y+9	; 0x09
    2b28:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b2a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b2e:	dc 01       	movw	r26, r24
    2b30:	cb 01       	movw	r24, r22
    2b32:	9e 83       	std	Y+6, r25	; 0x06
    2b34:	8d 83       	std	Y+5, r24	; 0x05
    2b36:	8d 81       	ldd	r24, Y+5	; 0x05
    2b38:	9e 81       	ldd	r25, Y+6	; 0x06
    2b3a:	9a 83       	std	Y+2, r25	; 0x02
    2b3c:	89 83       	std	Y+1, r24	; 0x01
    2b3e:	89 81       	ldd	r24, Y+1	; 0x01
    2b40:	9a 81       	ldd	r25, Y+2	; 0x02
    2b42:	01 97       	sbiw	r24, 0x01	; 1
    2b44:	f1 f7       	brne	.-4      	; 0x2b42 <HLCD4_voidGoToPos+0x13a>
    2b46:	9a 83       	std	Y+2, r25	; 0x02
    2b48:	89 83       	std	Y+1, r24	; 0x01
        break;

    }
    _delay_ms(1);

}
    2b4a:	63 96       	adiw	r28, 0x13	; 19
    2b4c:	0f b6       	in	r0, 0x3f	; 63
    2b4e:	f8 94       	cli
    2b50:	de bf       	out	0x3e, r29	; 62
    2b52:	0f be       	out	0x3f, r0	; 63
    2b54:	cd bf       	out	0x3d, r28	; 61
    2b56:	cf 91       	pop	r28
    2b58:	df 91       	pop	r29
    2b5a:	08 95       	ret

00002b5c <HLCD4_voidDisplayNumber>:

void HLCD4_voidDisplayNumber(u32 A_u32Number)
{
    2b5c:	df 93       	push	r29
    2b5e:	cf 93       	push	r28
    2b60:	00 d0       	rcall	.+0      	; 0x2b62 <HLCD4_voidDisplayNumber+0x6>
    2b62:	00 d0       	rcall	.+0      	; 0x2b64 <HLCD4_voidDisplayNumber+0x8>
    2b64:	cd b7       	in	r28, 0x3d	; 61
    2b66:	de b7       	in	r29, 0x3e	; 62
    2b68:	9c 83       	std	Y+4, r25	; 0x04
    2b6a:	8b 83       	std	Y+3, r24	; 0x03
    // u8 local_u8NumToStr[100];
    // itoa(A_u32Number,local_u8NumToStr,10);
    // HLCD4_voidSendString(local_u8NumToStr);
    //****************************************************//
    //third method: it will deal with zero unlike the first method so it's not problem here
    u32 local_u32Number=1;
    2b6c:	81 e0       	ldi	r24, 0x01	; 1
    2b6e:	90 e0       	ldi	r25, 0x00	; 0
    2b70:	9a 83       	std	Y+2, r25	; 0x02
    2b72:	89 83       	std	Y+1, r24	; 0x01
    if(A_u32Number==0)
    2b74:	8b 81       	ldd	r24, Y+3	; 0x03
    2b76:	9c 81       	ldd	r25, Y+4	; 0x04
    2b78:	00 97       	sbiw	r24, 0x00	; 0
    2b7a:	31 f5       	brne	.+76     	; 0x2bc8 <HLCD4_voidDisplayNumber+0x6c>
    {
        HLCD4_voidSendData('0');
    2b7c:	80 e3       	ldi	r24, 0x30	; 48
    2b7e:	0e 94 ea 0f 	call	0x1fd4	; 0x1fd4 <HLCD4_voidSendData>
    2b82:	22 c0       	rjmp	.+68     	; 0x2bc8 <HLCD4_voidDisplayNumber+0x6c>
    }   
    while(A_u32Number !=0)
    {
            local_u32Number=((local_u32Number * 10)+(A_u32Number%10));
    2b84:	89 81       	ldd	r24, Y+1	; 0x01
    2b86:	9a 81       	ldd	r25, Y+2	; 0x02
    2b88:	9c 01       	movw	r18, r24
    2b8a:	22 0f       	add	r18, r18
    2b8c:	33 1f       	adc	r19, r19
    2b8e:	c9 01       	movw	r24, r18
    2b90:	88 0f       	add	r24, r24
    2b92:	99 1f       	adc	r25, r25
    2b94:	88 0f       	add	r24, r24
    2b96:	99 1f       	adc	r25, r25
    2b98:	f9 01       	movw	r30, r18
    2b9a:	e8 0f       	add	r30, r24
    2b9c:	f9 1f       	adc	r31, r25
    2b9e:	8b 81       	ldd	r24, Y+3	; 0x03
    2ba0:	9c 81       	ldd	r25, Y+4	; 0x04
    2ba2:	2a e0       	ldi	r18, 0x0A	; 10
    2ba4:	30 e0       	ldi	r19, 0x00	; 0
    2ba6:	b9 01       	movw	r22, r18
    2ba8:	0e 94 59 26 	call	0x4cb2	; 0x4cb2 <__udivmodhi4>
    2bac:	8e 0f       	add	r24, r30
    2bae:	9f 1f       	adc	r25, r31
    2bb0:	9a 83       	std	Y+2, r25	; 0x02
    2bb2:	89 83       	std	Y+1, r24	; 0x01
            A_u32Number=A_u32Number/10;
    2bb4:	8b 81       	ldd	r24, Y+3	; 0x03
    2bb6:	9c 81       	ldd	r25, Y+4	; 0x04
    2bb8:	2a e0       	ldi	r18, 0x0A	; 10
    2bba:	30 e0       	ldi	r19, 0x00	; 0
    2bbc:	b9 01       	movw	r22, r18
    2bbe:	0e 94 59 26 	call	0x4cb2	; 0x4cb2 <__udivmodhi4>
    2bc2:	cb 01       	movw	r24, r22
    2bc4:	9c 83       	std	Y+4, r25	; 0x04
    2bc6:	8b 83       	std	Y+3, r24	; 0x03
    u32 local_u32Number=1;
    if(A_u32Number==0)
    {
        HLCD4_voidSendData('0');
    }   
    while(A_u32Number !=0)
    2bc8:	8b 81       	ldd	r24, Y+3	; 0x03
    2bca:	9c 81       	ldd	r25, Y+4	; 0x04
    2bcc:	00 97       	sbiw	r24, 0x00	; 0
    2bce:	d1 f6       	brne	.-76     	; 0x2b84 <HLCD4_voidDisplayNumber+0x28>
    2bd0:	14 c0       	rjmp	.+40     	; 0x2bfa <HLCD4_voidDisplayNumber+0x9e>
            A_u32Number=A_u32Number/10;

    }
    while (local_u32Number!=1)
    {
        HLCD4_voidSendData((local_u32Number%10)+48);
    2bd2:	89 81       	ldd	r24, Y+1	; 0x01
    2bd4:	9a 81       	ldd	r25, Y+2	; 0x02
    2bd6:	2a e0       	ldi	r18, 0x0A	; 10
    2bd8:	30 e0       	ldi	r19, 0x00	; 0
    2bda:	b9 01       	movw	r22, r18
    2bdc:	0e 94 59 26 	call	0x4cb2	; 0x4cb2 <__udivmodhi4>
    2be0:	80 5d       	subi	r24, 0xD0	; 208
    2be2:	0e 94 ea 0f 	call	0x1fd4	; 0x1fd4 <HLCD4_voidSendData>
        local_u32Number=local_u32Number/10;
    2be6:	89 81       	ldd	r24, Y+1	; 0x01
    2be8:	9a 81       	ldd	r25, Y+2	; 0x02
    2bea:	2a e0       	ldi	r18, 0x0A	; 10
    2bec:	30 e0       	ldi	r19, 0x00	; 0
    2bee:	b9 01       	movw	r22, r18
    2bf0:	0e 94 59 26 	call	0x4cb2	; 0x4cb2 <__udivmodhi4>
    2bf4:	cb 01       	movw	r24, r22
    2bf6:	9a 83       	std	Y+2, r25	; 0x02
    2bf8:	89 83       	std	Y+1, r24	; 0x01
    {
            local_u32Number=((local_u32Number * 10)+(A_u32Number%10));
            A_u32Number=A_u32Number/10;

    }
    while (local_u32Number!=1)
    2bfa:	89 81       	ldd	r24, Y+1	; 0x01
    2bfc:	9a 81       	ldd	r25, Y+2	; 0x02
    2bfe:	81 30       	cpi	r24, 0x01	; 1
    2c00:	91 05       	cpc	r25, r1
    2c02:	39 f7       	brne	.-50     	; 0x2bd2 <HLCD4_voidDisplayNumber+0x76>
    {
        HLCD4_voidSendData((local_u32Number%10)+48);
        local_u32Number=local_u32Number/10;
    }
}
    2c04:	0f 90       	pop	r0
    2c06:	0f 90       	pop	r0
    2c08:	0f 90       	pop	r0
    2c0a:	0f 90       	pop	r0
    2c0c:	cf 91       	pop	r28
    2c0e:	df 91       	pop	r29
    2c10:	08 95       	ret

00002c12 <HLCD4_voidStoreCustomChar>:

void HLCD4_voidStoreCustomChar(u8 * A_u8Pattern,u8 A_u8CGRAMIndex)
{
    2c12:	df 93       	push	r29
    2c14:	cf 93       	push	r28
    2c16:	cd b7       	in	r28, 0x3d	; 61
    2c18:	de b7       	in	r29, 0x3e	; 62
    2c1a:	ab 97       	sbiw	r28, 0x2b	; 43
    2c1c:	0f b6       	in	r0, 0x3f	; 63
    2c1e:	f8 94       	cli
    2c20:	de bf       	out	0x3e, r29	; 62
    2c22:	0f be       	out	0x3f, r0	; 63
    2c24:	cd bf       	out	0x3d, r28	; 61
    2c26:	9a a7       	std	Y+42, r25	; 0x2a
    2c28:	89 a7       	std	Y+41, r24	; 0x29
    2c2a:	6b a7       	std	Y+43, r22	; 0x2b
    u8 local_u8Address;
    if(A_u8CGRAMIndex<8)
    2c2c:	8b a5       	ldd	r24, Y+43	; 0x2b
    2c2e:	88 30       	cpi	r24, 0x08	; 8
    2c30:	08 f0       	brcs	.+2      	; 0x2c34 <HLCD4_voidStoreCustomChar+0x22>
    2c32:	e5 c0       	rjmp	.+458    	; 0x2dfe <HLCD4_voidStoreCustomChar+0x1ec>
    {
        A_u8CGRAMIndex=A_u8CGRAMIndex*8;
    2c34:	8b a5       	ldd	r24, Y+43	; 0x2b
    2c36:	88 2f       	mov	r24, r24
    2c38:	90 e0       	ldi	r25, 0x00	; 0
    2c3a:	88 0f       	add	r24, r24
    2c3c:	99 1f       	adc	r25, r25
    2c3e:	88 0f       	add	r24, r24
    2c40:	99 1f       	adc	r25, r25
    2c42:	88 0f       	add	r24, r24
    2c44:	99 1f       	adc	r25, r25
    2c46:	8b a7       	std	Y+43, r24	; 0x2b
        SET_BIT(A_u8CGRAMIndex,PIN6);
    2c48:	8b a5       	ldd	r24, Y+43	; 0x2b
    2c4a:	80 64       	ori	r24, 0x40	; 64
    2c4c:	8b a7       	std	Y+43, r24	; 0x2b
        CLR_BIT(A_u8CGRAMIndex,PIN7);
    2c4e:	8b a5       	ldd	r24, Y+43	; 0x2b
    2c50:	8f 77       	andi	r24, 0x7F	; 127
    2c52:	8b a7       	std	Y+43, r24	; 0x2b
        HLCD4_voidSendCommand(A_u8CGRAMIndex);
    2c54:	8b a5       	ldd	r24, Y+43	; 0x2b
    2c56:	0e 94 51 0e 	call	0x1ca2	; 0x1ca2 <HLCD4_voidSendCommand>
        for(u8 i=0;i<8;i++)
    2c5a:	1f a2       	std	Y+39, r1	; 0x27
    2c5c:	cc c0       	rjmp	.+408    	; 0x2df6 <HLCD4_voidStoreCustomChar+0x1e4>
        {
            HLCD4_voidSendData(A_u8Pattern[i]);
    2c5e:	8f a1       	ldd	r24, Y+39	; 0x27
    2c60:	28 2f       	mov	r18, r24
    2c62:	30 e0       	ldi	r19, 0x00	; 0
    2c64:	89 a5       	ldd	r24, Y+41	; 0x29
    2c66:	9a a5       	ldd	r25, Y+42	; 0x2a
    2c68:	fc 01       	movw	r30, r24
    2c6a:	e2 0f       	add	r30, r18
    2c6c:	f3 1f       	adc	r31, r19
    2c6e:	80 81       	ld	r24, Z
    2c70:	0e 94 ea 0f 	call	0x1fd4	; 0x1fd4 <HLCD4_voidSendData>
    2c74:	80 e0       	ldi	r24, 0x00	; 0
    2c76:	90 e0       	ldi	r25, 0x00	; 0
    2c78:	a0 e7       	ldi	r26, 0x70	; 112
    2c7a:	b2 e4       	ldi	r27, 0x42	; 66
    2c7c:	8b a3       	std	Y+35, r24	; 0x23
    2c7e:	9c a3       	std	Y+36, r25	; 0x24
    2c80:	ad a3       	std	Y+37, r26	; 0x25
    2c82:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2c84:	6b a1       	ldd	r22, Y+35	; 0x23
    2c86:	7c a1       	ldd	r23, Y+36	; 0x24
    2c88:	8d a1       	ldd	r24, Y+37	; 0x25
    2c8a:	9e a1       	ldd	r25, Y+38	; 0x26
    2c8c:	2b ea       	ldi	r18, 0xAB	; 171
    2c8e:	3a ea       	ldi	r19, 0xAA	; 170
    2c90:	4a e2       	ldi	r20, 0x2A	; 42
    2c92:	50 e4       	ldi	r21, 0x40	; 64
    2c94:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c98:	dc 01       	movw	r26, r24
    2c9a:	cb 01       	movw	r24, r22
    2c9c:	8f 8f       	std	Y+31, r24	; 0x1f
    2c9e:	98 a3       	std	Y+32, r25	; 0x20
    2ca0:	a9 a3       	std	Y+33, r26	; 0x21
    2ca2:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    2ca4:	6f 8d       	ldd	r22, Y+31	; 0x1f
    2ca6:	78 a1       	ldd	r23, Y+32	; 0x20
    2ca8:	89 a1       	ldd	r24, Y+33	; 0x21
    2caa:	9a a1       	ldd	r25, Y+34	; 0x22
    2cac:	20 e0       	ldi	r18, 0x00	; 0
    2cae:	30 e0       	ldi	r19, 0x00	; 0
    2cb0:	40 e8       	ldi	r20, 0x80	; 128
    2cb2:	5f e3       	ldi	r21, 0x3F	; 63
    2cb4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2cb8:	88 23       	and	r24, r24
    2cba:	1c f4       	brge	.+6      	; 0x2cc2 <HLCD4_voidStoreCustomChar+0xb0>
		__ticks = 1;
    2cbc:	81 e0       	ldi	r24, 0x01	; 1
    2cbe:	8e 8f       	std	Y+30, r24	; 0x1e
    2cc0:	91 c0       	rjmp	.+290    	; 0x2de4 <HLCD4_voidStoreCustomChar+0x1d2>
	else if (__tmp > 255)
    2cc2:	6f 8d       	ldd	r22, Y+31	; 0x1f
    2cc4:	78 a1       	ldd	r23, Y+32	; 0x20
    2cc6:	89 a1       	ldd	r24, Y+33	; 0x21
    2cc8:	9a a1       	ldd	r25, Y+34	; 0x22
    2cca:	20 e0       	ldi	r18, 0x00	; 0
    2ccc:	30 e0       	ldi	r19, 0x00	; 0
    2cce:	4f e7       	ldi	r20, 0x7F	; 127
    2cd0:	53 e4       	ldi	r21, 0x43	; 67
    2cd2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2cd6:	18 16       	cp	r1, r24
    2cd8:	0c f0       	brlt	.+2      	; 0x2cdc <HLCD4_voidStoreCustomChar+0xca>
    2cda:	7b c0       	rjmp	.+246    	; 0x2dd2 <HLCD4_voidStoreCustomChar+0x1c0>
	{
		_delay_ms(__us / 1000.0);
    2cdc:	6b a1       	ldd	r22, Y+35	; 0x23
    2cde:	7c a1       	ldd	r23, Y+36	; 0x24
    2ce0:	8d a1       	ldd	r24, Y+37	; 0x25
    2ce2:	9e a1       	ldd	r25, Y+38	; 0x26
    2ce4:	20 e0       	ldi	r18, 0x00	; 0
    2ce6:	30 e0       	ldi	r19, 0x00	; 0
    2ce8:	4a e7       	ldi	r20, 0x7A	; 122
    2cea:	54 e4       	ldi	r21, 0x44	; 68
    2cec:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2cf0:	dc 01       	movw	r26, r24
    2cf2:	cb 01       	movw	r24, r22
    2cf4:	8a 8f       	std	Y+26, r24	; 0x1a
    2cf6:	9b 8f       	std	Y+27, r25	; 0x1b
    2cf8:	ac 8f       	std	Y+28, r26	; 0x1c
    2cfa:	bd 8f       	std	Y+29, r27	; 0x1d
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2cfc:	6a 8d       	ldd	r22, Y+26	; 0x1a
    2cfe:	7b 8d       	ldd	r23, Y+27	; 0x1b
    2d00:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2d02:	9d 8d       	ldd	r25, Y+29	; 0x1d
    2d04:	20 e0       	ldi	r18, 0x00	; 0
    2d06:	30 e0       	ldi	r19, 0x00	; 0
    2d08:	4a ef       	ldi	r20, 0xFA	; 250
    2d0a:	54 e4       	ldi	r21, 0x44	; 68
    2d0c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d10:	dc 01       	movw	r26, r24
    2d12:	cb 01       	movw	r24, r22
    2d14:	8e 8b       	std	Y+22, r24	; 0x16
    2d16:	9f 8b       	std	Y+23, r25	; 0x17
    2d18:	a8 8f       	std	Y+24, r26	; 0x18
    2d1a:	b9 8f       	std	Y+25, r27	; 0x19
	if (__tmp < 1.0)
    2d1c:	6e 89       	ldd	r22, Y+22	; 0x16
    2d1e:	7f 89       	ldd	r23, Y+23	; 0x17
    2d20:	88 8d       	ldd	r24, Y+24	; 0x18
    2d22:	99 8d       	ldd	r25, Y+25	; 0x19
    2d24:	20 e0       	ldi	r18, 0x00	; 0
    2d26:	30 e0       	ldi	r19, 0x00	; 0
    2d28:	40 e8       	ldi	r20, 0x80	; 128
    2d2a:	5f e3       	ldi	r21, 0x3F	; 63
    2d2c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2d30:	88 23       	and	r24, r24
    2d32:	2c f4       	brge	.+10     	; 0x2d3e <HLCD4_voidStoreCustomChar+0x12c>
		__ticks = 1;
    2d34:	81 e0       	ldi	r24, 0x01	; 1
    2d36:	90 e0       	ldi	r25, 0x00	; 0
    2d38:	9d 8b       	std	Y+21, r25	; 0x15
    2d3a:	8c 8b       	std	Y+20, r24	; 0x14
    2d3c:	3f c0       	rjmp	.+126    	; 0x2dbc <HLCD4_voidStoreCustomChar+0x1aa>
	else if (__tmp > 65535)
    2d3e:	6e 89       	ldd	r22, Y+22	; 0x16
    2d40:	7f 89       	ldd	r23, Y+23	; 0x17
    2d42:	88 8d       	ldd	r24, Y+24	; 0x18
    2d44:	99 8d       	ldd	r25, Y+25	; 0x19
    2d46:	20 e0       	ldi	r18, 0x00	; 0
    2d48:	3f ef       	ldi	r19, 0xFF	; 255
    2d4a:	4f e7       	ldi	r20, 0x7F	; 127
    2d4c:	57 e4       	ldi	r21, 0x47	; 71
    2d4e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2d52:	18 16       	cp	r1, r24
    2d54:	4c f5       	brge	.+82     	; 0x2da8 <HLCD4_voidStoreCustomChar+0x196>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d56:	6a 8d       	ldd	r22, Y+26	; 0x1a
    2d58:	7b 8d       	ldd	r23, Y+27	; 0x1b
    2d5a:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2d5c:	9d 8d       	ldd	r25, Y+29	; 0x1d
    2d5e:	20 e0       	ldi	r18, 0x00	; 0
    2d60:	30 e0       	ldi	r19, 0x00	; 0
    2d62:	40 e2       	ldi	r20, 0x20	; 32
    2d64:	51 e4       	ldi	r21, 0x41	; 65
    2d66:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d6a:	dc 01       	movw	r26, r24
    2d6c:	cb 01       	movw	r24, r22
    2d6e:	bc 01       	movw	r22, r24
    2d70:	cd 01       	movw	r24, r26
    2d72:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d76:	dc 01       	movw	r26, r24
    2d78:	cb 01       	movw	r24, r22
    2d7a:	9d 8b       	std	Y+21, r25	; 0x15
    2d7c:	8c 8b       	std	Y+20, r24	; 0x14
    2d7e:	0f c0       	rjmp	.+30     	; 0x2d9e <HLCD4_voidStoreCustomChar+0x18c>
    2d80:	88 ec       	ldi	r24, 0xC8	; 200
    2d82:	90 e0       	ldi	r25, 0x00	; 0
    2d84:	9b 8b       	std	Y+19, r25	; 0x13
    2d86:	8a 8b       	std	Y+18, r24	; 0x12
    2d88:	8a 89       	ldd	r24, Y+18	; 0x12
    2d8a:	9b 89       	ldd	r25, Y+19	; 0x13
    2d8c:	01 97       	sbiw	r24, 0x01	; 1
    2d8e:	f1 f7       	brne	.-4      	; 0x2d8c <HLCD4_voidStoreCustomChar+0x17a>
    2d90:	9b 8b       	std	Y+19, r25	; 0x13
    2d92:	8a 8b       	std	Y+18, r24	; 0x12
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d94:	8c 89       	ldd	r24, Y+20	; 0x14
    2d96:	9d 89       	ldd	r25, Y+21	; 0x15
    2d98:	01 97       	sbiw	r24, 0x01	; 1
    2d9a:	9d 8b       	std	Y+21, r25	; 0x15
    2d9c:	8c 8b       	std	Y+20, r24	; 0x14
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d9e:	8c 89       	ldd	r24, Y+20	; 0x14
    2da0:	9d 89       	ldd	r25, Y+21	; 0x15
    2da2:	00 97       	sbiw	r24, 0x00	; 0
    2da4:	69 f7       	brne	.-38     	; 0x2d80 <HLCD4_voidStoreCustomChar+0x16e>
    2da6:	24 c0       	rjmp	.+72     	; 0x2df0 <HLCD4_voidStoreCustomChar+0x1de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2da8:	6e 89       	ldd	r22, Y+22	; 0x16
    2daa:	7f 89       	ldd	r23, Y+23	; 0x17
    2dac:	88 8d       	ldd	r24, Y+24	; 0x18
    2dae:	99 8d       	ldd	r25, Y+25	; 0x19
    2db0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2db4:	dc 01       	movw	r26, r24
    2db6:	cb 01       	movw	r24, r22
    2db8:	9d 8b       	std	Y+21, r25	; 0x15
    2dba:	8c 8b       	std	Y+20, r24	; 0x14
    2dbc:	8c 89       	ldd	r24, Y+20	; 0x14
    2dbe:	9d 89       	ldd	r25, Y+21	; 0x15
    2dc0:	99 8b       	std	Y+17, r25	; 0x11
    2dc2:	88 8b       	std	Y+16, r24	; 0x10
    2dc4:	88 89       	ldd	r24, Y+16	; 0x10
    2dc6:	99 89       	ldd	r25, Y+17	; 0x11
    2dc8:	01 97       	sbiw	r24, 0x01	; 1
    2dca:	f1 f7       	brne	.-4      	; 0x2dc8 <HLCD4_voidStoreCustomChar+0x1b6>
    2dcc:	99 8b       	std	Y+17, r25	; 0x11
    2dce:	88 8b       	std	Y+16, r24	; 0x10
    2dd0:	0f c0       	rjmp	.+30     	; 0x2df0 <HLCD4_voidStoreCustomChar+0x1de>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2dd2:	6f 8d       	ldd	r22, Y+31	; 0x1f
    2dd4:	78 a1       	ldd	r23, Y+32	; 0x20
    2dd6:	89 a1       	ldd	r24, Y+33	; 0x21
    2dd8:	9a a1       	ldd	r25, Y+34	; 0x22
    2dda:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2dde:	dc 01       	movw	r26, r24
    2de0:	cb 01       	movw	r24, r22
    2de2:	8e 8f       	std	Y+30, r24	; 0x1e
    2de4:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2de6:	8f 87       	std	Y+15, r24	; 0x0f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2de8:	8f 85       	ldd	r24, Y+15	; 0x0f
    2dea:	8a 95       	dec	r24
    2dec:	f1 f7       	brne	.-4      	; 0x2dea <HLCD4_voidStoreCustomChar+0x1d8>
    2dee:	8f 87       	std	Y+15, r24	; 0x0f
    {
        A_u8CGRAMIndex=A_u8CGRAMIndex*8;
        SET_BIT(A_u8CGRAMIndex,PIN6);
        CLR_BIT(A_u8CGRAMIndex,PIN7);
        HLCD4_voidSendCommand(A_u8CGRAMIndex);
        for(u8 i=0;i<8;i++)
    2df0:	8f a1       	ldd	r24, Y+39	; 0x27
    2df2:	8f 5f       	subi	r24, 0xFF	; 255
    2df4:	8f a3       	std	Y+39, r24	; 0x27
    2df6:	8f a1       	ldd	r24, Y+39	; 0x27
    2df8:	88 30       	cpi	r24, 0x08	; 8
    2dfa:	08 f4       	brcc	.+2      	; 0x2dfe <HLCD4_voidStoreCustomChar+0x1ec>
    2dfc:	30 cf       	rjmp	.-416    	; 0x2c5e <HLCD4_voidStoreCustomChar+0x4c>
        {
            HLCD4_voidSendData(A_u8Pattern[i]);
            _delay_us(60);
        }
    }
    HLCD4_voidSendCommand(RETURN_HOME);
    2dfe:	82 e0       	ldi	r24, 0x02	; 2
    2e00:	0e 94 51 0e 	call	0x1ca2	; 0x1ca2 <HLCD4_voidSendCommand>
    2e04:	80 e0       	ldi	r24, 0x00	; 0
    2e06:	90 e0       	ldi	r25, 0x00	; 0
    2e08:	a0 e0       	ldi	r26, 0x00	; 0
    2e0a:	b0 e4       	ldi	r27, 0x40	; 64
    2e0c:	8b 87       	std	Y+11, r24	; 0x0b
    2e0e:	9c 87       	std	Y+12, r25	; 0x0c
    2e10:	ad 87       	std	Y+13, r26	; 0x0d
    2e12:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2e14:	6b 85       	ldd	r22, Y+11	; 0x0b
    2e16:	7c 85       	ldd	r23, Y+12	; 0x0c
    2e18:	8d 85       	ldd	r24, Y+13	; 0x0d
    2e1a:	9e 85       	ldd	r25, Y+14	; 0x0e
    2e1c:	20 e0       	ldi	r18, 0x00	; 0
    2e1e:	30 e0       	ldi	r19, 0x00	; 0
    2e20:	4a ef       	ldi	r20, 0xFA	; 250
    2e22:	54 e4       	ldi	r21, 0x44	; 68
    2e24:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e28:	dc 01       	movw	r26, r24
    2e2a:	cb 01       	movw	r24, r22
    2e2c:	8f 83       	std	Y+7, r24	; 0x07
    2e2e:	98 87       	std	Y+8, r25	; 0x08
    2e30:	a9 87       	std	Y+9, r26	; 0x09
    2e32:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2e34:	6f 81       	ldd	r22, Y+7	; 0x07
    2e36:	78 85       	ldd	r23, Y+8	; 0x08
    2e38:	89 85       	ldd	r24, Y+9	; 0x09
    2e3a:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e3c:	20 e0       	ldi	r18, 0x00	; 0
    2e3e:	30 e0       	ldi	r19, 0x00	; 0
    2e40:	40 e8       	ldi	r20, 0x80	; 128
    2e42:	5f e3       	ldi	r21, 0x3F	; 63
    2e44:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2e48:	88 23       	and	r24, r24
    2e4a:	2c f4       	brge	.+10     	; 0x2e56 <HLCD4_voidStoreCustomChar+0x244>
		__ticks = 1;
    2e4c:	81 e0       	ldi	r24, 0x01	; 1
    2e4e:	90 e0       	ldi	r25, 0x00	; 0
    2e50:	9e 83       	std	Y+6, r25	; 0x06
    2e52:	8d 83       	std	Y+5, r24	; 0x05
    2e54:	3f c0       	rjmp	.+126    	; 0x2ed4 <HLCD4_voidStoreCustomChar+0x2c2>
	else if (__tmp > 65535)
    2e56:	6f 81       	ldd	r22, Y+7	; 0x07
    2e58:	78 85       	ldd	r23, Y+8	; 0x08
    2e5a:	89 85       	ldd	r24, Y+9	; 0x09
    2e5c:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e5e:	20 e0       	ldi	r18, 0x00	; 0
    2e60:	3f ef       	ldi	r19, 0xFF	; 255
    2e62:	4f e7       	ldi	r20, 0x7F	; 127
    2e64:	57 e4       	ldi	r21, 0x47	; 71
    2e66:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2e6a:	18 16       	cp	r1, r24
    2e6c:	4c f5       	brge	.+82     	; 0x2ec0 <HLCD4_voidStoreCustomChar+0x2ae>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e6e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2e70:	7c 85       	ldd	r23, Y+12	; 0x0c
    2e72:	8d 85       	ldd	r24, Y+13	; 0x0d
    2e74:	9e 85       	ldd	r25, Y+14	; 0x0e
    2e76:	20 e0       	ldi	r18, 0x00	; 0
    2e78:	30 e0       	ldi	r19, 0x00	; 0
    2e7a:	40 e2       	ldi	r20, 0x20	; 32
    2e7c:	51 e4       	ldi	r21, 0x41	; 65
    2e7e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e82:	dc 01       	movw	r26, r24
    2e84:	cb 01       	movw	r24, r22
    2e86:	bc 01       	movw	r22, r24
    2e88:	cd 01       	movw	r24, r26
    2e8a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e8e:	dc 01       	movw	r26, r24
    2e90:	cb 01       	movw	r24, r22
    2e92:	9e 83       	std	Y+6, r25	; 0x06
    2e94:	8d 83       	std	Y+5, r24	; 0x05
    2e96:	0f c0       	rjmp	.+30     	; 0x2eb6 <HLCD4_voidStoreCustomChar+0x2a4>
    2e98:	88 ec       	ldi	r24, 0xC8	; 200
    2e9a:	90 e0       	ldi	r25, 0x00	; 0
    2e9c:	9c 83       	std	Y+4, r25	; 0x04
    2e9e:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2ea0:	8b 81       	ldd	r24, Y+3	; 0x03
    2ea2:	9c 81       	ldd	r25, Y+4	; 0x04
    2ea4:	01 97       	sbiw	r24, 0x01	; 1
    2ea6:	f1 f7       	brne	.-4      	; 0x2ea4 <HLCD4_voidStoreCustomChar+0x292>
    2ea8:	9c 83       	std	Y+4, r25	; 0x04
    2eaa:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2eac:	8d 81       	ldd	r24, Y+5	; 0x05
    2eae:	9e 81       	ldd	r25, Y+6	; 0x06
    2eb0:	01 97       	sbiw	r24, 0x01	; 1
    2eb2:	9e 83       	std	Y+6, r25	; 0x06
    2eb4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2eb6:	8d 81       	ldd	r24, Y+5	; 0x05
    2eb8:	9e 81       	ldd	r25, Y+6	; 0x06
    2eba:	00 97       	sbiw	r24, 0x00	; 0
    2ebc:	69 f7       	brne	.-38     	; 0x2e98 <HLCD4_voidStoreCustomChar+0x286>
    2ebe:	14 c0       	rjmp	.+40     	; 0x2ee8 <HLCD4_voidStoreCustomChar+0x2d6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ec0:	6f 81       	ldd	r22, Y+7	; 0x07
    2ec2:	78 85       	ldd	r23, Y+8	; 0x08
    2ec4:	89 85       	ldd	r24, Y+9	; 0x09
    2ec6:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ec8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ecc:	dc 01       	movw	r26, r24
    2ece:	cb 01       	movw	r24, r22
    2ed0:	9e 83       	std	Y+6, r25	; 0x06
    2ed2:	8d 83       	std	Y+5, r24	; 0x05
    2ed4:	8d 81       	ldd	r24, Y+5	; 0x05
    2ed6:	9e 81       	ldd	r25, Y+6	; 0x06
    2ed8:	9a 83       	std	Y+2, r25	; 0x02
    2eda:	89 83       	std	Y+1, r24	; 0x01
    2edc:	89 81       	ldd	r24, Y+1	; 0x01
    2ede:	9a 81       	ldd	r25, Y+2	; 0x02
    2ee0:	01 97       	sbiw	r24, 0x01	; 1
    2ee2:	f1 f7       	brne	.-4      	; 0x2ee0 <HLCD4_voidStoreCustomChar+0x2ce>
    2ee4:	9a 83       	std	Y+2, r25	; 0x02
    2ee6:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(2);

}
    2ee8:	ab 96       	adiw	r28, 0x2b	; 43
    2eea:	0f b6       	in	r0, 0x3f	; 63
    2eec:	f8 94       	cli
    2eee:	de bf       	out	0x3e, r29	; 62
    2ef0:	0f be       	out	0x3f, r0	; 63
    2ef2:	cd bf       	out	0x3d, r28	; 61
    2ef4:	cf 91       	pop	r28
    2ef6:	df 91       	pop	r29
    2ef8:	08 95       	ret

00002efa <HLCD4_voidDisplayCustomChar>:

void HLCD4_voidDisplayCustomChar(u8 A_u8CGRAMIndex,u8 A_u8Row,u8 A_u8Col)
{
    2efa:	df 93       	push	r29
    2efc:	cf 93       	push	r28
    2efe:	00 d0       	rcall	.+0      	; 0x2f00 <HLCD4_voidDisplayCustomChar+0x6>
    2f00:	0f 92       	push	r0
    2f02:	cd b7       	in	r28, 0x3d	; 61
    2f04:	de b7       	in	r29, 0x3e	; 62
    2f06:	89 83       	std	Y+1, r24	; 0x01
    2f08:	6a 83       	std	Y+2, r22	; 0x02
    2f0a:	4b 83       	std	Y+3, r20	; 0x03
    HLCD4_voidGoToPos(A_u8Row,A_u8Col);
    2f0c:	8a 81       	ldd	r24, Y+2	; 0x02
    2f0e:	6b 81       	ldd	r22, Y+3	; 0x03
    2f10:	0e 94 04 15 	call	0x2a08	; 0x2a08 <HLCD4_voidGoToPos>
    HLCD4_voidSendData(A_u8CGRAMIndex);
    2f14:	89 81       	ldd	r24, Y+1	; 0x01
    2f16:	0e 94 ea 0f 	call	0x1fd4	; 0x1fd4 <HLCD4_voidSendData>
    2f1a:	0f 90       	pop	r0
    2f1c:	0f 90       	pop	r0
    2f1e:	0f 90       	pop	r0
    2f20:	cf 91       	pop	r28
    2f22:	df 91       	pop	r29
    2f24:	08 95       	ret

00002f26 <HLCD8_voidSendCommand>:
#define F_CPU 8000000UL
#include <math.h>
#include <stdlib.h>

void HLCD8_voidSendCommand(u8 A_u8Command)
{
    2f26:	df 93       	push	r29
    2f28:	cf 93       	push	r28
    2f2a:	cd b7       	in	r28, 0x3d	; 61
    2f2c:	de b7       	in	r29, 0x3e	; 62
    2f2e:	2f 97       	sbiw	r28, 0x0f	; 15
    2f30:	0f b6       	in	r0, 0x3f	; 63
    2f32:	f8 94       	cli
    2f34:	de bf       	out	0x3e, r29	; 62
    2f36:	0f be       	out	0x3f, r0	; 63
    2f38:	cd bf       	out	0x3d, r28	; 61
    2f3a:	8f 87       	std	Y+15, r24	; 0x0f
    //RS=0 RW=0
    MDIO_voidSetPinValue(LCD_CONTROL_PORT,RS_PIN,PIN_LOW);
    2f3c:	82 e0       	ldi	r24, 0x02	; 2
    2f3e:	60 e0       	ldi	r22, 0x00	; 0
    2f40:	40 e0       	ldi	r20, 0x00	; 0
    2f42:	0e 94 b6 08 	call	0x116c	; 0x116c <MDIO_voidSetPinValue>
    MDIO_voidSetPinValue(LCD_CONTROL_PORT,RW_PIN,PIN_LOW);
    2f46:	82 e0       	ldi	r24, 0x02	; 2
    2f48:	61 e0       	ldi	r22, 0x01	; 1
    2f4a:	40 e0       	ldi	r20, 0x00	; 0
    2f4c:	0e 94 b6 08 	call	0x116c	; 0x116c <MDIO_voidSetPinValue>

    MDIO_voidSetPortValue(LCD_DATA_PORT,A_u8Command);
    2f50:	83 e0       	ldi	r24, 0x03	; 3
    2f52:	6f 85       	ldd	r22, Y+15	; 0x0f
    2f54:	0e 94 e2 0a 	call	0x15c4	; 0x15c4 <MDIO_voidSetPortValue>
    MDIO_voidSetPinValue(LCD_CONTROL_PORT,E_PIN,PIN_HIGH);
    2f58:	82 e0       	ldi	r24, 0x02	; 2
    2f5a:	62 e0       	ldi	r22, 0x02	; 2
    2f5c:	41 e0       	ldi	r20, 0x01	; 1
    2f5e:	0e 94 b6 08 	call	0x116c	; 0x116c <MDIO_voidSetPinValue>
    2f62:	80 e0       	ldi	r24, 0x00	; 0
    2f64:	90 e0       	ldi	r25, 0x00	; 0
    2f66:	a0 e0       	ldi	r26, 0x00	; 0
    2f68:	b0 e4       	ldi	r27, 0x40	; 64
    2f6a:	8b 87       	std	Y+11, r24	; 0x0b
    2f6c:	9c 87       	std	Y+12, r25	; 0x0c
    2f6e:	ad 87       	std	Y+13, r26	; 0x0d
    2f70:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2f72:	6b 85       	ldd	r22, Y+11	; 0x0b
    2f74:	7c 85       	ldd	r23, Y+12	; 0x0c
    2f76:	8d 85       	ldd	r24, Y+13	; 0x0d
    2f78:	9e 85       	ldd	r25, Y+14	; 0x0e
    2f7a:	20 e0       	ldi	r18, 0x00	; 0
    2f7c:	30 e0       	ldi	r19, 0x00	; 0
    2f7e:	4a ef       	ldi	r20, 0xFA	; 250
    2f80:	54 e4       	ldi	r21, 0x44	; 68
    2f82:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f86:	dc 01       	movw	r26, r24
    2f88:	cb 01       	movw	r24, r22
    2f8a:	8f 83       	std	Y+7, r24	; 0x07
    2f8c:	98 87       	std	Y+8, r25	; 0x08
    2f8e:	a9 87       	std	Y+9, r26	; 0x09
    2f90:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2f92:	6f 81       	ldd	r22, Y+7	; 0x07
    2f94:	78 85       	ldd	r23, Y+8	; 0x08
    2f96:	89 85       	ldd	r24, Y+9	; 0x09
    2f98:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f9a:	20 e0       	ldi	r18, 0x00	; 0
    2f9c:	30 e0       	ldi	r19, 0x00	; 0
    2f9e:	40 e8       	ldi	r20, 0x80	; 128
    2fa0:	5f e3       	ldi	r21, 0x3F	; 63
    2fa2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2fa6:	88 23       	and	r24, r24
    2fa8:	2c f4       	brge	.+10     	; 0x2fb4 <HLCD8_voidSendCommand+0x8e>
		__ticks = 1;
    2faa:	81 e0       	ldi	r24, 0x01	; 1
    2fac:	90 e0       	ldi	r25, 0x00	; 0
    2fae:	9e 83       	std	Y+6, r25	; 0x06
    2fb0:	8d 83       	std	Y+5, r24	; 0x05
    2fb2:	3f c0       	rjmp	.+126    	; 0x3032 <HLCD8_voidSendCommand+0x10c>
	else if (__tmp > 65535)
    2fb4:	6f 81       	ldd	r22, Y+7	; 0x07
    2fb6:	78 85       	ldd	r23, Y+8	; 0x08
    2fb8:	89 85       	ldd	r24, Y+9	; 0x09
    2fba:	9a 85       	ldd	r25, Y+10	; 0x0a
    2fbc:	20 e0       	ldi	r18, 0x00	; 0
    2fbe:	3f ef       	ldi	r19, 0xFF	; 255
    2fc0:	4f e7       	ldi	r20, 0x7F	; 127
    2fc2:	57 e4       	ldi	r21, 0x47	; 71
    2fc4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2fc8:	18 16       	cp	r1, r24
    2fca:	4c f5       	brge	.+82     	; 0x301e <HLCD8_voidSendCommand+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2fcc:	6b 85       	ldd	r22, Y+11	; 0x0b
    2fce:	7c 85       	ldd	r23, Y+12	; 0x0c
    2fd0:	8d 85       	ldd	r24, Y+13	; 0x0d
    2fd2:	9e 85       	ldd	r25, Y+14	; 0x0e
    2fd4:	20 e0       	ldi	r18, 0x00	; 0
    2fd6:	30 e0       	ldi	r19, 0x00	; 0
    2fd8:	40 e2       	ldi	r20, 0x20	; 32
    2fda:	51 e4       	ldi	r21, 0x41	; 65
    2fdc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2fe0:	dc 01       	movw	r26, r24
    2fe2:	cb 01       	movw	r24, r22
    2fe4:	bc 01       	movw	r22, r24
    2fe6:	cd 01       	movw	r24, r26
    2fe8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2fec:	dc 01       	movw	r26, r24
    2fee:	cb 01       	movw	r24, r22
    2ff0:	9e 83       	std	Y+6, r25	; 0x06
    2ff2:	8d 83       	std	Y+5, r24	; 0x05
    2ff4:	0f c0       	rjmp	.+30     	; 0x3014 <HLCD8_voidSendCommand+0xee>
    2ff6:	88 ec       	ldi	r24, 0xC8	; 200
    2ff8:	90 e0       	ldi	r25, 0x00	; 0
    2ffa:	9c 83       	std	Y+4, r25	; 0x04
    2ffc:	8b 83       	std	Y+3, r24	; 0x03
    2ffe:	8b 81       	ldd	r24, Y+3	; 0x03
    3000:	9c 81       	ldd	r25, Y+4	; 0x04
    3002:	01 97       	sbiw	r24, 0x01	; 1
    3004:	f1 f7       	brne	.-4      	; 0x3002 <HLCD8_voidSendCommand+0xdc>
    3006:	9c 83       	std	Y+4, r25	; 0x04
    3008:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    300a:	8d 81       	ldd	r24, Y+5	; 0x05
    300c:	9e 81       	ldd	r25, Y+6	; 0x06
    300e:	01 97       	sbiw	r24, 0x01	; 1
    3010:	9e 83       	std	Y+6, r25	; 0x06
    3012:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3014:	8d 81       	ldd	r24, Y+5	; 0x05
    3016:	9e 81       	ldd	r25, Y+6	; 0x06
    3018:	00 97       	sbiw	r24, 0x00	; 0
    301a:	69 f7       	brne	.-38     	; 0x2ff6 <HLCD8_voidSendCommand+0xd0>
    301c:	14 c0       	rjmp	.+40     	; 0x3046 <HLCD8_voidSendCommand+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    301e:	6f 81       	ldd	r22, Y+7	; 0x07
    3020:	78 85       	ldd	r23, Y+8	; 0x08
    3022:	89 85       	ldd	r24, Y+9	; 0x09
    3024:	9a 85       	ldd	r25, Y+10	; 0x0a
    3026:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    302a:	dc 01       	movw	r26, r24
    302c:	cb 01       	movw	r24, r22
    302e:	9e 83       	std	Y+6, r25	; 0x06
    3030:	8d 83       	std	Y+5, r24	; 0x05
    3032:	8d 81       	ldd	r24, Y+5	; 0x05
    3034:	9e 81       	ldd	r25, Y+6	; 0x06
    3036:	9a 83       	std	Y+2, r25	; 0x02
    3038:	89 83       	std	Y+1, r24	; 0x01
    303a:	89 81       	ldd	r24, Y+1	; 0x01
    303c:	9a 81       	ldd	r25, Y+2	; 0x02
    303e:	01 97       	sbiw	r24, 0x01	; 1
    3040:	f1 f7       	brne	.-4      	; 0x303e <HLCD8_voidSendCommand+0x118>
    3042:	9a 83       	std	Y+2, r25	; 0x02
    3044:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(2);
    MDIO_voidSetPinValue(LCD_CONTROL_PORT,E_PIN,PIN_LOW);
    3046:	82 e0       	ldi	r24, 0x02	; 2
    3048:	62 e0       	ldi	r22, 0x02	; 2
    304a:	40 e0       	ldi	r20, 0x00	; 0
    304c:	0e 94 b6 08 	call	0x116c	; 0x116c <MDIO_voidSetPinValue>
}
    3050:	2f 96       	adiw	r28, 0x0f	; 15
    3052:	0f b6       	in	r0, 0x3f	; 63
    3054:	f8 94       	cli
    3056:	de bf       	out	0x3e, r29	; 62
    3058:	0f be       	out	0x3f, r0	; 63
    305a:	cd bf       	out	0x3d, r28	; 61
    305c:	cf 91       	pop	r28
    305e:	df 91       	pop	r29
    3060:	08 95       	ret

00003062 <HLCD8_voidSendData>:


void HLCD8_voidSendData(u8 A_u8Data)
{
    3062:	df 93       	push	r29
    3064:	cf 93       	push	r28
    3066:	cd b7       	in	r28, 0x3d	; 61
    3068:	de b7       	in	r29, 0x3e	; 62
    306a:	2f 97       	sbiw	r28, 0x0f	; 15
    306c:	0f b6       	in	r0, 0x3f	; 63
    306e:	f8 94       	cli
    3070:	de bf       	out	0x3e, r29	; 62
    3072:	0f be       	out	0x3f, r0	; 63
    3074:	cd bf       	out	0x3d, r28	; 61
    3076:	8f 87       	std	Y+15, r24	; 0x0f
    //RS=1 RW=0
    MDIO_voidSetPinValue(LCD_CONTROL_PORT,RS_PIN,PIN_HIGH);
    3078:	82 e0       	ldi	r24, 0x02	; 2
    307a:	60 e0       	ldi	r22, 0x00	; 0
    307c:	41 e0       	ldi	r20, 0x01	; 1
    307e:	0e 94 b6 08 	call	0x116c	; 0x116c <MDIO_voidSetPinValue>
    MDIO_voidSetPinValue(LCD_CONTROL_PORT,RW_PIN,PIN_LOW);
    3082:	82 e0       	ldi	r24, 0x02	; 2
    3084:	61 e0       	ldi	r22, 0x01	; 1
    3086:	40 e0       	ldi	r20, 0x00	; 0
    3088:	0e 94 b6 08 	call	0x116c	; 0x116c <MDIO_voidSetPinValue>

    MDIO_voidSetPortValue(LCD_DATA_PORT,A_u8Data);
    308c:	83 e0       	ldi	r24, 0x03	; 3
    308e:	6f 85       	ldd	r22, Y+15	; 0x0f
    3090:	0e 94 e2 0a 	call	0x15c4	; 0x15c4 <MDIO_voidSetPortValue>

    MDIO_voidSetPinValue(LCD_CONTROL_PORT,E_PIN,PIN_HIGH);
    3094:	82 e0       	ldi	r24, 0x02	; 2
    3096:	62 e0       	ldi	r22, 0x02	; 2
    3098:	41 e0       	ldi	r20, 0x01	; 1
    309a:	0e 94 b6 08 	call	0x116c	; 0x116c <MDIO_voidSetPinValue>
    309e:	80 e0       	ldi	r24, 0x00	; 0
    30a0:	90 e0       	ldi	r25, 0x00	; 0
    30a2:	a0 e0       	ldi	r26, 0x00	; 0
    30a4:	b0 e4       	ldi	r27, 0x40	; 64
    30a6:	8b 87       	std	Y+11, r24	; 0x0b
    30a8:	9c 87       	std	Y+12, r25	; 0x0c
    30aa:	ad 87       	std	Y+13, r26	; 0x0d
    30ac:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    30ae:	6b 85       	ldd	r22, Y+11	; 0x0b
    30b0:	7c 85       	ldd	r23, Y+12	; 0x0c
    30b2:	8d 85       	ldd	r24, Y+13	; 0x0d
    30b4:	9e 85       	ldd	r25, Y+14	; 0x0e
    30b6:	20 e0       	ldi	r18, 0x00	; 0
    30b8:	30 e0       	ldi	r19, 0x00	; 0
    30ba:	4a ef       	ldi	r20, 0xFA	; 250
    30bc:	54 e4       	ldi	r21, 0x44	; 68
    30be:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    30c2:	dc 01       	movw	r26, r24
    30c4:	cb 01       	movw	r24, r22
    30c6:	8f 83       	std	Y+7, r24	; 0x07
    30c8:	98 87       	std	Y+8, r25	; 0x08
    30ca:	a9 87       	std	Y+9, r26	; 0x09
    30cc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    30ce:	6f 81       	ldd	r22, Y+7	; 0x07
    30d0:	78 85       	ldd	r23, Y+8	; 0x08
    30d2:	89 85       	ldd	r24, Y+9	; 0x09
    30d4:	9a 85       	ldd	r25, Y+10	; 0x0a
    30d6:	20 e0       	ldi	r18, 0x00	; 0
    30d8:	30 e0       	ldi	r19, 0x00	; 0
    30da:	40 e8       	ldi	r20, 0x80	; 128
    30dc:	5f e3       	ldi	r21, 0x3F	; 63
    30de:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    30e2:	88 23       	and	r24, r24
    30e4:	2c f4       	brge	.+10     	; 0x30f0 <HLCD8_voidSendData+0x8e>
		__ticks = 1;
    30e6:	81 e0       	ldi	r24, 0x01	; 1
    30e8:	90 e0       	ldi	r25, 0x00	; 0
    30ea:	9e 83       	std	Y+6, r25	; 0x06
    30ec:	8d 83       	std	Y+5, r24	; 0x05
    30ee:	3f c0       	rjmp	.+126    	; 0x316e <HLCD8_voidSendData+0x10c>
	else if (__tmp > 65535)
    30f0:	6f 81       	ldd	r22, Y+7	; 0x07
    30f2:	78 85       	ldd	r23, Y+8	; 0x08
    30f4:	89 85       	ldd	r24, Y+9	; 0x09
    30f6:	9a 85       	ldd	r25, Y+10	; 0x0a
    30f8:	20 e0       	ldi	r18, 0x00	; 0
    30fa:	3f ef       	ldi	r19, 0xFF	; 255
    30fc:	4f e7       	ldi	r20, 0x7F	; 127
    30fe:	57 e4       	ldi	r21, 0x47	; 71
    3100:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3104:	18 16       	cp	r1, r24
    3106:	4c f5       	brge	.+82     	; 0x315a <HLCD8_voidSendData+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3108:	6b 85       	ldd	r22, Y+11	; 0x0b
    310a:	7c 85       	ldd	r23, Y+12	; 0x0c
    310c:	8d 85       	ldd	r24, Y+13	; 0x0d
    310e:	9e 85       	ldd	r25, Y+14	; 0x0e
    3110:	20 e0       	ldi	r18, 0x00	; 0
    3112:	30 e0       	ldi	r19, 0x00	; 0
    3114:	40 e2       	ldi	r20, 0x20	; 32
    3116:	51 e4       	ldi	r21, 0x41	; 65
    3118:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    311c:	dc 01       	movw	r26, r24
    311e:	cb 01       	movw	r24, r22
    3120:	bc 01       	movw	r22, r24
    3122:	cd 01       	movw	r24, r26
    3124:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3128:	dc 01       	movw	r26, r24
    312a:	cb 01       	movw	r24, r22
    312c:	9e 83       	std	Y+6, r25	; 0x06
    312e:	8d 83       	std	Y+5, r24	; 0x05
    3130:	0f c0       	rjmp	.+30     	; 0x3150 <HLCD8_voidSendData+0xee>
    3132:	88 ec       	ldi	r24, 0xC8	; 200
    3134:	90 e0       	ldi	r25, 0x00	; 0
    3136:	9c 83       	std	Y+4, r25	; 0x04
    3138:	8b 83       	std	Y+3, r24	; 0x03
    313a:	8b 81       	ldd	r24, Y+3	; 0x03
    313c:	9c 81       	ldd	r25, Y+4	; 0x04
    313e:	01 97       	sbiw	r24, 0x01	; 1
    3140:	f1 f7       	brne	.-4      	; 0x313e <HLCD8_voidSendData+0xdc>
    3142:	9c 83       	std	Y+4, r25	; 0x04
    3144:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3146:	8d 81       	ldd	r24, Y+5	; 0x05
    3148:	9e 81       	ldd	r25, Y+6	; 0x06
    314a:	01 97       	sbiw	r24, 0x01	; 1
    314c:	9e 83       	std	Y+6, r25	; 0x06
    314e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3150:	8d 81       	ldd	r24, Y+5	; 0x05
    3152:	9e 81       	ldd	r25, Y+6	; 0x06
    3154:	00 97       	sbiw	r24, 0x00	; 0
    3156:	69 f7       	brne	.-38     	; 0x3132 <HLCD8_voidSendData+0xd0>
    3158:	14 c0       	rjmp	.+40     	; 0x3182 <HLCD8_voidSendData+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    315a:	6f 81       	ldd	r22, Y+7	; 0x07
    315c:	78 85       	ldd	r23, Y+8	; 0x08
    315e:	89 85       	ldd	r24, Y+9	; 0x09
    3160:	9a 85       	ldd	r25, Y+10	; 0x0a
    3162:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3166:	dc 01       	movw	r26, r24
    3168:	cb 01       	movw	r24, r22
    316a:	9e 83       	std	Y+6, r25	; 0x06
    316c:	8d 83       	std	Y+5, r24	; 0x05
    316e:	8d 81       	ldd	r24, Y+5	; 0x05
    3170:	9e 81       	ldd	r25, Y+6	; 0x06
    3172:	9a 83       	std	Y+2, r25	; 0x02
    3174:	89 83       	std	Y+1, r24	; 0x01
    3176:	89 81       	ldd	r24, Y+1	; 0x01
    3178:	9a 81       	ldd	r25, Y+2	; 0x02
    317a:	01 97       	sbiw	r24, 0x01	; 1
    317c:	f1 f7       	brne	.-4      	; 0x317a <HLCD8_voidSendData+0x118>
    317e:	9a 83       	std	Y+2, r25	; 0x02
    3180:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(2);
    MDIO_voidSetPinValue(LCD_CONTROL_PORT,E_PIN,PIN_LOW);
    3182:	82 e0       	ldi	r24, 0x02	; 2
    3184:	62 e0       	ldi	r22, 0x02	; 2
    3186:	40 e0       	ldi	r20, 0x00	; 0
    3188:	0e 94 b6 08 	call	0x116c	; 0x116c <MDIO_voidSetPinValue>
}
    318c:	2f 96       	adiw	r28, 0x0f	; 15
    318e:	0f b6       	in	r0, 0x3f	; 63
    3190:	f8 94       	cli
    3192:	de bf       	out	0x3e, r29	; 62
    3194:	0f be       	out	0x3f, r0	; 63
    3196:	cd bf       	out	0x3d, r28	; 61
    3198:	cf 91       	pop	r28
    319a:	df 91       	pop	r29
    319c:	08 95       	ret

0000319e <HLCD8_voidInit>:


void HLCD8_voidInit()
{
    319e:	df 93       	push	r29
    31a0:	cf 93       	push	r28
    31a2:	cd b7       	in	r28, 0x3d	; 61
    31a4:	de b7       	in	r29, 0x3e	; 62
    31a6:	e8 97       	sbiw	r28, 0x38	; 56
    31a8:	0f b6       	in	r0, 0x3f	; 63
    31aa:	f8 94       	cli
    31ac:	de bf       	out	0x3e, r29	; 62
    31ae:	0f be       	out	0x3f, r0	; 63
    31b0:	cd bf       	out	0x3d, r28	; 61
    31b2:	80 e0       	ldi	r24, 0x00	; 0
    31b4:	90 e0       	ldi	r25, 0x00	; 0
    31b6:	a0 ef       	ldi	r26, 0xF0	; 240
    31b8:	b1 e4       	ldi	r27, 0x41	; 65
    31ba:	8d ab       	std	Y+53, r24	; 0x35
    31bc:	9e ab       	std	Y+54, r25	; 0x36
    31be:	af ab       	std	Y+55, r26	; 0x37
    31c0:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    31c2:	6d a9       	ldd	r22, Y+53	; 0x35
    31c4:	7e a9       	ldd	r23, Y+54	; 0x36
    31c6:	8f a9       	ldd	r24, Y+55	; 0x37
    31c8:	98 ad       	ldd	r25, Y+56	; 0x38
    31ca:	20 e0       	ldi	r18, 0x00	; 0
    31cc:	30 e0       	ldi	r19, 0x00	; 0
    31ce:	4a ef       	ldi	r20, 0xFA	; 250
    31d0:	54 e4       	ldi	r21, 0x44	; 68
    31d2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    31d6:	dc 01       	movw	r26, r24
    31d8:	cb 01       	movw	r24, r22
    31da:	89 ab       	std	Y+49, r24	; 0x31
    31dc:	9a ab       	std	Y+50, r25	; 0x32
    31de:	ab ab       	std	Y+51, r26	; 0x33
    31e0:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    31e2:	69 a9       	ldd	r22, Y+49	; 0x31
    31e4:	7a a9       	ldd	r23, Y+50	; 0x32
    31e6:	8b a9       	ldd	r24, Y+51	; 0x33
    31e8:	9c a9       	ldd	r25, Y+52	; 0x34
    31ea:	20 e0       	ldi	r18, 0x00	; 0
    31ec:	30 e0       	ldi	r19, 0x00	; 0
    31ee:	40 e8       	ldi	r20, 0x80	; 128
    31f0:	5f e3       	ldi	r21, 0x3F	; 63
    31f2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    31f6:	88 23       	and	r24, r24
    31f8:	2c f4       	brge	.+10     	; 0x3204 <HLCD8_voidInit+0x66>
		__ticks = 1;
    31fa:	81 e0       	ldi	r24, 0x01	; 1
    31fc:	90 e0       	ldi	r25, 0x00	; 0
    31fe:	98 ab       	std	Y+48, r25	; 0x30
    3200:	8f a7       	std	Y+47, r24	; 0x2f
    3202:	3f c0       	rjmp	.+126    	; 0x3282 <HLCD8_voidInit+0xe4>
	else if (__tmp > 65535)
    3204:	69 a9       	ldd	r22, Y+49	; 0x31
    3206:	7a a9       	ldd	r23, Y+50	; 0x32
    3208:	8b a9       	ldd	r24, Y+51	; 0x33
    320a:	9c a9       	ldd	r25, Y+52	; 0x34
    320c:	20 e0       	ldi	r18, 0x00	; 0
    320e:	3f ef       	ldi	r19, 0xFF	; 255
    3210:	4f e7       	ldi	r20, 0x7F	; 127
    3212:	57 e4       	ldi	r21, 0x47	; 71
    3214:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3218:	18 16       	cp	r1, r24
    321a:	4c f5       	brge	.+82     	; 0x326e <HLCD8_voidInit+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    321c:	6d a9       	ldd	r22, Y+53	; 0x35
    321e:	7e a9       	ldd	r23, Y+54	; 0x36
    3220:	8f a9       	ldd	r24, Y+55	; 0x37
    3222:	98 ad       	ldd	r25, Y+56	; 0x38
    3224:	20 e0       	ldi	r18, 0x00	; 0
    3226:	30 e0       	ldi	r19, 0x00	; 0
    3228:	40 e2       	ldi	r20, 0x20	; 32
    322a:	51 e4       	ldi	r21, 0x41	; 65
    322c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3230:	dc 01       	movw	r26, r24
    3232:	cb 01       	movw	r24, r22
    3234:	bc 01       	movw	r22, r24
    3236:	cd 01       	movw	r24, r26
    3238:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    323c:	dc 01       	movw	r26, r24
    323e:	cb 01       	movw	r24, r22
    3240:	98 ab       	std	Y+48, r25	; 0x30
    3242:	8f a7       	std	Y+47, r24	; 0x2f
    3244:	0f c0       	rjmp	.+30     	; 0x3264 <HLCD8_voidInit+0xc6>
    3246:	88 ec       	ldi	r24, 0xC8	; 200
    3248:	90 e0       	ldi	r25, 0x00	; 0
    324a:	9e a7       	std	Y+46, r25	; 0x2e
    324c:	8d a7       	std	Y+45, r24	; 0x2d
    324e:	8d a5       	ldd	r24, Y+45	; 0x2d
    3250:	9e a5       	ldd	r25, Y+46	; 0x2e
    3252:	01 97       	sbiw	r24, 0x01	; 1
    3254:	f1 f7       	brne	.-4      	; 0x3252 <HLCD8_voidInit+0xb4>
    3256:	9e a7       	std	Y+46, r25	; 0x2e
    3258:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    325a:	8f a5       	ldd	r24, Y+47	; 0x2f
    325c:	98 a9       	ldd	r25, Y+48	; 0x30
    325e:	01 97       	sbiw	r24, 0x01	; 1
    3260:	98 ab       	std	Y+48, r25	; 0x30
    3262:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3264:	8f a5       	ldd	r24, Y+47	; 0x2f
    3266:	98 a9       	ldd	r25, Y+48	; 0x30
    3268:	00 97       	sbiw	r24, 0x00	; 0
    326a:	69 f7       	brne	.-38     	; 0x3246 <HLCD8_voidInit+0xa8>
    326c:	14 c0       	rjmp	.+40     	; 0x3296 <HLCD8_voidInit+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    326e:	69 a9       	ldd	r22, Y+49	; 0x31
    3270:	7a a9       	ldd	r23, Y+50	; 0x32
    3272:	8b a9       	ldd	r24, Y+51	; 0x33
    3274:	9c a9       	ldd	r25, Y+52	; 0x34
    3276:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    327a:	dc 01       	movw	r26, r24
    327c:	cb 01       	movw	r24, r22
    327e:	98 ab       	std	Y+48, r25	; 0x30
    3280:	8f a7       	std	Y+47, r24	; 0x2f
    3282:	8f a5       	ldd	r24, Y+47	; 0x2f
    3284:	98 a9       	ldd	r25, Y+48	; 0x30
    3286:	9c a7       	std	Y+44, r25	; 0x2c
    3288:	8b a7       	std	Y+43, r24	; 0x2b
    328a:	8b a5       	ldd	r24, Y+43	; 0x2b
    328c:	9c a5       	ldd	r25, Y+44	; 0x2c
    328e:	01 97       	sbiw	r24, 0x01	; 1
    3290:	f1 f7       	brne	.-4      	; 0x328e <HLCD8_voidInit+0xf0>
    3292:	9c a7       	std	Y+44, r25	; 0x2c
    3294:	8b a7       	std	Y+43, r24	; 0x2b
    _delay_ms(30);
    HLCD8_voidSendCommand(FUNCTION_SET);
    3296:	88 e3       	ldi	r24, 0x38	; 56
    3298:	0e 94 93 17 	call	0x2f26	; 0x2f26 <HLCD8_voidSendCommand>
    329c:	80 e0       	ldi	r24, 0x00	; 0
    329e:	90 e0       	ldi	r25, 0x00	; 0
    32a0:	a0 e8       	ldi	r26, 0x80	; 128
    32a2:	bf e3       	ldi	r27, 0x3F	; 63
    32a4:	8f a3       	std	Y+39, r24	; 0x27
    32a6:	98 a7       	std	Y+40, r25	; 0x28
    32a8:	a9 a7       	std	Y+41, r26	; 0x29
    32aa:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    32ac:	6f a1       	ldd	r22, Y+39	; 0x27
    32ae:	78 a5       	ldd	r23, Y+40	; 0x28
    32b0:	89 a5       	ldd	r24, Y+41	; 0x29
    32b2:	9a a5       	ldd	r25, Y+42	; 0x2a
    32b4:	20 e0       	ldi	r18, 0x00	; 0
    32b6:	30 e0       	ldi	r19, 0x00	; 0
    32b8:	4a ef       	ldi	r20, 0xFA	; 250
    32ba:	54 e4       	ldi	r21, 0x44	; 68
    32bc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    32c0:	dc 01       	movw	r26, r24
    32c2:	cb 01       	movw	r24, r22
    32c4:	8b a3       	std	Y+35, r24	; 0x23
    32c6:	9c a3       	std	Y+36, r25	; 0x24
    32c8:	ad a3       	std	Y+37, r26	; 0x25
    32ca:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    32cc:	6b a1       	ldd	r22, Y+35	; 0x23
    32ce:	7c a1       	ldd	r23, Y+36	; 0x24
    32d0:	8d a1       	ldd	r24, Y+37	; 0x25
    32d2:	9e a1       	ldd	r25, Y+38	; 0x26
    32d4:	20 e0       	ldi	r18, 0x00	; 0
    32d6:	30 e0       	ldi	r19, 0x00	; 0
    32d8:	40 e8       	ldi	r20, 0x80	; 128
    32da:	5f e3       	ldi	r21, 0x3F	; 63
    32dc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    32e0:	88 23       	and	r24, r24
    32e2:	2c f4       	brge	.+10     	; 0x32ee <HLCD8_voidInit+0x150>
		__ticks = 1;
    32e4:	81 e0       	ldi	r24, 0x01	; 1
    32e6:	90 e0       	ldi	r25, 0x00	; 0
    32e8:	9a a3       	std	Y+34, r25	; 0x22
    32ea:	89 a3       	std	Y+33, r24	; 0x21
    32ec:	3f c0       	rjmp	.+126    	; 0x336c <HLCD8_voidInit+0x1ce>
	else if (__tmp > 65535)
    32ee:	6b a1       	ldd	r22, Y+35	; 0x23
    32f0:	7c a1       	ldd	r23, Y+36	; 0x24
    32f2:	8d a1       	ldd	r24, Y+37	; 0x25
    32f4:	9e a1       	ldd	r25, Y+38	; 0x26
    32f6:	20 e0       	ldi	r18, 0x00	; 0
    32f8:	3f ef       	ldi	r19, 0xFF	; 255
    32fa:	4f e7       	ldi	r20, 0x7F	; 127
    32fc:	57 e4       	ldi	r21, 0x47	; 71
    32fe:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3302:	18 16       	cp	r1, r24
    3304:	4c f5       	brge	.+82     	; 0x3358 <HLCD8_voidInit+0x1ba>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3306:	6f a1       	ldd	r22, Y+39	; 0x27
    3308:	78 a5       	ldd	r23, Y+40	; 0x28
    330a:	89 a5       	ldd	r24, Y+41	; 0x29
    330c:	9a a5       	ldd	r25, Y+42	; 0x2a
    330e:	20 e0       	ldi	r18, 0x00	; 0
    3310:	30 e0       	ldi	r19, 0x00	; 0
    3312:	40 e2       	ldi	r20, 0x20	; 32
    3314:	51 e4       	ldi	r21, 0x41	; 65
    3316:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    331a:	dc 01       	movw	r26, r24
    331c:	cb 01       	movw	r24, r22
    331e:	bc 01       	movw	r22, r24
    3320:	cd 01       	movw	r24, r26
    3322:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3326:	dc 01       	movw	r26, r24
    3328:	cb 01       	movw	r24, r22
    332a:	9a a3       	std	Y+34, r25	; 0x22
    332c:	89 a3       	std	Y+33, r24	; 0x21
    332e:	0f c0       	rjmp	.+30     	; 0x334e <HLCD8_voidInit+0x1b0>
    3330:	88 ec       	ldi	r24, 0xC8	; 200
    3332:	90 e0       	ldi	r25, 0x00	; 0
    3334:	98 a3       	std	Y+32, r25	; 0x20
    3336:	8f 8f       	std	Y+31, r24	; 0x1f
    3338:	8f 8d       	ldd	r24, Y+31	; 0x1f
    333a:	98 a1       	ldd	r25, Y+32	; 0x20
    333c:	01 97       	sbiw	r24, 0x01	; 1
    333e:	f1 f7       	brne	.-4      	; 0x333c <HLCD8_voidInit+0x19e>
    3340:	98 a3       	std	Y+32, r25	; 0x20
    3342:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3344:	89 a1       	ldd	r24, Y+33	; 0x21
    3346:	9a a1       	ldd	r25, Y+34	; 0x22
    3348:	01 97       	sbiw	r24, 0x01	; 1
    334a:	9a a3       	std	Y+34, r25	; 0x22
    334c:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    334e:	89 a1       	ldd	r24, Y+33	; 0x21
    3350:	9a a1       	ldd	r25, Y+34	; 0x22
    3352:	00 97       	sbiw	r24, 0x00	; 0
    3354:	69 f7       	brne	.-38     	; 0x3330 <HLCD8_voidInit+0x192>
    3356:	14 c0       	rjmp	.+40     	; 0x3380 <HLCD8_voidInit+0x1e2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3358:	6b a1       	ldd	r22, Y+35	; 0x23
    335a:	7c a1       	ldd	r23, Y+36	; 0x24
    335c:	8d a1       	ldd	r24, Y+37	; 0x25
    335e:	9e a1       	ldd	r25, Y+38	; 0x26
    3360:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3364:	dc 01       	movw	r26, r24
    3366:	cb 01       	movw	r24, r22
    3368:	9a a3       	std	Y+34, r25	; 0x22
    336a:	89 a3       	std	Y+33, r24	; 0x21
    336c:	89 a1       	ldd	r24, Y+33	; 0x21
    336e:	9a a1       	ldd	r25, Y+34	; 0x22
    3370:	9e 8f       	std	Y+30, r25	; 0x1e
    3372:	8d 8f       	std	Y+29, r24	; 0x1d
    3374:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3376:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3378:	01 97       	sbiw	r24, 0x01	; 1
    337a:	f1 f7       	brne	.-4      	; 0x3378 <HLCD8_voidInit+0x1da>
    337c:	9e 8f       	std	Y+30, r25	; 0x1e
    337e:	8d 8f       	std	Y+29, r24	; 0x1d
    _delay_ms(1);
    HLCD8_voidSendCommand(ON_OFF_CONTROL);
    3380:	8c e0       	ldi	r24, 0x0C	; 12
    3382:	0e 94 93 17 	call	0x2f26	; 0x2f26 <HLCD8_voidSendCommand>
    3386:	80 e0       	ldi	r24, 0x00	; 0
    3388:	90 e0       	ldi	r25, 0x00	; 0
    338a:	a0 e8       	ldi	r26, 0x80	; 128
    338c:	bf e3       	ldi	r27, 0x3F	; 63
    338e:	89 8f       	std	Y+25, r24	; 0x19
    3390:	9a 8f       	std	Y+26, r25	; 0x1a
    3392:	ab 8f       	std	Y+27, r26	; 0x1b
    3394:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3396:	69 8d       	ldd	r22, Y+25	; 0x19
    3398:	7a 8d       	ldd	r23, Y+26	; 0x1a
    339a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    339c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    339e:	20 e0       	ldi	r18, 0x00	; 0
    33a0:	30 e0       	ldi	r19, 0x00	; 0
    33a2:	4a ef       	ldi	r20, 0xFA	; 250
    33a4:	54 e4       	ldi	r21, 0x44	; 68
    33a6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    33aa:	dc 01       	movw	r26, r24
    33ac:	cb 01       	movw	r24, r22
    33ae:	8d 8b       	std	Y+21, r24	; 0x15
    33b0:	9e 8b       	std	Y+22, r25	; 0x16
    33b2:	af 8b       	std	Y+23, r26	; 0x17
    33b4:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    33b6:	6d 89       	ldd	r22, Y+21	; 0x15
    33b8:	7e 89       	ldd	r23, Y+22	; 0x16
    33ba:	8f 89       	ldd	r24, Y+23	; 0x17
    33bc:	98 8d       	ldd	r25, Y+24	; 0x18
    33be:	20 e0       	ldi	r18, 0x00	; 0
    33c0:	30 e0       	ldi	r19, 0x00	; 0
    33c2:	40 e8       	ldi	r20, 0x80	; 128
    33c4:	5f e3       	ldi	r21, 0x3F	; 63
    33c6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    33ca:	88 23       	and	r24, r24
    33cc:	2c f4       	brge	.+10     	; 0x33d8 <HLCD8_voidInit+0x23a>
		__ticks = 1;
    33ce:	81 e0       	ldi	r24, 0x01	; 1
    33d0:	90 e0       	ldi	r25, 0x00	; 0
    33d2:	9c 8b       	std	Y+20, r25	; 0x14
    33d4:	8b 8b       	std	Y+19, r24	; 0x13
    33d6:	3f c0       	rjmp	.+126    	; 0x3456 <HLCD8_voidInit+0x2b8>
	else if (__tmp > 65535)
    33d8:	6d 89       	ldd	r22, Y+21	; 0x15
    33da:	7e 89       	ldd	r23, Y+22	; 0x16
    33dc:	8f 89       	ldd	r24, Y+23	; 0x17
    33de:	98 8d       	ldd	r25, Y+24	; 0x18
    33e0:	20 e0       	ldi	r18, 0x00	; 0
    33e2:	3f ef       	ldi	r19, 0xFF	; 255
    33e4:	4f e7       	ldi	r20, 0x7F	; 127
    33e6:	57 e4       	ldi	r21, 0x47	; 71
    33e8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    33ec:	18 16       	cp	r1, r24
    33ee:	4c f5       	brge	.+82     	; 0x3442 <HLCD8_voidInit+0x2a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    33f0:	69 8d       	ldd	r22, Y+25	; 0x19
    33f2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    33f4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    33f6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    33f8:	20 e0       	ldi	r18, 0x00	; 0
    33fa:	30 e0       	ldi	r19, 0x00	; 0
    33fc:	40 e2       	ldi	r20, 0x20	; 32
    33fe:	51 e4       	ldi	r21, 0x41	; 65
    3400:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3404:	dc 01       	movw	r26, r24
    3406:	cb 01       	movw	r24, r22
    3408:	bc 01       	movw	r22, r24
    340a:	cd 01       	movw	r24, r26
    340c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3410:	dc 01       	movw	r26, r24
    3412:	cb 01       	movw	r24, r22
    3414:	9c 8b       	std	Y+20, r25	; 0x14
    3416:	8b 8b       	std	Y+19, r24	; 0x13
    3418:	0f c0       	rjmp	.+30     	; 0x3438 <HLCD8_voidInit+0x29a>
    341a:	88 ec       	ldi	r24, 0xC8	; 200
    341c:	90 e0       	ldi	r25, 0x00	; 0
    341e:	9a 8b       	std	Y+18, r25	; 0x12
    3420:	89 8b       	std	Y+17, r24	; 0x11
    3422:	89 89       	ldd	r24, Y+17	; 0x11
    3424:	9a 89       	ldd	r25, Y+18	; 0x12
    3426:	01 97       	sbiw	r24, 0x01	; 1
    3428:	f1 f7       	brne	.-4      	; 0x3426 <HLCD8_voidInit+0x288>
    342a:	9a 8b       	std	Y+18, r25	; 0x12
    342c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    342e:	8b 89       	ldd	r24, Y+19	; 0x13
    3430:	9c 89       	ldd	r25, Y+20	; 0x14
    3432:	01 97       	sbiw	r24, 0x01	; 1
    3434:	9c 8b       	std	Y+20, r25	; 0x14
    3436:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3438:	8b 89       	ldd	r24, Y+19	; 0x13
    343a:	9c 89       	ldd	r25, Y+20	; 0x14
    343c:	00 97       	sbiw	r24, 0x00	; 0
    343e:	69 f7       	brne	.-38     	; 0x341a <HLCD8_voidInit+0x27c>
    3440:	14 c0       	rjmp	.+40     	; 0x346a <HLCD8_voidInit+0x2cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3442:	6d 89       	ldd	r22, Y+21	; 0x15
    3444:	7e 89       	ldd	r23, Y+22	; 0x16
    3446:	8f 89       	ldd	r24, Y+23	; 0x17
    3448:	98 8d       	ldd	r25, Y+24	; 0x18
    344a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    344e:	dc 01       	movw	r26, r24
    3450:	cb 01       	movw	r24, r22
    3452:	9c 8b       	std	Y+20, r25	; 0x14
    3454:	8b 8b       	std	Y+19, r24	; 0x13
    3456:	8b 89       	ldd	r24, Y+19	; 0x13
    3458:	9c 89       	ldd	r25, Y+20	; 0x14
    345a:	98 8b       	std	Y+16, r25	; 0x10
    345c:	8f 87       	std	Y+15, r24	; 0x0f
    345e:	8f 85       	ldd	r24, Y+15	; 0x0f
    3460:	98 89       	ldd	r25, Y+16	; 0x10
    3462:	01 97       	sbiw	r24, 0x01	; 1
    3464:	f1 f7       	brne	.-4      	; 0x3462 <HLCD8_voidInit+0x2c4>
    3466:	98 8b       	std	Y+16, r25	; 0x10
    3468:	8f 87       	std	Y+15, r24	; 0x0f
    _delay_ms(1);
    HLCD8_voidSendCommand(DISPLAY_CLEAR);
    346a:	81 e0       	ldi	r24, 0x01	; 1
    346c:	0e 94 93 17 	call	0x2f26	; 0x2f26 <HLCD8_voidSendCommand>
    3470:	80 e0       	ldi	r24, 0x00	; 0
    3472:	90 e0       	ldi	r25, 0x00	; 0
    3474:	a0 e0       	ldi	r26, 0x00	; 0
    3476:	b0 e4       	ldi	r27, 0x40	; 64
    3478:	8b 87       	std	Y+11, r24	; 0x0b
    347a:	9c 87       	std	Y+12, r25	; 0x0c
    347c:	ad 87       	std	Y+13, r26	; 0x0d
    347e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3480:	6b 85       	ldd	r22, Y+11	; 0x0b
    3482:	7c 85       	ldd	r23, Y+12	; 0x0c
    3484:	8d 85       	ldd	r24, Y+13	; 0x0d
    3486:	9e 85       	ldd	r25, Y+14	; 0x0e
    3488:	20 e0       	ldi	r18, 0x00	; 0
    348a:	30 e0       	ldi	r19, 0x00	; 0
    348c:	4a ef       	ldi	r20, 0xFA	; 250
    348e:	54 e4       	ldi	r21, 0x44	; 68
    3490:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3494:	dc 01       	movw	r26, r24
    3496:	cb 01       	movw	r24, r22
    3498:	8f 83       	std	Y+7, r24	; 0x07
    349a:	98 87       	std	Y+8, r25	; 0x08
    349c:	a9 87       	std	Y+9, r26	; 0x09
    349e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    34a0:	6f 81       	ldd	r22, Y+7	; 0x07
    34a2:	78 85       	ldd	r23, Y+8	; 0x08
    34a4:	89 85       	ldd	r24, Y+9	; 0x09
    34a6:	9a 85       	ldd	r25, Y+10	; 0x0a
    34a8:	20 e0       	ldi	r18, 0x00	; 0
    34aa:	30 e0       	ldi	r19, 0x00	; 0
    34ac:	40 e8       	ldi	r20, 0x80	; 128
    34ae:	5f e3       	ldi	r21, 0x3F	; 63
    34b0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    34b4:	88 23       	and	r24, r24
    34b6:	2c f4       	brge	.+10     	; 0x34c2 <HLCD8_voidInit+0x324>
		__ticks = 1;
    34b8:	81 e0       	ldi	r24, 0x01	; 1
    34ba:	90 e0       	ldi	r25, 0x00	; 0
    34bc:	9e 83       	std	Y+6, r25	; 0x06
    34be:	8d 83       	std	Y+5, r24	; 0x05
    34c0:	3f c0       	rjmp	.+126    	; 0x3540 <HLCD8_voidInit+0x3a2>
	else if (__tmp > 65535)
    34c2:	6f 81       	ldd	r22, Y+7	; 0x07
    34c4:	78 85       	ldd	r23, Y+8	; 0x08
    34c6:	89 85       	ldd	r24, Y+9	; 0x09
    34c8:	9a 85       	ldd	r25, Y+10	; 0x0a
    34ca:	20 e0       	ldi	r18, 0x00	; 0
    34cc:	3f ef       	ldi	r19, 0xFF	; 255
    34ce:	4f e7       	ldi	r20, 0x7F	; 127
    34d0:	57 e4       	ldi	r21, 0x47	; 71
    34d2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    34d6:	18 16       	cp	r1, r24
    34d8:	4c f5       	brge	.+82     	; 0x352c <HLCD8_voidInit+0x38e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    34da:	6b 85       	ldd	r22, Y+11	; 0x0b
    34dc:	7c 85       	ldd	r23, Y+12	; 0x0c
    34de:	8d 85       	ldd	r24, Y+13	; 0x0d
    34e0:	9e 85       	ldd	r25, Y+14	; 0x0e
    34e2:	20 e0       	ldi	r18, 0x00	; 0
    34e4:	30 e0       	ldi	r19, 0x00	; 0
    34e6:	40 e2       	ldi	r20, 0x20	; 32
    34e8:	51 e4       	ldi	r21, 0x41	; 65
    34ea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    34ee:	dc 01       	movw	r26, r24
    34f0:	cb 01       	movw	r24, r22
    34f2:	bc 01       	movw	r22, r24
    34f4:	cd 01       	movw	r24, r26
    34f6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    34fa:	dc 01       	movw	r26, r24
    34fc:	cb 01       	movw	r24, r22
    34fe:	9e 83       	std	Y+6, r25	; 0x06
    3500:	8d 83       	std	Y+5, r24	; 0x05
    3502:	0f c0       	rjmp	.+30     	; 0x3522 <HLCD8_voidInit+0x384>
    3504:	88 ec       	ldi	r24, 0xC8	; 200
    3506:	90 e0       	ldi	r25, 0x00	; 0
    3508:	9c 83       	std	Y+4, r25	; 0x04
    350a:	8b 83       	std	Y+3, r24	; 0x03
    350c:	8b 81       	ldd	r24, Y+3	; 0x03
    350e:	9c 81       	ldd	r25, Y+4	; 0x04
    3510:	01 97       	sbiw	r24, 0x01	; 1
    3512:	f1 f7       	brne	.-4      	; 0x3510 <HLCD8_voidInit+0x372>
    3514:	9c 83       	std	Y+4, r25	; 0x04
    3516:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3518:	8d 81       	ldd	r24, Y+5	; 0x05
    351a:	9e 81       	ldd	r25, Y+6	; 0x06
    351c:	01 97       	sbiw	r24, 0x01	; 1
    351e:	9e 83       	std	Y+6, r25	; 0x06
    3520:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3522:	8d 81       	ldd	r24, Y+5	; 0x05
    3524:	9e 81       	ldd	r25, Y+6	; 0x06
    3526:	00 97       	sbiw	r24, 0x00	; 0
    3528:	69 f7       	brne	.-38     	; 0x3504 <HLCD8_voidInit+0x366>
    352a:	14 c0       	rjmp	.+40     	; 0x3554 <HLCD8_voidInit+0x3b6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    352c:	6f 81       	ldd	r22, Y+7	; 0x07
    352e:	78 85       	ldd	r23, Y+8	; 0x08
    3530:	89 85       	ldd	r24, Y+9	; 0x09
    3532:	9a 85       	ldd	r25, Y+10	; 0x0a
    3534:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3538:	dc 01       	movw	r26, r24
    353a:	cb 01       	movw	r24, r22
    353c:	9e 83       	std	Y+6, r25	; 0x06
    353e:	8d 83       	std	Y+5, r24	; 0x05
    3540:	8d 81       	ldd	r24, Y+5	; 0x05
    3542:	9e 81       	ldd	r25, Y+6	; 0x06
    3544:	9a 83       	std	Y+2, r25	; 0x02
    3546:	89 83       	std	Y+1, r24	; 0x01
    3548:	89 81       	ldd	r24, Y+1	; 0x01
    354a:	9a 81       	ldd	r25, Y+2	; 0x02
    354c:	01 97       	sbiw	r24, 0x01	; 1
    354e:	f1 f7       	brne	.-4      	; 0x354c <HLCD8_voidInit+0x3ae>
    3550:	9a 83       	std	Y+2, r25	; 0x02
    3552:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(2);
    HLCD8_voidSendCommand(ENTRY_MODE_SET);
    3554:	86 e0       	ldi	r24, 0x06	; 6
    3556:	0e 94 93 17 	call	0x2f26	; 0x2f26 <HLCD8_voidSendCommand>
}
    355a:	e8 96       	adiw	r28, 0x38	; 56
    355c:	0f b6       	in	r0, 0x3f	; 63
    355e:	f8 94       	cli
    3560:	de bf       	out	0x3e, r29	; 62
    3562:	0f be       	out	0x3f, r0	; 63
    3564:	cd bf       	out	0x3d, r28	; 61
    3566:	cf 91       	pop	r28
    3568:	df 91       	pop	r29
    356a:	08 95       	ret

0000356c <HLCD8_voidClearDisplay>:

void HLCD8_voidClearDisplay(void)
{
    356c:	df 93       	push	r29
    356e:	cf 93       	push	r28
    3570:	cd b7       	in	r28, 0x3d	; 61
    3572:	de b7       	in	r29, 0x3e	; 62
    3574:	2e 97       	sbiw	r28, 0x0e	; 14
    3576:	0f b6       	in	r0, 0x3f	; 63
    3578:	f8 94       	cli
    357a:	de bf       	out	0x3e, r29	; 62
    357c:	0f be       	out	0x3f, r0	; 63
    357e:	cd bf       	out	0x3d, r28	; 61
    HLCD8_voidSendCommand(DISPLAY_CLEAR);
    3580:	81 e0       	ldi	r24, 0x01	; 1
    3582:	0e 94 93 17 	call	0x2f26	; 0x2f26 <HLCD8_voidSendCommand>
    3586:	80 e0       	ldi	r24, 0x00	; 0
    3588:	90 e0       	ldi	r25, 0x00	; 0
    358a:	a0 e0       	ldi	r26, 0x00	; 0
    358c:	b0 e4       	ldi	r27, 0x40	; 64
    358e:	8b 87       	std	Y+11, r24	; 0x0b
    3590:	9c 87       	std	Y+12, r25	; 0x0c
    3592:	ad 87       	std	Y+13, r26	; 0x0d
    3594:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3596:	6b 85       	ldd	r22, Y+11	; 0x0b
    3598:	7c 85       	ldd	r23, Y+12	; 0x0c
    359a:	8d 85       	ldd	r24, Y+13	; 0x0d
    359c:	9e 85       	ldd	r25, Y+14	; 0x0e
    359e:	20 e0       	ldi	r18, 0x00	; 0
    35a0:	30 e0       	ldi	r19, 0x00	; 0
    35a2:	4a ef       	ldi	r20, 0xFA	; 250
    35a4:	54 e4       	ldi	r21, 0x44	; 68
    35a6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    35aa:	dc 01       	movw	r26, r24
    35ac:	cb 01       	movw	r24, r22
    35ae:	8f 83       	std	Y+7, r24	; 0x07
    35b0:	98 87       	std	Y+8, r25	; 0x08
    35b2:	a9 87       	std	Y+9, r26	; 0x09
    35b4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    35b6:	6f 81       	ldd	r22, Y+7	; 0x07
    35b8:	78 85       	ldd	r23, Y+8	; 0x08
    35ba:	89 85       	ldd	r24, Y+9	; 0x09
    35bc:	9a 85       	ldd	r25, Y+10	; 0x0a
    35be:	20 e0       	ldi	r18, 0x00	; 0
    35c0:	30 e0       	ldi	r19, 0x00	; 0
    35c2:	40 e8       	ldi	r20, 0x80	; 128
    35c4:	5f e3       	ldi	r21, 0x3F	; 63
    35c6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    35ca:	88 23       	and	r24, r24
    35cc:	2c f4       	brge	.+10     	; 0x35d8 <HLCD8_voidClearDisplay+0x6c>
		__ticks = 1;
    35ce:	81 e0       	ldi	r24, 0x01	; 1
    35d0:	90 e0       	ldi	r25, 0x00	; 0
    35d2:	9e 83       	std	Y+6, r25	; 0x06
    35d4:	8d 83       	std	Y+5, r24	; 0x05
    35d6:	3f c0       	rjmp	.+126    	; 0x3656 <HLCD8_voidClearDisplay+0xea>
	else if (__tmp > 65535)
    35d8:	6f 81       	ldd	r22, Y+7	; 0x07
    35da:	78 85       	ldd	r23, Y+8	; 0x08
    35dc:	89 85       	ldd	r24, Y+9	; 0x09
    35de:	9a 85       	ldd	r25, Y+10	; 0x0a
    35e0:	20 e0       	ldi	r18, 0x00	; 0
    35e2:	3f ef       	ldi	r19, 0xFF	; 255
    35e4:	4f e7       	ldi	r20, 0x7F	; 127
    35e6:	57 e4       	ldi	r21, 0x47	; 71
    35e8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    35ec:	18 16       	cp	r1, r24
    35ee:	4c f5       	brge	.+82     	; 0x3642 <HLCD8_voidClearDisplay+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    35f0:	6b 85       	ldd	r22, Y+11	; 0x0b
    35f2:	7c 85       	ldd	r23, Y+12	; 0x0c
    35f4:	8d 85       	ldd	r24, Y+13	; 0x0d
    35f6:	9e 85       	ldd	r25, Y+14	; 0x0e
    35f8:	20 e0       	ldi	r18, 0x00	; 0
    35fa:	30 e0       	ldi	r19, 0x00	; 0
    35fc:	40 e2       	ldi	r20, 0x20	; 32
    35fe:	51 e4       	ldi	r21, 0x41	; 65
    3600:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3604:	dc 01       	movw	r26, r24
    3606:	cb 01       	movw	r24, r22
    3608:	bc 01       	movw	r22, r24
    360a:	cd 01       	movw	r24, r26
    360c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3610:	dc 01       	movw	r26, r24
    3612:	cb 01       	movw	r24, r22
    3614:	9e 83       	std	Y+6, r25	; 0x06
    3616:	8d 83       	std	Y+5, r24	; 0x05
    3618:	0f c0       	rjmp	.+30     	; 0x3638 <HLCD8_voidClearDisplay+0xcc>
    361a:	88 ec       	ldi	r24, 0xC8	; 200
    361c:	90 e0       	ldi	r25, 0x00	; 0
    361e:	9c 83       	std	Y+4, r25	; 0x04
    3620:	8b 83       	std	Y+3, r24	; 0x03
    3622:	8b 81       	ldd	r24, Y+3	; 0x03
    3624:	9c 81       	ldd	r25, Y+4	; 0x04
    3626:	01 97       	sbiw	r24, 0x01	; 1
    3628:	f1 f7       	brne	.-4      	; 0x3626 <HLCD8_voidClearDisplay+0xba>
    362a:	9c 83       	std	Y+4, r25	; 0x04
    362c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    362e:	8d 81       	ldd	r24, Y+5	; 0x05
    3630:	9e 81       	ldd	r25, Y+6	; 0x06
    3632:	01 97       	sbiw	r24, 0x01	; 1
    3634:	9e 83       	std	Y+6, r25	; 0x06
    3636:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3638:	8d 81       	ldd	r24, Y+5	; 0x05
    363a:	9e 81       	ldd	r25, Y+6	; 0x06
    363c:	00 97       	sbiw	r24, 0x00	; 0
    363e:	69 f7       	brne	.-38     	; 0x361a <HLCD8_voidClearDisplay+0xae>
    3640:	14 c0       	rjmp	.+40     	; 0x366a <HLCD8_voidClearDisplay+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3642:	6f 81       	ldd	r22, Y+7	; 0x07
    3644:	78 85       	ldd	r23, Y+8	; 0x08
    3646:	89 85       	ldd	r24, Y+9	; 0x09
    3648:	9a 85       	ldd	r25, Y+10	; 0x0a
    364a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    364e:	dc 01       	movw	r26, r24
    3650:	cb 01       	movw	r24, r22
    3652:	9e 83       	std	Y+6, r25	; 0x06
    3654:	8d 83       	std	Y+5, r24	; 0x05
    3656:	8d 81       	ldd	r24, Y+5	; 0x05
    3658:	9e 81       	ldd	r25, Y+6	; 0x06
    365a:	9a 83       	std	Y+2, r25	; 0x02
    365c:	89 83       	std	Y+1, r24	; 0x01
    365e:	89 81       	ldd	r24, Y+1	; 0x01
    3660:	9a 81       	ldd	r25, Y+2	; 0x02
    3662:	01 97       	sbiw	r24, 0x01	; 1
    3664:	f1 f7       	brne	.-4      	; 0x3662 <HLCD8_voidClearDisplay+0xf6>
    3666:	9a 83       	std	Y+2, r25	; 0x02
    3668:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(2);
}
    366a:	2e 96       	adiw	r28, 0x0e	; 14
    366c:	0f b6       	in	r0, 0x3f	; 63
    366e:	f8 94       	cli
    3670:	de bf       	out	0x3e, r29	; 62
    3672:	0f be       	out	0x3f, r0	; 63
    3674:	cd bf       	out	0x3d, r28	; 61
    3676:	cf 91       	pop	r28
    3678:	df 91       	pop	r29
    367a:	08 95       	ret

0000367c <HLCD8_voidSendString>:


void HLCD8_voidSendString(u8 * A_Pu8String)
{
    367c:	df 93       	push	r29
    367e:	cf 93       	push	r28
    3680:	00 d0       	rcall	.+0      	; 0x3682 <HLCD8_voidSendString+0x6>
    3682:	0f 92       	push	r0
    3684:	cd b7       	in	r28, 0x3d	; 61
    3686:	de b7       	in	r29, 0x3e	; 62
    3688:	9b 83       	std	Y+3, r25	; 0x03
    368a:	8a 83       	std	Y+2, r24	; 0x02
    u8 local_u8Couter=0;
    368c:	19 82       	std	Y+1, r1	; 0x01
    368e:	0e c0       	rjmp	.+28     	; 0x36ac <HLCD8_voidSendString+0x30>
    while (A_Pu8String[local_u8Couter]!='\0')
    {
        HLCD8_voidSendData(A_Pu8String[local_u8Couter]);
    3690:	89 81       	ldd	r24, Y+1	; 0x01
    3692:	28 2f       	mov	r18, r24
    3694:	30 e0       	ldi	r19, 0x00	; 0
    3696:	8a 81       	ldd	r24, Y+2	; 0x02
    3698:	9b 81       	ldd	r25, Y+3	; 0x03
    369a:	fc 01       	movw	r30, r24
    369c:	e2 0f       	add	r30, r18
    369e:	f3 1f       	adc	r31, r19
    36a0:	80 81       	ld	r24, Z
    36a2:	0e 94 31 18 	call	0x3062	; 0x3062 <HLCD8_voidSendData>
        local_u8Couter++;
    36a6:	89 81       	ldd	r24, Y+1	; 0x01
    36a8:	8f 5f       	subi	r24, 0xFF	; 255
    36aa:	89 83       	std	Y+1, r24	; 0x01


void HLCD8_voidSendString(u8 * A_Pu8String)
{
    u8 local_u8Couter=0;
    while (A_Pu8String[local_u8Couter]!='\0')
    36ac:	89 81       	ldd	r24, Y+1	; 0x01
    36ae:	28 2f       	mov	r18, r24
    36b0:	30 e0       	ldi	r19, 0x00	; 0
    36b2:	8a 81       	ldd	r24, Y+2	; 0x02
    36b4:	9b 81       	ldd	r25, Y+3	; 0x03
    36b6:	fc 01       	movw	r30, r24
    36b8:	e2 0f       	add	r30, r18
    36ba:	f3 1f       	adc	r31, r19
    36bc:	80 81       	ld	r24, Z
    36be:	88 23       	and	r24, r24
    36c0:	39 f7       	brne	.-50     	; 0x3690 <HLCD8_voidSendString+0x14>
    {
        HLCD8_voidSendData(A_Pu8String[local_u8Couter]);
        local_u8Couter++;
    }
    
}
    36c2:	0f 90       	pop	r0
    36c4:	0f 90       	pop	r0
    36c6:	0f 90       	pop	r0
    36c8:	cf 91       	pop	r28
    36ca:	df 91       	pop	r29
    36cc:	08 95       	ret

000036ce <HLCD8_voidGoToPos>:

void HLCD8_voidGoToPos(u8 A_u8RowNum,u8 A_u8ColNum)
{
    36ce:	df 93       	push	r29
    36d0:	cf 93       	push	r28
    36d2:	cd b7       	in	r28, 0x3d	; 61
    36d4:	de b7       	in	r29, 0x3e	; 62
    36d6:	63 97       	sbiw	r28, 0x13	; 19
    36d8:	0f b6       	in	r0, 0x3f	; 63
    36da:	f8 94       	cli
    36dc:	de bf       	out	0x3e, r29	; 62
    36de:	0f be       	out	0x3f, r0	; 63
    36e0:	cd bf       	out	0x3d, r28	; 61
    36e2:	88 8b       	std	Y+16, r24	; 0x10
    36e4:	69 8b       	std	Y+17, r22	; 0x11
    // }
    // _delay_ms(1);
    /************************************************************/ 
    //Second method
	u8 local_u8Address;
    switch(A_u8RowNum)
    36e6:	88 89       	ldd	r24, Y+16	; 0x10
    36e8:	28 2f       	mov	r18, r24
    36ea:	30 e0       	ldi	r19, 0x00	; 0
    36ec:	3b 8b       	std	Y+19, r19	; 0x13
    36ee:	2a 8b       	std	Y+18, r18	; 0x12
    36f0:	8a 89       	ldd	r24, Y+18	; 0x12
    36f2:	9b 89       	ldd	r25, Y+19	; 0x13
    36f4:	81 30       	cpi	r24, 0x01	; 1
    36f6:	91 05       	cpc	r25, r1
    36f8:	31 f0       	breq	.+12     	; 0x3706 <HLCD8_voidGoToPos+0x38>
    36fa:	2a 89       	ldd	r18, Y+18	; 0x12
    36fc:	3b 89       	ldd	r19, Y+19	; 0x13
    36fe:	22 30       	cpi	r18, 0x02	; 2
    3700:	31 05       	cpc	r19, r1
    3702:	59 f0       	breq	.+22     	; 0x371a <HLCD8_voidGoToPos+0x4c>
    3704:	13 c0       	rjmp	.+38     	; 0x372c <HLCD8_voidGoToPos+0x5e>
    {
        case LCD_ROW_ONE:
        local_u8Address=FIRST_ROW_ADDRESS + A_u8ColNum -1;
    3706:	89 89       	ldd	r24, Y+17	; 0x11
    3708:	81 50       	subi	r24, 0x01	; 1
    370a:	8f 87       	std	Y+15, r24	; 0x0f
        SET_BIT(local_u8Address,PIN7);
    370c:	8f 85       	ldd	r24, Y+15	; 0x0f
    370e:	80 68       	ori	r24, 0x80	; 128
    3710:	8f 87       	std	Y+15, r24	; 0x0f
        HLCD8_voidSendCommand(local_u8Address);
    3712:	8f 85       	ldd	r24, Y+15	; 0x0f
    3714:	0e 94 93 17 	call	0x2f26	; 0x2f26 <HLCD8_voidSendCommand>
    3718:	09 c0       	rjmp	.+18     	; 0x372c <HLCD8_voidGoToPos+0x5e>
        break;

        case LCD_ROW_TWO:
        local_u8Address=SECOND_ROW_ADDRESS + A_u8ColNum;
    371a:	89 89       	ldd	r24, Y+17	; 0x11
    371c:	81 5c       	subi	r24, 0xC1	; 193
    371e:	8f 87       	std	Y+15, r24	; 0x0f
        SET_BIT(local_u8Address,PIN7);
    3720:	8f 85       	ldd	r24, Y+15	; 0x0f
    3722:	80 68       	ori	r24, 0x80	; 128
    3724:	8f 87       	std	Y+15, r24	; 0x0f
        HLCD8_voidSendCommand(local_u8Address);
    3726:	8f 85       	ldd	r24, Y+15	; 0x0f
    3728:	0e 94 93 17 	call	0x2f26	; 0x2f26 <HLCD8_voidSendCommand>
    372c:	80 e0       	ldi	r24, 0x00	; 0
    372e:	90 e0       	ldi	r25, 0x00	; 0
    3730:	a0 e8       	ldi	r26, 0x80	; 128
    3732:	bf e3       	ldi	r27, 0x3F	; 63
    3734:	8b 87       	std	Y+11, r24	; 0x0b
    3736:	9c 87       	std	Y+12, r25	; 0x0c
    3738:	ad 87       	std	Y+13, r26	; 0x0d
    373a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    373c:	6b 85       	ldd	r22, Y+11	; 0x0b
    373e:	7c 85       	ldd	r23, Y+12	; 0x0c
    3740:	8d 85       	ldd	r24, Y+13	; 0x0d
    3742:	9e 85       	ldd	r25, Y+14	; 0x0e
    3744:	20 e0       	ldi	r18, 0x00	; 0
    3746:	30 e0       	ldi	r19, 0x00	; 0
    3748:	4a ef       	ldi	r20, 0xFA	; 250
    374a:	54 e4       	ldi	r21, 0x44	; 68
    374c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3750:	dc 01       	movw	r26, r24
    3752:	cb 01       	movw	r24, r22
    3754:	8f 83       	std	Y+7, r24	; 0x07
    3756:	98 87       	std	Y+8, r25	; 0x08
    3758:	a9 87       	std	Y+9, r26	; 0x09
    375a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    375c:	6f 81       	ldd	r22, Y+7	; 0x07
    375e:	78 85       	ldd	r23, Y+8	; 0x08
    3760:	89 85       	ldd	r24, Y+9	; 0x09
    3762:	9a 85       	ldd	r25, Y+10	; 0x0a
    3764:	20 e0       	ldi	r18, 0x00	; 0
    3766:	30 e0       	ldi	r19, 0x00	; 0
    3768:	40 e8       	ldi	r20, 0x80	; 128
    376a:	5f e3       	ldi	r21, 0x3F	; 63
    376c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3770:	88 23       	and	r24, r24
    3772:	2c f4       	brge	.+10     	; 0x377e <HLCD8_voidGoToPos+0xb0>
		__ticks = 1;
    3774:	81 e0       	ldi	r24, 0x01	; 1
    3776:	90 e0       	ldi	r25, 0x00	; 0
    3778:	9e 83       	std	Y+6, r25	; 0x06
    377a:	8d 83       	std	Y+5, r24	; 0x05
    377c:	3f c0       	rjmp	.+126    	; 0x37fc <HLCD8_voidGoToPos+0x12e>
	else if (__tmp > 65535)
    377e:	6f 81       	ldd	r22, Y+7	; 0x07
    3780:	78 85       	ldd	r23, Y+8	; 0x08
    3782:	89 85       	ldd	r24, Y+9	; 0x09
    3784:	9a 85       	ldd	r25, Y+10	; 0x0a
    3786:	20 e0       	ldi	r18, 0x00	; 0
    3788:	3f ef       	ldi	r19, 0xFF	; 255
    378a:	4f e7       	ldi	r20, 0x7F	; 127
    378c:	57 e4       	ldi	r21, 0x47	; 71
    378e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3792:	18 16       	cp	r1, r24
    3794:	4c f5       	brge	.+82     	; 0x37e8 <HLCD8_voidGoToPos+0x11a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3796:	6b 85       	ldd	r22, Y+11	; 0x0b
    3798:	7c 85       	ldd	r23, Y+12	; 0x0c
    379a:	8d 85       	ldd	r24, Y+13	; 0x0d
    379c:	9e 85       	ldd	r25, Y+14	; 0x0e
    379e:	20 e0       	ldi	r18, 0x00	; 0
    37a0:	30 e0       	ldi	r19, 0x00	; 0
    37a2:	40 e2       	ldi	r20, 0x20	; 32
    37a4:	51 e4       	ldi	r21, 0x41	; 65
    37a6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    37aa:	dc 01       	movw	r26, r24
    37ac:	cb 01       	movw	r24, r22
    37ae:	bc 01       	movw	r22, r24
    37b0:	cd 01       	movw	r24, r26
    37b2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    37b6:	dc 01       	movw	r26, r24
    37b8:	cb 01       	movw	r24, r22
    37ba:	9e 83       	std	Y+6, r25	; 0x06
    37bc:	8d 83       	std	Y+5, r24	; 0x05
    37be:	0f c0       	rjmp	.+30     	; 0x37de <HLCD8_voidGoToPos+0x110>
    37c0:	88 ec       	ldi	r24, 0xC8	; 200
    37c2:	90 e0       	ldi	r25, 0x00	; 0
    37c4:	9c 83       	std	Y+4, r25	; 0x04
    37c6:	8b 83       	std	Y+3, r24	; 0x03
    37c8:	8b 81       	ldd	r24, Y+3	; 0x03
    37ca:	9c 81       	ldd	r25, Y+4	; 0x04
    37cc:	01 97       	sbiw	r24, 0x01	; 1
    37ce:	f1 f7       	brne	.-4      	; 0x37cc <HLCD8_voidGoToPos+0xfe>
    37d0:	9c 83       	std	Y+4, r25	; 0x04
    37d2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    37d4:	8d 81       	ldd	r24, Y+5	; 0x05
    37d6:	9e 81       	ldd	r25, Y+6	; 0x06
    37d8:	01 97       	sbiw	r24, 0x01	; 1
    37da:	9e 83       	std	Y+6, r25	; 0x06
    37dc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    37de:	8d 81       	ldd	r24, Y+5	; 0x05
    37e0:	9e 81       	ldd	r25, Y+6	; 0x06
    37e2:	00 97       	sbiw	r24, 0x00	; 0
    37e4:	69 f7       	brne	.-38     	; 0x37c0 <HLCD8_voidGoToPos+0xf2>
    37e6:	14 c0       	rjmp	.+40     	; 0x3810 <HLCD8_voidGoToPos+0x142>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    37e8:	6f 81       	ldd	r22, Y+7	; 0x07
    37ea:	78 85       	ldd	r23, Y+8	; 0x08
    37ec:	89 85       	ldd	r24, Y+9	; 0x09
    37ee:	9a 85       	ldd	r25, Y+10	; 0x0a
    37f0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    37f4:	dc 01       	movw	r26, r24
    37f6:	cb 01       	movw	r24, r22
    37f8:	9e 83       	std	Y+6, r25	; 0x06
    37fa:	8d 83       	std	Y+5, r24	; 0x05
    37fc:	8d 81       	ldd	r24, Y+5	; 0x05
    37fe:	9e 81       	ldd	r25, Y+6	; 0x06
    3800:	9a 83       	std	Y+2, r25	; 0x02
    3802:	89 83       	std	Y+1, r24	; 0x01
    3804:	89 81       	ldd	r24, Y+1	; 0x01
    3806:	9a 81       	ldd	r25, Y+2	; 0x02
    3808:	01 97       	sbiw	r24, 0x01	; 1
    380a:	f1 f7       	brne	.-4      	; 0x3808 <HLCD8_voidGoToPos+0x13a>
    380c:	9a 83       	std	Y+2, r25	; 0x02
    380e:	89 83       	std	Y+1, r24	; 0x01
        break;

    }
    _delay_ms(1);

}
    3810:	63 96       	adiw	r28, 0x13	; 19
    3812:	0f b6       	in	r0, 0x3f	; 63
    3814:	f8 94       	cli
    3816:	de bf       	out	0x3e, r29	; 62
    3818:	0f be       	out	0x3f, r0	; 63
    381a:	cd bf       	out	0x3d, r28	; 61
    381c:	cf 91       	pop	r28
    381e:	df 91       	pop	r29
    3820:	08 95       	ret

00003822 <HLCD8_voidDisplayNumber>:

void HLCD8_voidDisplayNumber(u32 A_u32Number)
{
    3822:	df 93       	push	r29
    3824:	cf 93       	push	r28
    3826:	00 d0       	rcall	.+0      	; 0x3828 <HLCD8_voidDisplayNumber+0x6>
    3828:	00 d0       	rcall	.+0      	; 0x382a <HLCD8_voidDisplayNumber+0x8>
    382a:	cd b7       	in	r28, 0x3d	; 61
    382c:	de b7       	in	r29, 0x3e	; 62
    382e:	9c 83       	std	Y+4, r25	; 0x04
    3830:	8b 83       	std	Y+3, r24	; 0x03
    // u8 local_u8NumToStr[100];
    // itoa(A_u32Number,local_u8NumToStr,10);
    // HLCD8_voidSendString(local_u8NumToStr);
    //****************************************************//
    //third method: it will deal with zero unlike the first method so it's not problem here
    u32 local_u32Number=1;
    3832:	81 e0       	ldi	r24, 0x01	; 1
    3834:	90 e0       	ldi	r25, 0x00	; 0
    3836:	9a 83       	std	Y+2, r25	; 0x02
    3838:	89 83       	std	Y+1, r24	; 0x01
    if(A_u32Number==0)
    383a:	8b 81       	ldd	r24, Y+3	; 0x03
    383c:	9c 81       	ldd	r25, Y+4	; 0x04
    383e:	00 97       	sbiw	r24, 0x00	; 0
    3840:	31 f5       	brne	.+76     	; 0x388e <HLCD8_voidDisplayNumber+0x6c>
    {
        HLCD8_voidSendData('0');
    3842:	80 e3       	ldi	r24, 0x30	; 48
    3844:	0e 94 31 18 	call	0x3062	; 0x3062 <HLCD8_voidSendData>
    3848:	22 c0       	rjmp	.+68     	; 0x388e <HLCD8_voidDisplayNumber+0x6c>
    }   
    while(A_u32Number !=0)
    {
            local_u32Number=((local_u32Number * 10)+(A_u32Number%10));
    384a:	89 81       	ldd	r24, Y+1	; 0x01
    384c:	9a 81       	ldd	r25, Y+2	; 0x02
    384e:	9c 01       	movw	r18, r24
    3850:	22 0f       	add	r18, r18
    3852:	33 1f       	adc	r19, r19
    3854:	c9 01       	movw	r24, r18
    3856:	88 0f       	add	r24, r24
    3858:	99 1f       	adc	r25, r25
    385a:	88 0f       	add	r24, r24
    385c:	99 1f       	adc	r25, r25
    385e:	f9 01       	movw	r30, r18
    3860:	e8 0f       	add	r30, r24
    3862:	f9 1f       	adc	r31, r25
    3864:	8b 81       	ldd	r24, Y+3	; 0x03
    3866:	9c 81       	ldd	r25, Y+4	; 0x04
    3868:	2a e0       	ldi	r18, 0x0A	; 10
    386a:	30 e0       	ldi	r19, 0x00	; 0
    386c:	b9 01       	movw	r22, r18
    386e:	0e 94 59 26 	call	0x4cb2	; 0x4cb2 <__udivmodhi4>
    3872:	8e 0f       	add	r24, r30
    3874:	9f 1f       	adc	r25, r31
    3876:	9a 83       	std	Y+2, r25	; 0x02
    3878:	89 83       	std	Y+1, r24	; 0x01
            A_u32Number=A_u32Number/10;
    387a:	8b 81       	ldd	r24, Y+3	; 0x03
    387c:	9c 81       	ldd	r25, Y+4	; 0x04
    387e:	2a e0       	ldi	r18, 0x0A	; 10
    3880:	30 e0       	ldi	r19, 0x00	; 0
    3882:	b9 01       	movw	r22, r18
    3884:	0e 94 59 26 	call	0x4cb2	; 0x4cb2 <__udivmodhi4>
    3888:	cb 01       	movw	r24, r22
    388a:	9c 83       	std	Y+4, r25	; 0x04
    388c:	8b 83       	std	Y+3, r24	; 0x03
    u32 local_u32Number=1;
    if(A_u32Number==0)
    {
        HLCD8_voidSendData('0');
    }   
    while(A_u32Number !=0)
    388e:	8b 81       	ldd	r24, Y+3	; 0x03
    3890:	9c 81       	ldd	r25, Y+4	; 0x04
    3892:	00 97       	sbiw	r24, 0x00	; 0
    3894:	d1 f6       	brne	.-76     	; 0x384a <HLCD8_voidDisplayNumber+0x28>
    3896:	14 c0       	rjmp	.+40     	; 0x38c0 <HLCD8_voidDisplayNumber+0x9e>
            A_u32Number=A_u32Number/10;

    }
    while (local_u32Number!=1)
    {
        HLCD8_voidSendData((local_u32Number%10)+48);
    3898:	89 81       	ldd	r24, Y+1	; 0x01
    389a:	9a 81       	ldd	r25, Y+2	; 0x02
    389c:	2a e0       	ldi	r18, 0x0A	; 10
    389e:	30 e0       	ldi	r19, 0x00	; 0
    38a0:	b9 01       	movw	r22, r18
    38a2:	0e 94 59 26 	call	0x4cb2	; 0x4cb2 <__udivmodhi4>
    38a6:	80 5d       	subi	r24, 0xD0	; 208
    38a8:	0e 94 31 18 	call	0x3062	; 0x3062 <HLCD8_voidSendData>
        local_u32Number=local_u32Number/10;
    38ac:	89 81       	ldd	r24, Y+1	; 0x01
    38ae:	9a 81       	ldd	r25, Y+2	; 0x02
    38b0:	2a e0       	ldi	r18, 0x0A	; 10
    38b2:	30 e0       	ldi	r19, 0x00	; 0
    38b4:	b9 01       	movw	r22, r18
    38b6:	0e 94 59 26 	call	0x4cb2	; 0x4cb2 <__udivmodhi4>
    38ba:	cb 01       	movw	r24, r22
    38bc:	9a 83       	std	Y+2, r25	; 0x02
    38be:	89 83       	std	Y+1, r24	; 0x01
    {
            local_u32Number=((local_u32Number * 10)+(A_u32Number%10));
            A_u32Number=A_u32Number/10;

    }
    while (local_u32Number!=1)
    38c0:	89 81       	ldd	r24, Y+1	; 0x01
    38c2:	9a 81       	ldd	r25, Y+2	; 0x02
    38c4:	81 30       	cpi	r24, 0x01	; 1
    38c6:	91 05       	cpc	r25, r1
    38c8:	39 f7       	brne	.-50     	; 0x3898 <HLCD8_voidDisplayNumber+0x76>
    {
        HLCD8_voidSendData((local_u32Number%10)+48);
        local_u32Number=local_u32Number/10;
    }
}
    38ca:	0f 90       	pop	r0
    38cc:	0f 90       	pop	r0
    38ce:	0f 90       	pop	r0
    38d0:	0f 90       	pop	r0
    38d2:	cf 91       	pop	r28
    38d4:	df 91       	pop	r29
    38d6:	08 95       	ret

000038d8 <HLCD8_voidStoreCustomChar>:

void HLCD8_voidStoreCustomChar(u8 * A_u8Pattern,u8 A_u8CGRAMIndex)
{
    38d8:	df 93       	push	r29
    38da:	cf 93       	push	r28
    38dc:	cd b7       	in	r28, 0x3d	; 61
    38de:	de b7       	in	r29, 0x3e	; 62
    38e0:	ab 97       	sbiw	r28, 0x2b	; 43
    38e2:	0f b6       	in	r0, 0x3f	; 63
    38e4:	f8 94       	cli
    38e6:	de bf       	out	0x3e, r29	; 62
    38e8:	0f be       	out	0x3f, r0	; 63
    38ea:	cd bf       	out	0x3d, r28	; 61
    38ec:	9a a7       	std	Y+42, r25	; 0x2a
    38ee:	89 a7       	std	Y+41, r24	; 0x29
    38f0:	6b a7       	std	Y+43, r22	; 0x2b
    u8 local_u8Address;
    if(A_u8CGRAMIndex<8)
    38f2:	8b a5       	ldd	r24, Y+43	; 0x2b
    38f4:	88 30       	cpi	r24, 0x08	; 8
    38f6:	08 f0       	brcs	.+2      	; 0x38fa <HLCD8_voidStoreCustomChar+0x22>
    38f8:	e5 c0       	rjmp	.+458    	; 0x3ac4 <HLCD8_voidStoreCustomChar+0x1ec>
    {
        A_u8CGRAMIndex=A_u8CGRAMIndex*8;
    38fa:	8b a5       	ldd	r24, Y+43	; 0x2b
    38fc:	88 2f       	mov	r24, r24
    38fe:	90 e0       	ldi	r25, 0x00	; 0
    3900:	88 0f       	add	r24, r24
    3902:	99 1f       	adc	r25, r25
    3904:	88 0f       	add	r24, r24
    3906:	99 1f       	adc	r25, r25
    3908:	88 0f       	add	r24, r24
    390a:	99 1f       	adc	r25, r25
    390c:	8b a7       	std	Y+43, r24	; 0x2b
        SET_BIT(A_u8CGRAMIndex,PIN6);
    390e:	8b a5       	ldd	r24, Y+43	; 0x2b
    3910:	80 64       	ori	r24, 0x40	; 64
    3912:	8b a7       	std	Y+43, r24	; 0x2b
        CLR_BIT(A_u8CGRAMIndex,PIN7);
    3914:	8b a5       	ldd	r24, Y+43	; 0x2b
    3916:	8f 77       	andi	r24, 0x7F	; 127
    3918:	8b a7       	std	Y+43, r24	; 0x2b
        HLCD8_voidSendCommand(A_u8CGRAMIndex);
    391a:	8b a5       	ldd	r24, Y+43	; 0x2b
    391c:	0e 94 93 17 	call	0x2f26	; 0x2f26 <HLCD8_voidSendCommand>
        for(u8 i=0;i<8;i++)
    3920:	1f a2       	std	Y+39, r1	; 0x27
    3922:	cc c0       	rjmp	.+408    	; 0x3abc <HLCD8_voidStoreCustomChar+0x1e4>
        {
            HLCD8_voidSendData(A_u8Pattern[i]);
    3924:	8f a1       	ldd	r24, Y+39	; 0x27
    3926:	28 2f       	mov	r18, r24
    3928:	30 e0       	ldi	r19, 0x00	; 0
    392a:	89 a5       	ldd	r24, Y+41	; 0x29
    392c:	9a a5       	ldd	r25, Y+42	; 0x2a
    392e:	fc 01       	movw	r30, r24
    3930:	e2 0f       	add	r30, r18
    3932:	f3 1f       	adc	r31, r19
    3934:	80 81       	ld	r24, Z
    3936:	0e 94 31 18 	call	0x3062	; 0x3062 <HLCD8_voidSendData>
    393a:	80 e0       	ldi	r24, 0x00	; 0
    393c:	90 e0       	ldi	r25, 0x00	; 0
    393e:	a0 e7       	ldi	r26, 0x70	; 112
    3940:	b2 e4       	ldi	r27, 0x42	; 66
    3942:	8b a3       	std	Y+35, r24	; 0x23
    3944:	9c a3       	std	Y+36, r25	; 0x24
    3946:	ad a3       	std	Y+37, r26	; 0x25
    3948:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    394a:	6b a1       	ldd	r22, Y+35	; 0x23
    394c:	7c a1       	ldd	r23, Y+36	; 0x24
    394e:	8d a1       	ldd	r24, Y+37	; 0x25
    3950:	9e a1       	ldd	r25, Y+38	; 0x26
    3952:	2b ea       	ldi	r18, 0xAB	; 171
    3954:	3a ea       	ldi	r19, 0xAA	; 170
    3956:	4a e2       	ldi	r20, 0x2A	; 42
    3958:	50 e4       	ldi	r21, 0x40	; 64
    395a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    395e:	dc 01       	movw	r26, r24
    3960:	cb 01       	movw	r24, r22
    3962:	8f 8f       	std	Y+31, r24	; 0x1f
    3964:	98 a3       	std	Y+32, r25	; 0x20
    3966:	a9 a3       	std	Y+33, r26	; 0x21
    3968:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    396a:	6f 8d       	ldd	r22, Y+31	; 0x1f
    396c:	78 a1       	ldd	r23, Y+32	; 0x20
    396e:	89 a1       	ldd	r24, Y+33	; 0x21
    3970:	9a a1       	ldd	r25, Y+34	; 0x22
    3972:	20 e0       	ldi	r18, 0x00	; 0
    3974:	30 e0       	ldi	r19, 0x00	; 0
    3976:	40 e8       	ldi	r20, 0x80	; 128
    3978:	5f e3       	ldi	r21, 0x3F	; 63
    397a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    397e:	88 23       	and	r24, r24
    3980:	1c f4       	brge	.+6      	; 0x3988 <HLCD8_voidStoreCustomChar+0xb0>
		__ticks = 1;
    3982:	81 e0       	ldi	r24, 0x01	; 1
    3984:	8e 8f       	std	Y+30, r24	; 0x1e
    3986:	91 c0       	rjmp	.+290    	; 0x3aaa <HLCD8_voidStoreCustomChar+0x1d2>
	else if (__tmp > 255)
    3988:	6f 8d       	ldd	r22, Y+31	; 0x1f
    398a:	78 a1       	ldd	r23, Y+32	; 0x20
    398c:	89 a1       	ldd	r24, Y+33	; 0x21
    398e:	9a a1       	ldd	r25, Y+34	; 0x22
    3990:	20 e0       	ldi	r18, 0x00	; 0
    3992:	30 e0       	ldi	r19, 0x00	; 0
    3994:	4f e7       	ldi	r20, 0x7F	; 127
    3996:	53 e4       	ldi	r21, 0x43	; 67
    3998:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    399c:	18 16       	cp	r1, r24
    399e:	0c f0       	brlt	.+2      	; 0x39a2 <HLCD8_voidStoreCustomChar+0xca>
    39a0:	7b c0       	rjmp	.+246    	; 0x3a98 <HLCD8_voidStoreCustomChar+0x1c0>
	{
		_delay_ms(__us / 1000.0);
    39a2:	6b a1       	ldd	r22, Y+35	; 0x23
    39a4:	7c a1       	ldd	r23, Y+36	; 0x24
    39a6:	8d a1       	ldd	r24, Y+37	; 0x25
    39a8:	9e a1       	ldd	r25, Y+38	; 0x26
    39aa:	20 e0       	ldi	r18, 0x00	; 0
    39ac:	30 e0       	ldi	r19, 0x00	; 0
    39ae:	4a e7       	ldi	r20, 0x7A	; 122
    39b0:	54 e4       	ldi	r21, 0x44	; 68
    39b2:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    39b6:	dc 01       	movw	r26, r24
    39b8:	cb 01       	movw	r24, r22
    39ba:	8a 8f       	std	Y+26, r24	; 0x1a
    39bc:	9b 8f       	std	Y+27, r25	; 0x1b
    39be:	ac 8f       	std	Y+28, r26	; 0x1c
    39c0:	bd 8f       	std	Y+29, r27	; 0x1d
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    39c2:	6a 8d       	ldd	r22, Y+26	; 0x1a
    39c4:	7b 8d       	ldd	r23, Y+27	; 0x1b
    39c6:	8c 8d       	ldd	r24, Y+28	; 0x1c
    39c8:	9d 8d       	ldd	r25, Y+29	; 0x1d
    39ca:	20 e0       	ldi	r18, 0x00	; 0
    39cc:	30 e0       	ldi	r19, 0x00	; 0
    39ce:	4a ef       	ldi	r20, 0xFA	; 250
    39d0:	54 e4       	ldi	r21, 0x44	; 68
    39d2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    39d6:	dc 01       	movw	r26, r24
    39d8:	cb 01       	movw	r24, r22
    39da:	8e 8b       	std	Y+22, r24	; 0x16
    39dc:	9f 8b       	std	Y+23, r25	; 0x17
    39de:	a8 8f       	std	Y+24, r26	; 0x18
    39e0:	b9 8f       	std	Y+25, r27	; 0x19
	if (__tmp < 1.0)
    39e2:	6e 89       	ldd	r22, Y+22	; 0x16
    39e4:	7f 89       	ldd	r23, Y+23	; 0x17
    39e6:	88 8d       	ldd	r24, Y+24	; 0x18
    39e8:	99 8d       	ldd	r25, Y+25	; 0x19
    39ea:	20 e0       	ldi	r18, 0x00	; 0
    39ec:	30 e0       	ldi	r19, 0x00	; 0
    39ee:	40 e8       	ldi	r20, 0x80	; 128
    39f0:	5f e3       	ldi	r21, 0x3F	; 63
    39f2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    39f6:	88 23       	and	r24, r24
    39f8:	2c f4       	brge	.+10     	; 0x3a04 <HLCD8_voidStoreCustomChar+0x12c>
		__ticks = 1;
    39fa:	81 e0       	ldi	r24, 0x01	; 1
    39fc:	90 e0       	ldi	r25, 0x00	; 0
    39fe:	9d 8b       	std	Y+21, r25	; 0x15
    3a00:	8c 8b       	std	Y+20, r24	; 0x14
    3a02:	3f c0       	rjmp	.+126    	; 0x3a82 <HLCD8_voidStoreCustomChar+0x1aa>
	else if (__tmp > 65535)
    3a04:	6e 89       	ldd	r22, Y+22	; 0x16
    3a06:	7f 89       	ldd	r23, Y+23	; 0x17
    3a08:	88 8d       	ldd	r24, Y+24	; 0x18
    3a0a:	99 8d       	ldd	r25, Y+25	; 0x19
    3a0c:	20 e0       	ldi	r18, 0x00	; 0
    3a0e:	3f ef       	ldi	r19, 0xFF	; 255
    3a10:	4f e7       	ldi	r20, 0x7F	; 127
    3a12:	57 e4       	ldi	r21, 0x47	; 71
    3a14:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3a18:	18 16       	cp	r1, r24
    3a1a:	4c f5       	brge	.+82     	; 0x3a6e <HLCD8_voidStoreCustomChar+0x196>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3a1c:	6a 8d       	ldd	r22, Y+26	; 0x1a
    3a1e:	7b 8d       	ldd	r23, Y+27	; 0x1b
    3a20:	8c 8d       	ldd	r24, Y+28	; 0x1c
    3a22:	9d 8d       	ldd	r25, Y+29	; 0x1d
    3a24:	20 e0       	ldi	r18, 0x00	; 0
    3a26:	30 e0       	ldi	r19, 0x00	; 0
    3a28:	40 e2       	ldi	r20, 0x20	; 32
    3a2a:	51 e4       	ldi	r21, 0x41	; 65
    3a2c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a30:	dc 01       	movw	r26, r24
    3a32:	cb 01       	movw	r24, r22
    3a34:	bc 01       	movw	r22, r24
    3a36:	cd 01       	movw	r24, r26
    3a38:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3a3c:	dc 01       	movw	r26, r24
    3a3e:	cb 01       	movw	r24, r22
    3a40:	9d 8b       	std	Y+21, r25	; 0x15
    3a42:	8c 8b       	std	Y+20, r24	; 0x14
    3a44:	0f c0       	rjmp	.+30     	; 0x3a64 <HLCD8_voidStoreCustomChar+0x18c>
    3a46:	88 ec       	ldi	r24, 0xC8	; 200
    3a48:	90 e0       	ldi	r25, 0x00	; 0
    3a4a:	9b 8b       	std	Y+19, r25	; 0x13
    3a4c:	8a 8b       	std	Y+18, r24	; 0x12
    3a4e:	8a 89       	ldd	r24, Y+18	; 0x12
    3a50:	9b 89       	ldd	r25, Y+19	; 0x13
    3a52:	01 97       	sbiw	r24, 0x01	; 1
    3a54:	f1 f7       	brne	.-4      	; 0x3a52 <HLCD8_voidStoreCustomChar+0x17a>
    3a56:	9b 8b       	std	Y+19, r25	; 0x13
    3a58:	8a 8b       	std	Y+18, r24	; 0x12
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3a5a:	8c 89       	ldd	r24, Y+20	; 0x14
    3a5c:	9d 89       	ldd	r25, Y+21	; 0x15
    3a5e:	01 97       	sbiw	r24, 0x01	; 1
    3a60:	9d 8b       	std	Y+21, r25	; 0x15
    3a62:	8c 8b       	std	Y+20, r24	; 0x14
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3a64:	8c 89       	ldd	r24, Y+20	; 0x14
    3a66:	9d 89       	ldd	r25, Y+21	; 0x15
    3a68:	00 97       	sbiw	r24, 0x00	; 0
    3a6a:	69 f7       	brne	.-38     	; 0x3a46 <HLCD8_voidStoreCustomChar+0x16e>
    3a6c:	24 c0       	rjmp	.+72     	; 0x3ab6 <HLCD8_voidStoreCustomChar+0x1de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3a6e:	6e 89       	ldd	r22, Y+22	; 0x16
    3a70:	7f 89       	ldd	r23, Y+23	; 0x17
    3a72:	88 8d       	ldd	r24, Y+24	; 0x18
    3a74:	99 8d       	ldd	r25, Y+25	; 0x19
    3a76:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3a7a:	dc 01       	movw	r26, r24
    3a7c:	cb 01       	movw	r24, r22
    3a7e:	9d 8b       	std	Y+21, r25	; 0x15
    3a80:	8c 8b       	std	Y+20, r24	; 0x14
    3a82:	8c 89       	ldd	r24, Y+20	; 0x14
    3a84:	9d 89       	ldd	r25, Y+21	; 0x15
    3a86:	99 8b       	std	Y+17, r25	; 0x11
    3a88:	88 8b       	std	Y+16, r24	; 0x10
    3a8a:	88 89       	ldd	r24, Y+16	; 0x10
    3a8c:	99 89       	ldd	r25, Y+17	; 0x11
    3a8e:	01 97       	sbiw	r24, 0x01	; 1
    3a90:	f1 f7       	brne	.-4      	; 0x3a8e <HLCD8_voidStoreCustomChar+0x1b6>
    3a92:	99 8b       	std	Y+17, r25	; 0x11
    3a94:	88 8b       	std	Y+16, r24	; 0x10
    3a96:	0f c0       	rjmp	.+30     	; 0x3ab6 <HLCD8_voidStoreCustomChar+0x1de>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    3a98:	6f 8d       	ldd	r22, Y+31	; 0x1f
    3a9a:	78 a1       	ldd	r23, Y+32	; 0x20
    3a9c:	89 a1       	ldd	r24, Y+33	; 0x21
    3a9e:	9a a1       	ldd	r25, Y+34	; 0x22
    3aa0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3aa4:	dc 01       	movw	r26, r24
    3aa6:	cb 01       	movw	r24, r22
    3aa8:	8e 8f       	std	Y+30, r24	; 0x1e
    3aaa:	8e 8d       	ldd	r24, Y+30	; 0x1e
    3aac:	8f 87       	std	Y+15, r24	; 0x0f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    3aae:	8f 85       	ldd	r24, Y+15	; 0x0f
    3ab0:	8a 95       	dec	r24
    3ab2:	f1 f7       	brne	.-4      	; 0x3ab0 <HLCD8_voidStoreCustomChar+0x1d8>
    3ab4:	8f 87       	std	Y+15, r24	; 0x0f
    {
        A_u8CGRAMIndex=A_u8CGRAMIndex*8;
        SET_BIT(A_u8CGRAMIndex,PIN6);
        CLR_BIT(A_u8CGRAMIndex,PIN7);
        HLCD8_voidSendCommand(A_u8CGRAMIndex);
        for(u8 i=0;i<8;i++)
    3ab6:	8f a1       	ldd	r24, Y+39	; 0x27
    3ab8:	8f 5f       	subi	r24, 0xFF	; 255
    3aba:	8f a3       	std	Y+39, r24	; 0x27
    3abc:	8f a1       	ldd	r24, Y+39	; 0x27
    3abe:	88 30       	cpi	r24, 0x08	; 8
    3ac0:	08 f4       	brcc	.+2      	; 0x3ac4 <HLCD8_voidStoreCustomChar+0x1ec>
    3ac2:	30 cf       	rjmp	.-416    	; 0x3924 <HLCD8_voidStoreCustomChar+0x4c>
        {
            HLCD8_voidSendData(A_u8Pattern[i]);
            _delay_us(60);
        }
    }
    HLCD8_voidSendCommand(RETURN_HOME);
    3ac4:	82 e0       	ldi	r24, 0x02	; 2
    3ac6:	0e 94 93 17 	call	0x2f26	; 0x2f26 <HLCD8_voidSendCommand>
    3aca:	80 e0       	ldi	r24, 0x00	; 0
    3acc:	90 e0       	ldi	r25, 0x00	; 0
    3ace:	a0 e0       	ldi	r26, 0x00	; 0
    3ad0:	b0 e4       	ldi	r27, 0x40	; 64
    3ad2:	8b 87       	std	Y+11, r24	; 0x0b
    3ad4:	9c 87       	std	Y+12, r25	; 0x0c
    3ad6:	ad 87       	std	Y+13, r26	; 0x0d
    3ad8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3ada:	6b 85       	ldd	r22, Y+11	; 0x0b
    3adc:	7c 85       	ldd	r23, Y+12	; 0x0c
    3ade:	8d 85       	ldd	r24, Y+13	; 0x0d
    3ae0:	9e 85       	ldd	r25, Y+14	; 0x0e
    3ae2:	20 e0       	ldi	r18, 0x00	; 0
    3ae4:	30 e0       	ldi	r19, 0x00	; 0
    3ae6:	4a ef       	ldi	r20, 0xFA	; 250
    3ae8:	54 e4       	ldi	r21, 0x44	; 68
    3aea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3aee:	dc 01       	movw	r26, r24
    3af0:	cb 01       	movw	r24, r22
    3af2:	8f 83       	std	Y+7, r24	; 0x07
    3af4:	98 87       	std	Y+8, r25	; 0x08
    3af6:	a9 87       	std	Y+9, r26	; 0x09
    3af8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3afa:	6f 81       	ldd	r22, Y+7	; 0x07
    3afc:	78 85       	ldd	r23, Y+8	; 0x08
    3afe:	89 85       	ldd	r24, Y+9	; 0x09
    3b00:	9a 85       	ldd	r25, Y+10	; 0x0a
    3b02:	20 e0       	ldi	r18, 0x00	; 0
    3b04:	30 e0       	ldi	r19, 0x00	; 0
    3b06:	40 e8       	ldi	r20, 0x80	; 128
    3b08:	5f e3       	ldi	r21, 0x3F	; 63
    3b0a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3b0e:	88 23       	and	r24, r24
    3b10:	2c f4       	brge	.+10     	; 0x3b1c <HLCD8_voidStoreCustomChar+0x244>
		__ticks = 1;
    3b12:	81 e0       	ldi	r24, 0x01	; 1
    3b14:	90 e0       	ldi	r25, 0x00	; 0
    3b16:	9e 83       	std	Y+6, r25	; 0x06
    3b18:	8d 83       	std	Y+5, r24	; 0x05
    3b1a:	3f c0       	rjmp	.+126    	; 0x3b9a <HLCD8_voidStoreCustomChar+0x2c2>
	else if (__tmp > 65535)
    3b1c:	6f 81       	ldd	r22, Y+7	; 0x07
    3b1e:	78 85       	ldd	r23, Y+8	; 0x08
    3b20:	89 85       	ldd	r24, Y+9	; 0x09
    3b22:	9a 85       	ldd	r25, Y+10	; 0x0a
    3b24:	20 e0       	ldi	r18, 0x00	; 0
    3b26:	3f ef       	ldi	r19, 0xFF	; 255
    3b28:	4f e7       	ldi	r20, 0x7F	; 127
    3b2a:	57 e4       	ldi	r21, 0x47	; 71
    3b2c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3b30:	18 16       	cp	r1, r24
    3b32:	4c f5       	brge	.+82     	; 0x3b86 <HLCD8_voidStoreCustomChar+0x2ae>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3b34:	6b 85       	ldd	r22, Y+11	; 0x0b
    3b36:	7c 85       	ldd	r23, Y+12	; 0x0c
    3b38:	8d 85       	ldd	r24, Y+13	; 0x0d
    3b3a:	9e 85       	ldd	r25, Y+14	; 0x0e
    3b3c:	20 e0       	ldi	r18, 0x00	; 0
    3b3e:	30 e0       	ldi	r19, 0x00	; 0
    3b40:	40 e2       	ldi	r20, 0x20	; 32
    3b42:	51 e4       	ldi	r21, 0x41	; 65
    3b44:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3b48:	dc 01       	movw	r26, r24
    3b4a:	cb 01       	movw	r24, r22
    3b4c:	bc 01       	movw	r22, r24
    3b4e:	cd 01       	movw	r24, r26
    3b50:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3b54:	dc 01       	movw	r26, r24
    3b56:	cb 01       	movw	r24, r22
    3b58:	9e 83       	std	Y+6, r25	; 0x06
    3b5a:	8d 83       	std	Y+5, r24	; 0x05
    3b5c:	0f c0       	rjmp	.+30     	; 0x3b7c <HLCD8_voidStoreCustomChar+0x2a4>
    3b5e:	88 ec       	ldi	r24, 0xC8	; 200
    3b60:	90 e0       	ldi	r25, 0x00	; 0
    3b62:	9c 83       	std	Y+4, r25	; 0x04
    3b64:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3b66:	8b 81       	ldd	r24, Y+3	; 0x03
    3b68:	9c 81       	ldd	r25, Y+4	; 0x04
    3b6a:	01 97       	sbiw	r24, 0x01	; 1
    3b6c:	f1 f7       	brne	.-4      	; 0x3b6a <HLCD8_voidStoreCustomChar+0x292>
    3b6e:	9c 83       	std	Y+4, r25	; 0x04
    3b70:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3b72:	8d 81       	ldd	r24, Y+5	; 0x05
    3b74:	9e 81       	ldd	r25, Y+6	; 0x06
    3b76:	01 97       	sbiw	r24, 0x01	; 1
    3b78:	9e 83       	std	Y+6, r25	; 0x06
    3b7a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3b7c:	8d 81       	ldd	r24, Y+5	; 0x05
    3b7e:	9e 81       	ldd	r25, Y+6	; 0x06
    3b80:	00 97       	sbiw	r24, 0x00	; 0
    3b82:	69 f7       	brne	.-38     	; 0x3b5e <HLCD8_voidStoreCustomChar+0x286>
    3b84:	14 c0       	rjmp	.+40     	; 0x3bae <HLCD8_voidStoreCustomChar+0x2d6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3b86:	6f 81       	ldd	r22, Y+7	; 0x07
    3b88:	78 85       	ldd	r23, Y+8	; 0x08
    3b8a:	89 85       	ldd	r24, Y+9	; 0x09
    3b8c:	9a 85       	ldd	r25, Y+10	; 0x0a
    3b8e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3b92:	dc 01       	movw	r26, r24
    3b94:	cb 01       	movw	r24, r22
    3b96:	9e 83       	std	Y+6, r25	; 0x06
    3b98:	8d 83       	std	Y+5, r24	; 0x05
    3b9a:	8d 81       	ldd	r24, Y+5	; 0x05
    3b9c:	9e 81       	ldd	r25, Y+6	; 0x06
    3b9e:	9a 83       	std	Y+2, r25	; 0x02
    3ba0:	89 83       	std	Y+1, r24	; 0x01
    3ba2:	89 81       	ldd	r24, Y+1	; 0x01
    3ba4:	9a 81       	ldd	r25, Y+2	; 0x02
    3ba6:	01 97       	sbiw	r24, 0x01	; 1
    3ba8:	f1 f7       	brne	.-4      	; 0x3ba6 <HLCD8_voidStoreCustomChar+0x2ce>
    3baa:	9a 83       	std	Y+2, r25	; 0x02
    3bac:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(2);

}
    3bae:	ab 96       	adiw	r28, 0x2b	; 43
    3bb0:	0f b6       	in	r0, 0x3f	; 63
    3bb2:	f8 94       	cli
    3bb4:	de bf       	out	0x3e, r29	; 62
    3bb6:	0f be       	out	0x3f, r0	; 63
    3bb8:	cd bf       	out	0x3d, r28	; 61
    3bba:	cf 91       	pop	r28
    3bbc:	df 91       	pop	r29
    3bbe:	08 95       	ret

00003bc0 <HLCD8_voidDisplayCustomChar>:

void HLCD8_voidDisplayCustomChar(u8 A_u8CGRAMIndex,u8 A_u8Row,u8 A_u8Col)
{
    3bc0:	df 93       	push	r29
    3bc2:	cf 93       	push	r28
    3bc4:	00 d0       	rcall	.+0      	; 0x3bc6 <HLCD8_voidDisplayCustomChar+0x6>
    3bc6:	0f 92       	push	r0
    3bc8:	cd b7       	in	r28, 0x3d	; 61
    3bca:	de b7       	in	r29, 0x3e	; 62
    3bcc:	89 83       	std	Y+1, r24	; 0x01
    3bce:	6a 83       	std	Y+2, r22	; 0x02
    3bd0:	4b 83       	std	Y+3, r20	; 0x03
    HLCD8_voidGoToPos(A_u8Row,A_u8Col);
    3bd2:	8a 81       	ldd	r24, Y+2	; 0x02
    3bd4:	6b 81       	ldd	r22, Y+3	; 0x03
    3bd6:	0e 94 67 1b 	call	0x36ce	; 0x36ce <HLCD8_voidGoToPos>
    HLCD8_voidSendData(A_u8CGRAMIndex);
    3bda:	89 81       	ldd	r24, Y+1	; 0x01
    3bdc:	0e 94 31 18 	call	0x3062	; 0x3062 <HLCD8_voidSendData>
    3be0:	0f 90       	pop	r0
    3be2:	0f 90       	pop	r0
    3be4:	0f 90       	pop	r0
    3be6:	cf 91       	pop	r28
    3be8:	df 91       	pop	r29
    3bea:	08 95       	ret

00003bec <HSSD_voidDisplay>:
#include "../Include/HAL/SSD/SSD_Private.h"
#include "../Include/HAL/SSD/SSD_Configuration.h"

#include <util/delay.h>
void HSSD_voidDisplay(u8 A_u8Number,u8 A_u8PortId)
{
    3bec:	df 93       	push	r29
    3bee:	cf 93       	push	r28
    3bf0:	00 d0       	rcall	.+0      	; 0x3bf2 <HSSD_voidDisplay+0x6>
    3bf2:	00 d0       	rcall	.+0      	; 0x3bf4 <HSSD_voidDisplay+0x8>
    3bf4:	cd b7       	in	r28, 0x3d	; 61
    3bf6:	de b7       	in	r29, 0x3e	; 62
    3bf8:	89 83       	std	Y+1, r24	; 0x01
    3bfa:	6a 83       	std	Y+2, r22	; 0x02
	switch(A_u8Number)
    3bfc:	89 81       	ldd	r24, Y+1	; 0x01
    3bfe:	28 2f       	mov	r18, r24
    3c00:	30 e0       	ldi	r19, 0x00	; 0
    3c02:	3c 83       	std	Y+4, r19	; 0x04
    3c04:	2b 83       	std	Y+3, r18	; 0x03
    3c06:	8b 81       	ldd	r24, Y+3	; 0x03
    3c08:	9c 81       	ldd	r25, Y+4	; 0x04
    3c0a:	8b 35       	cpi	r24, 0x5B	; 91
    3c0c:	91 05       	cpc	r25, r1
    3c0e:	09 f4       	brne	.+2      	; 0x3c12 <HSSD_voidDisplay+0x26>
    3c10:	4c c0       	rjmp	.+152    	; 0x3caa <HSSD_voidDisplay+0xbe>
    3c12:	2b 81       	ldd	r18, Y+3	; 0x03
    3c14:	3c 81       	ldd	r19, Y+4	; 0x04
    3c16:	2c 35       	cpi	r18, 0x5C	; 92
    3c18:	31 05       	cpc	r19, r1
    3c1a:	e4 f4       	brge	.+56     	; 0x3c54 <HSSD_voidDisplay+0x68>
    3c1c:	8b 81       	ldd	r24, Y+3	; 0x03
    3c1e:	9c 81       	ldd	r25, Y+4	; 0x04
    3c20:	87 30       	cpi	r24, 0x07	; 7
    3c22:	91 05       	cpc	r25, r1
    3c24:	09 f4       	brne	.+2      	; 0x3c28 <HSSD_voidDisplay+0x3c>
    3c26:	5a c0       	rjmp	.+180    	; 0x3cdc <HSSD_voidDisplay+0xf0>
    3c28:	2b 81       	ldd	r18, Y+3	; 0x03
    3c2a:	3c 81       	ldd	r19, Y+4	; 0x04
    3c2c:	28 30       	cpi	r18, 0x08	; 8
    3c2e:	31 05       	cpc	r19, r1
    3c30:	34 f4       	brge	.+12     	; 0x3c3e <HSSD_voidDisplay+0x52>
    3c32:	8b 81       	ldd	r24, Y+3	; 0x03
    3c34:	9c 81       	ldd	r25, Y+4	; 0x04
    3c36:	86 30       	cpi	r24, 0x06	; 6
    3c38:	91 05       	cpc	r25, r1
    3c3a:	91 f1       	breq	.+100    	; 0x3ca0 <HSSD_voidDisplay+0xb4>
    3c3c:	5d c0       	rjmp	.+186    	; 0x3cf8 <HSSD_voidDisplay+0x10c>
    3c3e:	2b 81       	ldd	r18, Y+3	; 0x03
    3c40:	3c 81       	ldd	r19, Y+4	; 0x04
    3c42:	2f 33       	cpi	r18, 0x3F	; 63
    3c44:	31 05       	cpc	r19, r1
    3c46:	39 f1       	breq	.+78     	; 0x3c96 <HSSD_voidDisplay+0xaa>
    3c48:	8b 81       	ldd	r24, Y+3	; 0x03
    3c4a:	9c 81       	ldd	r25, Y+4	; 0x04
    3c4c:	8f 34       	cpi	r24, 0x4F	; 79
    3c4e:	91 05       	cpc	r25, r1
    3c50:	89 f1       	breq	.+98     	; 0x3cb4 <HSSD_voidDisplay+0xc8>
    3c52:	52 c0       	rjmp	.+164    	; 0x3cf8 <HSSD_voidDisplay+0x10c>
    3c54:	2b 81       	ldd	r18, Y+3	; 0x03
    3c56:	3c 81       	ldd	r19, Y+4	; 0x04
    3c58:	2f 36       	cpi	r18, 0x6F	; 111
    3c5a:	31 05       	cpc	r19, r1
    3c5c:	09 f4       	brne	.+2      	; 0x3c60 <HSSD_voidDisplay+0x74>
    3c5e:	48 c0       	rjmp	.+144    	; 0x3cf0 <HSSD_voidDisplay+0x104>
    3c60:	8b 81       	ldd	r24, Y+3	; 0x03
    3c62:	9c 81       	ldd	r25, Y+4	; 0x04
    3c64:	80 37       	cpi	r24, 0x70	; 112
    3c66:	91 05       	cpc	r25, r1
    3c68:	5c f4       	brge	.+22     	; 0x3c80 <HSSD_voidDisplay+0x94>
    3c6a:	2b 81       	ldd	r18, Y+3	; 0x03
    3c6c:	3c 81       	ldd	r19, Y+4	; 0x04
    3c6e:	26 36       	cpi	r18, 0x66	; 102
    3c70:	31 05       	cpc	r19, r1
    3c72:	29 f1       	breq	.+74     	; 0x3cbe <HSSD_voidDisplay+0xd2>
    3c74:	8b 81       	ldd	r24, Y+3	; 0x03
    3c76:	9c 81       	ldd	r25, Y+4	; 0x04
    3c78:	8d 36       	cpi	r24, 0x6D	; 109
    3c7a:	91 05       	cpc	r25, r1
    3c7c:	29 f1       	breq	.+74     	; 0x3cc8 <HSSD_voidDisplay+0xdc>
    3c7e:	3c c0       	rjmp	.+120    	; 0x3cf8 <HSSD_voidDisplay+0x10c>
    3c80:	2b 81       	ldd	r18, Y+3	; 0x03
    3c82:	3c 81       	ldd	r19, Y+4	; 0x04
    3c84:	2d 37       	cpi	r18, 0x7D	; 125
    3c86:	31 05       	cpc	r19, r1
    3c88:	21 f1       	breq	.+72     	; 0x3cd2 <HSSD_voidDisplay+0xe6>
    3c8a:	8b 81       	ldd	r24, Y+3	; 0x03
    3c8c:	9c 81       	ldd	r25, Y+4	; 0x04
    3c8e:	8f 37       	cpi	r24, 0x7F	; 127
    3c90:	91 05       	cpc	r25, r1
    3c92:	49 f1       	breq	.+82     	; 0x3ce6 <HSSD_voidDisplay+0xfa>
    3c94:	31 c0       	rjmp	.+98     	; 0x3cf8 <HSSD_voidDisplay+0x10c>
	{
	case ZERO:
		MDIO_voidSetPortValue(A_u8PortId,ZERO);
    3c96:	8a 81       	ldd	r24, Y+2	; 0x02
    3c98:	6f e3       	ldi	r22, 0x3F	; 63
    3c9a:	0e 94 e2 0a 	call	0x15c4	; 0x15c4 <MDIO_voidSetPortValue>
    3c9e:	2c c0       	rjmp	.+88     	; 0x3cf8 <HSSD_voidDisplay+0x10c>
		break;
	case ONE:
		MDIO_voidSetPortValue(A_u8PortId,ONE);
    3ca0:	8a 81       	ldd	r24, Y+2	; 0x02
    3ca2:	66 e0       	ldi	r22, 0x06	; 6
    3ca4:	0e 94 e2 0a 	call	0x15c4	; 0x15c4 <MDIO_voidSetPortValue>
    3ca8:	27 c0       	rjmp	.+78     	; 0x3cf8 <HSSD_voidDisplay+0x10c>
		break;
	case TWO:
		MDIO_voidSetPortValue(A_u8PortId,TWO);
    3caa:	8a 81       	ldd	r24, Y+2	; 0x02
    3cac:	6b e5       	ldi	r22, 0x5B	; 91
    3cae:	0e 94 e2 0a 	call	0x15c4	; 0x15c4 <MDIO_voidSetPortValue>
    3cb2:	22 c0       	rjmp	.+68     	; 0x3cf8 <HSSD_voidDisplay+0x10c>
		break;
	case THREE:
		MDIO_voidSetPortValue(A_u8PortId,THREE);
    3cb4:	8a 81       	ldd	r24, Y+2	; 0x02
    3cb6:	6f e4       	ldi	r22, 0x4F	; 79
    3cb8:	0e 94 e2 0a 	call	0x15c4	; 0x15c4 <MDIO_voidSetPortValue>
    3cbc:	1d c0       	rjmp	.+58     	; 0x3cf8 <HSSD_voidDisplay+0x10c>
		break;
	case FOUR:
		MDIO_voidSetPortValue(A_u8PortId,FOUR);
    3cbe:	8a 81       	ldd	r24, Y+2	; 0x02
    3cc0:	66 e6       	ldi	r22, 0x66	; 102
    3cc2:	0e 94 e2 0a 	call	0x15c4	; 0x15c4 <MDIO_voidSetPortValue>
    3cc6:	18 c0       	rjmp	.+48     	; 0x3cf8 <HSSD_voidDisplay+0x10c>
		break;
	case FIVE:
		MDIO_voidSetPortValue(A_u8PortId,FIVE);
    3cc8:	8a 81       	ldd	r24, Y+2	; 0x02
    3cca:	6d e6       	ldi	r22, 0x6D	; 109
    3ccc:	0e 94 e2 0a 	call	0x15c4	; 0x15c4 <MDIO_voidSetPortValue>
    3cd0:	13 c0       	rjmp	.+38     	; 0x3cf8 <HSSD_voidDisplay+0x10c>
		break;
	case SIX:
		MDIO_voidSetPortValue(A_u8PortId,SIX);
    3cd2:	8a 81       	ldd	r24, Y+2	; 0x02
    3cd4:	6d e7       	ldi	r22, 0x7D	; 125
    3cd6:	0e 94 e2 0a 	call	0x15c4	; 0x15c4 <MDIO_voidSetPortValue>
    3cda:	0e c0       	rjmp	.+28     	; 0x3cf8 <HSSD_voidDisplay+0x10c>
		break;
	case SEVEN:
		MDIO_voidSetPortValue(A_u8PortId,SEVEN);
    3cdc:	8a 81       	ldd	r24, Y+2	; 0x02
    3cde:	67 e0       	ldi	r22, 0x07	; 7
    3ce0:	0e 94 e2 0a 	call	0x15c4	; 0x15c4 <MDIO_voidSetPortValue>
    3ce4:	09 c0       	rjmp	.+18     	; 0x3cf8 <HSSD_voidDisplay+0x10c>
		break;
	case EIGHT:
		MDIO_voidSetPortValue(A_u8PortId,EIGHT);
    3ce6:	8a 81       	ldd	r24, Y+2	; 0x02
    3ce8:	6f e7       	ldi	r22, 0x7F	; 127
    3cea:	0e 94 e2 0a 	call	0x15c4	; 0x15c4 <MDIO_voidSetPortValue>
    3cee:	04 c0       	rjmp	.+8      	; 0x3cf8 <HSSD_voidDisplay+0x10c>
		break;
	case NINE:
		MDIO_voidSetPortValue(A_u8PortId,NINE);
    3cf0:	8a 81       	ldd	r24, Y+2	; 0x02
    3cf2:	6f e6       	ldi	r22, 0x6F	; 111
    3cf4:	0e 94 e2 0a 	call	0x15c4	; 0x15c4 <MDIO_voidSetPortValue>
		break;
	}
}
    3cf8:	0f 90       	pop	r0
    3cfa:	0f 90       	pop	r0
    3cfc:	0f 90       	pop	r0
    3cfe:	0f 90       	pop	r0
    3d00:	cf 91       	pop	r28
    3d02:	df 91       	pop	r29
    3d04:	08 95       	ret

00003d06 <HSSD_voidDisplayAscending>:

void HSSD_voidDisplayAscending(u8 A_u8PortId)
{
    3d06:	df 93       	push	r29
    3d08:	cf 93       	push	r28
    3d0a:	cd b7       	in	r28, 0x3d	; 61
    3d0c:	de b7       	in	r29, 0x3e	; 62
    3d0e:	6f 97       	sbiw	r28, 0x1f	; 31
    3d10:	0f b6       	in	r0, 0x3f	; 63
    3d12:	f8 94       	cli
    3d14:	de bf       	out	0x3e, r29	; 62
    3d16:	0f be       	out	0x3f, r0	; 63
    3d18:	cd bf       	out	0x3d, r28	; 61
    3d1a:	8a 8f       	std	Y+26, r24	; 0x1a
u8 arr[]={ZERO,ONE,TWO,THREE,FOUR,FIVE,SIX,SEVEN,EIGHT,NINE};
    3d1c:	ce 01       	movw	r24, r28
    3d1e:	40 96       	adiw	r24, 0x10	; 16
    3d20:	9c 8f       	std	Y+28, r25	; 0x1c
    3d22:	8b 8f       	std	Y+27, r24	; 0x1b
    3d24:	e6 e8       	ldi	r30, 0x86	; 134
    3d26:	f0 e0       	ldi	r31, 0x00	; 0
    3d28:	fe 8f       	std	Y+30, r31	; 0x1e
    3d2a:	ed 8f       	std	Y+29, r30	; 0x1d
    3d2c:	fa e0       	ldi	r31, 0x0A	; 10
    3d2e:	ff 8f       	std	Y+31, r31	; 0x1f
    3d30:	ed 8d       	ldd	r30, Y+29	; 0x1d
    3d32:	fe 8d       	ldd	r31, Y+30	; 0x1e
    3d34:	00 80       	ld	r0, Z
    3d36:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3d38:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3d3a:	01 96       	adiw	r24, 0x01	; 1
    3d3c:	9e 8f       	std	Y+30, r25	; 0x1e
    3d3e:	8d 8f       	std	Y+29, r24	; 0x1d
    3d40:	eb 8d       	ldd	r30, Y+27	; 0x1b
    3d42:	fc 8d       	ldd	r31, Y+28	; 0x1c
    3d44:	00 82       	st	Z, r0
    3d46:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3d48:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3d4a:	01 96       	adiw	r24, 0x01	; 1
    3d4c:	9c 8f       	std	Y+28, r25	; 0x1c
    3d4e:	8b 8f       	std	Y+27, r24	; 0x1b
    3d50:	9f 8d       	ldd	r25, Y+31	; 0x1f
    3d52:	91 50       	subi	r25, 0x01	; 1
    3d54:	9f 8f       	std	Y+31, r25	; 0x1f
    3d56:	ef 8d       	ldd	r30, Y+31	; 0x1f
    3d58:	ee 23       	and	r30, r30
    3d5a:	51 f7       	brne	.-44     	; 0x3d30 <HSSD_voidDisplayAscending+0x2a>
	for(u8 i=0;i<10;i++)
    3d5c:	1f 86       	std	Y+15, r1	; 0x0f
    3d5e:	81 c0       	rjmp	.+258    	; 0x3e62 <HSSD_voidDisplayAscending+0x15c>
	{
		HSSD_voidDisplay(arr[i],A_u8PortId);
    3d60:	8f 85       	ldd	r24, Y+15	; 0x0f
    3d62:	28 2f       	mov	r18, r24
    3d64:	30 e0       	ldi	r19, 0x00	; 0
    3d66:	ce 01       	movw	r24, r28
    3d68:	40 96       	adiw	r24, 0x10	; 16
    3d6a:	fc 01       	movw	r30, r24
    3d6c:	e2 0f       	add	r30, r18
    3d6e:	f3 1f       	adc	r31, r19
    3d70:	80 81       	ld	r24, Z
    3d72:	6a 8d       	ldd	r22, Y+26	; 0x1a
    3d74:	0e 94 f6 1d 	call	0x3bec	; 0x3bec <HSSD_voidDisplay>
    3d78:	80 e0       	ldi	r24, 0x00	; 0
    3d7a:	90 e0       	ldi	r25, 0x00	; 0
    3d7c:	aa e7       	ldi	r26, 0x7A	; 122
    3d7e:	b4 e4       	ldi	r27, 0x44	; 68
    3d80:	8b 87       	std	Y+11, r24	; 0x0b
    3d82:	9c 87       	std	Y+12, r25	; 0x0c
    3d84:	ad 87       	std	Y+13, r26	; 0x0d
    3d86:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3d88:	6b 85       	ldd	r22, Y+11	; 0x0b
    3d8a:	7c 85       	ldd	r23, Y+12	; 0x0c
    3d8c:	8d 85       	ldd	r24, Y+13	; 0x0d
    3d8e:	9e 85       	ldd	r25, Y+14	; 0x0e
    3d90:	20 e0       	ldi	r18, 0x00	; 0
    3d92:	30 e0       	ldi	r19, 0x00	; 0
    3d94:	4a ef       	ldi	r20, 0xFA	; 250
    3d96:	54 e4       	ldi	r21, 0x44	; 68
    3d98:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3d9c:	dc 01       	movw	r26, r24
    3d9e:	cb 01       	movw	r24, r22
    3da0:	8f 83       	std	Y+7, r24	; 0x07
    3da2:	98 87       	std	Y+8, r25	; 0x08
    3da4:	a9 87       	std	Y+9, r26	; 0x09
    3da6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3da8:	6f 81       	ldd	r22, Y+7	; 0x07
    3daa:	78 85       	ldd	r23, Y+8	; 0x08
    3dac:	89 85       	ldd	r24, Y+9	; 0x09
    3dae:	9a 85       	ldd	r25, Y+10	; 0x0a
    3db0:	20 e0       	ldi	r18, 0x00	; 0
    3db2:	30 e0       	ldi	r19, 0x00	; 0
    3db4:	40 e8       	ldi	r20, 0x80	; 128
    3db6:	5f e3       	ldi	r21, 0x3F	; 63
    3db8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3dbc:	88 23       	and	r24, r24
    3dbe:	2c f4       	brge	.+10     	; 0x3dca <HSSD_voidDisplayAscending+0xc4>
		__ticks = 1;
    3dc0:	81 e0       	ldi	r24, 0x01	; 1
    3dc2:	90 e0       	ldi	r25, 0x00	; 0
    3dc4:	9e 83       	std	Y+6, r25	; 0x06
    3dc6:	8d 83       	std	Y+5, r24	; 0x05
    3dc8:	3f c0       	rjmp	.+126    	; 0x3e48 <HSSD_voidDisplayAscending+0x142>
	else if (__tmp > 65535)
    3dca:	6f 81       	ldd	r22, Y+7	; 0x07
    3dcc:	78 85       	ldd	r23, Y+8	; 0x08
    3dce:	89 85       	ldd	r24, Y+9	; 0x09
    3dd0:	9a 85       	ldd	r25, Y+10	; 0x0a
    3dd2:	20 e0       	ldi	r18, 0x00	; 0
    3dd4:	3f ef       	ldi	r19, 0xFF	; 255
    3dd6:	4f e7       	ldi	r20, 0x7F	; 127
    3dd8:	57 e4       	ldi	r21, 0x47	; 71
    3dda:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3dde:	18 16       	cp	r1, r24
    3de0:	4c f5       	brge	.+82     	; 0x3e34 <HSSD_voidDisplayAscending+0x12e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3de2:	6b 85       	ldd	r22, Y+11	; 0x0b
    3de4:	7c 85       	ldd	r23, Y+12	; 0x0c
    3de6:	8d 85       	ldd	r24, Y+13	; 0x0d
    3de8:	9e 85       	ldd	r25, Y+14	; 0x0e
    3dea:	20 e0       	ldi	r18, 0x00	; 0
    3dec:	30 e0       	ldi	r19, 0x00	; 0
    3dee:	40 e2       	ldi	r20, 0x20	; 32
    3df0:	51 e4       	ldi	r21, 0x41	; 65
    3df2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3df6:	dc 01       	movw	r26, r24
    3df8:	cb 01       	movw	r24, r22
    3dfa:	bc 01       	movw	r22, r24
    3dfc:	cd 01       	movw	r24, r26
    3dfe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3e02:	dc 01       	movw	r26, r24
    3e04:	cb 01       	movw	r24, r22
    3e06:	9e 83       	std	Y+6, r25	; 0x06
    3e08:	8d 83       	std	Y+5, r24	; 0x05
    3e0a:	0f c0       	rjmp	.+30     	; 0x3e2a <HSSD_voidDisplayAscending+0x124>
    3e0c:	88 ec       	ldi	r24, 0xC8	; 200
    3e0e:	90 e0       	ldi	r25, 0x00	; 0
    3e10:	9c 83       	std	Y+4, r25	; 0x04
    3e12:	8b 83       	std	Y+3, r24	; 0x03
    3e14:	8b 81       	ldd	r24, Y+3	; 0x03
    3e16:	9c 81       	ldd	r25, Y+4	; 0x04
    3e18:	01 97       	sbiw	r24, 0x01	; 1
    3e1a:	f1 f7       	brne	.-4      	; 0x3e18 <HSSD_voidDisplayAscending+0x112>
    3e1c:	9c 83       	std	Y+4, r25	; 0x04
    3e1e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3e20:	8d 81       	ldd	r24, Y+5	; 0x05
    3e22:	9e 81       	ldd	r25, Y+6	; 0x06
    3e24:	01 97       	sbiw	r24, 0x01	; 1
    3e26:	9e 83       	std	Y+6, r25	; 0x06
    3e28:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3e2a:	8d 81       	ldd	r24, Y+5	; 0x05
    3e2c:	9e 81       	ldd	r25, Y+6	; 0x06
    3e2e:	00 97       	sbiw	r24, 0x00	; 0
    3e30:	69 f7       	brne	.-38     	; 0x3e0c <HSSD_voidDisplayAscending+0x106>
    3e32:	14 c0       	rjmp	.+40     	; 0x3e5c <HSSD_voidDisplayAscending+0x156>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3e34:	6f 81       	ldd	r22, Y+7	; 0x07
    3e36:	78 85       	ldd	r23, Y+8	; 0x08
    3e38:	89 85       	ldd	r24, Y+9	; 0x09
    3e3a:	9a 85       	ldd	r25, Y+10	; 0x0a
    3e3c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3e40:	dc 01       	movw	r26, r24
    3e42:	cb 01       	movw	r24, r22
    3e44:	9e 83       	std	Y+6, r25	; 0x06
    3e46:	8d 83       	std	Y+5, r24	; 0x05
    3e48:	8d 81       	ldd	r24, Y+5	; 0x05
    3e4a:	9e 81       	ldd	r25, Y+6	; 0x06
    3e4c:	9a 83       	std	Y+2, r25	; 0x02
    3e4e:	89 83       	std	Y+1, r24	; 0x01
    3e50:	89 81       	ldd	r24, Y+1	; 0x01
    3e52:	9a 81       	ldd	r25, Y+2	; 0x02
    3e54:	01 97       	sbiw	r24, 0x01	; 1
    3e56:	f1 f7       	brne	.-4      	; 0x3e54 <HSSD_voidDisplayAscending+0x14e>
    3e58:	9a 83       	std	Y+2, r25	; 0x02
    3e5a:	89 83       	std	Y+1, r24	; 0x01
}

void HSSD_voidDisplayAscending(u8 A_u8PortId)
{
u8 arr[]={ZERO,ONE,TWO,THREE,FOUR,FIVE,SIX,SEVEN,EIGHT,NINE};
	for(u8 i=0;i<10;i++)
    3e5c:	8f 85       	ldd	r24, Y+15	; 0x0f
    3e5e:	8f 5f       	subi	r24, 0xFF	; 255
    3e60:	8f 87       	std	Y+15, r24	; 0x0f
    3e62:	8f 85       	ldd	r24, Y+15	; 0x0f
    3e64:	8a 30       	cpi	r24, 0x0A	; 10
    3e66:	08 f4       	brcc	.+2      	; 0x3e6a <HSSD_voidDisplayAscending+0x164>
    3e68:	7b cf       	rjmp	.-266    	; 0x3d60 <HSSD_voidDisplayAscending+0x5a>
	{
		HSSD_voidDisplay(arr[i],A_u8PortId);
		_delay_ms(SSD_DELAY);
	}
}
    3e6a:	6f 96       	adiw	r28, 0x1f	; 31
    3e6c:	0f b6       	in	r0, 0x3f	; 63
    3e6e:	f8 94       	cli
    3e70:	de bf       	out	0x3e, r29	; 62
    3e72:	0f be       	out	0x3f, r0	; 63
    3e74:	cd bf       	out	0x3d, r28	; 61
    3e76:	cf 91       	pop	r28
    3e78:	df 91       	pop	r29
    3e7a:	08 95       	ret

00003e7c <HSSD_voidDisplayDescending>:

void HSSD_voidDisplayDescending(u8 A_u8PortId)
{
    3e7c:	df 93       	push	r29
    3e7e:	cf 93       	push	r28
    3e80:	cd b7       	in	r28, 0x3d	; 61
    3e82:	de b7       	in	r29, 0x3e	; 62
    3e84:	6f 97       	sbiw	r28, 0x1f	; 31
    3e86:	0f b6       	in	r0, 0x3f	; 63
    3e88:	f8 94       	cli
    3e8a:	de bf       	out	0x3e, r29	; 62
    3e8c:	0f be       	out	0x3f, r0	; 63
    3e8e:	cd bf       	out	0x3d, r28	; 61
    3e90:	8a 8f       	std	Y+26, r24	; 0x1a
u8 arr[]={ZERO,ONE,TWO,THREE,FOUR,FIVE,SIX,SEVEN,EIGHT,NINE};
    3e92:	ce 01       	movw	r24, r28
    3e94:	40 96       	adiw	r24, 0x10	; 16
    3e96:	9c 8f       	std	Y+28, r25	; 0x1c
    3e98:	8b 8f       	std	Y+27, r24	; 0x1b
    3e9a:	e0 e9       	ldi	r30, 0x90	; 144
    3e9c:	f0 e0       	ldi	r31, 0x00	; 0
    3e9e:	fe 8f       	std	Y+30, r31	; 0x1e
    3ea0:	ed 8f       	std	Y+29, r30	; 0x1d
    3ea2:	fa e0       	ldi	r31, 0x0A	; 10
    3ea4:	ff 8f       	std	Y+31, r31	; 0x1f
    3ea6:	ed 8d       	ldd	r30, Y+29	; 0x1d
    3ea8:	fe 8d       	ldd	r31, Y+30	; 0x1e
    3eaa:	00 80       	ld	r0, Z
    3eac:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3eae:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3eb0:	01 96       	adiw	r24, 0x01	; 1
    3eb2:	9e 8f       	std	Y+30, r25	; 0x1e
    3eb4:	8d 8f       	std	Y+29, r24	; 0x1d
    3eb6:	eb 8d       	ldd	r30, Y+27	; 0x1b
    3eb8:	fc 8d       	ldd	r31, Y+28	; 0x1c
    3eba:	00 82       	st	Z, r0
    3ebc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3ebe:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3ec0:	01 96       	adiw	r24, 0x01	; 1
    3ec2:	9c 8f       	std	Y+28, r25	; 0x1c
    3ec4:	8b 8f       	std	Y+27, r24	; 0x1b
    3ec6:	9f 8d       	ldd	r25, Y+31	; 0x1f
    3ec8:	91 50       	subi	r25, 0x01	; 1
    3eca:	9f 8f       	std	Y+31, r25	; 0x1f
    3ecc:	ef 8d       	ldd	r30, Y+31	; 0x1f
    3ece:	ee 23       	and	r30, r30
    3ed0:	51 f7       	brne	.-44     	; 0x3ea6 <HSSD_voidDisplayDescending+0x2a>
	for(u8 j=9;j>=0;j--)
    3ed2:	89 e0       	ldi	r24, 0x09	; 9
    3ed4:	8f 87       	std	Y+15, r24	; 0x0f
	{
		HSSD_voidDisplay(arr[j],A_u8PortId);
    3ed6:	8f 85       	ldd	r24, Y+15	; 0x0f
    3ed8:	28 2f       	mov	r18, r24
    3eda:	30 e0       	ldi	r19, 0x00	; 0
    3edc:	ce 01       	movw	r24, r28
    3ede:	40 96       	adiw	r24, 0x10	; 16
    3ee0:	fc 01       	movw	r30, r24
    3ee2:	e2 0f       	add	r30, r18
    3ee4:	f3 1f       	adc	r31, r19
    3ee6:	80 81       	ld	r24, Z
    3ee8:	6a 8d       	ldd	r22, Y+26	; 0x1a
    3eea:	0e 94 f6 1d 	call	0x3bec	; 0x3bec <HSSD_voidDisplay>
    3eee:	80 e0       	ldi	r24, 0x00	; 0
    3ef0:	90 e0       	ldi	r25, 0x00	; 0
    3ef2:	aa e7       	ldi	r26, 0x7A	; 122
    3ef4:	b4 e4       	ldi	r27, 0x44	; 68
    3ef6:	8b 87       	std	Y+11, r24	; 0x0b
    3ef8:	9c 87       	std	Y+12, r25	; 0x0c
    3efa:	ad 87       	std	Y+13, r26	; 0x0d
    3efc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3efe:	6b 85       	ldd	r22, Y+11	; 0x0b
    3f00:	7c 85       	ldd	r23, Y+12	; 0x0c
    3f02:	8d 85       	ldd	r24, Y+13	; 0x0d
    3f04:	9e 85       	ldd	r25, Y+14	; 0x0e
    3f06:	20 e0       	ldi	r18, 0x00	; 0
    3f08:	30 e0       	ldi	r19, 0x00	; 0
    3f0a:	4a ef       	ldi	r20, 0xFA	; 250
    3f0c:	54 e4       	ldi	r21, 0x44	; 68
    3f0e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3f12:	dc 01       	movw	r26, r24
    3f14:	cb 01       	movw	r24, r22
    3f16:	8f 83       	std	Y+7, r24	; 0x07
    3f18:	98 87       	std	Y+8, r25	; 0x08
    3f1a:	a9 87       	std	Y+9, r26	; 0x09
    3f1c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3f1e:	6f 81       	ldd	r22, Y+7	; 0x07
    3f20:	78 85       	ldd	r23, Y+8	; 0x08
    3f22:	89 85       	ldd	r24, Y+9	; 0x09
    3f24:	9a 85       	ldd	r25, Y+10	; 0x0a
    3f26:	20 e0       	ldi	r18, 0x00	; 0
    3f28:	30 e0       	ldi	r19, 0x00	; 0
    3f2a:	40 e8       	ldi	r20, 0x80	; 128
    3f2c:	5f e3       	ldi	r21, 0x3F	; 63
    3f2e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3f32:	88 23       	and	r24, r24
    3f34:	2c f4       	brge	.+10     	; 0x3f40 <HSSD_voidDisplayDescending+0xc4>
		__ticks = 1;
    3f36:	81 e0       	ldi	r24, 0x01	; 1
    3f38:	90 e0       	ldi	r25, 0x00	; 0
    3f3a:	9e 83       	std	Y+6, r25	; 0x06
    3f3c:	8d 83       	std	Y+5, r24	; 0x05
    3f3e:	3f c0       	rjmp	.+126    	; 0x3fbe <HSSD_voidDisplayDescending+0x142>
	else if (__tmp > 65535)
    3f40:	6f 81       	ldd	r22, Y+7	; 0x07
    3f42:	78 85       	ldd	r23, Y+8	; 0x08
    3f44:	89 85       	ldd	r24, Y+9	; 0x09
    3f46:	9a 85       	ldd	r25, Y+10	; 0x0a
    3f48:	20 e0       	ldi	r18, 0x00	; 0
    3f4a:	3f ef       	ldi	r19, 0xFF	; 255
    3f4c:	4f e7       	ldi	r20, 0x7F	; 127
    3f4e:	57 e4       	ldi	r21, 0x47	; 71
    3f50:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3f54:	18 16       	cp	r1, r24
    3f56:	4c f5       	brge	.+82     	; 0x3faa <HSSD_voidDisplayDescending+0x12e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3f58:	6b 85       	ldd	r22, Y+11	; 0x0b
    3f5a:	7c 85       	ldd	r23, Y+12	; 0x0c
    3f5c:	8d 85       	ldd	r24, Y+13	; 0x0d
    3f5e:	9e 85       	ldd	r25, Y+14	; 0x0e
    3f60:	20 e0       	ldi	r18, 0x00	; 0
    3f62:	30 e0       	ldi	r19, 0x00	; 0
    3f64:	40 e2       	ldi	r20, 0x20	; 32
    3f66:	51 e4       	ldi	r21, 0x41	; 65
    3f68:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3f6c:	dc 01       	movw	r26, r24
    3f6e:	cb 01       	movw	r24, r22
    3f70:	bc 01       	movw	r22, r24
    3f72:	cd 01       	movw	r24, r26
    3f74:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3f78:	dc 01       	movw	r26, r24
    3f7a:	cb 01       	movw	r24, r22
    3f7c:	9e 83       	std	Y+6, r25	; 0x06
    3f7e:	8d 83       	std	Y+5, r24	; 0x05
    3f80:	0f c0       	rjmp	.+30     	; 0x3fa0 <HSSD_voidDisplayDescending+0x124>
    3f82:	88 ec       	ldi	r24, 0xC8	; 200
    3f84:	90 e0       	ldi	r25, 0x00	; 0
    3f86:	9c 83       	std	Y+4, r25	; 0x04
    3f88:	8b 83       	std	Y+3, r24	; 0x03
    3f8a:	8b 81       	ldd	r24, Y+3	; 0x03
    3f8c:	9c 81       	ldd	r25, Y+4	; 0x04
    3f8e:	01 97       	sbiw	r24, 0x01	; 1
    3f90:	f1 f7       	brne	.-4      	; 0x3f8e <HSSD_voidDisplayDescending+0x112>
    3f92:	9c 83       	std	Y+4, r25	; 0x04
    3f94:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3f96:	8d 81       	ldd	r24, Y+5	; 0x05
    3f98:	9e 81       	ldd	r25, Y+6	; 0x06
    3f9a:	01 97       	sbiw	r24, 0x01	; 1
    3f9c:	9e 83       	std	Y+6, r25	; 0x06
    3f9e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3fa0:	8d 81       	ldd	r24, Y+5	; 0x05
    3fa2:	9e 81       	ldd	r25, Y+6	; 0x06
    3fa4:	00 97       	sbiw	r24, 0x00	; 0
    3fa6:	69 f7       	brne	.-38     	; 0x3f82 <HSSD_voidDisplayDescending+0x106>
    3fa8:	14 c0       	rjmp	.+40     	; 0x3fd2 <HSSD_voidDisplayDescending+0x156>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3faa:	6f 81       	ldd	r22, Y+7	; 0x07
    3fac:	78 85       	ldd	r23, Y+8	; 0x08
    3fae:	89 85       	ldd	r24, Y+9	; 0x09
    3fb0:	9a 85       	ldd	r25, Y+10	; 0x0a
    3fb2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3fb6:	dc 01       	movw	r26, r24
    3fb8:	cb 01       	movw	r24, r22
    3fba:	9e 83       	std	Y+6, r25	; 0x06
    3fbc:	8d 83       	std	Y+5, r24	; 0x05
    3fbe:	8d 81       	ldd	r24, Y+5	; 0x05
    3fc0:	9e 81       	ldd	r25, Y+6	; 0x06
    3fc2:	9a 83       	std	Y+2, r25	; 0x02
    3fc4:	89 83       	std	Y+1, r24	; 0x01
    3fc6:	89 81       	ldd	r24, Y+1	; 0x01
    3fc8:	9a 81       	ldd	r25, Y+2	; 0x02
    3fca:	01 97       	sbiw	r24, 0x01	; 1
    3fcc:	f1 f7       	brne	.-4      	; 0x3fca <HSSD_voidDisplayDescending+0x14e>
    3fce:	9a 83       	std	Y+2, r25	; 0x02
    3fd0:	89 83       	std	Y+1, r24	; 0x01
}

void HSSD_voidDisplayDescending(u8 A_u8PortId)
{
u8 arr[]={ZERO,ONE,TWO,THREE,FOUR,FIVE,SIX,SEVEN,EIGHT,NINE};
	for(u8 j=9;j>=0;j--)
    3fd2:	8f 85       	ldd	r24, Y+15	; 0x0f
    3fd4:	81 50       	subi	r24, 0x01	; 1
    3fd6:	8f 87       	std	Y+15, r24	; 0x0f
    3fd8:	7e cf       	rjmp	.-260    	; 0x3ed6 <HSSD_voidDisplayDescending+0x5a>

00003fda <HSTEP_voidFullStep>:
#include "../Include/HAL/STEPPER/STEPPER_Private.h"

#include <util/delay.h>

void HSTEP_voidFullStep()
{
    3fda:	df 93       	push	r29
    3fdc:	cf 93       	push	r28
    3fde:	cd b7       	in	r28, 0x3d	; 61
    3fe0:	de b7       	in	r29, 0x3e	; 62
    3fe2:	e8 97       	sbiw	r28, 0x38	; 56
    3fe4:	0f b6       	in	r0, 0x3f	; 63
    3fe6:	f8 94       	cli
    3fe8:	de bf       	out	0x3e, r29	; 62
    3fea:	0f be       	out	0x3f, r0	; 63
    3fec:	cd bf       	out	0x3d, r28	; 61
    MDIO_voidSetPinValue(STEPPER_PORT,BLUE_COIL_PIN,PIN_HIGH);
    3fee:	80 e0       	ldi	r24, 0x00	; 0
    3ff0:	60 e0       	ldi	r22, 0x00	; 0
    3ff2:	41 e0       	ldi	r20, 0x01	; 1
    3ff4:	0e 94 b6 08 	call	0x116c	; 0x116c <MDIO_voidSetPinValue>
    MDIO_voidSetPinValue(STEPPER_PORT,PINK_COIL_PIN,PIN_LOW);
    3ff8:	80 e0       	ldi	r24, 0x00	; 0
    3ffa:	61 e0       	ldi	r22, 0x01	; 1
    3ffc:	40 e0       	ldi	r20, 0x00	; 0
    3ffe:	0e 94 b6 08 	call	0x116c	; 0x116c <MDIO_voidSetPinValue>
    MDIO_voidSetPinValue(STEPPER_PORT,YELLOW_COIL_PIN,PIN_HIGH);
    4002:	80 e0       	ldi	r24, 0x00	; 0
    4004:	62 e0       	ldi	r22, 0x02	; 2
    4006:	41 e0       	ldi	r20, 0x01	; 1
    4008:	0e 94 b6 08 	call	0x116c	; 0x116c <MDIO_voidSetPinValue>
    MDIO_voidSetPinValue(STEPPER_PORT,ORANGE_COIL_PIN,PIN_HIGH);
    400c:	80 e0       	ldi	r24, 0x00	; 0
    400e:	63 e0       	ldi	r22, 0x03	; 3
    4010:	41 e0       	ldi	r20, 0x01	; 1
    4012:	0e 94 b6 08 	call	0x116c	; 0x116c <MDIO_voidSetPinValue>
    4016:	80 e0       	ldi	r24, 0x00	; 0
    4018:	90 e0       	ldi	r25, 0x00	; 0
    401a:	a0 e2       	ldi	r26, 0x20	; 32
    401c:	b1 e4       	ldi	r27, 0x41	; 65
    401e:	8d ab       	std	Y+53, r24	; 0x35
    4020:	9e ab       	std	Y+54, r25	; 0x36
    4022:	af ab       	std	Y+55, r26	; 0x37
    4024:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4026:	6d a9       	ldd	r22, Y+53	; 0x35
    4028:	7e a9       	ldd	r23, Y+54	; 0x36
    402a:	8f a9       	ldd	r24, Y+55	; 0x37
    402c:	98 ad       	ldd	r25, Y+56	; 0x38
    402e:	20 e0       	ldi	r18, 0x00	; 0
    4030:	30 e0       	ldi	r19, 0x00	; 0
    4032:	4a ef       	ldi	r20, 0xFA	; 250
    4034:	54 e4       	ldi	r21, 0x44	; 68
    4036:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    403a:	dc 01       	movw	r26, r24
    403c:	cb 01       	movw	r24, r22
    403e:	89 ab       	std	Y+49, r24	; 0x31
    4040:	9a ab       	std	Y+50, r25	; 0x32
    4042:	ab ab       	std	Y+51, r26	; 0x33
    4044:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    4046:	69 a9       	ldd	r22, Y+49	; 0x31
    4048:	7a a9       	ldd	r23, Y+50	; 0x32
    404a:	8b a9       	ldd	r24, Y+51	; 0x33
    404c:	9c a9       	ldd	r25, Y+52	; 0x34
    404e:	20 e0       	ldi	r18, 0x00	; 0
    4050:	30 e0       	ldi	r19, 0x00	; 0
    4052:	40 e8       	ldi	r20, 0x80	; 128
    4054:	5f e3       	ldi	r21, 0x3F	; 63
    4056:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    405a:	88 23       	and	r24, r24
    405c:	2c f4       	brge	.+10     	; 0x4068 <HSTEP_voidFullStep+0x8e>
		__ticks = 1;
    405e:	81 e0       	ldi	r24, 0x01	; 1
    4060:	90 e0       	ldi	r25, 0x00	; 0
    4062:	98 ab       	std	Y+48, r25	; 0x30
    4064:	8f a7       	std	Y+47, r24	; 0x2f
    4066:	3f c0       	rjmp	.+126    	; 0x40e6 <HSTEP_voidFullStep+0x10c>
	else if (__tmp > 65535)
    4068:	69 a9       	ldd	r22, Y+49	; 0x31
    406a:	7a a9       	ldd	r23, Y+50	; 0x32
    406c:	8b a9       	ldd	r24, Y+51	; 0x33
    406e:	9c a9       	ldd	r25, Y+52	; 0x34
    4070:	20 e0       	ldi	r18, 0x00	; 0
    4072:	3f ef       	ldi	r19, 0xFF	; 255
    4074:	4f e7       	ldi	r20, 0x7F	; 127
    4076:	57 e4       	ldi	r21, 0x47	; 71
    4078:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    407c:	18 16       	cp	r1, r24
    407e:	4c f5       	brge	.+82     	; 0x40d2 <HSTEP_voidFullStep+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4080:	6d a9       	ldd	r22, Y+53	; 0x35
    4082:	7e a9       	ldd	r23, Y+54	; 0x36
    4084:	8f a9       	ldd	r24, Y+55	; 0x37
    4086:	98 ad       	ldd	r25, Y+56	; 0x38
    4088:	20 e0       	ldi	r18, 0x00	; 0
    408a:	30 e0       	ldi	r19, 0x00	; 0
    408c:	40 e2       	ldi	r20, 0x20	; 32
    408e:	51 e4       	ldi	r21, 0x41	; 65
    4090:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4094:	dc 01       	movw	r26, r24
    4096:	cb 01       	movw	r24, r22
    4098:	bc 01       	movw	r22, r24
    409a:	cd 01       	movw	r24, r26
    409c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    40a0:	dc 01       	movw	r26, r24
    40a2:	cb 01       	movw	r24, r22
    40a4:	98 ab       	std	Y+48, r25	; 0x30
    40a6:	8f a7       	std	Y+47, r24	; 0x2f
    40a8:	0f c0       	rjmp	.+30     	; 0x40c8 <HSTEP_voidFullStep+0xee>
    40aa:	88 ec       	ldi	r24, 0xC8	; 200
    40ac:	90 e0       	ldi	r25, 0x00	; 0
    40ae:	9e a7       	std	Y+46, r25	; 0x2e
    40b0:	8d a7       	std	Y+45, r24	; 0x2d
    40b2:	8d a5       	ldd	r24, Y+45	; 0x2d
    40b4:	9e a5       	ldd	r25, Y+46	; 0x2e
    40b6:	01 97       	sbiw	r24, 0x01	; 1
    40b8:	f1 f7       	brne	.-4      	; 0x40b6 <HSTEP_voidFullStep+0xdc>
    40ba:	9e a7       	std	Y+46, r25	; 0x2e
    40bc:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    40be:	8f a5       	ldd	r24, Y+47	; 0x2f
    40c0:	98 a9       	ldd	r25, Y+48	; 0x30
    40c2:	01 97       	sbiw	r24, 0x01	; 1
    40c4:	98 ab       	std	Y+48, r25	; 0x30
    40c6:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    40c8:	8f a5       	ldd	r24, Y+47	; 0x2f
    40ca:	98 a9       	ldd	r25, Y+48	; 0x30
    40cc:	00 97       	sbiw	r24, 0x00	; 0
    40ce:	69 f7       	brne	.-38     	; 0x40aa <HSTEP_voidFullStep+0xd0>
    40d0:	14 c0       	rjmp	.+40     	; 0x40fa <HSTEP_voidFullStep+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    40d2:	69 a9       	ldd	r22, Y+49	; 0x31
    40d4:	7a a9       	ldd	r23, Y+50	; 0x32
    40d6:	8b a9       	ldd	r24, Y+51	; 0x33
    40d8:	9c a9       	ldd	r25, Y+52	; 0x34
    40da:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    40de:	dc 01       	movw	r26, r24
    40e0:	cb 01       	movw	r24, r22
    40e2:	98 ab       	std	Y+48, r25	; 0x30
    40e4:	8f a7       	std	Y+47, r24	; 0x2f
    40e6:	8f a5       	ldd	r24, Y+47	; 0x2f
    40e8:	98 a9       	ldd	r25, Y+48	; 0x30
    40ea:	9c a7       	std	Y+44, r25	; 0x2c
    40ec:	8b a7       	std	Y+43, r24	; 0x2b
    40ee:	8b a5       	ldd	r24, Y+43	; 0x2b
    40f0:	9c a5       	ldd	r25, Y+44	; 0x2c
    40f2:	01 97       	sbiw	r24, 0x01	; 1
    40f4:	f1 f7       	brne	.-4      	; 0x40f2 <HSTEP_voidFullStep+0x118>
    40f6:	9c a7       	std	Y+44, r25	; 0x2c
    40f8:	8b a7       	std	Y+43, r24	; 0x2b
    _delay_ms(10);
    MDIO_voidSetPinValue(STEPPER_PORT,BLUE_COIL_PIN,PIN_HIGH);
    40fa:	80 e0       	ldi	r24, 0x00	; 0
    40fc:	60 e0       	ldi	r22, 0x00	; 0
    40fe:	41 e0       	ldi	r20, 0x01	; 1
    4100:	0e 94 b6 08 	call	0x116c	; 0x116c <MDIO_voidSetPinValue>
    MDIO_voidSetPinValue(STEPPER_PORT,PINK_COIL_PIN,PIN_HIGH);
    4104:	80 e0       	ldi	r24, 0x00	; 0
    4106:	61 e0       	ldi	r22, 0x01	; 1
    4108:	41 e0       	ldi	r20, 0x01	; 1
    410a:	0e 94 b6 08 	call	0x116c	; 0x116c <MDIO_voidSetPinValue>
    MDIO_voidSetPinValue(STEPPER_PORT,YELLOW_COIL_PIN,PIN_LOW);
    410e:	80 e0       	ldi	r24, 0x00	; 0
    4110:	62 e0       	ldi	r22, 0x02	; 2
    4112:	40 e0       	ldi	r20, 0x00	; 0
    4114:	0e 94 b6 08 	call	0x116c	; 0x116c <MDIO_voidSetPinValue>
    MDIO_voidSetPinValue(STEPPER_PORT,ORANGE_COIL_PIN,PIN_HIGH);
    4118:	80 e0       	ldi	r24, 0x00	; 0
    411a:	63 e0       	ldi	r22, 0x03	; 3
    411c:	41 e0       	ldi	r20, 0x01	; 1
    411e:	0e 94 b6 08 	call	0x116c	; 0x116c <MDIO_voidSetPinValue>
    4122:	80 e0       	ldi	r24, 0x00	; 0
    4124:	90 e0       	ldi	r25, 0x00	; 0
    4126:	a0 e2       	ldi	r26, 0x20	; 32
    4128:	b1 e4       	ldi	r27, 0x41	; 65
    412a:	8f a3       	std	Y+39, r24	; 0x27
    412c:	98 a7       	std	Y+40, r25	; 0x28
    412e:	a9 a7       	std	Y+41, r26	; 0x29
    4130:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4132:	6f a1       	ldd	r22, Y+39	; 0x27
    4134:	78 a5       	ldd	r23, Y+40	; 0x28
    4136:	89 a5       	ldd	r24, Y+41	; 0x29
    4138:	9a a5       	ldd	r25, Y+42	; 0x2a
    413a:	20 e0       	ldi	r18, 0x00	; 0
    413c:	30 e0       	ldi	r19, 0x00	; 0
    413e:	4a ef       	ldi	r20, 0xFA	; 250
    4140:	54 e4       	ldi	r21, 0x44	; 68
    4142:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4146:	dc 01       	movw	r26, r24
    4148:	cb 01       	movw	r24, r22
    414a:	8b a3       	std	Y+35, r24	; 0x23
    414c:	9c a3       	std	Y+36, r25	; 0x24
    414e:	ad a3       	std	Y+37, r26	; 0x25
    4150:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    4152:	6b a1       	ldd	r22, Y+35	; 0x23
    4154:	7c a1       	ldd	r23, Y+36	; 0x24
    4156:	8d a1       	ldd	r24, Y+37	; 0x25
    4158:	9e a1       	ldd	r25, Y+38	; 0x26
    415a:	20 e0       	ldi	r18, 0x00	; 0
    415c:	30 e0       	ldi	r19, 0x00	; 0
    415e:	40 e8       	ldi	r20, 0x80	; 128
    4160:	5f e3       	ldi	r21, 0x3F	; 63
    4162:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4166:	88 23       	and	r24, r24
    4168:	2c f4       	brge	.+10     	; 0x4174 <HSTEP_voidFullStep+0x19a>
		__ticks = 1;
    416a:	81 e0       	ldi	r24, 0x01	; 1
    416c:	90 e0       	ldi	r25, 0x00	; 0
    416e:	9a a3       	std	Y+34, r25	; 0x22
    4170:	89 a3       	std	Y+33, r24	; 0x21
    4172:	3f c0       	rjmp	.+126    	; 0x41f2 <HSTEP_voidFullStep+0x218>
	else if (__tmp > 65535)
    4174:	6b a1       	ldd	r22, Y+35	; 0x23
    4176:	7c a1       	ldd	r23, Y+36	; 0x24
    4178:	8d a1       	ldd	r24, Y+37	; 0x25
    417a:	9e a1       	ldd	r25, Y+38	; 0x26
    417c:	20 e0       	ldi	r18, 0x00	; 0
    417e:	3f ef       	ldi	r19, 0xFF	; 255
    4180:	4f e7       	ldi	r20, 0x7F	; 127
    4182:	57 e4       	ldi	r21, 0x47	; 71
    4184:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4188:	18 16       	cp	r1, r24
    418a:	4c f5       	brge	.+82     	; 0x41de <HSTEP_voidFullStep+0x204>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    418c:	6f a1       	ldd	r22, Y+39	; 0x27
    418e:	78 a5       	ldd	r23, Y+40	; 0x28
    4190:	89 a5       	ldd	r24, Y+41	; 0x29
    4192:	9a a5       	ldd	r25, Y+42	; 0x2a
    4194:	20 e0       	ldi	r18, 0x00	; 0
    4196:	30 e0       	ldi	r19, 0x00	; 0
    4198:	40 e2       	ldi	r20, 0x20	; 32
    419a:	51 e4       	ldi	r21, 0x41	; 65
    419c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    41a0:	dc 01       	movw	r26, r24
    41a2:	cb 01       	movw	r24, r22
    41a4:	bc 01       	movw	r22, r24
    41a6:	cd 01       	movw	r24, r26
    41a8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    41ac:	dc 01       	movw	r26, r24
    41ae:	cb 01       	movw	r24, r22
    41b0:	9a a3       	std	Y+34, r25	; 0x22
    41b2:	89 a3       	std	Y+33, r24	; 0x21
    41b4:	0f c0       	rjmp	.+30     	; 0x41d4 <HSTEP_voidFullStep+0x1fa>
    41b6:	88 ec       	ldi	r24, 0xC8	; 200
    41b8:	90 e0       	ldi	r25, 0x00	; 0
    41ba:	98 a3       	std	Y+32, r25	; 0x20
    41bc:	8f 8f       	std	Y+31, r24	; 0x1f
    41be:	8f 8d       	ldd	r24, Y+31	; 0x1f
    41c0:	98 a1       	ldd	r25, Y+32	; 0x20
    41c2:	01 97       	sbiw	r24, 0x01	; 1
    41c4:	f1 f7       	brne	.-4      	; 0x41c2 <HSTEP_voidFullStep+0x1e8>
    41c6:	98 a3       	std	Y+32, r25	; 0x20
    41c8:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    41ca:	89 a1       	ldd	r24, Y+33	; 0x21
    41cc:	9a a1       	ldd	r25, Y+34	; 0x22
    41ce:	01 97       	sbiw	r24, 0x01	; 1
    41d0:	9a a3       	std	Y+34, r25	; 0x22
    41d2:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    41d4:	89 a1       	ldd	r24, Y+33	; 0x21
    41d6:	9a a1       	ldd	r25, Y+34	; 0x22
    41d8:	00 97       	sbiw	r24, 0x00	; 0
    41da:	69 f7       	brne	.-38     	; 0x41b6 <HSTEP_voidFullStep+0x1dc>
    41dc:	14 c0       	rjmp	.+40     	; 0x4206 <HSTEP_voidFullStep+0x22c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    41de:	6b a1       	ldd	r22, Y+35	; 0x23
    41e0:	7c a1       	ldd	r23, Y+36	; 0x24
    41e2:	8d a1       	ldd	r24, Y+37	; 0x25
    41e4:	9e a1       	ldd	r25, Y+38	; 0x26
    41e6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    41ea:	dc 01       	movw	r26, r24
    41ec:	cb 01       	movw	r24, r22
    41ee:	9a a3       	std	Y+34, r25	; 0x22
    41f0:	89 a3       	std	Y+33, r24	; 0x21
    41f2:	89 a1       	ldd	r24, Y+33	; 0x21
    41f4:	9a a1       	ldd	r25, Y+34	; 0x22
    41f6:	9e 8f       	std	Y+30, r25	; 0x1e
    41f8:	8d 8f       	std	Y+29, r24	; 0x1d
    41fa:	8d 8d       	ldd	r24, Y+29	; 0x1d
    41fc:	9e 8d       	ldd	r25, Y+30	; 0x1e
    41fe:	01 97       	sbiw	r24, 0x01	; 1
    4200:	f1 f7       	brne	.-4      	; 0x41fe <HSTEP_voidFullStep+0x224>
    4202:	9e 8f       	std	Y+30, r25	; 0x1e
    4204:	8d 8f       	std	Y+29, r24	; 0x1d
    _delay_ms(10);
    MDIO_voidSetPinValue(STEPPER_PORT,BLUE_COIL_PIN,PIN_HIGH);
    4206:	80 e0       	ldi	r24, 0x00	; 0
    4208:	60 e0       	ldi	r22, 0x00	; 0
    420a:	41 e0       	ldi	r20, 0x01	; 1
    420c:	0e 94 b6 08 	call	0x116c	; 0x116c <MDIO_voidSetPinValue>
    MDIO_voidSetPinValue(STEPPER_PORT,PINK_COIL_PIN,PIN_HIGH);
    4210:	80 e0       	ldi	r24, 0x00	; 0
    4212:	61 e0       	ldi	r22, 0x01	; 1
    4214:	41 e0       	ldi	r20, 0x01	; 1
    4216:	0e 94 b6 08 	call	0x116c	; 0x116c <MDIO_voidSetPinValue>
    MDIO_voidSetPinValue(STEPPER_PORT,YELLOW_COIL_PIN,PIN_HIGH);
    421a:	80 e0       	ldi	r24, 0x00	; 0
    421c:	62 e0       	ldi	r22, 0x02	; 2
    421e:	41 e0       	ldi	r20, 0x01	; 1
    4220:	0e 94 b6 08 	call	0x116c	; 0x116c <MDIO_voidSetPinValue>
    MDIO_voidSetPinValue(STEPPER_PORT,ORANGE_COIL_PIN,PIN_LOW);
    4224:	80 e0       	ldi	r24, 0x00	; 0
    4226:	63 e0       	ldi	r22, 0x03	; 3
    4228:	40 e0       	ldi	r20, 0x00	; 0
    422a:	0e 94 b6 08 	call	0x116c	; 0x116c <MDIO_voidSetPinValue>
    422e:	80 e0       	ldi	r24, 0x00	; 0
    4230:	90 e0       	ldi	r25, 0x00	; 0
    4232:	a0 e2       	ldi	r26, 0x20	; 32
    4234:	b1 e4       	ldi	r27, 0x41	; 65
    4236:	89 8f       	std	Y+25, r24	; 0x19
    4238:	9a 8f       	std	Y+26, r25	; 0x1a
    423a:	ab 8f       	std	Y+27, r26	; 0x1b
    423c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    423e:	69 8d       	ldd	r22, Y+25	; 0x19
    4240:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4242:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4244:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4246:	20 e0       	ldi	r18, 0x00	; 0
    4248:	30 e0       	ldi	r19, 0x00	; 0
    424a:	4a ef       	ldi	r20, 0xFA	; 250
    424c:	54 e4       	ldi	r21, 0x44	; 68
    424e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4252:	dc 01       	movw	r26, r24
    4254:	cb 01       	movw	r24, r22
    4256:	8d 8b       	std	Y+21, r24	; 0x15
    4258:	9e 8b       	std	Y+22, r25	; 0x16
    425a:	af 8b       	std	Y+23, r26	; 0x17
    425c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    425e:	6d 89       	ldd	r22, Y+21	; 0x15
    4260:	7e 89       	ldd	r23, Y+22	; 0x16
    4262:	8f 89       	ldd	r24, Y+23	; 0x17
    4264:	98 8d       	ldd	r25, Y+24	; 0x18
    4266:	20 e0       	ldi	r18, 0x00	; 0
    4268:	30 e0       	ldi	r19, 0x00	; 0
    426a:	40 e8       	ldi	r20, 0x80	; 128
    426c:	5f e3       	ldi	r21, 0x3F	; 63
    426e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4272:	88 23       	and	r24, r24
    4274:	2c f4       	brge	.+10     	; 0x4280 <HSTEP_voidFullStep+0x2a6>
		__ticks = 1;
    4276:	81 e0       	ldi	r24, 0x01	; 1
    4278:	90 e0       	ldi	r25, 0x00	; 0
    427a:	9c 8b       	std	Y+20, r25	; 0x14
    427c:	8b 8b       	std	Y+19, r24	; 0x13
    427e:	3f c0       	rjmp	.+126    	; 0x42fe <HSTEP_voidFullStep+0x324>
	else if (__tmp > 65535)
    4280:	6d 89       	ldd	r22, Y+21	; 0x15
    4282:	7e 89       	ldd	r23, Y+22	; 0x16
    4284:	8f 89       	ldd	r24, Y+23	; 0x17
    4286:	98 8d       	ldd	r25, Y+24	; 0x18
    4288:	20 e0       	ldi	r18, 0x00	; 0
    428a:	3f ef       	ldi	r19, 0xFF	; 255
    428c:	4f e7       	ldi	r20, 0x7F	; 127
    428e:	57 e4       	ldi	r21, 0x47	; 71
    4290:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4294:	18 16       	cp	r1, r24
    4296:	4c f5       	brge	.+82     	; 0x42ea <HSTEP_voidFullStep+0x310>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4298:	69 8d       	ldd	r22, Y+25	; 0x19
    429a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    429c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    429e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    42a0:	20 e0       	ldi	r18, 0x00	; 0
    42a2:	30 e0       	ldi	r19, 0x00	; 0
    42a4:	40 e2       	ldi	r20, 0x20	; 32
    42a6:	51 e4       	ldi	r21, 0x41	; 65
    42a8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    42ac:	dc 01       	movw	r26, r24
    42ae:	cb 01       	movw	r24, r22
    42b0:	bc 01       	movw	r22, r24
    42b2:	cd 01       	movw	r24, r26
    42b4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    42b8:	dc 01       	movw	r26, r24
    42ba:	cb 01       	movw	r24, r22
    42bc:	9c 8b       	std	Y+20, r25	; 0x14
    42be:	8b 8b       	std	Y+19, r24	; 0x13
    42c0:	0f c0       	rjmp	.+30     	; 0x42e0 <HSTEP_voidFullStep+0x306>
    42c2:	88 ec       	ldi	r24, 0xC8	; 200
    42c4:	90 e0       	ldi	r25, 0x00	; 0
    42c6:	9a 8b       	std	Y+18, r25	; 0x12
    42c8:	89 8b       	std	Y+17, r24	; 0x11
    42ca:	89 89       	ldd	r24, Y+17	; 0x11
    42cc:	9a 89       	ldd	r25, Y+18	; 0x12
    42ce:	01 97       	sbiw	r24, 0x01	; 1
    42d0:	f1 f7       	brne	.-4      	; 0x42ce <HSTEP_voidFullStep+0x2f4>
    42d2:	9a 8b       	std	Y+18, r25	; 0x12
    42d4:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    42d6:	8b 89       	ldd	r24, Y+19	; 0x13
    42d8:	9c 89       	ldd	r25, Y+20	; 0x14
    42da:	01 97       	sbiw	r24, 0x01	; 1
    42dc:	9c 8b       	std	Y+20, r25	; 0x14
    42de:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    42e0:	8b 89       	ldd	r24, Y+19	; 0x13
    42e2:	9c 89       	ldd	r25, Y+20	; 0x14
    42e4:	00 97       	sbiw	r24, 0x00	; 0
    42e6:	69 f7       	brne	.-38     	; 0x42c2 <HSTEP_voidFullStep+0x2e8>
    42e8:	14 c0       	rjmp	.+40     	; 0x4312 <HSTEP_voidFullStep+0x338>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    42ea:	6d 89       	ldd	r22, Y+21	; 0x15
    42ec:	7e 89       	ldd	r23, Y+22	; 0x16
    42ee:	8f 89       	ldd	r24, Y+23	; 0x17
    42f0:	98 8d       	ldd	r25, Y+24	; 0x18
    42f2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    42f6:	dc 01       	movw	r26, r24
    42f8:	cb 01       	movw	r24, r22
    42fa:	9c 8b       	std	Y+20, r25	; 0x14
    42fc:	8b 8b       	std	Y+19, r24	; 0x13
    42fe:	8b 89       	ldd	r24, Y+19	; 0x13
    4300:	9c 89       	ldd	r25, Y+20	; 0x14
    4302:	98 8b       	std	Y+16, r25	; 0x10
    4304:	8f 87       	std	Y+15, r24	; 0x0f
    4306:	8f 85       	ldd	r24, Y+15	; 0x0f
    4308:	98 89       	ldd	r25, Y+16	; 0x10
    430a:	01 97       	sbiw	r24, 0x01	; 1
    430c:	f1 f7       	brne	.-4      	; 0x430a <HSTEP_voidFullStep+0x330>
    430e:	98 8b       	std	Y+16, r25	; 0x10
    4310:	8f 87       	std	Y+15, r24	; 0x0f
    _delay_ms(10);
    MDIO_voidSetPinValue(STEPPER_PORT,BLUE_COIL_PIN,PIN_LOW);
    4312:	80 e0       	ldi	r24, 0x00	; 0
    4314:	60 e0       	ldi	r22, 0x00	; 0
    4316:	40 e0       	ldi	r20, 0x00	; 0
    4318:	0e 94 b6 08 	call	0x116c	; 0x116c <MDIO_voidSetPinValue>
    MDIO_voidSetPinValue(STEPPER_PORT,PINK_COIL_PIN,PIN_HIGH);
    431c:	80 e0       	ldi	r24, 0x00	; 0
    431e:	61 e0       	ldi	r22, 0x01	; 1
    4320:	41 e0       	ldi	r20, 0x01	; 1
    4322:	0e 94 b6 08 	call	0x116c	; 0x116c <MDIO_voidSetPinValue>
    MDIO_voidSetPinValue(STEPPER_PORT,YELLOW_COIL_PIN,PIN_HIGH);
    4326:	80 e0       	ldi	r24, 0x00	; 0
    4328:	62 e0       	ldi	r22, 0x02	; 2
    432a:	41 e0       	ldi	r20, 0x01	; 1
    432c:	0e 94 b6 08 	call	0x116c	; 0x116c <MDIO_voidSetPinValue>
    MDIO_voidSetPinValue(STEPPER_PORT,ORANGE_COIL_PIN,PIN_HIGH);
    4330:	80 e0       	ldi	r24, 0x00	; 0
    4332:	63 e0       	ldi	r22, 0x03	; 3
    4334:	41 e0       	ldi	r20, 0x01	; 1
    4336:	0e 94 b6 08 	call	0x116c	; 0x116c <MDIO_voidSetPinValue>
    433a:	80 e0       	ldi	r24, 0x00	; 0
    433c:	90 e0       	ldi	r25, 0x00	; 0
    433e:	a0 e2       	ldi	r26, 0x20	; 32
    4340:	b1 e4       	ldi	r27, 0x41	; 65
    4342:	8b 87       	std	Y+11, r24	; 0x0b
    4344:	9c 87       	std	Y+12, r25	; 0x0c
    4346:	ad 87       	std	Y+13, r26	; 0x0d
    4348:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    434a:	6b 85       	ldd	r22, Y+11	; 0x0b
    434c:	7c 85       	ldd	r23, Y+12	; 0x0c
    434e:	8d 85       	ldd	r24, Y+13	; 0x0d
    4350:	9e 85       	ldd	r25, Y+14	; 0x0e
    4352:	20 e0       	ldi	r18, 0x00	; 0
    4354:	30 e0       	ldi	r19, 0x00	; 0
    4356:	4a ef       	ldi	r20, 0xFA	; 250
    4358:	54 e4       	ldi	r21, 0x44	; 68
    435a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    435e:	dc 01       	movw	r26, r24
    4360:	cb 01       	movw	r24, r22
    4362:	8f 83       	std	Y+7, r24	; 0x07
    4364:	98 87       	std	Y+8, r25	; 0x08
    4366:	a9 87       	std	Y+9, r26	; 0x09
    4368:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    436a:	6f 81       	ldd	r22, Y+7	; 0x07
    436c:	78 85       	ldd	r23, Y+8	; 0x08
    436e:	89 85       	ldd	r24, Y+9	; 0x09
    4370:	9a 85       	ldd	r25, Y+10	; 0x0a
    4372:	20 e0       	ldi	r18, 0x00	; 0
    4374:	30 e0       	ldi	r19, 0x00	; 0
    4376:	40 e8       	ldi	r20, 0x80	; 128
    4378:	5f e3       	ldi	r21, 0x3F	; 63
    437a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    437e:	88 23       	and	r24, r24
    4380:	2c f4       	brge	.+10     	; 0x438c <HSTEP_voidFullStep+0x3b2>
		__ticks = 1;
    4382:	81 e0       	ldi	r24, 0x01	; 1
    4384:	90 e0       	ldi	r25, 0x00	; 0
    4386:	9e 83       	std	Y+6, r25	; 0x06
    4388:	8d 83       	std	Y+5, r24	; 0x05
    438a:	3f c0       	rjmp	.+126    	; 0x440a <HSTEP_voidFullStep+0x430>
	else if (__tmp > 65535)
    438c:	6f 81       	ldd	r22, Y+7	; 0x07
    438e:	78 85       	ldd	r23, Y+8	; 0x08
    4390:	89 85       	ldd	r24, Y+9	; 0x09
    4392:	9a 85       	ldd	r25, Y+10	; 0x0a
    4394:	20 e0       	ldi	r18, 0x00	; 0
    4396:	3f ef       	ldi	r19, 0xFF	; 255
    4398:	4f e7       	ldi	r20, 0x7F	; 127
    439a:	57 e4       	ldi	r21, 0x47	; 71
    439c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    43a0:	18 16       	cp	r1, r24
    43a2:	4c f5       	brge	.+82     	; 0x43f6 <HSTEP_voidFullStep+0x41c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    43a4:	6b 85       	ldd	r22, Y+11	; 0x0b
    43a6:	7c 85       	ldd	r23, Y+12	; 0x0c
    43a8:	8d 85       	ldd	r24, Y+13	; 0x0d
    43aa:	9e 85       	ldd	r25, Y+14	; 0x0e
    43ac:	20 e0       	ldi	r18, 0x00	; 0
    43ae:	30 e0       	ldi	r19, 0x00	; 0
    43b0:	40 e2       	ldi	r20, 0x20	; 32
    43b2:	51 e4       	ldi	r21, 0x41	; 65
    43b4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    43b8:	dc 01       	movw	r26, r24
    43ba:	cb 01       	movw	r24, r22
    43bc:	bc 01       	movw	r22, r24
    43be:	cd 01       	movw	r24, r26
    43c0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    43c4:	dc 01       	movw	r26, r24
    43c6:	cb 01       	movw	r24, r22
    43c8:	9e 83       	std	Y+6, r25	; 0x06
    43ca:	8d 83       	std	Y+5, r24	; 0x05
    43cc:	0f c0       	rjmp	.+30     	; 0x43ec <HSTEP_voidFullStep+0x412>
    43ce:	88 ec       	ldi	r24, 0xC8	; 200
    43d0:	90 e0       	ldi	r25, 0x00	; 0
    43d2:	9c 83       	std	Y+4, r25	; 0x04
    43d4:	8b 83       	std	Y+3, r24	; 0x03
    43d6:	8b 81       	ldd	r24, Y+3	; 0x03
    43d8:	9c 81       	ldd	r25, Y+4	; 0x04
    43da:	01 97       	sbiw	r24, 0x01	; 1
    43dc:	f1 f7       	brne	.-4      	; 0x43da <HSTEP_voidFullStep+0x400>
    43de:	9c 83       	std	Y+4, r25	; 0x04
    43e0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    43e2:	8d 81       	ldd	r24, Y+5	; 0x05
    43e4:	9e 81       	ldd	r25, Y+6	; 0x06
    43e6:	01 97       	sbiw	r24, 0x01	; 1
    43e8:	9e 83       	std	Y+6, r25	; 0x06
    43ea:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    43ec:	8d 81       	ldd	r24, Y+5	; 0x05
    43ee:	9e 81       	ldd	r25, Y+6	; 0x06
    43f0:	00 97       	sbiw	r24, 0x00	; 0
    43f2:	69 f7       	brne	.-38     	; 0x43ce <HSTEP_voidFullStep+0x3f4>
    43f4:	14 c0       	rjmp	.+40     	; 0x441e <HSTEP_voidFullStep+0x444>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    43f6:	6f 81       	ldd	r22, Y+7	; 0x07
    43f8:	78 85       	ldd	r23, Y+8	; 0x08
    43fa:	89 85       	ldd	r24, Y+9	; 0x09
    43fc:	9a 85       	ldd	r25, Y+10	; 0x0a
    43fe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4402:	dc 01       	movw	r26, r24
    4404:	cb 01       	movw	r24, r22
    4406:	9e 83       	std	Y+6, r25	; 0x06
    4408:	8d 83       	std	Y+5, r24	; 0x05
    440a:	8d 81       	ldd	r24, Y+5	; 0x05
    440c:	9e 81       	ldd	r25, Y+6	; 0x06
    440e:	9a 83       	std	Y+2, r25	; 0x02
    4410:	89 83       	std	Y+1, r24	; 0x01
    4412:	89 81       	ldd	r24, Y+1	; 0x01
    4414:	9a 81       	ldd	r25, Y+2	; 0x02
    4416:	01 97       	sbiw	r24, 0x01	; 1
    4418:	f1 f7       	brne	.-4      	; 0x4416 <HSTEP_voidFullStep+0x43c>
    441a:	9a 83       	std	Y+2, r25	; 0x02
    441c:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(10);
}
    441e:	e8 96       	adiw	r28, 0x38	; 56
    4420:	0f b6       	in	r0, 0x3f	; 63
    4422:	f8 94       	cli
    4424:	de bf       	out	0x3e, r29	; 62
    4426:	0f be       	out	0x3f, r0	; 63
    4428:	cd bf       	out	0x3d, r28	; 61
    442a:	cf 91       	pop	r28
    442c:	df 91       	pop	r29
    442e:	08 95       	ret

00004430 <HSTEP_voidMotorAngle>:

void HSTEP_voidMotorAngle(u32 A_u32Angle)
{
    4430:	df 93       	push	r29
    4432:	cf 93       	push	r28
    4434:	cd b7       	in	r28, 0x3d	; 61
    4436:	de b7       	in	r29, 0x3e	; 62
    4438:	c0 54       	subi	r28, 0x40	; 64
    443a:	d0 40       	sbci	r29, 0x00	; 0
    443c:	0f b6       	in	r0, 0x3f	; 63
    443e:	f8 94       	cli
    4440:	de bf       	out	0x3e, r29	; 62
    4442:	0f be       	out	0x3f, r0	; 63
    4444:	cd bf       	out	0x3d, r28	; 61
    4446:	fe 01       	movw	r30, r28
    4448:	ff 96       	adiw	r30, 0x3f	; 63
    444a:	91 83       	std	Z+1, r25	; 0x01
    444c:	80 83       	st	Z, r24
    u32 local_u32Angle=((NO_OF_STEPS_FOR_360*A_u32Angle)/CIRCLE_ANGLE);
    444e:	fe 01       	movw	r30, r28
    4450:	ff 96       	adiw	r30, 0x3f	; 63
    4452:	80 81       	ld	r24, Z
    4454:	91 81       	ldd	r25, Z+1	; 0x01
    4456:	98 2f       	mov	r25, r24
    4458:	88 27       	eor	r24, r24
    445a:	99 0f       	add	r25, r25
    445c:	99 0f       	add	r25, r25
    445e:	99 0f       	add	r25, r25
    4460:	28 e6       	ldi	r18, 0x68	; 104
    4462:	31 e0       	ldi	r19, 0x01	; 1
    4464:	b9 01       	movw	r22, r18
    4466:	0e 94 59 26 	call	0x4cb2	; 0x4cb2 <__udivmodhi4>
    446a:	cb 01       	movw	r24, r22
    446c:	9e af       	std	Y+62, r25	; 0x3e
    446e:	8d af       	std	Y+61, r24	; 0x3d
    u32 local_u32Steps=local_u32Angle/NO_OF_COILS; 
    4470:	8d ad       	ldd	r24, Y+61	; 0x3d
    4472:	9e ad       	ldd	r25, Y+62	; 0x3e
    4474:	96 95       	lsr	r25
    4476:	87 95       	ror	r24
    4478:	96 95       	lsr	r25
    447a:	87 95       	ror	r24
    447c:	9c af       	std	Y+60, r25	; 0x3c
    447e:	8b af       	std	Y+59, r24	; 0x3b
    for(u16 i =0;i<local_u32Steps;i++)
    4480:	1a ae       	std	Y+58, r1	; 0x3a
    4482:	19 ae       	std	Y+57, r1	; 0x39
    4484:	1d c2       	rjmp	.+1082   	; 0x48c0 <HSTEP_voidMotorAngle+0x490>
	{
    MDIO_voidSetPinValue(STEPPER_PORT,BLUE_COIL_PIN,PIN_HIGH);
    4486:	80 e0       	ldi	r24, 0x00	; 0
    4488:	60 e0       	ldi	r22, 0x00	; 0
    448a:	41 e0       	ldi	r20, 0x01	; 1
    448c:	0e 94 b6 08 	call	0x116c	; 0x116c <MDIO_voidSetPinValue>
    MDIO_voidSetPinValue(STEPPER_PORT,PINK_COIL_PIN,PIN_LOW);
    4490:	80 e0       	ldi	r24, 0x00	; 0
    4492:	61 e0       	ldi	r22, 0x01	; 1
    4494:	40 e0       	ldi	r20, 0x00	; 0
    4496:	0e 94 b6 08 	call	0x116c	; 0x116c <MDIO_voidSetPinValue>
    MDIO_voidSetPinValue(STEPPER_PORT,YELLOW_COIL_PIN,PIN_HIGH);
    449a:	80 e0       	ldi	r24, 0x00	; 0
    449c:	62 e0       	ldi	r22, 0x02	; 2
    449e:	41 e0       	ldi	r20, 0x01	; 1
    44a0:	0e 94 b6 08 	call	0x116c	; 0x116c <MDIO_voidSetPinValue>
    MDIO_voidSetPinValue(STEPPER_PORT,ORANGE_COIL_PIN,PIN_HIGH);
    44a4:	80 e0       	ldi	r24, 0x00	; 0
    44a6:	63 e0       	ldi	r22, 0x03	; 3
    44a8:	41 e0       	ldi	r20, 0x01	; 1
    44aa:	0e 94 b6 08 	call	0x116c	; 0x116c <MDIO_voidSetPinValue>
    44ae:	80 e0       	ldi	r24, 0x00	; 0
    44b0:	90 e0       	ldi	r25, 0x00	; 0
    44b2:	a0 e2       	ldi	r26, 0x20	; 32
    44b4:	b1 e4       	ldi	r27, 0x41	; 65
    44b6:	8d ab       	std	Y+53, r24	; 0x35
    44b8:	9e ab       	std	Y+54, r25	; 0x36
    44ba:	af ab       	std	Y+55, r26	; 0x37
    44bc:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    44be:	6d a9       	ldd	r22, Y+53	; 0x35
    44c0:	7e a9       	ldd	r23, Y+54	; 0x36
    44c2:	8f a9       	ldd	r24, Y+55	; 0x37
    44c4:	98 ad       	ldd	r25, Y+56	; 0x38
    44c6:	20 e0       	ldi	r18, 0x00	; 0
    44c8:	30 e0       	ldi	r19, 0x00	; 0
    44ca:	4a ef       	ldi	r20, 0xFA	; 250
    44cc:	54 e4       	ldi	r21, 0x44	; 68
    44ce:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    44d2:	dc 01       	movw	r26, r24
    44d4:	cb 01       	movw	r24, r22
    44d6:	89 ab       	std	Y+49, r24	; 0x31
    44d8:	9a ab       	std	Y+50, r25	; 0x32
    44da:	ab ab       	std	Y+51, r26	; 0x33
    44dc:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    44de:	69 a9       	ldd	r22, Y+49	; 0x31
    44e0:	7a a9       	ldd	r23, Y+50	; 0x32
    44e2:	8b a9       	ldd	r24, Y+51	; 0x33
    44e4:	9c a9       	ldd	r25, Y+52	; 0x34
    44e6:	20 e0       	ldi	r18, 0x00	; 0
    44e8:	30 e0       	ldi	r19, 0x00	; 0
    44ea:	40 e8       	ldi	r20, 0x80	; 128
    44ec:	5f e3       	ldi	r21, 0x3F	; 63
    44ee:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    44f2:	88 23       	and	r24, r24
    44f4:	2c f4       	brge	.+10     	; 0x4500 <HSTEP_voidMotorAngle+0xd0>
		__ticks = 1;
    44f6:	81 e0       	ldi	r24, 0x01	; 1
    44f8:	90 e0       	ldi	r25, 0x00	; 0
    44fa:	98 ab       	std	Y+48, r25	; 0x30
    44fc:	8f a7       	std	Y+47, r24	; 0x2f
    44fe:	3f c0       	rjmp	.+126    	; 0x457e <HSTEP_voidMotorAngle+0x14e>
	else if (__tmp > 65535)
    4500:	69 a9       	ldd	r22, Y+49	; 0x31
    4502:	7a a9       	ldd	r23, Y+50	; 0x32
    4504:	8b a9       	ldd	r24, Y+51	; 0x33
    4506:	9c a9       	ldd	r25, Y+52	; 0x34
    4508:	20 e0       	ldi	r18, 0x00	; 0
    450a:	3f ef       	ldi	r19, 0xFF	; 255
    450c:	4f e7       	ldi	r20, 0x7F	; 127
    450e:	57 e4       	ldi	r21, 0x47	; 71
    4510:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4514:	18 16       	cp	r1, r24
    4516:	4c f5       	brge	.+82     	; 0x456a <HSTEP_voidMotorAngle+0x13a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4518:	6d a9       	ldd	r22, Y+53	; 0x35
    451a:	7e a9       	ldd	r23, Y+54	; 0x36
    451c:	8f a9       	ldd	r24, Y+55	; 0x37
    451e:	98 ad       	ldd	r25, Y+56	; 0x38
    4520:	20 e0       	ldi	r18, 0x00	; 0
    4522:	30 e0       	ldi	r19, 0x00	; 0
    4524:	40 e2       	ldi	r20, 0x20	; 32
    4526:	51 e4       	ldi	r21, 0x41	; 65
    4528:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    452c:	dc 01       	movw	r26, r24
    452e:	cb 01       	movw	r24, r22
    4530:	bc 01       	movw	r22, r24
    4532:	cd 01       	movw	r24, r26
    4534:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4538:	dc 01       	movw	r26, r24
    453a:	cb 01       	movw	r24, r22
    453c:	98 ab       	std	Y+48, r25	; 0x30
    453e:	8f a7       	std	Y+47, r24	; 0x2f
    4540:	0f c0       	rjmp	.+30     	; 0x4560 <HSTEP_voidMotorAngle+0x130>
    4542:	88 ec       	ldi	r24, 0xC8	; 200
    4544:	90 e0       	ldi	r25, 0x00	; 0
    4546:	9e a7       	std	Y+46, r25	; 0x2e
    4548:	8d a7       	std	Y+45, r24	; 0x2d
    454a:	8d a5       	ldd	r24, Y+45	; 0x2d
    454c:	9e a5       	ldd	r25, Y+46	; 0x2e
    454e:	01 97       	sbiw	r24, 0x01	; 1
    4550:	f1 f7       	brne	.-4      	; 0x454e <HSTEP_voidMotorAngle+0x11e>
    4552:	9e a7       	std	Y+46, r25	; 0x2e
    4554:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4556:	8f a5       	ldd	r24, Y+47	; 0x2f
    4558:	98 a9       	ldd	r25, Y+48	; 0x30
    455a:	01 97       	sbiw	r24, 0x01	; 1
    455c:	98 ab       	std	Y+48, r25	; 0x30
    455e:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4560:	8f a5       	ldd	r24, Y+47	; 0x2f
    4562:	98 a9       	ldd	r25, Y+48	; 0x30
    4564:	00 97       	sbiw	r24, 0x00	; 0
    4566:	69 f7       	brne	.-38     	; 0x4542 <HSTEP_voidMotorAngle+0x112>
    4568:	14 c0       	rjmp	.+40     	; 0x4592 <HSTEP_voidMotorAngle+0x162>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    456a:	69 a9       	ldd	r22, Y+49	; 0x31
    456c:	7a a9       	ldd	r23, Y+50	; 0x32
    456e:	8b a9       	ldd	r24, Y+51	; 0x33
    4570:	9c a9       	ldd	r25, Y+52	; 0x34
    4572:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4576:	dc 01       	movw	r26, r24
    4578:	cb 01       	movw	r24, r22
    457a:	98 ab       	std	Y+48, r25	; 0x30
    457c:	8f a7       	std	Y+47, r24	; 0x2f
    457e:	8f a5       	ldd	r24, Y+47	; 0x2f
    4580:	98 a9       	ldd	r25, Y+48	; 0x30
    4582:	9c a7       	std	Y+44, r25	; 0x2c
    4584:	8b a7       	std	Y+43, r24	; 0x2b
    4586:	8b a5       	ldd	r24, Y+43	; 0x2b
    4588:	9c a5       	ldd	r25, Y+44	; 0x2c
    458a:	01 97       	sbiw	r24, 0x01	; 1
    458c:	f1 f7       	brne	.-4      	; 0x458a <HSTEP_voidMotorAngle+0x15a>
    458e:	9c a7       	std	Y+44, r25	; 0x2c
    4590:	8b a7       	std	Y+43, r24	; 0x2b
    _delay_ms(10);
    MDIO_voidSetPinValue(STEPPER_PORT,BLUE_COIL_PIN,PIN_HIGH);
    4592:	80 e0       	ldi	r24, 0x00	; 0
    4594:	60 e0       	ldi	r22, 0x00	; 0
    4596:	41 e0       	ldi	r20, 0x01	; 1
    4598:	0e 94 b6 08 	call	0x116c	; 0x116c <MDIO_voidSetPinValue>
    MDIO_voidSetPinValue(STEPPER_PORT,PINK_COIL_PIN,PIN_HIGH);
    459c:	80 e0       	ldi	r24, 0x00	; 0
    459e:	61 e0       	ldi	r22, 0x01	; 1
    45a0:	41 e0       	ldi	r20, 0x01	; 1
    45a2:	0e 94 b6 08 	call	0x116c	; 0x116c <MDIO_voidSetPinValue>
    MDIO_voidSetPinValue(STEPPER_PORT,YELLOW_COIL_PIN,PIN_LOW);
    45a6:	80 e0       	ldi	r24, 0x00	; 0
    45a8:	62 e0       	ldi	r22, 0x02	; 2
    45aa:	40 e0       	ldi	r20, 0x00	; 0
    45ac:	0e 94 b6 08 	call	0x116c	; 0x116c <MDIO_voidSetPinValue>
    MDIO_voidSetPinValue(STEPPER_PORT,ORANGE_COIL_PIN,PIN_HIGH);
    45b0:	80 e0       	ldi	r24, 0x00	; 0
    45b2:	63 e0       	ldi	r22, 0x03	; 3
    45b4:	41 e0       	ldi	r20, 0x01	; 1
    45b6:	0e 94 b6 08 	call	0x116c	; 0x116c <MDIO_voidSetPinValue>
    45ba:	80 e0       	ldi	r24, 0x00	; 0
    45bc:	90 e0       	ldi	r25, 0x00	; 0
    45be:	a0 e2       	ldi	r26, 0x20	; 32
    45c0:	b1 e4       	ldi	r27, 0x41	; 65
    45c2:	8f a3       	std	Y+39, r24	; 0x27
    45c4:	98 a7       	std	Y+40, r25	; 0x28
    45c6:	a9 a7       	std	Y+41, r26	; 0x29
    45c8:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    45ca:	6f a1       	ldd	r22, Y+39	; 0x27
    45cc:	78 a5       	ldd	r23, Y+40	; 0x28
    45ce:	89 a5       	ldd	r24, Y+41	; 0x29
    45d0:	9a a5       	ldd	r25, Y+42	; 0x2a
    45d2:	20 e0       	ldi	r18, 0x00	; 0
    45d4:	30 e0       	ldi	r19, 0x00	; 0
    45d6:	4a ef       	ldi	r20, 0xFA	; 250
    45d8:	54 e4       	ldi	r21, 0x44	; 68
    45da:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    45de:	dc 01       	movw	r26, r24
    45e0:	cb 01       	movw	r24, r22
    45e2:	8b a3       	std	Y+35, r24	; 0x23
    45e4:	9c a3       	std	Y+36, r25	; 0x24
    45e6:	ad a3       	std	Y+37, r26	; 0x25
    45e8:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    45ea:	6b a1       	ldd	r22, Y+35	; 0x23
    45ec:	7c a1       	ldd	r23, Y+36	; 0x24
    45ee:	8d a1       	ldd	r24, Y+37	; 0x25
    45f0:	9e a1       	ldd	r25, Y+38	; 0x26
    45f2:	20 e0       	ldi	r18, 0x00	; 0
    45f4:	30 e0       	ldi	r19, 0x00	; 0
    45f6:	40 e8       	ldi	r20, 0x80	; 128
    45f8:	5f e3       	ldi	r21, 0x3F	; 63
    45fa:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    45fe:	88 23       	and	r24, r24
    4600:	2c f4       	brge	.+10     	; 0x460c <HSTEP_voidMotorAngle+0x1dc>
		__ticks = 1;
    4602:	81 e0       	ldi	r24, 0x01	; 1
    4604:	90 e0       	ldi	r25, 0x00	; 0
    4606:	9a a3       	std	Y+34, r25	; 0x22
    4608:	89 a3       	std	Y+33, r24	; 0x21
    460a:	3f c0       	rjmp	.+126    	; 0x468a <HSTEP_voidMotorAngle+0x25a>
	else if (__tmp > 65535)
    460c:	6b a1       	ldd	r22, Y+35	; 0x23
    460e:	7c a1       	ldd	r23, Y+36	; 0x24
    4610:	8d a1       	ldd	r24, Y+37	; 0x25
    4612:	9e a1       	ldd	r25, Y+38	; 0x26
    4614:	20 e0       	ldi	r18, 0x00	; 0
    4616:	3f ef       	ldi	r19, 0xFF	; 255
    4618:	4f e7       	ldi	r20, 0x7F	; 127
    461a:	57 e4       	ldi	r21, 0x47	; 71
    461c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4620:	18 16       	cp	r1, r24
    4622:	4c f5       	brge	.+82     	; 0x4676 <HSTEP_voidMotorAngle+0x246>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4624:	6f a1       	ldd	r22, Y+39	; 0x27
    4626:	78 a5       	ldd	r23, Y+40	; 0x28
    4628:	89 a5       	ldd	r24, Y+41	; 0x29
    462a:	9a a5       	ldd	r25, Y+42	; 0x2a
    462c:	20 e0       	ldi	r18, 0x00	; 0
    462e:	30 e0       	ldi	r19, 0x00	; 0
    4630:	40 e2       	ldi	r20, 0x20	; 32
    4632:	51 e4       	ldi	r21, 0x41	; 65
    4634:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4638:	dc 01       	movw	r26, r24
    463a:	cb 01       	movw	r24, r22
    463c:	bc 01       	movw	r22, r24
    463e:	cd 01       	movw	r24, r26
    4640:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4644:	dc 01       	movw	r26, r24
    4646:	cb 01       	movw	r24, r22
    4648:	9a a3       	std	Y+34, r25	; 0x22
    464a:	89 a3       	std	Y+33, r24	; 0x21
    464c:	0f c0       	rjmp	.+30     	; 0x466c <HSTEP_voidMotorAngle+0x23c>
    464e:	88 ec       	ldi	r24, 0xC8	; 200
    4650:	90 e0       	ldi	r25, 0x00	; 0
    4652:	98 a3       	std	Y+32, r25	; 0x20
    4654:	8f 8f       	std	Y+31, r24	; 0x1f
    4656:	8f 8d       	ldd	r24, Y+31	; 0x1f
    4658:	98 a1       	ldd	r25, Y+32	; 0x20
    465a:	01 97       	sbiw	r24, 0x01	; 1
    465c:	f1 f7       	brne	.-4      	; 0x465a <HSTEP_voidMotorAngle+0x22a>
    465e:	98 a3       	std	Y+32, r25	; 0x20
    4660:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4662:	89 a1       	ldd	r24, Y+33	; 0x21
    4664:	9a a1       	ldd	r25, Y+34	; 0x22
    4666:	01 97       	sbiw	r24, 0x01	; 1
    4668:	9a a3       	std	Y+34, r25	; 0x22
    466a:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    466c:	89 a1       	ldd	r24, Y+33	; 0x21
    466e:	9a a1       	ldd	r25, Y+34	; 0x22
    4670:	00 97       	sbiw	r24, 0x00	; 0
    4672:	69 f7       	brne	.-38     	; 0x464e <HSTEP_voidMotorAngle+0x21e>
    4674:	14 c0       	rjmp	.+40     	; 0x469e <HSTEP_voidMotorAngle+0x26e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4676:	6b a1       	ldd	r22, Y+35	; 0x23
    4678:	7c a1       	ldd	r23, Y+36	; 0x24
    467a:	8d a1       	ldd	r24, Y+37	; 0x25
    467c:	9e a1       	ldd	r25, Y+38	; 0x26
    467e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4682:	dc 01       	movw	r26, r24
    4684:	cb 01       	movw	r24, r22
    4686:	9a a3       	std	Y+34, r25	; 0x22
    4688:	89 a3       	std	Y+33, r24	; 0x21
    468a:	89 a1       	ldd	r24, Y+33	; 0x21
    468c:	9a a1       	ldd	r25, Y+34	; 0x22
    468e:	9e 8f       	std	Y+30, r25	; 0x1e
    4690:	8d 8f       	std	Y+29, r24	; 0x1d
    4692:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4694:	9e 8d       	ldd	r25, Y+30	; 0x1e
    4696:	01 97       	sbiw	r24, 0x01	; 1
    4698:	f1 f7       	brne	.-4      	; 0x4696 <HSTEP_voidMotorAngle+0x266>
    469a:	9e 8f       	std	Y+30, r25	; 0x1e
    469c:	8d 8f       	std	Y+29, r24	; 0x1d
    _delay_ms(10);
    MDIO_voidSetPinValue(STEPPER_PORT,BLUE_COIL_PIN,PIN_HIGH);
    469e:	80 e0       	ldi	r24, 0x00	; 0
    46a0:	60 e0       	ldi	r22, 0x00	; 0
    46a2:	41 e0       	ldi	r20, 0x01	; 1
    46a4:	0e 94 b6 08 	call	0x116c	; 0x116c <MDIO_voidSetPinValue>
    MDIO_voidSetPinValue(STEPPER_PORT,PINK_COIL_PIN,PIN_HIGH);
    46a8:	80 e0       	ldi	r24, 0x00	; 0
    46aa:	61 e0       	ldi	r22, 0x01	; 1
    46ac:	41 e0       	ldi	r20, 0x01	; 1
    46ae:	0e 94 b6 08 	call	0x116c	; 0x116c <MDIO_voidSetPinValue>
    MDIO_voidSetPinValue(STEPPER_PORT,YELLOW_COIL_PIN,PIN_HIGH);
    46b2:	80 e0       	ldi	r24, 0x00	; 0
    46b4:	62 e0       	ldi	r22, 0x02	; 2
    46b6:	41 e0       	ldi	r20, 0x01	; 1
    46b8:	0e 94 b6 08 	call	0x116c	; 0x116c <MDIO_voidSetPinValue>
    MDIO_voidSetPinValue(STEPPER_PORT,ORANGE_COIL_PIN,PIN_LOW);
    46bc:	80 e0       	ldi	r24, 0x00	; 0
    46be:	63 e0       	ldi	r22, 0x03	; 3
    46c0:	40 e0       	ldi	r20, 0x00	; 0
    46c2:	0e 94 b6 08 	call	0x116c	; 0x116c <MDIO_voidSetPinValue>
    46c6:	80 e0       	ldi	r24, 0x00	; 0
    46c8:	90 e0       	ldi	r25, 0x00	; 0
    46ca:	a0 e2       	ldi	r26, 0x20	; 32
    46cc:	b1 e4       	ldi	r27, 0x41	; 65
    46ce:	89 8f       	std	Y+25, r24	; 0x19
    46d0:	9a 8f       	std	Y+26, r25	; 0x1a
    46d2:	ab 8f       	std	Y+27, r26	; 0x1b
    46d4:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    46d6:	69 8d       	ldd	r22, Y+25	; 0x19
    46d8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    46da:	8b 8d       	ldd	r24, Y+27	; 0x1b
    46dc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    46de:	20 e0       	ldi	r18, 0x00	; 0
    46e0:	30 e0       	ldi	r19, 0x00	; 0
    46e2:	4a ef       	ldi	r20, 0xFA	; 250
    46e4:	54 e4       	ldi	r21, 0x44	; 68
    46e6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    46ea:	dc 01       	movw	r26, r24
    46ec:	cb 01       	movw	r24, r22
    46ee:	8d 8b       	std	Y+21, r24	; 0x15
    46f0:	9e 8b       	std	Y+22, r25	; 0x16
    46f2:	af 8b       	std	Y+23, r26	; 0x17
    46f4:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    46f6:	6d 89       	ldd	r22, Y+21	; 0x15
    46f8:	7e 89       	ldd	r23, Y+22	; 0x16
    46fa:	8f 89       	ldd	r24, Y+23	; 0x17
    46fc:	98 8d       	ldd	r25, Y+24	; 0x18
    46fe:	20 e0       	ldi	r18, 0x00	; 0
    4700:	30 e0       	ldi	r19, 0x00	; 0
    4702:	40 e8       	ldi	r20, 0x80	; 128
    4704:	5f e3       	ldi	r21, 0x3F	; 63
    4706:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    470a:	88 23       	and	r24, r24
    470c:	2c f4       	brge	.+10     	; 0x4718 <HSTEP_voidMotorAngle+0x2e8>
		__ticks = 1;
    470e:	81 e0       	ldi	r24, 0x01	; 1
    4710:	90 e0       	ldi	r25, 0x00	; 0
    4712:	9c 8b       	std	Y+20, r25	; 0x14
    4714:	8b 8b       	std	Y+19, r24	; 0x13
    4716:	3f c0       	rjmp	.+126    	; 0x4796 <HSTEP_voidMotorAngle+0x366>
	else if (__tmp > 65535)
    4718:	6d 89       	ldd	r22, Y+21	; 0x15
    471a:	7e 89       	ldd	r23, Y+22	; 0x16
    471c:	8f 89       	ldd	r24, Y+23	; 0x17
    471e:	98 8d       	ldd	r25, Y+24	; 0x18
    4720:	20 e0       	ldi	r18, 0x00	; 0
    4722:	3f ef       	ldi	r19, 0xFF	; 255
    4724:	4f e7       	ldi	r20, 0x7F	; 127
    4726:	57 e4       	ldi	r21, 0x47	; 71
    4728:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    472c:	18 16       	cp	r1, r24
    472e:	4c f5       	brge	.+82     	; 0x4782 <HSTEP_voidMotorAngle+0x352>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4730:	69 8d       	ldd	r22, Y+25	; 0x19
    4732:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4734:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4736:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4738:	20 e0       	ldi	r18, 0x00	; 0
    473a:	30 e0       	ldi	r19, 0x00	; 0
    473c:	40 e2       	ldi	r20, 0x20	; 32
    473e:	51 e4       	ldi	r21, 0x41	; 65
    4740:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4744:	dc 01       	movw	r26, r24
    4746:	cb 01       	movw	r24, r22
    4748:	bc 01       	movw	r22, r24
    474a:	cd 01       	movw	r24, r26
    474c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4750:	dc 01       	movw	r26, r24
    4752:	cb 01       	movw	r24, r22
    4754:	9c 8b       	std	Y+20, r25	; 0x14
    4756:	8b 8b       	std	Y+19, r24	; 0x13
    4758:	0f c0       	rjmp	.+30     	; 0x4778 <HSTEP_voidMotorAngle+0x348>
    475a:	88 ec       	ldi	r24, 0xC8	; 200
    475c:	90 e0       	ldi	r25, 0x00	; 0
    475e:	9a 8b       	std	Y+18, r25	; 0x12
    4760:	89 8b       	std	Y+17, r24	; 0x11
    4762:	89 89       	ldd	r24, Y+17	; 0x11
    4764:	9a 89       	ldd	r25, Y+18	; 0x12
    4766:	01 97       	sbiw	r24, 0x01	; 1
    4768:	f1 f7       	brne	.-4      	; 0x4766 <HSTEP_voidMotorAngle+0x336>
    476a:	9a 8b       	std	Y+18, r25	; 0x12
    476c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    476e:	8b 89       	ldd	r24, Y+19	; 0x13
    4770:	9c 89       	ldd	r25, Y+20	; 0x14
    4772:	01 97       	sbiw	r24, 0x01	; 1
    4774:	9c 8b       	std	Y+20, r25	; 0x14
    4776:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4778:	8b 89       	ldd	r24, Y+19	; 0x13
    477a:	9c 89       	ldd	r25, Y+20	; 0x14
    477c:	00 97       	sbiw	r24, 0x00	; 0
    477e:	69 f7       	brne	.-38     	; 0x475a <HSTEP_voidMotorAngle+0x32a>
    4780:	14 c0       	rjmp	.+40     	; 0x47aa <HSTEP_voidMotorAngle+0x37a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4782:	6d 89       	ldd	r22, Y+21	; 0x15
    4784:	7e 89       	ldd	r23, Y+22	; 0x16
    4786:	8f 89       	ldd	r24, Y+23	; 0x17
    4788:	98 8d       	ldd	r25, Y+24	; 0x18
    478a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    478e:	dc 01       	movw	r26, r24
    4790:	cb 01       	movw	r24, r22
    4792:	9c 8b       	std	Y+20, r25	; 0x14
    4794:	8b 8b       	std	Y+19, r24	; 0x13
    4796:	8b 89       	ldd	r24, Y+19	; 0x13
    4798:	9c 89       	ldd	r25, Y+20	; 0x14
    479a:	98 8b       	std	Y+16, r25	; 0x10
    479c:	8f 87       	std	Y+15, r24	; 0x0f
    479e:	8f 85       	ldd	r24, Y+15	; 0x0f
    47a0:	98 89       	ldd	r25, Y+16	; 0x10
    47a2:	01 97       	sbiw	r24, 0x01	; 1
    47a4:	f1 f7       	brne	.-4      	; 0x47a2 <HSTEP_voidMotorAngle+0x372>
    47a6:	98 8b       	std	Y+16, r25	; 0x10
    47a8:	8f 87       	std	Y+15, r24	; 0x0f
    _delay_ms(10);
    MDIO_voidSetPinValue(STEPPER_PORT,BLUE_COIL_PIN,PIN_LOW);
    47aa:	80 e0       	ldi	r24, 0x00	; 0
    47ac:	60 e0       	ldi	r22, 0x00	; 0
    47ae:	40 e0       	ldi	r20, 0x00	; 0
    47b0:	0e 94 b6 08 	call	0x116c	; 0x116c <MDIO_voidSetPinValue>
    MDIO_voidSetPinValue(STEPPER_PORT,PINK_COIL_PIN,PIN_HIGH);
    47b4:	80 e0       	ldi	r24, 0x00	; 0
    47b6:	61 e0       	ldi	r22, 0x01	; 1
    47b8:	41 e0       	ldi	r20, 0x01	; 1
    47ba:	0e 94 b6 08 	call	0x116c	; 0x116c <MDIO_voidSetPinValue>
    MDIO_voidSetPinValue(STEPPER_PORT,YELLOW_COIL_PIN,PIN_HIGH);
    47be:	80 e0       	ldi	r24, 0x00	; 0
    47c0:	62 e0       	ldi	r22, 0x02	; 2
    47c2:	41 e0       	ldi	r20, 0x01	; 1
    47c4:	0e 94 b6 08 	call	0x116c	; 0x116c <MDIO_voidSetPinValue>
    MDIO_voidSetPinValue(STEPPER_PORT,ORANGE_COIL_PIN,PIN_HIGH);
    47c8:	80 e0       	ldi	r24, 0x00	; 0
    47ca:	63 e0       	ldi	r22, 0x03	; 3
    47cc:	41 e0       	ldi	r20, 0x01	; 1
    47ce:	0e 94 b6 08 	call	0x116c	; 0x116c <MDIO_voidSetPinValue>
    47d2:	80 e0       	ldi	r24, 0x00	; 0
    47d4:	90 e0       	ldi	r25, 0x00	; 0
    47d6:	a0 e2       	ldi	r26, 0x20	; 32
    47d8:	b1 e4       	ldi	r27, 0x41	; 65
    47da:	8b 87       	std	Y+11, r24	; 0x0b
    47dc:	9c 87       	std	Y+12, r25	; 0x0c
    47de:	ad 87       	std	Y+13, r26	; 0x0d
    47e0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    47e2:	6b 85       	ldd	r22, Y+11	; 0x0b
    47e4:	7c 85       	ldd	r23, Y+12	; 0x0c
    47e6:	8d 85       	ldd	r24, Y+13	; 0x0d
    47e8:	9e 85       	ldd	r25, Y+14	; 0x0e
    47ea:	20 e0       	ldi	r18, 0x00	; 0
    47ec:	30 e0       	ldi	r19, 0x00	; 0
    47ee:	4a ef       	ldi	r20, 0xFA	; 250
    47f0:	54 e4       	ldi	r21, 0x44	; 68
    47f2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    47f6:	dc 01       	movw	r26, r24
    47f8:	cb 01       	movw	r24, r22
    47fa:	8f 83       	std	Y+7, r24	; 0x07
    47fc:	98 87       	std	Y+8, r25	; 0x08
    47fe:	a9 87       	std	Y+9, r26	; 0x09
    4800:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4802:	6f 81       	ldd	r22, Y+7	; 0x07
    4804:	78 85       	ldd	r23, Y+8	; 0x08
    4806:	89 85       	ldd	r24, Y+9	; 0x09
    4808:	9a 85       	ldd	r25, Y+10	; 0x0a
    480a:	20 e0       	ldi	r18, 0x00	; 0
    480c:	30 e0       	ldi	r19, 0x00	; 0
    480e:	40 e8       	ldi	r20, 0x80	; 128
    4810:	5f e3       	ldi	r21, 0x3F	; 63
    4812:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4816:	88 23       	and	r24, r24
    4818:	2c f4       	brge	.+10     	; 0x4824 <HSTEP_voidMotorAngle+0x3f4>
		__ticks = 1;
    481a:	81 e0       	ldi	r24, 0x01	; 1
    481c:	90 e0       	ldi	r25, 0x00	; 0
    481e:	9e 83       	std	Y+6, r25	; 0x06
    4820:	8d 83       	std	Y+5, r24	; 0x05
    4822:	3f c0       	rjmp	.+126    	; 0x48a2 <HSTEP_voidMotorAngle+0x472>
	else if (__tmp > 65535)
    4824:	6f 81       	ldd	r22, Y+7	; 0x07
    4826:	78 85       	ldd	r23, Y+8	; 0x08
    4828:	89 85       	ldd	r24, Y+9	; 0x09
    482a:	9a 85       	ldd	r25, Y+10	; 0x0a
    482c:	20 e0       	ldi	r18, 0x00	; 0
    482e:	3f ef       	ldi	r19, 0xFF	; 255
    4830:	4f e7       	ldi	r20, 0x7F	; 127
    4832:	57 e4       	ldi	r21, 0x47	; 71
    4834:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4838:	18 16       	cp	r1, r24
    483a:	4c f5       	brge	.+82     	; 0x488e <HSTEP_voidMotorAngle+0x45e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    483c:	6b 85       	ldd	r22, Y+11	; 0x0b
    483e:	7c 85       	ldd	r23, Y+12	; 0x0c
    4840:	8d 85       	ldd	r24, Y+13	; 0x0d
    4842:	9e 85       	ldd	r25, Y+14	; 0x0e
    4844:	20 e0       	ldi	r18, 0x00	; 0
    4846:	30 e0       	ldi	r19, 0x00	; 0
    4848:	40 e2       	ldi	r20, 0x20	; 32
    484a:	51 e4       	ldi	r21, 0x41	; 65
    484c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4850:	dc 01       	movw	r26, r24
    4852:	cb 01       	movw	r24, r22
    4854:	bc 01       	movw	r22, r24
    4856:	cd 01       	movw	r24, r26
    4858:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    485c:	dc 01       	movw	r26, r24
    485e:	cb 01       	movw	r24, r22
    4860:	9e 83       	std	Y+6, r25	; 0x06
    4862:	8d 83       	std	Y+5, r24	; 0x05
    4864:	0f c0       	rjmp	.+30     	; 0x4884 <HSTEP_voidMotorAngle+0x454>
    4866:	88 ec       	ldi	r24, 0xC8	; 200
    4868:	90 e0       	ldi	r25, 0x00	; 0
    486a:	9c 83       	std	Y+4, r25	; 0x04
    486c:	8b 83       	std	Y+3, r24	; 0x03
    486e:	8b 81       	ldd	r24, Y+3	; 0x03
    4870:	9c 81       	ldd	r25, Y+4	; 0x04
    4872:	01 97       	sbiw	r24, 0x01	; 1
    4874:	f1 f7       	brne	.-4      	; 0x4872 <HSTEP_voidMotorAngle+0x442>
    4876:	9c 83       	std	Y+4, r25	; 0x04
    4878:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    487a:	8d 81       	ldd	r24, Y+5	; 0x05
    487c:	9e 81       	ldd	r25, Y+6	; 0x06
    487e:	01 97       	sbiw	r24, 0x01	; 1
    4880:	9e 83       	std	Y+6, r25	; 0x06
    4882:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4884:	8d 81       	ldd	r24, Y+5	; 0x05
    4886:	9e 81       	ldd	r25, Y+6	; 0x06
    4888:	00 97       	sbiw	r24, 0x00	; 0
    488a:	69 f7       	brne	.-38     	; 0x4866 <HSTEP_voidMotorAngle+0x436>
    488c:	14 c0       	rjmp	.+40     	; 0x48b6 <HSTEP_voidMotorAngle+0x486>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    488e:	6f 81       	ldd	r22, Y+7	; 0x07
    4890:	78 85       	ldd	r23, Y+8	; 0x08
    4892:	89 85       	ldd	r24, Y+9	; 0x09
    4894:	9a 85       	ldd	r25, Y+10	; 0x0a
    4896:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    489a:	dc 01       	movw	r26, r24
    489c:	cb 01       	movw	r24, r22
    489e:	9e 83       	std	Y+6, r25	; 0x06
    48a0:	8d 83       	std	Y+5, r24	; 0x05
    48a2:	8d 81       	ldd	r24, Y+5	; 0x05
    48a4:	9e 81       	ldd	r25, Y+6	; 0x06
    48a6:	9a 83       	std	Y+2, r25	; 0x02
    48a8:	89 83       	std	Y+1, r24	; 0x01
    48aa:	89 81       	ldd	r24, Y+1	; 0x01
    48ac:	9a 81       	ldd	r25, Y+2	; 0x02
    48ae:	01 97       	sbiw	r24, 0x01	; 1
    48b0:	f1 f7       	brne	.-4      	; 0x48ae <HSTEP_voidMotorAngle+0x47e>
    48b2:	9a 83       	std	Y+2, r25	; 0x02
    48b4:	89 83       	std	Y+1, r24	; 0x01

void HSTEP_voidMotorAngle(u32 A_u32Angle)
{
    u32 local_u32Angle=((NO_OF_STEPS_FOR_360*A_u32Angle)/CIRCLE_ANGLE);
    u32 local_u32Steps=local_u32Angle/NO_OF_COILS; 
    for(u16 i =0;i<local_u32Steps;i++)
    48b6:	89 ad       	ldd	r24, Y+57	; 0x39
    48b8:	9a ad       	ldd	r25, Y+58	; 0x3a
    48ba:	01 96       	adiw	r24, 0x01	; 1
    48bc:	9a af       	std	Y+58, r25	; 0x3a
    48be:	89 af       	std	Y+57, r24	; 0x39
    48c0:	29 ad       	ldd	r18, Y+57	; 0x39
    48c2:	3a ad       	ldd	r19, Y+58	; 0x3a
    48c4:	8b ad       	ldd	r24, Y+59	; 0x3b
    48c6:	9c ad       	ldd	r25, Y+60	; 0x3c
    48c8:	28 17       	cp	r18, r24
    48ca:	39 07       	cpc	r19, r25
    48cc:	08 f4       	brcc	.+2      	; 0x48d0 <HSTEP_voidMotorAngle+0x4a0>
    48ce:	db cd       	rjmp	.-1098   	; 0x4486 <HSTEP_voidMotorAngle+0x56>
    MDIO_voidSetPinValue(STEPPER_PORT,PINK_COIL_PIN,PIN_HIGH);
    MDIO_voidSetPinValue(STEPPER_PORT,YELLOW_COIL_PIN,PIN_HIGH);
    MDIO_voidSetPinValue(STEPPER_PORT,ORANGE_COIL_PIN,PIN_HIGH);
    _delay_ms(10);
    }
    48d0:	c0 5c       	subi	r28, 0xC0	; 192
    48d2:	df 4f       	sbci	r29, 0xFF	; 255
    48d4:	0f b6       	in	r0, 0x3f	; 63
    48d6:	f8 94       	cli
    48d8:	de bf       	out	0x3e, r29	; 62
    48da:	0f be       	out	0x3f, r0	; 63
    48dc:	cd bf       	out	0x3d, r28	; 61
    48de:	cf 91       	pop	r28
    48e0:	df 91       	pop	r29
    48e2:	08 95       	ret

000048e4 <main>:

#include <util/delay.h>

void toggleLED(void);
void main(void)
{
    48e4:	df 93       	push	r29
    48e6:	cf 93       	push	r28
    48e8:	cd b7       	in	r28, 0x3d	; 61
    48ea:	de b7       	in	r29, 0x3e	; 62
    48ec:	63 97       	sbiw	r28, 0x13	; 19
    48ee:	0f b6       	in	r0, 0x3f	; 63
    48f0:	f8 94       	cli
    48f2:	de bf       	out	0x3e, r29	; 62
    48f4:	0f be       	out	0x3f, r0	; 63
    48f6:	cd bf       	out	0x3d, r28	; 61
    u8 local_u8PressedKey;
    MDIO_voidInit();
    48f8:	0e 94 df 07 	call	0xfbe	; 0xfbe <MDIO_voidInit>
    MGI_voidEnable();
    48fc:	0e 94 4f 0d 	call	0x1a9e	; 0x1a9e <MGI_voidEnable>
    // MEXTI_voidConfig(EXTI0,FALLING_EDGE);
    // MEXTI_voidSetCallBack(EXTI0,toggleLED);
    // MEXTI_voidEnable(EXTI0);

	MADC_voidInit();
    4900:	0e 94 4f 06 	call	0xc9e	; 0xc9e <MADC_voidInit>
    HLCD4_voidInit();
    4904:	0e 94 7e 11 	call	0x22fc	; 0x22fc <HLCD4_voidInit>
//    u8 calmChar[] = {0b01110,0b01010,0b01110,0b00100,0b01110,0b10101,0b00100,0b11111};
//    HLCD4_voidStoreCustomChar(calmChar,0);
//    HLCD4_voidDisplayCustomChar(0,1,6);
//    HLCD4_voidGoToPos(2,1);
    
	u16 lcoal_u16Digital=0;
    4908:	1a 8a       	std	Y+18, r1	; 0x12
    490a:	19 8a       	std	Y+17, r1	; 0x11
	u16 lcoal_u16Analog=0;
    490c:	18 8a       	std	Y+16, r1	; 0x10
    490e:	1f 86       	std	Y+15, r1	; 0x0f


	while(1)
    {
		lcoal_u16Digital=MADC_u16GetDigitalValue(ADC0_SINGLE);
    4910:	80 e0       	ldi	r24, 0x00	; 0
    4912:	0e 94 8e 06 	call	0xd1c	; 0xd1c <MADC_u16GetDigitalValue>
    4916:	9a 8b       	std	Y+18, r25	; 0x12
    4918:	89 8b       	std	Y+17, r24	; 0x11
		lcoal_u16Analog=(u16)((lcoal_u16Digital*5000UL)/1024);
    491a:	89 89       	ldd	r24, Y+17	; 0x11
    491c:	9a 89       	ldd	r25, Y+18	; 0x12
    491e:	cc 01       	movw	r24, r24
    4920:	a0 e0       	ldi	r26, 0x00	; 0
    4922:	b0 e0       	ldi	r27, 0x00	; 0
    4924:	28 e8       	ldi	r18, 0x88	; 136
    4926:	33 e1       	ldi	r19, 0x13	; 19
    4928:	40 e0       	ldi	r20, 0x00	; 0
    492a:	50 e0       	ldi	r21, 0x00	; 0
    492c:	bc 01       	movw	r22, r24
    492e:	cd 01       	movw	r24, r26
    4930:	0e 94 3a 26 	call	0x4c74	; 0x4c74 <__mulsi3>
    4934:	dc 01       	movw	r26, r24
    4936:	cb 01       	movw	r24, r22
    4938:	07 2e       	mov	r0, r23
    493a:	7a e0       	ldi	r23, 0x0A	; 10
    493c:	b6 95       	lsr	r27
    493e:	a7 95       	ror	r26
    4940:	97 95       	ror	r25
    4942:	87 95       	ror	r24
    4944:	7a 95       	dec	r23
    4946:	d1 f7       	brne	.-12     	; 0x493c <main+0x58>
    4948:	70 2d       	mov	r23, r0
    494a:	98 8b       	std	Y+16, r25	; 0x10
    494c:	8f 87       	std	Y+15, r24	; 0x0f
		lcoal_u16Analog/=10;
    494e:	8f 85       	ldd	r24, Y+15	; 0x0f
    4950:	98 89       	ldd	r25, Y+16	; 0x10
    4952:	2a e0       	ldi	r18, 0x0A	; 10
    4954:	30 e0       	ldi	r19, 0x00	; 0
    4956:	b9 01       	movw	r22, r18
    4958:	0e 94 59 26 	call	0x4cb2	; 0x4cb2 <__udivmodhi4>
    495c:	cb 01       	movw	r24, r22
    495e:	98 8b       	std	Y+16, r25	; 0x10
    4960:	8f 87       	std	Y+15, r24	; 0x0f
		HLCD4_voidSendString("Temp:");
    4962:	80 e6       	ldi	r24, 0x60	; 96
    4964:	90 e0       	ldi	r25, 0x00	; 0
    4966:	0e 94 db 14 	call	0x29b6	; 0x29b6 <HLCD4_voidSendString>
		HLCD4_voidDisplayNumber(lcoal_u16Analog);
    496a:	8f 85       	ldd	r24, Y+15	; 0x0f
    496c:	98 89       	ldd	r25, Y+16	; 0x10
    496e:	0e 94 ae 15 	call	0x2b5c	; 0x2b5c <HLCD4_voidDisplayNumber>
    4972:	80 e0       	ldi	r24, 0x00	; 0
    4974:	90 e0       	ldi	r25, 0x00	; 0
    4976:	aa e7       	ldi	r26, 0x7A	; 122
    4978:	b4 e4       	ldi	r27, 0x44	; 68
    497a:	8b 87       	std	Y+11, r24	; 0x0b
    497c:	9c 87       	std	Y+12, r25	; 0x0c
    497e:	ad 87       	std	Y+13, r26	; 0x0d
    4980:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4982:	6b 85       	ldd	r22, Y+11	; 0x0b
    4984:	7c 85       	ldd	r23, Y+12	; 0x0c
    4986:	8d 85       	ldd	r24, Y+13	; 0x0d
    4988:	9e 85       	ldd	r25, Y+14	; 0x0e
    498a:	20 e0       	ldi	r18, 0x00	; 0
    498c:	30 e0       	ldi	r19, 0x00	; 0
    498e:	4a ef       	ldi	r20, 0xFA	; 250
    4990:	54 e4       	ldi	r21, 0x44	; 68
    4992:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4996:	dc 01       	movw	r26, r24
    4998:	cb 01       	movw	r24, r22
    499a:	8f 83       	std	Y+7, r24	; 0x07
    499c:	98 87       	std	Y+8, r25	; 0x08
    499e:	a9 87       	std	Y+9, r26	; 0x09
    49a0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    49a2:	6f 81       	ldd	r22, Y+7	; 0x07
    49a4:	78 85       	ldd	r23, Y+8	; 0x08
    49a6:	89 85       	ldd	r24, Y+9	; 0x09
    49a8:	9a 85       	ldd	r25, Y+10	; 0x0a
    49aa:	20 e0       	ldi	r18, 0x00	; 0
    49ac:	30 e0       	ldi	r19, 0x00	; 0
    49ae:	40 e8       	ldi	r20, 0x80	; 128
    49b0:	5f e3       	ldi	r21, 0x3F	; 63
    49b2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    49b6:	88 23       	and	r24, r24
    49b8:	2c f4       	brge	.+10     	; 0x49c4 <main+0xe0>
		__ticks = 1;
    49ba:	81 e0       	ldi	r24, 0x01	; 1
    49bc:	90 e0       	ldi	r25, 0x00	; 0
    49be:	9e 83       	std	Y+6, r25	; 0x06
    49c0:	8d 83       	std	Y+5, r24	; 0x05
    49c2:	3f c0       	rjmp	.+126    	; 0x4a42 <main+0x15e>
	else if (__tmp > 65535)
    49c4:	6f 81       	ldd	r22, Y+7	; 0x07
    49c6:	78 85       	ldd	r23, Y+8	; 0x08
    49c8:	89 85       	ldd	r24, Y+9	; 0x09
    49ca:	9a 85       	ldd	r25, Y+10	; 0x0a
    49cc:	20 e0       	ldi	r18, 0x00	; 0
    49ce:	3f ef       	ldi	r19, 0xFF	; 255
    49d0:	4f e7       	ldi	r20, 0x7F	; 127
    49d2:	57 e4       	ldi	r21, 0x47	; 71
    49d4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    49d8:	18 16       	cp	r1, r24
    49da:	4c f5       	brge	.+82     	; 0x4a2e <main+0x14a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    49dc:	6b 85       	ldd	r22, Y+11	; 0x0b
    49de:	7c 85       	ldd	r23, Y+12	; 0x0c
    49e0:	8d 85       	ldd	r24, Y+13	; 0x0d
    49e2:	9e 85       	ldd	r25, Y+14	; 0x0e
    49e4:	20 e0       	ldi	r18, 0x00	; 0
    49e6:	30 e0       	ldi	r19, 0x00	; 0
    49e8:	40 e2       	ldi	r20, 0x20	; 32
    49ea:	51 e4       	ldi	r21, 0x41	; 65
    49ec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    49f0:	dc 01       	movw	r26, r24
    49f2:	cb 01       	movw	r24, r22
    49f4:	bc 01       	movw	r22, r24
    49f6:	cd 01       	movw	r24, r26
    49f8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    49fc:	dc 01       	movw	r26, r24
    49fe:	cb 01       	movw	r24, r22
    4a00:	9e 83       	std	Y+6, r25	; 0x06
    4a02:	8d 83       	std	Y+5, r24	; 0x05
    4a04:	0f c0       	rjmp	.+30     	; 0x4a24 <main+0x140>
    4a06:	88 ec       	ldi	r24, 0xC8	; 200
    4a08:	90 e0       	ldi	r25, 0x00	; 0
    4a0a:	9c 83       	std	Y+4, r25	; 0x04
    4a0c:	8b 83       	std	Y+3, r24	; 0x03
    4a0e:	8b 81       	ldd	r24, Y+3	; 0x03
    4a10:	9c 81       	ldd	r25, Y+4	; 0x04
    4a12:	01 97       	sbiw	r24, 0x01	; 1
    4a14:	f1 f7       	brne	.-4      	; 0x4a12 <main+0x12e>
    4a16:	9c 83       	std	Y+4, r25	; 0x04
    4a18:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4a1a:	8d 81       	ldd	r24, Y+5	; 0x05
    4a1c:	9e 81       	ldd	r25, Y+6	; 0x06
    4a1e:	01 97       	sbiw	r24, 0x01	; 1
    4a20:	9e 83       	std	Y+6, r25	; 0x06
    4a22:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4a24:	8d 81       	ldd	r24, Y+5	; 0x05
    4a26:	9e 81       	ldd	r25, Y+6	; 0x06
    4a28:	00 97       	sbiw	r24, 0x00	; 0
    4a2a:	69 f7       	brne	.-38     	; 0x4a06 <main+0x122>
    4a2c:	14 c0       	rjmp	.+40     	; 0x4a56 <main+0x172>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4a2e:	6f 81       	ldd	r22, Y+7	; 0x07
    4a30:	78 85       	ldd	r23, Y+8	; 0x08
    4a32:	89 85       	ldd	r24, Y+9	; 0x09
    4a34:	9a 85       	ldd	r25, Y+10	; 0x0a
    4a36:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4a3a:	dc 01       	movw	r26, r24
    4a3c:	cb 01       	movw	r24, r22
    4a3e:	9e 83       	std	Y+6, r25	; 0x06
    4a40:	8d 83       	std	Y+5, r24	; 0x05
    4a42:	8d 81       	ldd	r24, Y+5	; 0x05
    4a44:	9e 81       	ldd	r25, Y+6	; 0x06
    4a46:	9a 83       	std	Y+2, r25	; 0x02
    4a48:	89 83       	std	Y+1, r24	; 0x01
    4a4a:	89 81       	ldd	r24, Y+1	; 0x01
    4a4c:	9a 81       	ldd	r25, Y+2	; 0x02
    4a4e:	01 97       	sbiw	r24, 0x01	; 1
    4a50:	f1 f7       	brne	.-4      	; 0x4a4e <main+0x16a>
    4a52:	9a 83       	std	Y+2, r25	; 0x02
    4a54:	89 83       	std	Y+1, r24	; 0x01

		_delay_ms(1000);
		HLCD4_voidClearDisplay();
    4a56:	0e 94 53 14 	call	0x28a6	; 0x28a6 <HLCD4_voidClearDisplay>
    4a5a:	5a cf       	rjmp	.-332    	; 0x4910 <main+0x2c>

00004a5c <toggleLED>:

    }
}

void toggleLED(void)
{
    4a5c:	df 93       	push	r29
    4a5e:	cf 93       	push	r28
    4a60:	cd b7       	in	r28, 0x3d	; 61
    4a62:	de b7       	in	r29, 0x3e	; 62
    4a64:	6c 97       	sbiw	r28, 0x1c	; 28
    4a66:	0f b6       	in	r0, 0x3f	; 63
    4a68:	f8 94       	cli
    4a6a:	de bf       	out	0x3e, r29	; 62
    4a6c:	0f be       	out	0x3f, r0	; 63
    4a6e:	cd bf       	out	0x3d, r28	; 61
	static u8 local_u8Flag=0;
	if(local_u8Flag)
    4a70:	80 91 a1 00 	lds	r24, 0x00A1
    4a74:	88 23       	and	r24, r24
    4a76:	09 f4       	brne	.+2      	; 0x4a7a <toggleLED+0x1e>
    4a78:	7a c0       	rjmp	.+244    	; 0x4b6e <toggleLED+0x112>
	{
		local_u8Flag=0;
    4a7a:	10 92 a1 00 	sts	0x00A1, r1
		MDIO_voidSetPinValue(PORTA,PIN0,PIN_HIGH);
    4a7e:	80 e0       	ldi	r24, 0x00	; 0
    4a80:	60 e0       	ldi	r22, 0x00	; 0
    4a82:	41 e0       	ldi	r20, 0x01	; 1
    4a84:	0e 94 b6 08 	call	0x116c	; 0x116c <MDIO_voidSetPinValue>
    4a88:	80 e0       	ldi	r24, 0x00	; 0
    4a8a:	90 e0       	ldi	r25, 0x00	; 0
    4a8c:	a8 ec       	ldi	r26, 0xC8	; 200
    4a8e:	b2 e4       	ldi	r27, 0x42	; 66
    4a90:	89 8f       	std	Y+25, r24	; 0x19
    4a92:	9a 8f       	std	Y+26, r25	; 0x1a
    4a94:	ab 8f       	std	Y+27, r26	; 0x1b
    4a96:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4a98:	69 8d       	ldd	r22, Y+25	; 0x19
    4a9a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4a9c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4a9e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4aa0:	20 e0       	ldi	r18, 0x00	; 0
    4aa2:	30 e0       	ldi	r19, 0x00	; 0
    4aa4:	4a ef       	ldi	r20, 0xFA	; 250
    4aa6:	54 e4       	ldi	r21, 0x44	; 68
    4aa8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4aac:	dc 01       	movw	r26, r24
    4aae:	cb 01       	movw	r24, r22
    4ab0:	8d 8b       	std	Y+21, r24	; 0x15
    4ab2:	9e 8b       	std	Y+22, r25	; 0x16
    4ab4:	af 8b       	std	Y+23, r26	; 0x17
    4ab6:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    4ab8:	6d 89       	ldd	r22, Y+21	; 0x15
    4aba:	7e 89       	ldd	r23, Y+22	; 0x16
    4abc:	8f 89       	ldd	r24, Y+23	; 0x17
    4abe:	98 8d       	ldd	r25, Y+24	; 0x18
    4ac0:	20 e0       	ldi	r18, 0x00	; 0
    4ac2:	30 e0       	ldi	r19, 0x00	; 0
    4ac4:	40 e8       	ldi	r20, 0x80	; 128
    4ac6:	5f e3       	ldi	r21, 0x3F	; 63
    4ac8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4acc:	88 23       	and	r24, r24
    4ace:	2c f4       	brge	.+10     	; 0x4ada <toggleLED+0x7e>
		__ticks = 1;
    4ad0:	81 e0       	ldi	r24, 0x01	; 1
    4ad2:	90 e0       	ldi	r25, 0x00	; 0
    4ad4:	9c 8b       	std	Y+20, r25	; 0x14
    4ad6:	8b 8b       	std	Y+19, r24	; 0x13
    4ad8:	3f c0       	rjmp	.+126    	; 0x4b58 <toggleLED+0xfc>
	else if (__tmp > 65535)
    4ada:	6d 89       	ldd	r22, Y+21	; 0x15
    4adc:	7e 89       	ldd	r23, Y+22	; 0x16
    4ade:	8f 89       	ldd	r24, Y+23	; 0x17
    4ae0:	98 8d       	ldd	r25, Y+24	; 0x18
    4ae2:	20 e0       	ldi	r18, 0x00	; 0
    4ae4:	3f ef       	ldi	r19, 0xFF	; 255
    4ae6:	4f e7       	ldi	r20, 0x7F	; 127
    4ae8:	57 e4       	ldi	r21, 0x47	; 71
    4aea:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4aee:	18 16       	cp	r1, r24
    4af0:	4c f5       	brge	.+82     	; 0x4b44 <toggleLED+0xe8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4af2:	69 8d       	ldd	r22, Y+25	; 0x19
    4af4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4af6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4af8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4afa:	20 e0       	ldi	r18, 0x00	; 0
    4afc:	30 e0       	ldi	r19, 0x00	; 0
    4afe:	40 e2       	ldi	r20, 0x20	; 32
    4b00:	51 e4       	ldi	r21, 0x41	; 65
    4b02:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4b06:	dc 01       	movw	r26, r24
    4b08:	cb 01       	movw	r24, r22
    4b0a:	bc 01       	movw	r22, r24
    4b0c:	cd 01       	movw	r24, r26
    4b0e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4b12:	dc 01       	movw	r26, r24
    4b14:	cb 01       	movw	r24, r22
    4b16:	9c 8b       	std	Y+20, r25	; 0x14
    4b18:	8b 8b       	std	Y+19, r24	; 0x13
    4b1a:	0f c0       	rjmp	.+30     	; 0x4b3a <toggleLED+0xde>
    4b1c:	88 ec       	ldi	r24, 0xC8	; 200
    4b1e:	90 e0       	ldi	r25, 0x00	; 0
    4b20:	9a 8b       	std	Y+18, r25	; 0x12
    4b22:	89 8b       	std	Y+17, r24	; 0x11
    4b24:	89 89       	ldd	r24, Y+17	; 0x11
    4b26:	9a 89       	ldd	r25, Y+18	; 0x12
    4b28:	01 97       	sbiw	r24, 0x01	; 1
    4b2a:	f1 f7       	brne	.-4      	; 0x4b28 <toggleLED+0xcc>
    4b2c:	9a 8b       	std	Y+18, r25	; 0x12
    4b2e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4b30:	8b 89       	ldd	r24, Y+19	; 0x13
    4b32:	9c 89       	ldd	r25, Y+20	; 0x14
    4b34:	01 97       	sbiw	r24, 0x01	; 1
    4b36:	9c 8b       	std	Y+20, r25	; 0x14
    4b38:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4b3a:	8b 89       	ldd	r24, Y+19	; 0x13
    4b3c:	9c 89       	ldd	r25, Y+20	; 0x14
    4b3e:	00 97       	sbiw	r24, 0x00	; 0
    4b40:	69 f7       	brne	.-38     	; 0x4b1c <toggleLED+0xc0>
    4b42:	8f c0       	rjmp	.+286    	; 0x4c62 <toggleLED+0x206>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4b44:	6d 89       	ldd	r22, Y+21	; 0x15
    4b46:	7e 89       	ldd	r23, Y+22	; 0x16
    4b48:	8f 89       	ldd	r24, Y+23	; 0x17
    4b4a:	98 8d       	ldd	r25, Y+24	; 0x18
    4b4c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4b50:	dc 01       	movw	r26, r24
    4b52:	cb 01       	movw	r24, r22
    4b54:	9c 8b       	std	Y+20, r25	; 0x14
    4b56:	8b 8b       	std	Y+19, r24	; 0x13
    4b58:	8b 89       	ldd	r24, Y+19	; 0x13
    4b5a:	9c 89       	ldd	r25, Y+20	; 0x14
    4b5c:	98 8b       	std	Y+16, r25	; 0x10
    4b5e:	8f 87       	std	Y+15, r24	; 0x0f
    4b60:	8f 85       	ldd	r24, Y+15	; 0x0f
    4b62:	98 89       	ldd	r25, Y+16	; 0x10
    4b64:	01 97       	sbiw	r24, 0x01	; 1
    4b66:	f1 f7       	brne	.-4      	; 0x4b64 <toggleLED+0x108>
    4b68:	98 8b       	std	Y+16, r25	; 0x10
    4b6a:	8f 87       	std	Y+15, r24	; 0x0f
    4b6c:	7a c0       	rjmp	.+244    	; 0x4c62 <toggleLED+0x206>
		_delay_ms(100);
	}else
	{
		local_u8Flag=1;
    4b6e:	81 e0       	ldi	r24, 0x01	; 1
    4b70:	80 93 a1 00 	sts	0x00A1, r24
		MDIO_voidSetPinValue(PORTA,PIN0,PIN_LOW);
    4b74:	80 e0       	ldi	r24, 0x00	; 0
    4b76:	60 e0       	ldi	r22, 0x00	; 0
    4b78:	40 e0       	ldi	r20, 0x00	; 0
    4b7a:	0e 94 b6 08 	call	0x116c	; 0x116c <MDIO_voidSetPinValue>
    4b7e:	80 e0       	ldi	r24, 0x00	; 0
    4b80:	90 e0       	ldi	r25, 0x00	; 0
    4b82:	a8 ec       	ldi	r26, 0xC8	; 200
    4b84:	b2 e4       	ldi	r27, 0x42	; 66
    4b86:	8b 87       	std	Y+11, r24	; 0x0b
    4b88:	9c 87       	std	Y+12, r25	; 0x0c
    4b8a:	ad 87       	std	Y+13, r26	; 0x0d
    4b8c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4b8e:	6b 85       	ldd	r22, Y+11	; 0x0b
    4b90:	7c 85       	ldd	r23, Y+12	; 0x0c
    4b92:	8d 85       	ldd	r24, Y+13	; 0x0d
    4b94:	9e 85       	ldd	r25, Y+14	; 0x0e
    4b96:	20 e0       	ldi	r18, 0x00	; 0
    4b98:	30 e0       	ldi	r19, 0x00	; 0
    4b9a:	4a ef       	ldi	r20, 0xFA	; 250
    4b9c:	54 e4       	ldi	r21, 0x44	; 68
    4b9e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4ba2:	dc 01       	movw	r26, r24
    4ba4:	cb 01       	movw	r24, r22
    4ba6:	8f 83       	std	Y+7, r24	; 0x07
    4ba8:	98 87       	std	Y+8, r25	; 0x08
    4baa:	a9 87       	std	Y+9, r26	; 0x09
    4bac:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4bae:	6f 81       	ldd	r22, Y+7	; 0x07
    4bb0:	78 85       	ldd	r23, Y+8	; 0x08
    4bb2:	89 85       	ldd	r24, Y+9	; 0x09
    4bb4:	9a 85       	ldd	r25, Y+10	; 0x0a
    4bb6:	20 e0       	ldi	r18, 0x00	; 0
    4bb8:	30 e0       	ldi	r19, 0x00	; 0
    4bba:	40 e8       	ldi	r20, 0x80	; 128
    4bbc:	5f e3       	ldi	r21, 0x3F	; 63
    4bbe:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4bc2:	88 23       	and	r24, r24
    4bc4:	2c f4       	brge	.+10     	; 0x4bd0 <toggleLED+0x174>
		__ticks = 1;
    4bc6:	81 e0       	ldi	r24, 0x01	; 1
    4bc8:	90 e0       	ldi	r25, 0x00	; 0
    4bca:	9e 83       	std	Y+6, r25	; 0x06
    4bcc:	8d 83       	std	Y+5, r24	; 0x05
    4bce:	3f c0       	rjmp	.+126    	; 0x4c4e <toggleLED+0x1f2>
	else if (__tmp > 65535)
    4bd0:	6f 81       	ldd	r22, Y+7	; 0x07
    4bd2:	78 85       	ldd	r23, Y+8	; 0x08
    4bd4:	89 85       	ldd	r24, Y+9	; 0x09
    4bd6:	9a 85       	ldd	r25, Y+10	; 0x0a
    4bd8:	20 e0       	ldi	r18, 0x00	; 0
    4bda:	3f ef       	ldi	r19, 0xFF	; 255
    4bdc:	4f e7       	ldi	r20, 0x7F	; 127
    4bde:	57 e4       	ldi	r21, 0x47	; 71
    4be0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4be4:	18 16       	cp	r1, r24
    4be6:	4c f5       	brge	.+82     	; 0x4c3a <toggleLED+0x1de>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4be8:	6b 85       	ldd	r22, Y+11	; 0x0b
    4bea:	7c 85       	ldd	r23, Y+12	; 0x0c
    4bec:	8d 85       	ldd	r24, Y+13	; 0x0d
    4bee:	9e 85       	ldd	r25, Y+14	; 0x0e
    4bf0:	20 e0       	ldi	r18, 0x00	; 0
    4bf2:	30 e0       	ldi	r19, 0x00	; 0
    4bf4:	40 e2       	ldi	r20, 0x20	; 32
    4bf6:	51 e4       	ldi	r21, 0x41	; 65
    4bf8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4bfc:	dc 01       	movw	r26, r24
    4bfe:	cb 01       	movw	r24, r22
    4c00:	bc 01       	movw	r22, r24
    4c02:	cd 01       	movw	r24, r26
    4c04:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4c08:	dc 01       	movw	r26, r24
    4c0a:	cb 01       	movw	r24, r22
    4c0c:	9e 83       	std	Y+6, r25	; 0x06
    4c0e:	8d 83       	std	Y+5, r24	; 0x05
    4c10:	0f c0       	rjmp	.+30     	; 0x4c30 <toggleLED+0x1d4>
    4c12:	88 ec       	ldi	r24, 0xC8	; 200
    4c14:	90 e0       	ldi	r25, 0x00	; 0
    4c16:	9c 83       	std	Y+4, r25	; 0x04
    4c18:	8b 83       	std	Y+3, r24	; 0x03
    4c1a:	8b 81       	ldd	r24, Y+3	; 0x03
    4c1c:	9c 81       	ldd	r25, Y+4	; 0x04
    4c1e:	01 97       	sbiw	r24, 0x01	; 1
    4c20:	f1 f7       	brne	.-4      	; 0x4c1e <toggleLED+0x1c2>
    4c22:	9c 83       	std	Y+4, r25	; 0x04
    4c24:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4c26:	8d 81       	ldd	r24, Y+5	; 0x05
    4c28:	9e 81       	ldd	r25, Y+6	; 0x06
    4c2a:	01 97       	sbiw	r24, 0x01	; 1
    4c2c:	9e 83       	std	Y+6, r25	; 0x06
    4c2e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4c30:	8d 81       	ldd	r24, Y+5	; 0x05
    4c32:	9e 81       	ldd	r25, Y+6	; 0x06
    4c34:	00 97       	sbiw	r24, 0x00	; 0
    4c36:	69 f7       	brne	.-38     	; 0x4c12 <toggleLED+0x1b6>
    4c38:	14 c0       	rjmp	.+40     	; 0x4c62 <toggleLED+0x206>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4c3a:	6f 81       	ldd	r22, Y+7	; 0x07
    4c3c:	78 85       	ldd	r23, Y+8	; 0x08
    4c3e:	89 85       	ldd	r24, Y+9	; 0x09
    4c40:	9a 85       	ldd	r25, Y+10	; 0x0a
    4c42:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4c46:	dc 01       	movw	r26, r24
    4c48:	cb 01       	movw	r24, r22
    4c4a:	9e 83       	std	Y+6, r25	; 0x06
    4c4c:	8d 83       	std	Y+5, r24	; 0x05
    4c4e:	8d 81       	ldd	r24, Y+5	; 0x05
    4c50:	9e 81       	ldd	r25, Y+6	; 0x06
    4c52:	9a 83       	std	Y+2, r25	; 0x02
    4c54:	89 83       	std	Y+1, r24	; 0x01
    4c56:	89 81       	ldd	r24, Y+1	; 0x01
    4c58:	9a 81       	ldd	r25, Y+2	; 0x02
    4c5a:	01 97       	sbiw	r24, 0x01	; 1
    4c5c:	f1 f7       	brne	.-4      	; 0x4c5a <toggleLED+0x1fe>
    4c5e:	9a 83       	std	Y+2, r25	; 0x02
    4c60:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(100);
	}
}
    4c62:	6c 96       	adiw	r28, 0x1c	; 28
    4c64:	0f b6       	in	r0, 0x3f	; 63
    4c66:	f8 94       	cli
    4c68:	de bf       	out	0x3e, r29	; 62
    4c6a:	0f be       	out	0x3f, r0	; 63
    4c6c:	cd bf       	out	0x3d, r28	; 61
    4c6e:	cf 91       	pop	r28
    4c70:	df 91       	pop	r29
    4c72:	08 95       	ret

00004c74 <__mulsi3>:
    4c74:	62 9f       	mul	r22, r18
    4c76:	d0 01       	movw	r26, r0
    4c78:	73 9f       	mul	r23, r19
    4c7a:	f0 01       	movw	r30, r0
    4c7c:	82 9f       	mul	r24, r18
    4c7e:	e0 0d       	add	r30, r0
    4c80:	f1 1d       	adc	r31, r1
    4c82:	64 9f       	mul	r22, r20
    4c84:	e0 0d       	add	r30, r0
    4c86:	f1 1d       	adc	r31, r1
    4c88:	92 9f       	mul	r25, r18
    4c8a:	f0 0d       	add	r31, r0
    4c8c:	83 9f       	mul	r24, r19
    4c8e:	f0 0d       	add	r31, r0
    4c90:	74 9f       	mul	r23, r20
    4c92:	f0 0d       	add	r31, r0
    4c94:	65 9f       	mul	r22, r21
    4c96:	f0 0d       	add	r31, r0
    4c98:	99 27       	eor	r25, r25
    4c9a:	72 9f       	mul	r23, r18
    4c9c:	b0 0d       	add	r27, r0
    4c9e:	e1 1d       	adc	r30, r1
    4ca0:	f9 1f       	adc	r31, r25
    4ca2:	63 9f       	mul	r22, r19
    4ca4:	b0 0d       	add	r27, r0
    4ca6:	e1 1d       	adc	r30, r1
    4ca8:	f9 1f       	adc	r31, r25
    4caa:	bd 01       	movw	r22, r26
    4cac:	cf 01       	movw	r24, r30
    4cae:	11 24       	eor	r1, r1
    4cb0:	08 95       	ret

00004cb2 <__udivmodhi4>:
    4cb2:	aa 1b       	sub	r26, r26
    4cb4:	bb 1b       	sub	r27, r27
    4cb6:	51 e1       	ldi	r21, 0x11	; 17
    4cb8:	07 c0       	rjmp	.+14     	; 0x4cc8 <__udivmodhi4_ep>

00004cba <__udivmodhi4_loop>:
    4cba:	aa 1f       	adc	r26, r26
    4cbc:	bb 1f       	adc	r27, r27
    4cbe:	a6 17       	cp	r26, r22
    4cc0:	b7 07       	cpc	r27, r23
    4cc2:	10 f0       	brcs	.+4      	; 0x4cc8 <__udivmodhi4_ep>
    4cc4:	a6 1b       	sub	r26, r22
    4cc6:	b7 0b       	sbc	r27, r23

00004cc8 <__udivmodhi4_ep>:
    4cc8:	88 1f       	adc	r24, r24
    4cca:	99 1f       	adc	r25, r25
    4ccc:	5a 95       	dec	r21
    4cce:	a9 f7       	brne	.-22     	; 0x4cba <__udivmodhi4_loop>
    4cd0:	80 95       	com	r24
    4cd2:	90 95       	com	r25
    4cd4:	bc 01       	movw	r22, r24
    4cd6:	cd 01       	movw	r24, r26
    4cd8:	08 95       	ret

00004cda <__prologue_saves__>:
    4cda:	2f 92       	push	r2
    4cdc:	3f 92       	push	r3
    4cde:	4f 92       	push	r4
    4ce0:	5f 92       	push	r5
    4ce2:	6f 92       	push	r6
    4ce4:	7f 92       	push	r7
    4ce6:	8f 92       	push	r8
    4ce8:	9f 92       	push	r9
    4cea:	af 92       	push	r10
    4cec:	bf 92       	push	r11
    4cee:	cf 92       	push	r12
    4cf0:	df 92       	push	r13
    4cf2:	ef 92       	push	r14
    4cf4:	ff 92       	push	r15
    4cf6:	0f 93       	push	r16
    4cf8:	1f 93       	push	r17
    4cfa:	cf 93       	push	r28
    4cfc:	df 93       	push	r29
    4cfe:	cd b7       	in	r28, 0x3d	; 61
    4d00:	de b7       	in	r29, 0x3e	; 62
    4d02:	ca 1b       	sub	r28, r26
    4d04:	db 0b       	sbc	r29, r27
    4d06:	0f b6       	in	r0, 0x3f	; 63
    4d08:	f8 94       	cli
    4d0a:	de bf       	out	0x3e, r29	; 62
    4d0c:	0f be       	out	0x3f, r0	; 63
    4d0e:	cd bf       	out	0x3d, r28	; 61
    4d10:	09 94       	ijmp

00004d12 <__epilogue_restores__>:
    4d12:	2a 88       	ldd	r2, Y+18	; 0x12
    4d14:	39 88       	ldd	r3, Y+17	; 0x11
    4d16:	48 88       	ldd	r4, Y+16	; 0x10
    4d18:	5f 84       	ldd	r5, Y+15	; 0x0f
    4d1a:	6e 84       	ldd	r6, Y+14	; 0x0e
    4d1c:	7d 84       	ldd	r7, Y+13	; 0x0d
    4d1e:	8c 84       	ldd	r8, Y+12	; 0x0c
    4d20:	9b 84       	ldd	r9, Y+11	; 0x0b
    4d22:	aa 84       	ldd	r10, Y+10	; 0x0a
    4d24:	b9 84       	ldd	r11, Y+9	; 0x09
    4d26:	c8 84       	ldd	r12, Y+8	; 0x08
    4d28:	df 80       	ldd	r13, Y+7	; 0x07
    4d2a:	ee 80       	ldd	r14, Y+6	; 0x06
    4d2c:	fd 80       	ldd	r15, Y+5	; 0x05
    4d2e:	0c 81       	ldd	r16, Y+4	; 0x04
    4d30:	1b 81       	ldd	r17, Y+3	; 0x03
    4d32:	aa 81       	ldd	r26, Y+2	; 0x02
    4d34:	b9 81       	ldd	r27, Y+1	; 0x01
    4d36:	ce 0f       	add	r28, r30
    4d38:	d1 1d       	adc	r29, r1
    4d3a:	0f b6       	in	r0, 0x3f	; 63
    4d3c:	f8 94       	cli
    4d3e:	de bf       	out	0x3e, r29	; 62
    4d40:	0f be       	out	0x3f, r0	; 63
    4d42:	cd bf       	out	0x3d, r28	; 61
    4d44:	ed 01       	movw	r28, r26
    4d46:	08 95       	ret

00004d48 <_exit>:
    4d48:	f8 94       	cli

00004d4a <__stop_program>:
    4d4a:	ff cf       	rjmp	.-2      	; 0x4d4a <__stop_program>
