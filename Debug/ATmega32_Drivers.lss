
ATmega32_Drivers.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000039ea  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000042  00800060  000039ea  00003a7e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  008000a2  008000a2  00003ac0  2**0
                  ALLOC
  3 .stab         00002f10  00000000  00000000  00003ac0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000f2b  00000000  00000000  000069d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000160  00000000  00000000  000078fb  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000018f  00000000  00000000  00007a5b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002045  00000000  00000000  00007bea  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001101  00000000  00000000  00009c2f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000f82  00000000  00000000  0000ad30  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000180  00000000  00000000  0000bcb4  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002c2  00000000  00000000  0000be34  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000088e  00000000  00000000  0000c0f6  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000c984  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ea ee       	ldi	r30, 0xEA	; 234
      68:	f9 e3       	ldi	r31, 0x39	; 57
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a2 3a       	cpi	r26, 0xA2	; 162
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a2 ea       	ldi	r26, 0xA2	; 162
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a3 3a       	cpi	r26, 0xA3	; 163
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 5a 1c 	call	0x38b4	; 0x38b4 <main>
      8a:	0c 94 f3 1c 	jmp	0x39e6	; 0x39e6 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 bc 1c 	jmp	0x3978	; 0x3978 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a6 e6       	ldi	r26, 0x66	; 102
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 d8 1c 	jmp	0x39b0	; 0x39b0 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 c8 1c 	jmp	0x3990	; 0x3990 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 e4 1c 	jmp	0x39c8	; 0x39c8 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 c8 1c 	jmp	0x3990	; 0x3990 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 e4 1c 	jmp	0x39c8	; 0x39c8 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 bc 1c 	jmp	0x3978	; 0x3978 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	86 e6       	ldi	r24, 0x66	; 102
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 d8 1c 	jmp	0x39b0	; 0x39b0 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 c4 1c 	jmp	0x3988	; 0x3988 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	66 e6       	ldi	r22, 0x66	; 102
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 e0 1c 	jmp	0x39c0	; 0x39c0 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 c8 1c 	jmp	0x3990	; 0x3990 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 e4 1c 	jmp	0x39c8	; 0x39c8 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 c8 1c 	jmp	0x3990	; 0x3990 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 e4 1c 	jmp	0x39c8	; 0x39c8 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 c8 1c 	jmp	0x3990	; 0x3990 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 e4 1c 	jmp	0x39c8	; 0x39c8 <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 cc 1c 	jmp	0x3998	; 0x3998 <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 e8 1c 	jmp	0x39d0	; 0x39d0 <__epilogue_restores__+0x20>

00000952 <__pack_f>:
     952:	df 92       	push	r13
     954:	ef 92       	push	r14
     956:	ff 92       	push	r15
     958:	0f 93       	push	r16
     95a:	1f 93       	push	r17
     95c:	fc 01       	movw	r30, r24
     95e:	e4 80       	ldd	r14, Z+4	; 0x04
     960:	f5 80       	ldd	r15, Z+5	; 0x05
     962:	06 81       	ldd	r16, Z+6	; 0x06
     964:	17 81       	ldd	r17, Z+7	; 0x07
     966:	d1 80       	ldd	r13, Z+1	; 0x01
     968:	80 81       	ld	r24, Z
     96a:	82 30       	cpi	r24, 0x02	; 2
     96c:	48 f4       	brcc	.+18     	; 0x980 <__pack_f+0x2e>
     96e:	80 e0       	ldi	r24, 0x00	; 0
     970:	90 e0       	ldi	r25, 0x00	; 0
     972:	a0 e1       	ldi	r26, 0x10	; 16
     974:	b0 e0       	ldi	r27, 0x00	; 0
     976:	e8 2a       	or	r14, r24
     978:	f9 2a       	or	r15, r25
     97a:	0a 2b       	or	r16, r26
     97c:	1b 2b       	or	r17, r27
     97e:	a5 c0       	rjmp	.+330    	; 0xaca <__pack_f+0x178>
     980:	84 30       	cpi	r24, 0x04	; 4
     982:	09 f4       	brne	.+2      	; 0x986 <__pack_f+0x34>
     984:	9f c0       	rjmp	.+318    	; 0xac4 <__pack_f+0x172>
     986:	82 30       	cpi	r24, 0x02	; 2
     988:	21 f4       	brne	.+8      	; 0x992 <__pack_f+0x40>
     98a:	ee 24       	eor	r14, r14
     98c:	ff 24       	eor	r15, r15
     98e:	87 01       	movw	r16, r14
     990:	05 c0       	rjmp	.+10     	; 0x99c <__pack_f+0x4a>
     992:	e1 14       	cp	r14, r1
     994:	f1 04       	cpc	r15, r1
     996:	01 05       	cpc	r16, r1
     998:	11 05       	cpc	r17, r1
     99a:	19 f4       	brne	.+6      	; 0x9a2 <__pack_f+0x50>
     99c:	e0 e0       	ldi	r30, 0x00	; 0
     99e:	f0 e0       	ldi	r31, 0x00	; 0
     9a0:	96 c0       	rjmp	.+300    	; 0xace <__pack_f+0x17c>
     9a2:	62 81       	ldd	r22, Z+2	; 0x02
     9a4:	73 81       	ldd	r23, Z+3	; 0x03
     9a6:	9f ef       	ldi	r25, 0xFF	; 255
     9a8:	62 38       	cpi	r22, 0x82	; 130
     9aa:	79 07       	cpc	r23, r25
     9ac:	0c f0       	brlt	.+2      	; 0x9b0 <__pack_f+0x5e>
     9ae:	5b c0       	rjmp	.+182    	; 0xa66 <__pack_f+0x114>
     9b0:	22 e8       	ldi	r18, 0x82	; 130
     9b2:	3f ef       	ldi	r19, 0xFF	; 255
     9b4:	26 1b       	sub	r18, r22
     9b6:	37 0b       	sbc	r19, r23
     9b8:	2a 31       	cpi	r18, 0x1A	; 26
     9ba:	31 05       	cpc	r19, r1
     9bc:	2c f0       	brlt	.+10     	; 0x9c8 <__pack_f+0x76>
     9be:	20 e0       	ldi	r18, 0x00	; 0
     9c0:	30 e0       	ldi	r19, 0x00	; 0
     9c2:	40 e0       	ldi	r20, 0x00	; 0
     9c4:	50 e0       	ldi	r21, 0x00	; 0
     9c6:	2a c0       	rjmp	.+84     	; 0xa1c <__pack_f+0xca>
     9c8:	b8 01       	movw	r22, r16
     9ca:	a7 01       	movw	r20, r14
     9cc:	02 2e       	mov	r0, r18
     9ce:	04 c0       	rjmp	.+8      	; 0x9d8 <__pack_f+0x86>
     9d0:	76 95       	lsr	r23
     9d2:	67 95       	ror	r22
     9d4:	57 95       	ror	r21
     9d6:	47 95       	ror	r20
     9d8:	0a 94       	dec	r0
     9da:	d2 f7       	brpl	.-12     	; 0x9d0 <__pack_f+0x7e>
     9dc:	81 e0       	ldi	r24, 0x01	; 1
     9de:	90 e0       	ldi	r25, 0x00	; 0
     9e0:	a0 e0       	ldi	r26, 0x00	; 0
     9e2:	b0 e0       	ldi	r27, 0x00	; 0
     9e4:	04 c0       	rjmp	.+8      	; 0x9ee <__pack_f+0x9c>
     9e6:	88 0f       	add	r24, r24
     9e8:	99 1f       	adc	r25, r25
     9ea:	aa 1f       	adc	r26, r26
     9ec:	bb 1f       	adc	r27, r27
     9ee:	2a 95       	dec	r18
     9f0:	d2 f7       	brpl	.-12     	; 0x9e6 <__pack_f+0x94>
     9f2:	01 97       	sbiw	r24, 0x01	; 1
     9f4:	a1 09       	sbc	r26, r1
     9f6:	b1 09       	sbc	r27, r1
     9f8:	8e 21       	and	r24, r14
     9fa:	9f 21       	and	r25, r15
     9fc:	a0 23       	and	r26, r16
     9fe:	b1 23       	and	r27, r17
     a00:	00 97       	sbiw	r24, 0x00	; 0
     a02:	a1 05       	cpc	r26, r1
     a04:	b1 05       	cpc	r27, r1
     a06:	21 f0       	breq	.+8      	; 0xa10 <__pack_f+0xbe>
     a08:	81 e0       	ldi	r24, 0x01	; 1
     a0a:	90 e0       	ldi	r25, 0x00	; 0
     a0c:	a0 e0       	ldi	r26, 0x00	; 0
     a0e:	b0 e0       	ldi	r27, 0x00	; 0
     a10:	9a 01       	movw	r18, r20
     a12:	ab 01       	movw	r20, r22
     a14:	28 2b       	or	r18, r24
     a16:	39 2b       	or	r19, r25
     a18:	4a 2b       	or	r20, r26
     a1a:	5b 2b       	or	r21, r27
     a1c:	da 01       	movw	r26, r20
     a1e:	c9 01       	movw	r24, r18
     a20:	8f 77       	andi	r24, 0x7F	; 127
     a22:	90 70       	andi	r25, 0x00	; 0
     a24:	a0 70       	andi	r26, 0x00	; 0
     a26:	b0 70       	andi	r27, 0x00	; 0
     a28:	80 34       	cpi	r24, 0x40	; 64
     a2a:	91 05       	cpc	r25, r1
     a2c:	a1 05       	cpc	r26, r1
     a2e:	b1 05       	cpc	r27, r1
     a30:	39 f4       	brne	.+14     	; 0xa40 <__pack_f+0xee>
     a32:	27 ff       	sbrs	r18, 7
     a34:	09 c0       	rjmp	.+18     	; 0xa48 <__pack_f+0xf6>
     a36:	20 5c       	subi	r18, 0xC0	; 192
     a38:	3f 4f       	sbci	r19, 0xFF	; 255
     a3a:	4f 4f       	sbci	r20, 0xFF	; 255
     a3c:	5f 4f       	sbci	r21, 0xFF	; 255
     a3e:	04 c0       	rjmp	.+8      	; 0xa48 <__pack_f+0xf6>
     a40:	21 5c       	subi	r18, 0xC1	; 193
     a42:	3f 4f       	sbci	r19, 0xFF	; 255
     a44:	4f 4f       	sbci	r20, 0xFF	; 255
     a46:	5f 4f       	sbci	r21, 0xFF	; 255
     a48:	e0 e0       	ldi	r30, 0x00	; 0
     a4a:	f0 e0       	ldi	r31, 0x00	; 0
     a4c:	20 30       	cpi	r18, 0x00	; 0
     a4e:	a0 e0       	ldi	r26, 0x00	; 0
     a50:	3a 07       	cpc	r19, r26
     a52:	a0 e0       	ldi	r26, 0x00	; 0
     a54:	4a 07       	cpc	r20, r26
     a56:	a0 e4       	ldi	r26, 0x40	; 64
     a58:	5a 07       	cpc	r21, r26
     a5a:	10 f0       	brcs	.+4      	; 0xa60 <__pack_f+0x10e>
     a5c:	e1 e0       	ldi	r30, 0x01	; 1
     a5e:	f0 e0       	ldi	r31, 0x00	; 0
     a60:	79 01       	movw	r14, r18
     a62:	8a 01       	movw	r16, r20
     a64:	27 c0       	rjmp	.+78     	; 0xab4 <__pack_f+0x162>
     a66:	60 38       	cpi	r22, 0x80	; 128
     a68:	71 05       	cpc	r23, r1
     a6a:	64 f5       	brge	.+88     	; 0xac4 <__pack_f+0x172>
     a6c:	fb 01       	movw	r30, r22
     a6e:	e1 58       	subi	r30, 0x81	; 129
     a70:	ff 4f       	sbci	r31, 0xFF	; 255
     a72:	d8 01       	movw	r26, r16
     a74:	c7 01       	movw	r24, r14
     a76:	8f 77       	andi	r24, 0x7F	; 127
     a78:	90 70       	andi	r25, 0x00	; 0
     a7a:	a0 70       	andi	r26, 0x00	; 0
     a7c:	b0 70       	andi	r27, 0x00	; 0
     a7e:	80 34       	cpi	r24, 0x40	; 64
     a80:	91 05       	cpc	r25, r1
     a82:	a1 05       	cpc	r26, r1
     a84:	b1 05       	cpc	r27, r1
     a86:	39 f4       	brne	.+14     	; 0xa96 <__pack_f+0x144>
     a88:	e7 fe       	sbrs	r14, 7
     a8a:	0d c0       	rjmp	.+26     	; 0xaa6 <__pack_f+0x154>
     a8c:	80 e4       	ldi	r24, 0x40	; 64
     a8e:	90 e0       	ldi	r25, 0x00	; 0
     a90:	a0 e0       	ldi	r26, 0x00	; 0
     a92:	b0 e0       	ldi	r27, 0x00	; 0
     a94:	04 c0       	rjmp	.+8      	; 0xa9e <__pack_f+0x14c>
     a96:	8f e3       	ldi	r24, 0x3F	; 63
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	e8 0e       	add	r14, r24
     aa0:	f9 1e       	adc	r15, r25
     aa2:	0a 1f       	adc	r16, r26
     aa4:	1b 1f       	adc	r17, r27
     aa6:	17 ff       	sbrs	r17, 7
     aa8:	05 c0       	rjmp	.+10     	; 0xab4 <__pack_f+0x162>
     aaa:	16 95       	lsr	r17
     aac:	07 95       	ror	r16
     aae:	f7 94       	ror	r15
     ab0:	e7 94       	ror	r14
     ab2:	31 96       	adiw	r30, 0x01	; 1
     ab4:	87 e0       	ldi	r24, 0x07	; 7
     ab6:	16 95       	lsr	r17
     ab8:	07 95       	ror	r16
     aba:	f7 94       	ror	r15
     abc:	e7 94       	ror	r14
     abe:	8a 95       	dec	r24
     ac0:	d1 f7       	brne	.-12     	; 0xab6 <__pack_f+0x164>
     ac2:	05 c0       	rjmp	.+10     	; 0xace <__pack_f+0x17c>
     ac4:	ee 24       	eor	r14, r14
     ac6:	ff 24       	eor	r15, r15
     ac8:	87 01       	movw	r16, r14
     aca:	ef ef       	ldi	r30, 0xFF	; 255
     acc:	f0 e0       	ldi	r31, 0x00	; 0
     ace:	6e 2f       	mov	r22, r30
     ad0:	67 95       	ror	r22
     ad2:	66 27       	eor	r22, r22
     ad4:	67 95       	ror	r22
     ad6:	90 2f       	mov	r25, r16
     ad8:	9f 77       	andi	r25, 0x7F	; 127
     ada:	d7 94       	ror	r13
     adc:	dd 24       	eor	r13, r13
     ade:	d7 94       	ror	r13
     ae0:	8e 2f       	mov	r24, r30
     ae2:	86 95       	lsr	r24
     ae4:	49 2f       	mov	r20, r25
     ae6:	46 2b       	or	r20, r22
     ae8:	58 2f       	mov	r21, r24
     aea:	5d 29       	or	r21, r13
     aec:	b7 01       	movw	r22, r14
     aee:	ca 01       	movw	r24, r20
     af0:	1f 91       	pop	r17
     af2:	0f 91       	pop	r16
     af4:	ff 90       	pop	r15
     af6:	ef 90       	pop	r14
     af8:	df 90       	pop	r13
     afa:	08 95       	ret

00000afc <__unpack_f>:
     afc:	fc 01       	movw	r30, r24
     afe:	db 01       	movw	r26, r22
     b00:	40 81       	ld	r20, Z
     b02:	51 81       	ldd	r21, Z+1	; 0x01
     b04:	22 81       	ldd	r18, Z+2	; 0x02
     b06:	62 2f       	mov	r22, r18
     b08:	6f 77       	andi	r22, 0x7F	; 127
     b0a:	70 e0       	ldi	r23, 0x00	; 0
     b0c:	22 1f       	adc	r18, r18
     b0e:	22 27       	eor	r18, r18
     b10:	22 1f       	adc	r18, r18
     b12:	93 81       	ldd	r25, Z+3	; 0x03
     b14:	89 2f       	mov	r24, r25
     b16:	88 0f       	add	r24, r24
     b18:	82 2b       	or	r24, r18
     b1a:	28 2f       	mov	r18, r24
     b1c:	30 e0       	ldi	r19, 0x00	; 0
     b1e:	99 1f       	adc	r25, r25
     b20:	99 27       	eor	r25, r25
     b22:	99 1f       	adc	r25, r25
     b24:	11 96       	adiw	r26, 0x01	; 1
     b26:	9c 93       	st	X, r25
     b28:	11 97       	sbiw	r26, 0x01	; 1
     b2a:	21 15       	cp	r18, r1
     b2c:	31 05       	cpc	r19, r1
     b2e:	a9 f5       	brne	.+106    	; 0xb9a <__unpack_f+0x9e>
     b30:	41 15       	cp	r20, r1
     b32:	51 05       	cpc	r21, r1
     b34:	61 05       	cpc	r22, r1
     b36:	71 05       	cpc	r23, r1
     b38:	11 f4       	brne	.+4      	; 0xb3e <__unpack_f+0x42>
     b3a:	82 e0       	ldi	r24, 0x02	; 2
     b3c:	37 c0       	rjmp	.+110    	; 0xbac <__unpack_f+0xb0>
     b3e:	82 e8       	ldi	r24, 0x82	; 130
     b40:	9f ef       	ldi	r25, 0xFF	; 255
     b42:	13 96       	adiw	r26, 0x03	; 3
     b44:	9c 93       	st	X, r25
     b46:	8e 93       	st	-X, r24
     b48:	12 97       	sbiw	r26, 0x02	; 2
     b4a:	9a 01       	movw	r18, r20
     b4c:	ab 01       	movw	r20, r22
     b4e:	67 e0       	ldi	r22, 0x07	; 7
     b50:	22 0f       	add	r18, r18
     b52:	33 1f       	adc	r19, r19
     b54:	44 1f       	adc	r20, r20
     b56:	55 1f       	adc	r21, r21
     b58:	6a 95       	dec	r22
     b5a:	d1 f7       	brne	.-12     	; 0xb50 <__unpack_f+0x54>
     b5c:	83 e0       	ldi	r24, 0x03	; 3
     b5e:	8c 93       	st	X, r24
     b60:	0d c0       	rjmp	.+26     	; 0xb7c <__unpack_f+0x80>
     b62:	22 0f       	add	r18, r18
     b64:	33 1f       	adc	r19, r19
     b66:	44 1f       	adc	r20, r20
     b68:	55 1f       	adc	r21, r21
     b6a:	12 96       	adiw	r26, 0x02	; 2
     b6c:	8d 91       	ld	r24, X+
     b6e:	9c 91       	ld	r25, X
     b70:	13 97       	sbiw	r26, 0x03	; 3
     b72:	01 97       	sbiw	r24, 0x01	; 1
     b74:	13 96       	adiw	r26, 0x03	; 3
     b76:	9c 93       	st	X, r25
     b78:	8e 93       	st	-X, r24
     b7a:	12 97       	sbiw	r26, 0x02	; 2
     b7c:	20 30       	cpi	r18, 0x00	; 0
     b7e:	80 e0       	ldi	r24, 0x00	; 0
     b80:	38 07       	cpc	r19, r24
     b82:	80 e0       	ldi	r24, 0x00	; 0
     b84:	48 07       	cpc	r20, r24
     b86:	80 e4       	ldi	r24, 0x40	; 64
     b88:	58 07       	cpc	r21, r24
     b8a:	58 f3       	brcs	.-42     	; 0xb62 <__unpack_f+0x66>
     b8c:	14 96       	adiw	r26, 0x04	; 4
     b8e:	2d 93       	st	X+, r18
     b90:	3d 93       	st	X+, r19
     b92:	4d 93       	st	X+, r20
     b94:	5c 93       	st	X, r21
     b96:	17 97       	sbiw	r26, 0x07	; 7
     b98:	08 95       	ret
     b9a:	2f 3f       	cpi	r18, 0xFF	; 255
     b9c:	31 05       	cpc	r19, r1
     b9e:	79 f4       	brne	.+30     	; 0xbbe <__unpack_f+0xc2>
     ba0:	41 15       	cp	r20, r1
     ba2:	51 05       	cpc	r21, r1
     ba4:	61 05       	cpc	r22, r1
     ba6:	71 05       	cpc	r23, r1
     ba8:	19 f4       	brne	.+6      	; 0xbb0 <__unpack_f+0xb4>
     baa:	84 e0       	ldi	r24, 0x04	; 4
     bac:	8c 93       	st	X, r24
     bae:	08 95       	ret
     bb0:	64 ff       	sbrs	r22, 4
     bb2:	03 c0       	rjmp	.+6      	; 0xbba <__unpack_f+0xbe>
     bb4:	81 e0       	ldi	r24, 0x01	; 1
     bb6:	8c 93       	st	X, r24
     bb8:	12 c0       	rjmp	.+36     	; 0xbde <__unpack_f+0xe2>
     bba:	1c 92       	st	X, r1
     bbc:	10 c0       	rjmp	.+32     	; 0xbde <__unpack_f+0xe2>
     bbe:	2f 57       	subi	r18, 0x7F	; 127
     bc0:	30 40       	sbci	r19, 0x00	; 0
     bc2:	13 96       	adiw	r26, 0x03	; 3
     bc4:	3c 93       	st	X, r19
     bc6:	2e 93       	st	-X, r18
     bc8:	12 97       	sbiw	r26, 0x02	; 2
     bca:	83 e0       	ldi	r24, 0x03	; 3
     bcc:	8c 93       	st	X, r24
     bce:	87 e0       	ldi	r24, 0x07	; 7
     bd0:	44 0f       	add	r20, r20
     bd2:	55 1f       	adc	r21, r21
     bd4:	66 1f       	adc	r22, r22
     bd6:	77 1f       	adc	r23, r23
     bd8:	8a 95       	dec	r24
     bda:	d1 f7       	brne	.-12     	; 0xbd0 <__unpack_f+0xd4>
     bdc:	70 64       	ori	r23, 0x40	; 64
     bde:	14 96       	adiw	r26, 0x04	; 4
     be0:	4d 93       	st	X+, r20
     be2:	5d 93       	st	X+, r21
     be4:	6d 93       	st	X+, r22
     be6:	7c 93       	st	X, r23
     be8:	17 97       	sbiw	r26, 0x07	; 7
     bea:	08 95       	ret

00000bec <__fpcmp_parts_f>:
     bec:	1f 93       	push	r17
     bee:	dc 01       	movw	r26, r24
     bf0:	fb 01       	movw	r30, r22
     bf2:	9c 91       	ld	r25, X
     bf4:	92 30       	cpi	r25, 0x02	; 2
     bf6:	08 f4       	brcc	.+2      	; 0xbfa <__fpcmp_parts_f+0xe>
     bf8:	47 c0       	rjmp	.+142    	; 0xc88 <__fpcmp_parts_f+0x9c>
     bfa:	80 81       	ld	r24, Z
     bfc:	82 30       	cpi	r24, 0x02	; 2
     bfe:	08 f4       	brcc	.+2      	; 0xc02 <__fpcmp_parts_f+0x16>
     c00:	43 c0       	rjmp	.+134    	; 0xc88 <__fpcmp_parts_f+0x9c>
     c02:	94 30       	cpi	r25, 0x04	; 4
     c04:	51 f4       	brne	.+20     	; 0xc1a <__fpcmp_parts_f+0x2e>
     c06:	11 96       	adiw	r26, 0x01	; 1
     c08:	1c 91       	ld	r17, X
     c0a:	84 30       	cpi	r24, 0x04	; 4
     c0c:	99 f5       	brne	.+102    	; 0xc74 <__fpcmp_parts_f+0x88>
     c0e:	81 81       	ldd	r24, Z+1	; 0x01
     c10:	68 2f       	mov	r22, r24
     c12:	70 e0       	ldi	r23, 0x00	; 0
     c14:	61 1b       	sub	r22, r17
     c16:	71 09       	sbc	r23, r1
     c18:	3f c0       	rjmp	.+126    	; 0xc98 <__fpcmp_parts_f+0xac>
     c1a:	84 30       	cpi	r24, 0x04	; 4
     c1c:	21 f0       	breq	.+8      	; 0xc26 <__fpcmp_parts_f+0x3a>
     c1e:	92 30       	cpi	r25, 0x02	; 2
     c20:	31 f4       	brne	.+12     	; 0xc2e <__fpcmp_parts_f+0x42>
     c22:	82 30       	cpi	r24, 0x02	; 2
     c24:	b9 f1       	breq	.+110    	; 0xc94 <__fpcmp_parts_f+0xa8>
     c26:	81 81       	ldd	r24, Z+1	; 0x01
     c28:	88 23       	and	r24, r24
     c2a:	89 f1       	breq	.+98     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c2c:	2d c0       	rjmp	.+90     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c2e:	11 96       	adiw	r26, 0x01	; 1
     c30:	1c 91       	ld	r17, X
     c32:	11 97       	sbiw	r26, 0x01	; 1
     c34:	82 30       	cpi	r24, 0x02	; 2
     c36:	f1 f0       	breq	.+60     	; 0xc74 <__fpcmp_parts_f+0x88>
     c38:	81 81       	ldd	r24, Z+1	; 0x01
     c3a:	18 17       	cp	r17, r24
     c3c:	d9 f4       	brne	.+54     	; 0xc74 <__fpcmp_parts_f+0x88>
     c3e:	12 96       	adiw	r26, 0x02	; 2
     c40:	2d 91       	ld	r18, X+
     c42:	3c 91       	ld	r19, X
     c44:	13 97       	sbiw	r26, 0x03	; 3
     c46:	82 81       	ldd	r24, Z+2	; 0x02
     c48:	93 81       	ldd	r25, Z+3	; 0x03
     c4a:	82 17       	cp	r24, r18
     c4c:	93 07       	cpc	r25, r19
     c4e:	94 f0       	brlt	.+36     	; 0xc74 <__fpcmp_parts_f+0x88>
     c50:	28 17       	cp	r18, r24
     c52:	39 07       	cpc	r19, r25
     c54:	bc f0       	brlt	.+46     	; 0xc84 <__fpcmp_parts_f+0x98>
     c56:	14 96       	adiw	r26, 0x04	; 4
     c58:	8d 91       	ld	r24, X+
     c5a:	9d 91       	ld	r25, X+
     c5c:	0d 90       	ld	r0, X+
     c5e:	bc 91       	ld	r27, X
     c60:	a0 2d       	mov	r26, r0
     c62:	24 81       	ldd	r18, Z+4	; 0x04
     c64:	35 81       	ldd	r19, Z+5	; 0x05
     c66:	46 81       	ldd	r20, Z+6	; 0x06
     c68:	57 81       	ldd	r21, Z+7	; 0x07
     c6a:	28 17       	cp	r18, r24
     c6c:	39 07       	cpc	r19, r25
     c6e:	4a 07       	cpc	r20, r26
     c70:	5b 07       	cpc	r21, r27
     c72:	18 f4       	brcc	.+6      	; 0xc7a <__fpcmp_parts_f+0x8e>
     c74:	11 23       	and	r17, r17
     c76:	41 f0       	breq	.+16     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c78:	0a c0       	rjmp	.+20     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c7a:	82 17       	cp	r24, r18
     c7c:	93 07       	cpc	r25, r19
     c7e:	a4 07       	cpc	r26, r20
     c80:	b5 07       	cpc	r27, r21
     c82:	40 f4       	brcc	.+16     	; 0xc94 <__fpcmp_parts_f+0xa8>
     c84:	11 23       	and	r17, r17
     c86:	19 f0       	breq	.+6      	; 0xc8e <__fpcmp_parts_f+0xa2>
     c88:	61 e0       	ldi	r22, 0x01	; 1
     c8a:	70 e0       	ldi	r23, 0x00	; 0
     c8c:	05 c0       	rjmp	.+10     	; 0xc98 <__fpcmp_parts_f+0xac>
     c8e:	6f ef       	ldi	r22, 0xFF	; 255
     c90:	7f ef       	ldi	r23, 0xFF	; 255
     c92:	02 c0       	rjmp	.+4      	; 0xc98 <__fpcmp_parts_f+0xac>
     c94:	60 e0       	ldi	r22, 0x00	; 0
     c96:	70 e0       	ldi	r23, 0x00	; 0
     c98:	cb 01       	movw	r24, r22
     c9a:	1f 91       	pop	r17
     c9c:	08 95       	ret

00000c9e <MDIO_voidInit>:
#include "../Include/MCAL/DIO/DIO_Private.h"
#include "../Include/MCAL/DIO/DIO_Configuration.h"
#include "../Include/MCAL/DIO/DIO_Interface.h"

void MDIO_voidInit()
{
     c9e:	df 93       	push	r29
     ca0:	cf 93       	push	r28
     ca2:	cd b7       	in	r28, 0x3d	; 61
     ca4:	de b7       	in	r29, 0x3e	; 62
    PORTA_REG=CONC_BIT(PORTA_PIN7_VALUE,PORTA_PIN6_VALUE,PORTA_PIN5_VALUE,PORTA_PIN4_VALUE,PORTA_PIN3_VALUE,PORTA_PIN2_VALUE,PORTA_PIN1_VALUE,PORTA_PIN0_VALUE);
     ca6:	eb e3       	ldi	r30, 0x3B	; 59
     ca8:	f0 e0       	ldi	r31, 0x00	; 0
     caa:	80 ef       	ldi	r24, 0xF0	; 240
     cac:	80 83       	st	Z, r24
    PORTB_REG=CONC_BIT(PORTB_PIN7_VALUE,PORTB_PIN6_VALUE,PORTB_PIN5_VALUE,PORTB_PIN4_VALUE,PORTB_PIN3_VALUE,PORTB_PIN2_VALUE,PORTB_PIN1_VALUE,PORTB_PIN0_VALUE);
     cae:	e8 e3       	ldi	r30, 0x38	; 56
     cb0:	f0 e0       	ldi	r31, 0x00	; 0
     cb2:	10 82       	st	Z, r1
    PORTC_REG=CONC_BIT(PORTC_PIN7_VALUE,PORTC_PIN6_VALUE,PORTC_PIN5_VALUE,PORTC_PIN4_VALUE,PORTC_PIN3_VALUE,PORTC_PIN2_VALUE,PORTC_PIN1_VALUE,PORTC_PIN0_VALUE);
     cb4:	e5 e3       	ldi	r30, 0x35	; 53
     cb6:	f0 e0       	ldi	r31, 0x00	; 0
     cb8:	10 82       	st	Z, r1
    PORTD_REG=CONC_BIT(PORTD_PIN7_VALUE,PORTD_PIN6_VALUE,PORTD_PIN5_VALUE,PORTD_PIN4_VALUE,PORTD_PIN3_VALUE,PORTD_PIN2_VALUE,PORTD_PIN1_VALUE,PORTD_PIN0_VALUE);
     cba:	e2 e3       	ldi	r30, 0x32	; 50
     cbc:	f0 e0       	ldi	r31, 0x00	; 0
     cbe:	10 82       	st	Z, r1
    
    DDRA_REG=CONC_BIT(DDRA_PIN7_DIRECTION,DDRA_PIN6_DIRECTION,DDRA_PIN5_DIRECTION,DDRA_PIN4_DIRECTION,DDRA_PIN3_DIRECTION,DDRA_PIN2_DIRECTION,DDRA_PIN1_DIRECTION,DDRA_PIN0_DIRECTION);
     cc0:	ea e3       	ldi	r30, 0x3A	; 58
     cc2:	f0 e0       	ldi	r31, 0x00	; 0
     cc4:	8f e0       	ldi	r24, 0x0F	; 15
     cc6:	80 83       	st	Z, r24
    DDRB_REG=CONC_BIT(DDRB_PIN7_DIRECTION,DDRB_PIN6_DIRECTION,DDRB_PIN5_DIRECTION,DDRB_PIN4_DIRECTION,DDRB_PIN3_DIRECTION,DDRB_PIN2_DIRECTION,DDRB_PIN1_DIRECTION,DDRB_PIN0_DIRECTION);
     cc8:	e7 e3       	ldi	r30, 0x37	; 55
     cca:	f0 e0       	ldi	r31, 0x00	; 0
     ccc:	8f ef       	ldi	r24, 0xFF	; 255
     cce:	80 83       	st	Z, r24
    DDRC_REG=CONC_BIT(DDRC_PIN7_DIRECTION,DDRC_PIN6_DIRECTION,DDRC_PIN5_DIRECTION,DDRC_PIN4_DIRECTION,DDRC_PIN3_DIRECTION,DDRC_PIN2_DIRECTION,DDRC_PIN1_DIRECTION,DDRC_PIN0_DIRECTION);
     cd0:	e4 e3       	ldi	r30, 0x34	; 52
     cd2:	f0 e0       	ldi	r31, 0x00	; 0
     cd4:	8f ef       	ldi	r24, 0xFF	; 255
     cd6:	80 83       	st	Z, r24
    DDRD_REG=CONC_BIT(DDRD_PIN7_DIRECTION,DDRD_PIN6_DIRECTION,DDRD_PIN5_DIRECTION,DDRD_PIN4_DIRECTION,DDRD_PIN3_DIRECTION,DDRD_PIN2_DIRECTION,DDRD_PIN1_DIRECTION,DDRD_PIN0_DIRECTION);
     cd8:	e1 e3       	ldi	r30, 0x31	; 49
     cda:	f0 e0       	ldi	r31, 0x00	; 0
     cdc:	8f ef       	ldi	r24, 0xFF	; 255
     cde:	80 83       	st	Z, r24

}
     ce0:	cf 91       	pop	r28
     ce2:	df 91       	pop	r29
     ce4:	08 95       	ret

00000ce6 <MDIO_u8GetPinValue>:

u8 MDIO_u8GetPinValue(u8 A_u8Port,u8 A_u8Pin)
{
     ce6:	df 93       	push	r29
     ce8:	cf 93       	push	r28
     cea:	00 d0       	rcall	.+0      	; 0xcec <MDIO_u8GetPinValue+0x6>
     cec:	00 d0       	rcall	.+0      	; 0xcee <MDIO_u8GetPinValue+0x8>
     cee:	0f 92       	push	r0
     cf0:	cd b7       	in	r28, 0x3d	; 61
     cf2:	de b7       	in	r29, 0x3e	; 62
     cf4:	8a 83       	std	Y+2, r24	; 0x02
     cf6:	6b 83       	std	Y+3, r22	; 0x03
    u8 local_u8Value;
    switch(A_u8Port)
     cf8:	8a 81       	ldd	r24, Y+2	; 0x02
     cfa:	28 2f       	mov	r18, r24
     cfc:	30 e0       	ldi	r19, 0x00	; 0
     cfe:	3d 83       	std	Y+5, r19	; 0x05
     d00:	2c 83       	std	Y+4, r18	; 0x04
     d02:	8c 81       	ldd	r24, Y+4	; 0x04
     d04:	9d 81       	ldd	r25, Y+5	; 0x05
     d06:	81 30       	cpi	r24, 0x01	; 1
     d08:	91 05       	cpc	r25, r1
     d0a:	c1 f1       	breq	.+112    	; 0xd7c <MDIO_u8GetPinValue+0x96>
     d0c:	2c 81       	ldd	r18, Y+4	; 0x04
     d0e:	3d 81       	ldd	r19, Y+5	; 0x05
     d10:	22 30       	cpi	r18, 0x02	; 2
     d12:	31 05       	cpc	r19, r1
     d14:	2c f4       	brge	.+10     	; 0xd20 <MDIO_u8GetPinValue+0x3a>
     d16:	8c 81       	ldd	r24, Y+4	; 0x04
     d18:	9d 81       	ldd	r25, Y+5	; 0x05
     d1a:	00 97       	sbiw	r24, 0x00	; 0
     d1c:	71 f0       	breq	.+28     	; 0xd3a <MDIO_u8GetPinValue+0x54>
     d1e:	8e c0       	rjmp	.+284    	; 0xe3c <MDIO_u8GetPinValue+0x156>
     d20:	2c 81       	ldd	r18, Y+4	; 0x04
     d22:	3d 81       	ldd	r19, Y+5	; 0x05
     d24:	22 30       	cpi	r18, 0x02	; 2
     d26:	31 05       	cpc	r19, r1
     d28:	09 f4       	brne	.+2      	; 0xd2c <MDIO_u8GetPinValue+0x46>
     d2a:	49 c0       	rjmp	.+146    	; 0xdbe <MDIO_u8GetPinValue+0xd8>
     d2c:	8c 81       	ldd	r24, Y+4	; 0x04
     d2e:	9d 81       	ldd	r25, Y+5	; 0x05
     d30:	83 30       	cpi	r24, 0x03	; 3
     d32:	91 05       	cpc	r25, r1
     d34:	09 f4       	brne	.+2      	; 0xd38 <MDIO_u8GetPinValue+0x52>
     d36:	63 c0       	rjmp	.+198    	; 0xdfe <MDIO_u8GetPinValue+0x118>
     d38:	81 c0       	rjmp	.+258    	; 0xe3c <MDIO_u8GetPinValue+0x156>
    {
        case PORTA: local_u8Value=GET_BIT(PINA_REG,A_u8Pin);
     d3a:	e9 e3       	ldi	r30, 0x39	; 57
     d3c:	f0 e0       	ldi	r31, 0x00	; 0
     d3e:	80 81       	ld	r24, Z
     d40:	48 2f       	mov	r20, r24
     d42:	50 e0       	ldi	r21, 0x00	; 0
     d44:	8b 81       	ldd	r24, Y+3	; 0x03
     d46:	28 2f       	mov	r18, r24
     d48:	30 e0       	ldi	r19, 0x00	; 0
     d4a:	81 e0       	ldi	r24, 0x01	; 1
     d4c:	90 e0       	ldi	r25, 0x00	; 0
     d4e:	02 c0       	rjmp	.+4      	; 0xd54 <MDIO_u8GetPinValue+0x6e>
     d50:	88 0f       	add	r24, r24
     d52:	99 1f       	adc	r25, r25
     d54:	2a 95       	dec	r18
     d56:	e2 f7       	brpl	.-8      	; 0xd50 <MDIO_u8GetPinValue+0x6a>
     d58:	80 95       	com	r24
     d5a:	90 95       	com	r25
     d5c:	9a 01       	movw	r18, r20
     d5e:	28 23       	and	r18, r24
     d60:	39 23       	and	r19, r25
     d62:	e9 e3       	ldi	r30, 0x39	; 57
     d64:	f0 e0       	ldi	r31, 0x00	; 0
     d66:	80 81       	ld	r24, Z
     d68:	88 2f       	mov	r24, r24
     d6a:	90 e0       	ldi	r25, 0x00	; 0
     d6c:	19 82       	std	Y+1, r1	; 0x01
     d6e:	28 17       	cp	r18, r24
     d70:	39 07       	cpc	r19, r25
     d72:	09 f4       	brne	.+2      	; 0xd76 <MDIO_u8GetPinValue+0x90>
     d74:	63 c0       	rjmp	.+198    	; 0xe3c <MDIO_u8GetPinValue+0x156>
     d76:	81 e0       	ldi	r24, 0x01	; 1
     d78:	89 83       	std	Y+1, r24	; 0x01
     d7a:	60 c0       	rjmp	.+192    	; 0xe3c <MDIO_u8GetPinValue+0x156>
        break;
        case PORTB: local_u8Value=GET_BIT(PINB_REG,A_u8Pin);
     d7c:	e6 e3       	ldi	r30, 0x36	; 54
     d7e:	f0 e0       	ldi	r31, 0x00	; 0
     d80:	80 81       	ld	r24, Z
     d82:	48 2f       	mov	r20, r24
     d84:	50 e0       	ldi	r21, 0x00	; 0
     d86:	8b 81       	ldd	r24, Y+3	; 0x03
     d88:	28 2f       	mov	r18, r24
     d8a:	30 e0       	ldi	r19, 0x00	; 0
     d8c:	81 e0       	ldi	r24, 0x01	; 1
     d8e:	90 e0       	ldi	r25, 0x00	; 0
     d90:	02 c0       	rjmp	.+4      	; 0xd96 <MDIO_u8GetPinValue+0xb0>
     d92:	88 0f       	add	r24, r24
     d94:	99 1f       	adc	r25, r25
     d96:	2a 95       	dec	r18
     d98:	e2 f7       	brpl	.-8      	; 0xd92 <MDIO_u8GetPinValue+0xac>
     d9a:	80 95       	com	r24
     d9c:	90 95       	com	r25
     d9e:	9a 01       	movw	r18, r20
     da0:	28 23       	and	r18, r24
     da2:	39 23       	and	r19, r25
     da4:	e6 e3       	ldi	r30, 0x36	; 54
     da6:	f0 e0       	ldi	r31, 0x00	; 0
     da8:	80 81       	ld	r24, Z
     daa:	88 2f       	mov	r24, r24
     dac:	90 e0       	ldi	r25, 0x00	; 0
     dae:	19 82       	std	Y+1, r1	; 0x01
     db0:	28 17       	cp	r18, r24
     db2:	39 07       	cpc	r19, r25
     db4:	09 f4       	brne	.+2      	; 0xdb8 <MDIO_u8GetPinValue+0xd2>
     db6:	42 c0       	rjmp	.+132    	; 0xe3c <MDIO_u8GetPinValue+0x156>
     db8:	81 e0       	ldi	r24, 0x01	; 1
     dba:	89 83       	std	Y+1, r24	; 0x01
     dbc:	3f c0       	rjmp	.+126    	; 0xe3c <MDIO_u8GetPinValue+0x156>
        break;
        case PORTC: local_u8Value=GET_BIT(PINC_REG,A_u8Pin);
     dbe:	e3 e3       	ldi	r30, 0x33	; 51
     dc0:	f0 e0       	ldi	r31, 0x00	; 0
     dc2:	80 81       	ld	r24, Z
     dc4:	48 2f       	mov	r20, r24
     dc6:	50 e0       	ldi	r21, 0x00	; 0
     dc8:	8b 81       	ldd	r24, Y+3	; 0x03
     dca:	28 2f       	mov	r18, r24
     dcc:	30 e0       	ldi	r19, 0x00	; 0
     dce:	81 e0       	ldi	r24, 0x01	; 1
     dd0:	90 e0       	ldi	r25, 0x00	; 0
     dd2:	02 c0       	rjmp	.+4      	; 0xdd8 <MDIO_u8GetPinValue+0xf2>
     dd4:	88 0f       	add	r24, r24
     dd6:	99 1f       	adc	r25, r25
     dd8:	2a 95       	dec	r18
     dda:	e2 f7       	brpl	.-8      	; 0xdd4 <MDIO_u8GetPinValue+0xee>
     ddc:	80 95       	com	r24
     dde:	90 95       	com	r25
     de0:	9a 01       	movw	r18, r20
     de2:	28 23       	and	r18, r24
     de4:	39 23       	and	r19, r25
     de6:	e3 e3       	ldi	r30, 0x33	; 51
     de8:	f0 e0       	ldi	r31, 0x00	; 0
     dea:	80 81       	ld	r24, Z
     dec:	88 2f       	mov	r24, r24
     dee:	90 e0       	ldi	r25, 0x00	; 0
     df0:	19 82       	std	Y+1, r1	; 0x01
     df2:	28 17       	cp	r18, r24
     df4:	39 07       	cpc	r19, r25
     df6:	11 f1       	breq	.+68     	; 0xe3c <MDIO_u8GetPinValue+0x156>
     df8:	81 e0       	ldi	r24, 0x01	; 1
     dfa:	89 83       	std	Y+1, r24	; 0x01
     dfc:	1f c0       	rjmp	.+62     	; 0xe3c <MDIO_u8GetPinValue+0x156>
        break;
        case PORTD: local_u8Value=GET_BIT(PIND_REG,A_u8Pin);
     dfe:	e0 e3       	ldi	r30, 0x30	; 48
     e00:	f0 e0       	ldi	r31, 0x00	; 0
     e02:	80 81       	ld	r24, Z
     e04:	48 2f       	mov	r20, r24
     e06:	50 e0       	ldi	r21, 0x00	; 0
     e08:	8b 81       	ldd	r24, Y+3	; 0x03
     e0a:	28 2f       	mov	r18, r24
     e0c:	30 e0       	ldi	r19, 0x00	; 0
     e0e:	81 e0       	ldi	r24, 0x01	; 1
     e10:	90 e0       	ldi	r25, 0x00	; 0
     e12:	02 c0       	rjmp	.+4      	; 0xe18 <MDIO_u8GetPinValue+0x132>
     e14:	88 0f       	add	r24, r24
     e16:	99 1f       	adc	r25, r25
     e18:	2a 95       	dec	r18
     e1a:	e2 f7       	brpl	.-8      	; 0xe14 <MDIO_u8GetPinValue+0x12e>
     e1c:	80 95       	com	r24
     e1e:	90 95       	com	r25
     e20:	9a 01       	movw	r18, r20
     e22:	28 23       	and	r18, r24
     e24:	39 23       	and	r19, r25
     e26:	e0 e3       	ldi	r30, 0x30	; 48
     e28:	f0 e0       	ldi	r31, 0x00	; 0
     e2a:	80 81       	ld	r24, Z
     e2c:	88 2f       	mov	r24, r24
     e2e:	90 e0       	ldi	r25, 0x00	; 0
     e30:	19 82       	std	Y+1, r1	; 0x01
     e32:	28 17       	cp	r18, r24
     e34:	39 07       	cpc	r19, r25
     e36:	11 f0       	breq	.+4      	; 0xe3c <MDIO_u8GetPinValue+0x156>
     e38:	81 e0       	ldi	r24, 0x01	; 1
     e3a:	89 83       	std	Y+1, r24	; 0x01
        break;
    }
    return local_u8Value;
     e3c:	89 81       	ldd	r24, Y+1	; 0x01
}
     e3e:	0f 90       	pop	r0
     e40:	0f 90       	pop	r0
     e42:	0f 90       	pop	r0
     e44:	0f 90       	pop	r0
     e46:	0f 90       	pop	r0
     e48:	cf 91       	pop	r28
     e4a:	df 91       	pop	r29
     e4c:	08 95       	ret

00000e4e <MDIO_voidSetPinValue>:

void MDIO_voidSetPinValue(u8 A_u8Port,u8 A_u8Pin, u8 A_u8Value)
{
     e4e:	df 93       	push	r29
     e50:	cf 93       	push	r28
     e52:	cd b7       	in	r28, 0x3d	; 61
     e54:	de b7       	in	r29, 0x3e	; 62
     e56:	2d 97       	sbiw	r28, 0x0d	; 13
     e58:	0f b6       	in	r0, 0x3f	; 63
     e5a:	f8 94       	cli
     e5c:	de bf       	out	0x3e, r29	; 62
     e5e:	0f be       	out	0x3f, r0	; 63
     e60:	cd bf       	out	0x3d, r28	; 61
     e62:	89 83       	std	Y+1, r24	; 0x01
     e64:	6a 83       	std	Y+2, r22	; 0x02
     e66:	4b 83       	std	Y+3, r20	; 0x03
    switch(A_u8Port)
     e68:	89 81       	ldd	r24, Y+1	; 0x01
     e6a:	28 2f       	mov	r18, r24
     e6c:	30 e0       	ldi	r19, 0x00	; 0
     e6e:	3d 87       	std	Y+13, r19	; 0x0d
     e70:	2c 87       	std	Y+12, r18	; 0x0c
     e72:	8c 85       	ldd	r24, Y+12	; 0x0c
     e74:	9d 85       	ldd	r25, Y+13	; 0x0d
     e76:	81 30       	cpi	r24, 0x01	; 1
     e78:	91 05       	cpc	r25, r1
     e7a:	09 f4       	brne	.+2      	; 0xe7e <MDIO_voidSetPinValue+0x30>
     e7c:	4f c0       	rjmp	.+158    	; 0xf1c <MDIO_voidSetPinValue+0xce>
     e7e:	2c 85       	ldd	r18, Y+12	; 0x0c
     e80:	3d 85       	ldd	r19, Y+13	; 0x0d
     e82:	22 30       	cpi	r18, 0x02	; 2
     e84:	31 05       	cpc	r19, r1
     e86:	2c f4       	brge	.+10     	; 0xe92 <MDIO_voidSetPinValue+0x44>
     e88:	8c 85       	ldd	r24, Y+12	; 0x0c
     e8a:	9d 85       	ldd	r25, Y+13	; 0x0d
     e8c:	00 97       	sbiw	r24, 0x00	; 0
     e8e:	71 f0       	breq	.+28     	; 0xeac <MDIO_voidSetPinValue+0x5e>
     e90:	eb c0       	rjmp	.+470    	; 0x1068 <MDIO_voidSetPinValue+0x21a>
     e92:	2c 85       	ldd	r18, Y+12	; 0x0c
     e94:	3d 85       	ldd	r19, Y+13	; 0x0d
     e96:	22 30       	cpi	r18, 0x02	; 2
     e98:	31 05       	cpc	r19, r1
     e9a:	09 f4       	brne	.+2      	; 0xe9e <MDIO_voidSetPinValue+0x50>
     e9c:	77 c0       	rjmp	.+238    	; 0xf8c <MDIO_voidSetPinValue+0x13e>
     e9e:	8c 85       	ldd	r24, Y+12	; 0x0c
     ea0:	9d 85       	ldd	r25, Y+13	; 0x0d
     ea2:	83 30       	cpi	r24, 0x03	; 3
     ea4:	91 05       	cpc	r25, r1
     ea6:	09 f4       	brne	.+2      	; 0xeaa <MDIO_voidSetPinValue+0x5c>
     ea8:	a9 c0       	rjmp	.+338    	; 0xffc <MDIO_voidSetPinValue+0x1ae>
     eaa:	de c0       	rjmp	.+444    	; 0x1068 <MDIO_voidSetPinValue+0x21a>
    {
        case PORTA:
        switch (A_u8Value)
     eac:	8b 81       	ldd	r24, Y+3	; 0x03
     eae:	28 2f       	mov	r18, r24
     eb0:	30 e0       	ldi	r19, 0x00	; 0
     eb2:	3b 87       	std	Y+11, r19	; 0x0b
     eb4:	2a 87       	std	Y+10, r18	; 0x0a
     eb6:	8a 85       	ldd	r24, Y+10	; 0x0a
     eb8:	9b 85       	ldd	r25, Y+11	; 0x0b
     eba:	00 97       	sbiw	r24, 0x00	; 0
     ebc:	d1 f0       	breq	.+52     	; 0xef2 <MDIO_voidSetPinValue+0xa4>
     ebe:	2a 85       	ldd	r18, Y+10	; 0x0a
     ec0:	3b 85       	ldd	r19, Y+11	; 0x0b
     ec2:	21 30       	cpi	r18, 0x01	; 1
     ec4:	31 05       	cpc	r19, r1
     ec6:	09 f0       	breq	.+2      	; 0xeca <MDIO_voidSetPinValue+0x7c>
     ec8:	cf c0       	rjmp	.+414    	; 0x1068 <MDIO_voidSetPinValue+0x21a>
        {
            case PIN_HIGH: SET_BIT(PORTA_REG,A_u8Pin);
     eca:	ab e3       	ldi	r26, 0x3B	; 59
     ecc:	b0 e0       	ldi	r27, 0x00	; 0
     ece:	eb e3       	ldi	r30, 0x3B	; 59
     ed0:	f0 e0       	ldi	r31, 0x00	; 0
     ed2:	80 81       	ld	r24, Z
     ed4:	48 2f       	mov	r20, r24
     ed6:	8a 81       	ldd	r24, Y+2	; 0x02
     ed8:	28 2f       	mov	r18, r24
     eda:	30 e0       	ldi	r19, 0x00	; 0
     edc:	81 e0       	ldi	r24, 0x01	; 1
     ede:	90 e0       	ldi	r25, 0x00	; 0
     ee0:	02 2e       	mov	r0, r18
     ee2:	02 c0       	rjmp	.+4      	; 0xee8 <MDIO_voidSetPinValue+0x9a>
     ee4:	88 0f       	add	r24, r24
     ee6:	99 1f       	adc	r25, r25
     ee8:	0a 94       	dec	r0
     eea:	e2 f7       	brpl	.-8      	; 0xee4 <MDIO_voidSetPinValue+0x96>
     eec:	84 2b       	or	r24, r20
     eee:	8c 93       	st	X, r24
     ef0:	bb c0       	rjmp	.+374    	; 0x1068 <MDIO_voidSetPinValue+0x21a>
            break;

            case PIN_LOW: CLR_BIT(PORTA_REG,A_u8Pin);
     ef2:	ab e3       	ldi	r26, 0x3B	; 59
     ef4:	b0 e0       	ldi	r27, 0x00	; 0
     ef6:	eb e3       	ldi	r30, 0x3B	; 59
     ef8:	f0 e0       	ldi	r31, 0x00	; 0
     efa:	80 81       	ld	r24, Z
     efc:	48 2f       	mov	r20, r24
     efe:	8a 81       	ldd	r24, Y+2	; 0x02
     f00:	28 2f       	mov	r18, r24
     f02:	30 e0       	ldi	r19, 0x00	; 0
     f04:	81 e0       	ldi	r24, 0x01	; 1
     f06:	90 e0       	ldi	r25, 0x00	; 0
     f08:	02 2e       	mov	r0, r18
     f0a:	02 c0       	rjmp	.+4      	; 0xf10 <MDIO_voidSetPinValue+0xc2>
     f0c:	88 0f       	add	r24, r24
     f0e:	99 1f       	adc	r25, r25
     f10:	0a 94       	dec	r0
     f12:	e2 f7       	brpl	.-8      	; 0xf0c <MDIO_voidSetPinValue+0xbe>
     f14:	80 95       	com	r24
     f16:	84 23       	and	r24, r20
     f18:	8c 93       	st	X, r24
     f1a:	a6 c0       	rjmp	.+332    	; 0x1068 <MDIO_voidSetPinValue+0x21a>
            break;
        };
        break;

        case PORTB:
        switch (A_u8Value)
     f1c:	8b 81       	ldd	r24, Y+3	; 0x03
     f1e:	28 2f       	mov	r18, r24
     f20:	30 e0       	ldi	r19, 0x00	; 0
     f22:	39 87       	std	Y+9, r19	; 0x09
     f24:	28 87       	std	Y+8, r18	; 0x08
     f26:	88 85       	ldd	r24, Y+8	; 0x08
     f28:	99 85       	ldd	r25, Y+9	; 0x09
     f2a:	00 97       	sbiw	r24, 0x00	; 0
     f2c:	d1 f0       	breq	.+52     	; 0xf62 <MDIO_voidSetPinValue+0x114>
     f2e:	28 85       	ldd	r18, Y+8	; 0x08
     f30:	39 85       	ldd	r19, Y+9	; 0x09
     f32:	21 30       	cpi	r18, 0x01	; 1
     f34:	31 05       	cpc	r19, r1
     f36:	09 f0       	breq	.+2      	; 0xf3a <MDIO_voidSetPinValue+0xec>
     f38:	97 c0       	rjmp	.+302    	; 0x1068 <MDIO_voidSetPinValue+0x21a>
        {
            case PIN_HIGH: SET_BIT(PORTB_REG,A_u8Pin);
     f3a:	a8 e3       	ldi	r26, 0x38	; 56
     f3c:	b0 e0       	ldi	r27, 0x00	; 0
     f3e:	e8 e3       	ldi	r30, 0x38	; 56
     f40:	f0 e0       	ldi	r31, 0x00	; 0
     f42:	80 81       	ld	r24, Z
     f44:	48 2f       	mov	r20, r24
     f46:	8a 81       	ldd	r24, Y+2	; 0x02
     f48:	28 2f       	mov	r18, r24
     f4a:	30 e0       	ldi	r19, 0x00	; 0
     f4c:	81 e0       	ldi	r24, 0x01	; 1
     f4e:	90 e0       	ldi	r25, 0x00	; 0
     f50:	02 2e       	mov	r0, r18
     f52:	02 c0       	rjmp	.+4      	; 0xf58 <MDIO_voidSetPinValue+0x10a>
     f54:	88 0f       	add	r24, r24
     f56:	99 1f       	adc	r25, r25
     f58:	0a 94       	dec	r0
     f5a:	e2 f7       	brpl	.-8      	; 0xf54 <MDIO_voidSetPinValue+0x106>
     f5c:	84 2b       	or	r24, r20
     f5e:	8c 93       	st	X, r24
     f60:	83 c0       	rjmp	.+262    	; 0x1068 <MDIO_voidSetPinValue+0x21a>
            break;

            case PIN_LOW: CLR_BIT(PORTB_REG,A_u8Pin);
     f62:	a8 e3       	ldi	r26, 0x38	; 56
     f64:	b0 e0       	ldi	r27, 0x00	; 0
     f66:	e8 e3       	ldi	r30, 0x38	; 56
     f68:	f0 e0       	ldi	r31, 0x00	; 0
     f6a:	80 81       	ld	r24, Z
     f6c:	48 2f       	mov	r20, r24
     f6e:	8a 81       	ldd	r24, Y+2	; 0x02
     f70:	28 2f       	mov	r18, r24
     f72:	30 e0       	ldi	r19, 0x00	; 0
     f74:	81 e0       	ldi	r24, 0x01	; 1
     f76:	90 e0       	ldi	r25, 0x00	; 0
     f78:	02 2e       	mov	r0, r18
     f7a:	02 c0       	rjmp	.+4      	; 0xf80 <MDIO_voidSetPinValue+0x132>
     f7c:	88 0f       	add	r24, r24
     f7e:	99 1f       	adc	r25, r25
     f80:	0a 94       	dec	r0
     f82:	e2 f7       	brpl	.-8      	; 0xf7c <MDIO_voidSetPinValue+0x12e>
     f84:	80 95       	com	r24
     f86:	84 23       	and	r24, r20
     f88:	8c 93       	st	X, r24
     f8a:	6e c0       	rjmp	.+220    	; 0x1068 <MDIO_voidSetPinValue+0x21a>
            break;
        };
        break;

        case PORTC:
        switch (A_u8Value)
     f8c:	8b 81       	ldd	r24, Y+3	; 0x03
     f8e:	28 2f       	mov	r18, r24
     f90:	30 e0       	ldi	r19, 0x00	; 0
     f92:	3f 83       	std	Y+7, r19	; 0x07
     f94:	2e 83       	std	Y+6, r18	; 0x06
     f96:	8e 81       	ldd	r24, Y+6	; 0x06
     f98:	9f 81       	ldd	r25, Y+7	; 0x07
     f9a:	00 97       	sbiw	r24, 0x00	; 0
     f9c:	d1 f0       	breq	.+52     	; 0xfd2 <MDIO_voidSetPinValue+0x184>
     f9e:	2e 81       	ldd	r18, Y+6	; 0x06
     fa0:	3f 81       	ldd	r19, Y+7	; 0x07
     fa2:	21 30       	cpi	r18, 0x01	; 1
     fa4:	31 05       	cpc	r19, r1
     fa6:	09 f0       	breq	.+2      	; 0xfaa <MDIO_voidSetPinValue+0x15c>
     fa8:	5f c0       	rjmp	.+190    	; 0x1068 <MDIO_voidSetPinValue+0x21a>
        {
            case PIN_HIGH: SET_BIT(PORTC_REG,A_u8Pin);
     faa:	a5 e3       	ldi	r26, 0x35	; 53
     fac:	b0 e0       	ldi	r27, 0x00	; 0
     fae:	e5 e3       	ldi	r30, 0x35	; 53
     fb0:	f0 e0       	ldi	r31, 0x00	; 0
     fb2:	80 81       	ld	r24, Z
     fb4:	48 2f       	mov	r20, r24
     fb6:	8a 81       	ldd	r24, Y+2	; 0x02
     fb8:	28 2f       	mov	r18, r24
     fba:	30 e0       	ldi	r19, 0x00	; 0
     fbc:	81 e0       	ldi	r24, 0x01	; 1
     fbe:	90 e0       	ldi	r25, 0x00	; 0
     fc0:	02 2e       	mov	r0, r18
     fc2:	02 c0       	rjmp	.+4      	; 0xfc8 <MDIO_voidSetPinValue+0x17a>
     fc4:	88 0f       	add	r24, r24
     fc6:	99 1f       	adc	r25, r25
     fc8:	0a 94       	dec	r0
     fca:	e2 f7       	brpl	.-8      	; 0xfc4 <MDIO_voidSetPinValue+0x176>
     fcc:	84 2b       	or	r24, r20
     fce:	8c 93       	st	X, r24
     fd0:	4b c0       	rjmp	.+150    	; 0x1068 <MDIO_voidSetPinValue+0x21a>
            break;

            case PIN_LOW: CLR_BIT(PORTC_REG,A_u8Pin);
     fd2:	a5 e3       	ldi	r26, 0x35	; 53
     fd4:	b0 e0       	ldi	r27, 0x00	; 0
     fd6:	e5 e3       	ldi	r30, 0x35	; 53
     fd8:	f0 e0       	ldi	r31, 0x00	; 0
     fda:	80 81       	ld	r24, Z
     fdc:	48 2f       	mov	r20, r24
     fde:	8a 81       	ldd	r24, Y+2	; 0x02
     fe0:	28 2f       	mov	r18, r24
     fe2:	30 e0       	ldi	r19, 0x00	; 0
     fe4:	81 e0       	ldi	r24, 0x01	; 1
     fe6:	90 e0       	ldi	r25, 0x00	; 0
     fe8:	02 2e       	mov	r0, r18
     fea:	02 c0       	rjmp	.+4      	; 0xff0 <MDIO_voidSetPinValue+0x1a2>
     fec:	88 0f       	add	r24, r24
     fee:	99 1f       	adc	r25, r25
     ff0:	0a 94       	dec	r0
     ff2:	e2 f7       	brpl	.-8      	; 0xfec <MDIO_voidSetPinValue+0x19e>
     ff4:	80 95       	com	r24
     ff6:	84 23       	and	r24, r20
     ff8:	8c 93       	st	X, r24
     ffa:	36 c0       	rjmp	.+108    	; 0x1068 <MDIO_voidSetPinValue+0x21a>
            break;
        };
        break;

        case PORTD:
        switch (A_u8Value)
     ffc:	8b 81       	ldd	r24, Y+3	; 0x03
     ffe:	28 2f       	mov	r18, r24
    1000:	30 e0       	ldi	r19, 0x00	; 0
    1002:	3d 83       	std	Y+5, r19	; 0x05
    1004:	2c 83       	std	Y+4, r18	; 0x04
    1006:	8c 81       	ldd	r24, Y+4	; 0x04
    1008:	9d 81       	ldd	r25, Y+5	; 0x05
    100a:	00 97       	sbiw	r24, 0x00	; 0
    100c:	c9 f0       	breq	.+50     	; 0x1040 <MDIO_voidSetPinValue+0x1f2>
    100e:	2c 81       	ldd	r18, Y+4	; 0x04
    1010:	3d 81       	ldd	r19, Y+5	; 0x05
    1012:	21 30       	cpi	r18, 0x01	; 1
    1014:	31 05       	cpc	r19, r1
    1016:	41 f5       	brne	.+80     	; 0x1068 <MDIO_voidSetPinValue+0x21a>
        {
            case PIN_HIGH: SET_BIT(PORTD_REG,A_u8Pin);
    1018:	a2 e3       	ldi	r26, 0x32	; 50
    101a:	b0 e0       	ldi	r27, 0x00	; 0
    101c:	e2 e3       	ldi	r30, 0x32	; 50
    101e:	f0 e0       	ldi	r31, 0x00	; 0
    1020:	80 81       	ld	r24, Z
    1022:	48 2f       	mov	r20, r24
    1024:	8a 81       	ldd	r24, Y+2	; 0x02
    1026:	28 2f       	mov	r18, r24
    1028:	30 e0       	ldi	r19, 0x00	; 0
    102a:	81 e0       	ldi	r24, 0x01	; 1
    102c:	90 e0       	ldi	r25, 0x00	; 0
    102e:	02 2e       	mov	r0, r18
    1030:	02 c0       	rjmp	.+4      	; 0x1036 <MDIO_voidSetPinValue+0x1e8>
    1032:	88 0f       	add	r24, r24
    1034:	99 1f       	adc	r25, r25
    1036:	0a 94       	dec	r0
    1038:	e2 f7       	brpl	.-8      	; 0x1032 <MDIO_voidSetPinValue+0x1e4>
    103a:	84 2b       	or	r24, r20
    103c:	8c 93       	st	X, r24
    103e:	14 c0       	rjmp	.+40     	; 0x1068 <MDIO_voidSetPinValue+0x21a>
            break;

            case PIN_LOW: CLR_BIT(PORTD_REG,A_u8Pin);
    1040:	a2 e3       	ldi	r26, 0x32	; 50
    1042:	b0 e0       	ldi	r27, 0x00	; 0
    1044:	e2 e3       	ldi	r30, 0x32	; 50
    1046:	f0 e0       	ldi	r31, 0x00	; 0
    1048:	80 81       	ld	r24, Z
    104a:	48 2f       	mov	r20, r24
    104c:	8a 81       	ldd	r24, Y+2	; 0x02
    104e:	28 2f       	mov	r18, r24
    1050:	30 e0       	ldi	r19, 0x00	; 0
    1052:	81 e0       	ldi	r24, 0x01	; 1
    1054:	90 e0       	ldi	r25, 0x00	; 0
    1056:	02 2e       	mov	r0, r18
    1058:	02 c0       	rjmp	.+4      	; 0x105e <MDIO_voidSetPinValue+0x210>
    105a:	88 0f       	add	r24, r24
    105c:	99 1f       	adc	r25, r25
    105e:	0a 94       	dec	r0
    1060:	e2 f7       	brpl	.-8      	; 0x105a <MDIO_voidSetPinValue+0x20c>
    1062:	80 95       	com	r24
    1064:	84 23       	and	r24, r20
    1066:	8c 93       	st	X, r24
            break;
        };
        break;
    }
}
    1068:	2d 96       	adiw	r28, 0x0d	; 13
    106a:	0f b6       	in	r0, 0x3f	; 63
    106c:	f8 94       	cli
    106e:	de bf       	out	0x3e, r29	; 62
    1070:	0f be       	out	0x3f, r0	; 63
    1072:	cd bf       	out	0x3d, r28	; 61
    1074:	cf 91       	pop	r28
    1076:	df 91       	pop	r29
    1078:	08 95       	ret

0000107a <MDIO_voidSetPinDirection>:

void MDIO_voidSetPinDirection(u8 A_u8Port,u8 A_u8Pin, u8 A_u8Value)
{
    107a:	df 93       	push	r29
    107c:	cf 93       	push	r28
    107e:	cd b7       	in	r28, 0x3d	; 61
    1080:	de b7       	in	r29, 0x3e	; 62
    1082:	2d 97       	sbiw	r28, 0x0d	; 13
    1084:	0f b6       	in	r0, 0x3f	; 63
    1086:	f8 94       	cli
    1088:	de bf       	out	0x3e, r29	; 62
    108a:	0f be       	out	0x3f, r0	; 63
    108c:	cd bf       	out	0x3d, r28	; 61
    108e:	89 83       	std	Y+1, r24	; 0x01
    1090:	6a 83       	std	Y+2, r22	; 0x02
    1092:	4b 83       	std	Y+3, r20	; 0x03
    switch(A_u8Port)
    1094:	89 81       	ldd	r24, Y+1	; 0x01
    1096:	28 2f       	mov	r18, r24
    1098:	30 e0       	ldi	r19, 0x00	; 0
    109a:	3d 87       	std	Y+13, r19	; 0x0d
    109c:	2c 87       	std	Y+12, r18	; 0x0c
    109e:	8c 85       	ldd	r24, Y+12	; 0x0c
    10a0:	9d 85       	ldd	r25, Y+13	; 0x0d
    10a2:	81 30       	cpi	r24, 0x01	; 1
    10a4:	91 05       	cpc	r25, r1
    10a6:	09 f4       	brne	.+2      	; 0x10aa <MDIO_voidSetPinDirection+0x30>
    10a8:	4f c0       	rjmp	.+158    	; 0x1148 <MDIO_voidSetPinDirection+0xce>
    10aa:	2c 85       	ldd	r18, Y+12	; 0x0c
    10ac:	3d 85       	ldd	r19, Y+13	; 0x0d
    10ae:	22 30       	cpi	r18, 0x02	; 2
    10b0:	31 05       	cpc	r19, r1
    10b2:	2c f4       	brge	.+10     	; 0x10be <MDIO_voidSetPinDirection+0x44>
    10b4:	8c 85       	ldd	r24, Y+12	; 0x0c
    10b6:	9d 85       	ldd	r25, Y+13	; 0x0d
    10b8:	00 97       	sbiw	r24, 0x00	; 0
    10ba:	71 f0       	breq	.+28     	; 0x10d8 <MDIO_voidSetPinDirection+0x5e>
    10bc:	eb c0       	rjmp	.+470    	; 0x1294 <MDIO_voidSetPinDirection+0x21a>
    10be:	2c 85       	ldd	r18, Y+12	; 0x0c
    10c0:	3d 85       	ldd	r19, Y+13	; 0x0d
    10c2:	22 30       	cpi	r18, 0x02	; 2
    10c4:	31 05       	cpc	r19, r1
    10c6:	09 f4       	brne	.+2      	; 0x10ca <MDIO_voidSetPinDirection+0x50>
    10c8:	77 c0       	rjmp	.+238    	; 0x11b8 <MDIO_voidSetPinDirection+0x13e>
    10ca:	8c 85       	ldd	r24, Y+12	; 0x0c
    10cc:	9d 85       	ldd	r25, Y+13	; 0x0d
    10ce:	83 30       	cpi	r24, 0x03	; 3
    10d0:	91 05       	cpc	r25, r1
    10d2:	09 f4       	brne	.+2      	; 0x10d6 <MDIO_voidSetPinDirection+0x5c>
    10d4:	a9 c0       	rjmp	.+338    	; 0x1228 <MDIO_voidSetPinDirection+0x1ae>
    10d6:	de c0       	rjmp	.+444    	; 0x1294 <MDIO_voidSetPinDirection+0x21a>
    {
        case PORTA:
        switch (A_u8Value)
    10d8:	8b 81       	ldd	r24, Y+3	; 0x03
    10da:	28 2f       	mov	r18, r24
    10dc:	30 e0       	ldi	r19, 0x00	; 0
    10de:	3b 87       	std	Y+11, r19	; 0x0b
    10e0:	2a 87       	std	Y+10, r18	; 0x0a
    10e2:	8a 85       	ldd	r24, Y+10	; 0x0a
    10e4:	9b 85       	ldd	r25, Y+11	; 0x0b
    10e6:	00 97       	sbiw	r24, 0x00	; 0
    10e8:	d1 f0       	breq	.+52     	; 0x111e <MDIO_voidSetPinDirection+0xa4>
    10ea:	2a 85       	ldd	r18, Y+10	; 0x0a
    10ec:	3b 85       	ldd	r19, Y+11	; 0x0b
    10ee:	21 30       	cpi	r18, 0x01	; 1
    10f0:	31 05       	cpc	r19, r1
    10f2:	09 f0       	breq	.+2      	; 0x10f6 <MDIO_voidSetPinDirection+0x7c>
    10f4:	cf c0       	rjmp	.+414    	; 0x1294 <MDIO_voidSetPinDirection+0x21a>
        {
            case PIN_OUTPUT: SET_BIT(DDRA_REG,A_u8Pin);
    10f6:	aa e3       	ldi	r26, 0x3A	; 58
    10f8:	b0 e0       	ldi	r27, 0x00	; 0
    10fa:	ea e3       	ldi	r30, 0x3A	; 58
    10fc:	f0 e0       	ldi	r31, 0x00	; 0
    10fe:	80 81       	ld	r24, Z
    1100:	48 2f       	mov	r20, r24
    1102:	8a 81       	ldd	r24, Y+2	; 0x02
    1104:	28 2f       	mov	r18, r24
    1106:	30 e0       	ldi	r19, 0x00	; 0
    1108:	81 e0       	ldi	r24, 0x01	; 1
    110a:	90 e0       	ldi	r25, 0x00	; 0
    110c:	02 2e       	mov	r0, r18
    110e:	02 c0       	rjmp	.+4      	; 0x1114 <MDIO_voidSetPinDirection+0x9a>
    1110:	88 0f       	add	r24, r24
    1112:	99 1f       	adc	r25, r25
    1114:	0a 94       	dec	r0
    1116:	e2 f7       	brpl	.-8      	; 0x1110 <MDIO_voidSetPinDirection+0x96>
    1118:	84 2b       	or	r24, r20
    111a:	8c 93       	st	X, r24
    111c:	bb c0       	rjmp	.+374    	; 0x1294 <MDIO_voidSetPinDirection+0x21a>
            break;

            case PIN_INPUT: CLR_BIT(DDRA_REG,A_u8Pin);
    111e:	aa e3       	ldi	r26, 0x3A	; 58
    1120:	b0 e0       	ldi	r27, 0x00	; 0
    1122:	ea e3       	ldi	r30, 0x3A	; 58
    1124:	f0 e0       	ldi	r31, 0x00	; 0
    1126:	80 81       	ld	r24, Z
    1128:	48 2f       	mov	r20, r24
    112a:	8a 81       	ldd	r24, Y+2	; 0x02
    112c:	28 2f       	mov	r18, r24
    112e:	30 e0       	ldi	r19, 0x00	; 0
    1130:	81 e0       	ldi	r24, 0x01	; 1
    1132:	90 e0       	ldi	r25, 0x00	; 0
    1134:	02 2e       	mov	r0, r18
    1136:	02 c0       	rjmp	.+4      	; 0x113c <MDIO_voidSetPinDirection+0xc2>
    1138:	88 0f       	add	r24, r24
    113a:	99 1f       	adc	r25, r25
    113c:	0a 94       	dec	r0
    113e:	e2 f7       	brpl	.-8      	; 0x1138 <MDIO_voidSetPinDirection+0xbe>
    1140:	80 95       	com	r24
    1142:	84 23       	and	r24, r20
    1144:	8c 93       	st	X, r24
    1146:	a6 c0       	rjmp	.+332    	; 0x1294 <MDIO_voidSetPinDirection+0x21a>
            break;
        };
        break;

        case PORTB:
        switch (A_u8Value)
    1148:	8b 81       	ldd	r24, Y+3	; 0x03
    114a:	28 2f       	mov	r18, r24
    114c:	30 e0       	ldi	r19, 0x00	; 0
    114e:	39 87       	std	Y+9, r19	; 0x09
    1150:	28 87       	std	Y+8, r18	; 0x08
    1152:	88 85       	ldd	r24, Y+8	; 0x08
    1154:	99 85       	ldd	r25, Y+9	; 0x09
    1156:	00 97       	sbiw	r24, 0x00	; 0
    1158:	d1 f0       	breq	.+52     	; 0x118e <MDIO_voidSetPinDirection+0x114>
    115a:	28 85       	ldd	r18, Y+8	; 0x08
    115c:	39 85       	ldd	r19, Y+9	; 0x09
    115e:	21 30       	cpi	r18, 0x01	; 1
    1160:	31 05       	cpc	r19, r1
    1162:	09 f0       	breq	.+2      	; 0x1166 <MDIO_voidSetPinDirection+0xec>
    1164:	97 c0       	rjmp	.+302    	; 0x1294 <MDIO_voidSetPinDirection+0x21a>
        {
            case PIN_OUTPUT: SET_BIT(DDRB_REG,A_u8Pin);
    1166:	a7 e3       	ldi	r26, 0x37	; 55
    1168:	b0 e0       	ldi	r27, 0x00	; 0
    116a:	e7 e3       	ldi	r30, 0x37	; 55
    116c:	f0 e0       	ldi	r31, 0x00	; 0
    116e:	80 81       	ld	r24, Z
    1170:	48 2f       	mov	r20, r24
    1172:	8a 81       	ldd	r24, Y+2	; 0x02
    1174:	28 2f       	mov	r18, r24
    1176:	30 e0       	ldi	r19, 0x00	; 0
    1178:	81 e0       	ldi	r24, 0x01	; 1
    117a:	90 e0       	ldi	r25, 0x00	; 0
    117c:	02 2e       	mov	r0, r18
    117e:	02 c0       	rjmp	.+4      	; 0x1184 <MDIO_voidSetPinDirection+0x10a>
    1180:	88 0f       	add	r24, r24
    1182:	99 1f       	adc	r25, r25
    1184:	0a 94       	dec	r0
    1186:	e2 f7       	brpl	.-8      	; 0x1180 <MDIO_voidSetPinDirection+0x106>
    1188:	84 2b       	or	r24, r20
    118a:	8c 93       	st	X, r24
    118c:	83 c0       	rjmp	.+262    	; 0x1294 <MDIO_voidSetPinDirection+0x21a>
            break;

            case PIN_INPUT: CLR_BIT(DDRB_REG,A_u8Pin);
    118e:	a7 e3       	ldi	r26, 0x37	; 55
    1190:	b0 e0       	ldi	r27, 0x00	; 0
    1192:	e7 e3       	ldi	r30, 0x37	; 55
    1194:	f0 e0       	ldi	r31, 0x00	; 0
    1196:	80 81       	ld	r24, Z
    1198:	48 2f       	mov	r20, r24
    119a:	8a 81       	ldd	r24, Y+2	; 0x02
    119c:	28 2f       	mov	r18, r24
    119e:	30 e0       	ldi	r19, 0x00	; 0
    11a0:	81 e0       	ldi	r24, 0x01	; 1
    11a2:	90 e0       	ldi	r25, 0x00	; 0
    11a4:	02 2e       	mov	r0, r18
    11a6:	02 c0       	rjmp	.+4      	; 0x11ac <MDIO_voidSetPinDirection+0x132>
    11a8:	88 0f       	add	r24, r24
    11aa:	99 1f       	adc	r25, r25
    11ac:	0a 94       	dec	r0
    11ae:	e2 f7       	brpl	.-8      	; 0x11a8 <MDIO_voidSetPinDirection+0x12e>
    11b0:	80 95       	com	r24
    11b2:	84 23       	and	r24, r20
    11b4:	8c 93       	st	X, r24
    11b6:	6e c0       	rjmp	.+220    	; 0x1294 <MDIO_voidSetPinDirection+0x21a>
            break;
        };
        break;

        case PORTC:
        switch (A_u8Value)
    11b8:	8b 81       	ldd	r24, Y+3	; 0x03
    11ba:	28 2f       	mov	r18, r24
    11bc:	30 e0       	ldi	r19, 0x00	; 0
    11be:	3f 83       	std	Y+7, r19	; 0x07
    11c0:	2e 83       	std	Y+6, r18	; 0x06
    11c2:	8e 81       	ldd	r24, Y+6	; 0x06
    11c4:	9f 81       	ldd	r25, Y+7	; 0x07
    11c6:	00 97       	sbiw	r24, 0x00	; 0
    11c8:	d1 f0       	breq	.+52     	; 0x11fe <MDIO_voidSetPinDirection+0x184>
    11ca:	2e 81       	ldd	r18, Y+6	; 0x06
    11cc:	3f 81       	ldd	r19, Y+7	; 0x07
    11ce:	21 30       	cpi	r18, 0x01	; 1
    11d0:	31 05       	cpc	r19, r1
    11d2:	09 f0       	breq	.+2      	; 0x11d6 <MDIO_voidSetPinDirection+0x15c>
    11d4:	5f c0       	rjmp	.+190    	; 0x1294 <MDIO_voidSetPinDirection+0x21a>
        {
            case PIN_OUTPUT: SET_BIT(DDRC_REG,A_u8Pin);
    11d6:	a4 e3       	ldi	r26, 0x34	; 52
    11d8:	b0 e0       	ldi	r27, 0x00	; 0
    11da:	e4 e3       	ldi	r30, 0x34	; 52
    11dc:	f0 e0       	ldi	r31, 0x00	; 0
    11de:	80 81       	ld	r24, Z
    11e0:	48 2f       	mov	r20, r24
    11e2:	8a 81       	ldd	r24, Y+2	; 0x02
    11e4:	28 2f       	mov	r18, r24
    11e6:	30 e0       	ldi	r19, 0x00	; 0
    11e8:	81 e0       	ldi	r24, 0x01	; 1
    11ea:	90 e0       	ldi	r25, 0x00	; 0
    11ec:	02 2e       	mov	r0, r18
    11ee:	02 c0       	rjmp	.+4      	; 0x11f4 <MDIO_voidSetPinDirection+0x17a>
    11f0:	88 0f       	add	r24, r24
    11f2:	99 1f       	adc	r25, r25
    11f4:	0a 94       	dec	r0
    11f6:	e2 f7       	brpl	.-8      	; 0x11f0 <MDIO_voidSetPinDirection+0x176>
    11f8:	84 2b       	or	r24, r20
    11fa:	8c 93       	st	X, r24
    11fc:	4b c0       	rjmp	.+150    	; 0x1294 <MDIO_voidSetPinDirection+0x21a>
            break;

            case PIN_INPUT: CLR_BIT(DDRC_REG,A_u8Pin);
    11fe:	a4 e3       	ldi	r26, 0x34	; 52
    1200:	b0 e0       	ldi	r27, 0x00	; 0
    1202:	e4 e3       	ldi	r30, 0x34	; 52
    1204:	f0 e0       	ldi	r31, 0x00	; 0
    1206:	80 81       	ld	r24, Z
    1208:	48 2f       	mov	r20, r24
    120a:	8a 81       	ldd	r24, Y+2	; 0x02
    120c:	28 2f       	mov	r18, r24
    120e:	30 e0       	ldi	r19, 0x00	; 0
    1210:	81 e0       	ldi	r24, 0x01	; 1
    1212:	90 e0       	ldi	r25, 0x00	; 0
    1214:	02 2e       	mov	r0, r18
    1216:	02 c0       	rjmp	.+4      	; 0x121c <MDIO_voidSetPinDirection+0x1a2>
    1218:	88 0f       	add	r24, r24
    121a:	99 1f       	adc	r25, r25
    121c:	0a 94       	dec	r0
    121e:	e2 f7       	brpl	.-8      	; 0x1218 <MDIO_voidSetPinDirection+0x19e>
    1220:	80 95       	com	r24
    1222:	84 23       	and	r24, r20
    1224:	8c 93       	st	X, r24
    1226:	36 c0       	rjmp	.+108    	; 0x1294 <MDIO_voidSetPinDirection+0x21a>
            break;
        };
        break;

        case PORTD:
        switch (A_u8Value)
    1228:	8b 81       	ldd	r24, Y+3	; 0x03
    122a:	28 2f       	mov	r18, r24
    122c:	30 e0       	ldi	r19, 0x00	; 0
    122e:	3d 83       	std	Y+5, r19	; 0x05
    1230:	2c 83       	std	Y+4, r18	; 0x04
    1232:	8c 81       	ldd	r24, Y+4	; 0x04
    1234:	9d 81       	ldd	r25, Y+5	; 0x05
    1236:	00 97       	sbiw	r24, 0x00	; 0
    1238:	c9 f0       	breq	.+50     	; 0x126c <MDIO_voidSetPinDirection+0x1f2>
    123a:	2c 81       	ldd	r18, Y+4	; 0x04
    123c:	3d 81       	ldd	r19, Y+5	; 0x05
    123e:	21 30       	cpi	r18, 0x01	; 1
    1240:	31 05       	cpc	r19, r1
    1242:	41 f5       	brne	.+80     	; 0x1294 <MDIO_voidSetPinDirection+0x21a>
        {
            case PIN_OUTPUT: SET_BIT(DDRD_REG,A_u8Pin);
    1244:	a1 e3       	ldi	r26, 0x31	; 49
    1246:	b0 e0       	ldi	r27, 0x00	; 0
    1248:	e1 e3       	ldi	r30, 0x31	; 49
    124a:	f0 e0       	ldi	r31, 0x00	; 0
    124c:	80 81       	ld	r24, Z
    124e:	48 2f       	mov	r20, r24
    1250:	8a 81       	ldd	r24, Y+2	; 0x02
    1252:	28 2f       	mov	r18, r24
    1254:	30 e0       	ldi	r19, 0x00	; 0
    1256:	81 e0       	ldi	r24, 0x01	; 1
    1258:	90 e0       	ldi	r25, 0x00	; 0
    125a:	02 2e       	mov	r0, r18
    125c:	02 c0       	rjmp	.+4      	; 0x1262 <MDIO_voidSetPinDirection+0x1e8>
    125e:	88 0f       	add	r24, r24
    1260:	99 1f       	adc	r25, r25
    1262:	0a 94       	dec	r0
    1264:	e2 f7       	brpl	.-8      	; 0x125e <MDIO_voidSetPinDirection+0x1e4>
    1266:	84 2b       	or	r24, r20
    1268:	8c 93       	st	X, r24
    126a:	14 c0       	rjmp	.+40     	; 0x1294 <MDIO_voidSetPinDirection+0x21a>
            break;

            case PIN_INPUT: CLR_BIT(DDRD_REG,A_u8Pin);
    126c:	a1 e3       	ldi	r26, 0x31	; 49
    126e:	b0 e0       	ldi	r27, 0x00	; 0
    1270:	e1 e3       	ldi	r30, 0x31	; 49
    1272:	f0 e0       	ldi	r31, 0x00	; 0
    1274:	80 81       	ld	r24, Z
    1276:	48 2f       	mov	r20, r24
    1278:	8a 81       	ldd	r24, Y+2	; 0x02
    127a:	28 2f       	mov	r18, r24
    127c:	30 e0       	ldi	r19, 0x00	; 0
    127e:	81 e0       	ldi	r24, 0x01	; 1
    1280:	90 e0       	ldi	r25, 0x00	; 0
    1282:	02 2e       	mov	r0, r18
    1284:	02 c0       	rjmp	.+4      	; 0x128a <MDIO_voidSetPinDirection+0x210>
    1286:	88 0f       	add	r24, r24
    1288:	99 1f       	adc	r25, r25
    128a:	0a 94       	dec	r0
    128c:	e2 f7       	brpl	.-8      	; 0x1286 <MDIO_voidSetPinDirection+0x20c>
    128e:	80 95       	com	r24
    1290:	84 23       	and	r24, r20
    1292:	8c 93       	st	X, r24
            break;
        };
        break;
    }
}
    1294:	2d 96       	adiw	r28, 0x0d	; 13
    1296:	0f b6       	in	r0, 0x3f	; 63
    1298:	f8 94       	cli
    129a:	de bf       	out	0x3e, r29	; 62
    129c:	0f be       	out	0x3f, r0	; 63
    129e:	cd bf       	out	0x3d, r28	; 61
    12a0:	cf 91       	pop	r28
    12a2:	df 91       	pop	r29
    12a4:	08 95       	ret

000012a6 <MDIO_voidSetPortValue>:


void MDIO_voidSetPortValue(u8 A_u8Port,u8 A_u8Value)
{
    12a6:	df 93       	push	r29
    12a8:	cf 93       	push	r28
    12aa:	00 d0       	rcall	.+0      	; 0x12ac <MDIO_voidSetPortValue+0x6>
    12ac:	00 d0       	rcall	.+0      	; 0x12ae <MDIO_voidSetPortValue+0x8>
    12ae:	cd b7       	in	r28, 0x3d	; 61
    12b0:	de b7       	in	r29, 0x3e	; 62
    12b2:	89 83       	std	Y+1, r24	; 0x01
    12b4:	6a 83       	std	Y+2, r22	; 0x02
    switch(A_u8Port)
    12b6:	89 81       	ldd	r24, Y+1	; 0x01
    12b8:	28 2f       	mov	r18, r24
    12ba:	30 e0       	ldi	r19, 0x00	; 0
    12bc:	3c 83       	std	Y+4, r19	; 0x04
    12be:	2b 83       	std	Y+3, r18	; 0x03
    12c0:	8b 81       	ldd	r24, Y+3	; 0x03
    12c2:	9c 81       	ldd	r25, Y+4	; 0x04
    12c4:	81 30       	cpi	r24, 0x01	; 1
    12c6:	91 05       	cpc	r25, r1
    12c8:	d1 f0       	breq	.+52     	; 0x12fe <MDIO_voidSetPortValue+0x58>
    12ca:	2b 81       	ldd	r18, Y+3	; 0x03
    12cc:	3c 81       	ldd	r19, Y+4	; 0x04
    12ce:	22 30       	cpi	r18, 0x02	; 2
    12d0:	31 05       	cpc	r19, r1
    12d2:	2c f4       	brge	.+10     	; 0x12de <MDIO_voidSetPortValue+0x38>
    12d4:	8b 81       	ldd	r24, Y+3	; 0x03
    12d6:	9c 81       	ldd	r25, Y+4	; 0x04
    12d8:	00 97       	sbiw	r24, 0x00	; 0
    12da:	61 f0       	breq	.+24     	; 0x12f4 <MDIO_voidSetPortValue+0x4e>
    12dc:	1e c0       	rjmp	.+60     	; 0x131a <MDIO_voidSetPortValue+0x74>
    12de:	2b 81       	ldd	r18, Y+3	; 0x03
    12e0:	3c 81       	ldd	r19, Y+4	; 0x04
    12e2:	22 30       	cpi	r18, 0x02	; 2
    12e4:	31 05       	cpc	r19, r1
    12e6:	81 f0       	breq	.+32     	; 0x1308 <MDIO_voidSetPortValue+0x62>
    12e8:	8b 81       	ldd	r24, Y+3	; 0x03
    12ea:	9c 81       	ldd	r25, Y+4	; 0x04
    12ec:	83 30       	cpi	r24, 0x03	; 3
    12ee:	91 05       	cpc	r25, r1
    12f0:	81 f0       	breq	.+32     	; 0x1312 <MDIO_voidSetPortValue+0x6c>
    12f2:	13 c0       	rjmp	.+38     	; 0x131a <MDIO_voidSetPortValue+0x74>
    {
        case PORTA:PORTA_REG=A_u8Value;
    12f4:	eb e3       	ldi	r30, 0x3B	; 59
    12f6:	f0 e0       	ldi	r31, 0x00	; 0
    12f8:	8a 81       	ldd	r24, Y+2	; 0x02
    12fa:	80 83       	st	Z, r24
    12fc:	0e c0       	rjmp	.+28     	; 0x131a <MDIO_voidSetPortValue+0x74>
        break;
        case PORTB:PORTB_REG=A_u8Value;
    12fe:	e8 e3       	ldi	r30, 0x38	; 56
    1300:	f0 e0       	ldi	r31, 0x00	; 0
    1302:	8a 81       	ldd	r24, Y+2	; 0x02
    1304:	80 83       	st	Z, r24
    1306:	09 c0       	rjmp	.+18     	; 0x131a <MDIO_voidSetPortValue+0x74>
        break;
        case PORTC:PORTC_REG=A_u8Value;
    1308:	e5 e3       	ldi	r30, 0x35	; 53
    130a:	f0 e0       	ldi	r31, 0x00	; 0
    130c:	8a 81       	ldd	r24, Y+2	; 0x02
    130e:	80 83       	st	Z, r24
    1310:	04 c0       	rjmp	.+8      	; 0x131a <MDIO_voidSetPortValue+0x74>
        break;
        case PORTD:PORTD_REG=A_u8Value;
    1312:	e2 e3       	ldi	r30, 0x32	; 50
    1314:	f0 e0       	ldi	r31, 0x00	; 0
    1316:	8a 81       	ldd	r24, Y+2	; 0x02
    1318:	80 83       	st	Z, r24
        break;
    }
}
    131a:	0f 90       	pop	r0
    131c:	0f 90       	pop	r0
    131e:	0f 90       	pop	r0
    1320:	0f 90       	pop	r0
    1322:	cf 91       	pop	r28
    1324:	df 91       	pop	r29
    1326:	08 95       	ret

00001328 <MDIO_voidSetPortDirection>:

void MDIO_voidSetPortDirection(u8 A_u8Port,u8 A_u8Value)
{
    1328:	df 93       	push	r29
    132a:	cf 93       	push	r28
    132c:	00 d0       	rcall	.+0      	; 0x132e <MDIO_voidSetPortDirection+0x6>
    132e:	00 d0       	rcall	.+0      	; 0x1330 <MDIO_voidSetPortDirection+0x8>
    1330:	cd b7       	in	r28, 0x3d	; 61
    1332:	de b7       	in	r29, 0x3e	; 62
    1334:	89 83       	std	Y+1, r24	; 0x01
    1336:	6a 83       	std	Y+2, r22	; 0x02
    switch(A_u8Port)
    1338:	89 81       	ldd	r24, Y+1	; 0x01
    133a:	28 2f       	mov	r18, r24
    133c:	30 e0       	ldi	r19, 0x00	; 0
    133e:	3c 83       	std	Y+4, r19	; 0x04
    1340:	2b 83       	std	Y+3, r18	; 0x03
    1342:	8b 81       	ldd	r24, Y+3	; 0x03
    1344:	9c 81       	ldd	r25, Y+4	; 0x04
    1346:	81 30       	cpi	r24, 0x01	; 1
    1348:	91 05       	cpc	r25, r1
    134a:	d1 f0       	breq	.+52     	; 0x1380 <MDIO_voidSetPortDirection+0x58>
    134c:	2b 81       	ldd	r18, Y+3	; 0x03
    134e:	3c 81       	ldd	r19, Y+4	; 0x04
    1350:	22 30       	cpi	r18, 0x02	; 2
    1352:	31 05       	cpc	r19, r1
    1354:	2c f4       	brge	.+10     	; 0x1360 <MDIO_voidSetPortDirection+0x38>
    1356:	8b 81       	ldd	r24, Y+3	; 0x03
    1358:	9c 81       	ldd	r25, Y+4	; 0x04
    135a:	00 97       	sbiw	r24, 0x00	; 0
    135c:	61 f0       	breq	.+24     	; 0x1376 <MDIO_voidSetPortDirection+0x4e>
    135e:	1e c0       	rjmp	.+60     	; 0x139c <MDIO_voidSetPortDirection+0x74>
    1360:	2b 81       	ldd	r18, Y+3	; 0x03
    1362:	3c 81       	ldd	r19, Y+4	; 0x04
    1364:	22 30       	cpi	r18, 0x02	; 2
    1366:	31 05       	cpc	r19, r1
    1368:	81 f0       	breq	.+32     	; 0x138a <MDIO_voidSetPortDirection+0x62>
    136a:	8b 81       	ldd	r24, Y+3	; 0x03
    136c:	9c 81       	ldd	r25, Y+4	; 0x04
    136e:	83 30       	cpi	r24, 0x03	; 3
    1370:	91 05       	cpc	r25, r1
    1372:	81 f0       	breq	.+32     	; 0x1394 <MDIO_voidSetPortDirection+0x6c>
    1374:	13 c0       	rjmp	.+38     	; 0x139c <MDIO_voidSetPortDirection+0x74>
    {
        case PORTA:DDRA_REG=A_u8Value;
    1376:	ea e3       	ldi	r30, 0x3A	; 58
    1378:	f0 e0       	ldi	r31, 0x00	; 0
    137a:	8a 81       	ldd	r24, Y+2	; 0x02
    137c:	80 83       	st	Z, r24
    137e:	0e c0       	rjmp	.+28     	; 0x139c <MDIO_voidSetPortDirection+0x74>
        break;
        case PORTB:DDRB_REG=A_u8Value;
    1380:	e7 e3       	ldi	r30, 0x37	; 55
    1382:	f0 e0       	ldi	r31, 0x00	; 0
    1384:	8a 81       	ldd	r24, Y+2	; 0x02
    1386:	80 83       	st	Z, r24
    1388:	09 c0       	rjmp	.+18     	; 0x139c <MDIO_voidSetPortDirection+0x74>
        break;
        case PORTC:DDRC_REG=A_u8Value;
    138a:	e4 e3       	ldi	r30, 0x34	; 52
    138c:	f0 e0       	ldi	r31, 0x00	; 0
    138e:	8a 81       	ldd	r24, Y+2	; 0x02
    1390:	80 83       	st	Z, r24
    1392:	04 c0       	rjmp	.+8      	; 0x139c <MDIO_voidSetPortDirection+0x74>
        break;
        case PORTD:DDRD_REG=A_u8Value;
    1394:	e1 e3       	ldi	r30, 0x31	; 49
    1396:	f0 e0       	ldi	r31, 0x00	; 0
    1398:	8a 81       	ldd	r24, Y+2	; 0x02
    139a:	80 83       	st	Z, r24
        break;
    }
    139c:	0f 90       	pop	r0
    139e:	0f 90       	pop	r0
    13a0:	0f 90       	pop	r0
    13a2:	0f 90       	pop	r0
    13a4:	cf 91       	pop	r28
    13a6:	df 91       	pop	r29
    13a8:	08 95       	ret

000013aa <HKEYPAD_u8GetPressedKey>:
u8 keypadRow[ROWS_NUMBER]=ROW_PINS;
u8 keypadCol[COLS_NUMBER]=COL_PINS;


u8 HKEYPAD_u8GetPressedKey()
{
    13aa:	df 93       	push	r29
    13ac:	cf 93       	push	r28
    13ae:	cd b7       	in	r28, 0x3d	; 61
    13b0:	de b7       	in	r29, 0x3e	; 62
    13b2:	62 97       	sbiw	r28, 0x12	; 18
    13b4:	0f b6       	in	r0, 0x3f	; 63
    13b6:	f8 94       	cli
    13b8:	de bf       	out	0x3e, r29	; 62
    13ba:	0f be       	out	0x3f, r0	; 63
    13bc:	cd bf       	out	0x3d, r28	; 61
    u8 local_u8RowCounter,local_u8ColCounter,local_u8Flag=FLAG_DOWN,local_u8PressedKey=KEY_NOT_PRESSED;
    13be:	18 8a       	std	Y+16, r1	; 0x10
    13c0:	8f ef       	ldi	r24, 0xFF	; 255
    13c2:	8f 87       	std	Y+15, r24	; 0x0f
    
    for(local_u8RowCounter=0;local_u8RowCounter<ROWS_NUMBER;local_u8RowCounter++)
    13c4:	1a 8a       	std	Y+18, r1	; 0x12
    13c6:	c9 c0       	rjmp	.+402    	; 0x155a <HKEYPAD_u8GetPressedKey+0x1b0>
    {
        MDIO_voidSetPinValue(KEYPAD_PORT,keypadRow[local_u8RowCounter],PIN_LOW);
    13c8:	8a 89       	ldd	r24, Y+18	; 0x12
    13ca:	88 2f       	mov	r24, r24
    13cc:	90 e0       	ldi	r25, 0x00	; 0
    13ce:	fc 01       	movw	r30, r24
    13d0:	e2 58       	subi	r30, 0x82	; 130
    13d2:	ff 4f       	sbci	r31, 0xFF	; 255
    13d4:	90 81       	ld	r25, Z
    13d6:	80 e0       	ldi	r24, 0x00	; 0
    13d8:	69 2f       	mov	r22, r25
    13da:	40 e0       	ldi	r20, 0x00	; 0
    13dc:	0e 94 27 07 	call	0xe4e	; 0xe4e <MDIO_voidSetPinValue>
        for(local_u8ColCounter=0;local_u8ColCounter<COLS_NUMBER;local_u8ColCounter++)
    13e0:	19 8a       	std	Y+17, r1	; 0x11
    13e2:	a5 c0       	rjmp	.+330    	; 0x152e <HKEYPAD_u8GetPressedKey+0x184>
        {
            if (MDIO_u8GetPinValue(KEYPAD_PORT,keypadCol[local_u8ColCounter])==PIN_LOW)
    13e4:	89 89       	ldd	r24, Y+17	; 0x11
    13e6:	88 2f       	mov	r24, r24
    13e8:	90 e0       	ldi	r25, 0x00	; 0
    13ea:	fc 01       	movw	r30, r24
    13ec:	ee 57       	subi	r30, 0x7E	; 126
    13ee:	ff 4f       	sbci	r31, 0xFF	; 255
    13f0:	90 81       	ld	r25, Z
    13f2:	80 e0       	ldi	r24, 0x00	; 0
    13f4:	69 2f       	mov	r22, r25
    13f6:	0e 94 73 06 	call	0xce6	; 0xce6 <MDIO_u8GetPinValue>
    13fa:	88 23       	and	r24, r24
    13fc:	09 f0       	breq	.+2      	; 0x1400 <HKEYPAD_u8GetPressedKey+0x56>
    13fe:	94 c0       	rjmp	.+296    	; 0x1528 <HKEYPAD_u8GetPressedKey+0x17e>
    1400:	80 e0       	ldi	r24, 0x00	; 0
    1402:	90 e0       	ldi	r25, 0x00	; 0
    1404:	a6 e1       	ldi	r26, 0x16	; 22
    1406:	b3 e4       	ldi	r27, 0x43	; 67
    1408:	8b 87       	std	Y+11, r24	; 0x0b
    140a:	9c 87       	std	Y+12, r25	; 0x0c
    140c:	ad 87       	std	Y+13, r26	; 0x0d
    140e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1410:	6b 85       	ldd	r22, Y+11	; 0x0b
    1412:	7c 85       	ldd	r23, Y+12	; 0x0c
    1414:	8d 85       	ldd	r24, Y+13	; 0x0d
    1416:	9e 85       	ldd	r25, Y+14	; 0x0e
    1418:	20 e0       	ldi	r18, 0x00	; 0
    141a:	30 e0       	ldi	r19, 0x00	; 0
    141c:	4a ef       	ldi	r20, 0xFA	; 250
    141e:	54 e4       	ldi	r21, 0x44	; 68
    1420:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1424:	dc 01       	movw	r26, r24
    1426:	cb 01       	movw	r24, r22
    1428:	8f 83       	std	Y+7, r24	; 0x07
    142a:	98 87       	std	Y+8, r25	; 0x08
    142c:	a9 87       	std	Y+9, r26	; 0x09
    142e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1430:	6f 81       	ldd	r22, Y+7	; 0x07
    1432:	78 85       	ldd	r23, Y+8	; 0x08
    1434:	89 85       	ldd	r24, Y+9	; 0x09
    1436:	9a 85       	ldd	r25, Y+10	; 0x0a
    1438:	20 e0       	ldi	r18, 0x00	; 0
    143a:	30 e0       	ldi	r19, 0x00	; 0
    143c:	40 e8       	ldi	r20, 0x80	; 128
    143e:	5f e3       	ldi	r21, 0x3F	; 63
    1440:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1444:	88 23       	and	r24, r24
    1446:	2c f4       	brge	.+10     	; 0x1452 <HKEYPAD_u8GetPressedKey+0xa8>
		__ticks = 1;
    1448:	81 e0       	ldi	r24, 0x01	; 1
    144a:	90 e0       	ldi	r25, 0x00	; 0
    144c:	9e 83       	std	Y+6, r25	; 0x06
    144e:	8d 83       	std	Y+5, r24	; 0x05
    1450:	3f c0       	rjmp	.+126    	; 0x14d0 <HKEYPAD_u8GetPressedKey+0x126>
	else if (__tmp > 65535)
    1452:	6f 81       	ldd	r22, Y+7	; 0x07
    1454:	78 85       	ldd	r23, Y+8	; 0x08
    1456:	89 85       	ldd	r24, Y+9	; 0x09
    1458:	9a 85       	ldd	r25, Y+10	; 0x0a
    145a:	20 e0       	ldi	r18, 0x00	; 0
    145c:	3f ef       	ldi	r19, 0xFF	; 255
    145e:	4f e7       	ldi	r20, 0x7F	; 127
    1460:	57 e4       	ldi	r21, 0x47	; 71
    1462:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1466:	18 16       	cp	r1, r24
    1468:	4c f5       	brge	.+82     	; 0x14bc <HKEYPAD_u8GetPressedKey+0x112>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    146a:	6b 85       	ldd	r22, Y+11	; 0x0b
    146c:	7c 85       	ldd	r23, Y+12	; 0x0c
    146e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1470:	9e 85       	ldd	r25, Y+14	; 0x0e
    1472:	20 e0       	ldi	r18, 0x00	; 0
    1474:	30 e0       	ldi	r19, 0x00	; 0
    1476:	40 e2       	ldi	r20, 0x20	; 32
    1478:	51 e4       	ldi	r21, 0x41	; 65
    147a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    147e:	dc 01       	movw	r26, r24
    1480:	cb 01       	movw	r24, r22
    1482:	bc 01       	movw	r22, r24
    1484:	cd 01       	movw	r24, r26
    1486:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    148a:	dc 01       	movw	r26, r24
    148c:	cb 01       	movw	r24, r22
    148e:	9e 83       	std	Y+6, r25	; 0x06
    1490:	8d 83       	std	Y+5, r24	; 0x05
    1492:	0f c0       	rjmp	.+30     	; 0x14b2 <HKEYPAD_u8GetPressedKey+0x108>
    1494:	88 ec       	ldi	r24, 0xC8	; 200
    1496:	90 e0       	ldi	r25, 0x00	; 0
    1498:	9c 83       	std	Y+4, r25	; 0x04
    149a:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    149c:	8b 81       	ldd	r24, Y+3	; 0x03
    149e:	9c 81       	ldd	r25, Y+4	; 0x04
    14a0:	01 97       	sbiw	r24, 0x01	; 1
    14a2:	f1 f7       	brne	.-4      	; 0x14a0 <HKEYPAD_u8GetPressedKey+0xf6>
    14a4:	9c 83       	std	Y+4, r25	; 0x04
    14a6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    14a8:	8d 81       	ldd	r24, Y+5	; 0x05
    14aa:	9e 81       	ldd	r25, Y+6	; 0x06
    14ac:	01 97       	sbiw	r24, 0x01	; 1
    14ae:	9e 83       	std	Y+6, r25	; 0x06
    14b0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    14b2:	8d 81       	ldd	r24, Y+5	; 0x05
    14b4:	9e 81       	ldd	r25, Y+6	; 0x06
    14b6:	00 97       	sbiw	r24, 0x00	; 0
    14b8:	69 f7       	brne	.-38     	; 0x1494 <HKEYPAD_u8GetPressedKey+0xea>
    14ba:	14 c0       	rjmp	.+40     	; 0x14e4 <HKEYPAD_u8GetPressedKey+0x13a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    14bc:	6f 81       	ldd	r22, Y+7	; 0x07
    14be:	78 85       	ldd	r23, Y+8	; 0x08
    14c0:	89 85       	ldd	r24, Y+9	; 0x09
    14c2:	9a 85       	ldd	r25, Y+10	; 0x0a
    14c4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    14c8:	dc 01       	movw	r26, r24
    14ca:	cb 01       	movw	r24, r22
    14cc:	9e 83       	std	Y+6, r25	; 0x06
    14ce:	8d 83       	std	Y+5, r24	; 0x05
    14d0:	8d 81       	ldd	r24, Y+5	; 0x05
    14d2:	9e 81       	ldd	r25, Y+6	; 0x06
    14d4:	9a 83       	std	Y+2, r25	; 0x02
    14d6:	89 83       	std	Y+1, r24	; 0x01
    14d8:	89 81       	ldd	r24, Y+1	; 0x01
    14da:	9a 81       	ldd	r25, Y+2	; 0x02
    14dc:	01 97       	sbiw	r24, 0x01	; 1
    14de:	f1 f7       	brne	.-4      	; 0x14dc <HKEYPAD_u8GetPressedKey+0x132>
    14e0:	9a 83       	std	Y+2, r25	; 0x02
    14e2:	89 83       	std	Y+1, r24	; 0x01
            {
                _delay_ms(DEBOUNCING_DELAY);
                local_u8Flag=FLAG_UP;
    14e4:	81 e0       	ldi	r24, 0x01	; 1
    14e6:	88 8b       	std	Y+16, r24	; 0x10
                while(MDIO_u8GetPinValue(KEYPAD_PORT,keypadCol[local_u8ColCounter])==PIN_LOW);
    14e8:	89 89       	ldd	r24, Y+17	; 0x11
    14ea:	88 2f       	mov	r24, r24
    14ec:	90 e0       	ldi	r25, 0x00	; 0
    14ee:	fc 01       	movw	r30, r24
    14f0:	ee 57       	subi	r30, 0x7E	; 126
    14f2:	ff 4f       	sbci	r31, 0xFF	; 255
    14f4:	90 81       	ld	r25, Z
    14f6:	80 e0       	ldi	r24, 0x00	; 0
    14f8:	69 2f       	mov	r22, r25
    14fa:	0e 94 73 06 	call	0xce6	; 0xce6 <MDIO_u8GetPinValue>
    14fe:	88 23       	and	r24, r24
    1500:	99 f3       	breq	.-26     	; 0x14e8 <HKEYPAD_u8GetPressedKey+0x13e>
                local_u8PressedKey=KeypadArr[local_u8RowCounter][local_u8ColCounter];
    1502:	8a 89       	ldd	r24, Y+18	; 0x12
    1504:	48 2f       	mov	r20, r24
    1506:	50 e0       	ldi	r21, 0x00	; 0
    1508:	89 89       	ldd	r24, Y+17	; 0x11
    150a:	28 2f       	mov	r18, r24
    150c:	30 e0       	ldi	r19, 0x00	; 0
    150e:	ca 01       	movw	r24, r20
    1510:	88 0f       	add	r24, r24
    1512:	99 1f       	adc	r25, r25
    1514:	88 0f       	add	r24, r24
    1516:	99 1f       	adc	r25, r25
    1518:	82 0f       	add	r24, r18
    151a:	93 1f       	adc	r25, r19
    151c:	fc 01       	movw	r30, r24
    151e:	e2 59       	subi	r30, 0x92	; 146
    1520:	ff 4f       	sbci	r31, 0xFF	; 255
    1522:	80 81       	ld	r24, Z
    1524:	8f 87       	std	Y+15, r24	; 0x0f
    1526:	07 c0       	rjmp	.+14     	; 0x1536 <HKEYPAD_u8GetPressedKey+0x18c>
    u8 local_u8RowCounter,local_u8ColCounter,local_u8Flag=FLAG_DOWN,local_u8PressedKey=KEY_NOT_PRESSED;
    
    for(local_u8RowCounter=0;local_u8RowCounter<ROWS_NUMBER;local_u8RowCounter++)
    {
        MDIO_voidSetPinValue(KEYPAD_PORT,keypadRow[local_u8RowCounter],PIN_LOW);
        for(local_u8ColCounter=0;local_u8ColCounter<COLS_NUMBER;local_u8ColCounter++)
    1528:	89 89       	ldd	r24, Y+17	; 0x11
    152a:	8f 5f       	subi	r24, 0xFF	; 255
    152c:	89 8b       	std	Y+17, r24	; 0x11
    152e:	89 89       	ldd	r24, Y+17	; 0x11
    1530:	84 30       	cpi	r24, 0x04	; 4
    1532:	08 f4       	brcc	.+2      	; 0x1536 <HKEYPAD_u8GetPressedKey+0x18c>
    1534:	57 cf       	rjmp	.-338    	; 0x13e4 <HKEYPAD_u8GetPressedKey+0x3a>
                while(MDIO_u8GetPinValue(KEYPAD_PORT,keypadCol[local_u8ColCounter])==PIN_LOW);
                local_u8PressedKey=KeypadArr[local_u8RowCounter][local_u8ColCounter];
                break;
            }
        }
        MDIO_voidSetPinValue(KEYPAD_PORT,keypadRow[local_u8RowCounter],PIN_HIGH);
    1536:	8a 89       	ldd	r24, Y+18	; 0x12
    1538:	88 2f       	mov	r24, r24
    153a:	90 e0       	ldi	r25, 0x00	; 0
    153c:	fc 01       	movw	r30, r24
    153e:	e2 58       	subi	r30, 0x82	; 130
    1540:	ff 4f       	sbci	r31, 0xFF	; 255
    1542:	90 81       	ld	r25, Z
    1544:	80 e0       	ldi	r24, 0x00	; 0
    1546:	69 2f       	mov	r22, r25
    1548:	41 e0       	ldi	r20, 0x01	; 1
    154a:	0e 94 27 07 	call	0xe4e	; 0xe4e <MDIO_voidSetPinValue>
        if(local_u8Flag)
    154e:	88 89       	ldd	r24, Y+16	; 0x10
    1550:	88 23       	and	r24, r24
    1552:	39 f4       	brne	.+14     	; 0x1562 <HKEYPAD_u8GetPressedKey+0x1b8>

u8 HKEYPAD_u8GetPressedKey()
{
    u8 local_u8RowCounter,local_u8ColCounter,local_u8Flag=FLAG_DOWN,local_u8PressedKey=KEY_NOT_PRESSED;
    
    for(local_u8RowCounter=0;local_u8RowCounter<ROWS_NUMBER;local_u8RowCounter++)
    1554:	8a 89       	ldd	r24, Y+18	; 0x12
    1556:	8f 5f       	subi	r24, 0xFF	; 255
    1558:	8a 8b       	std	Y+18, r24	; 0x12
    155a:	8a 89       	ldd	r24, Y+18	; 0x12
    155c:	84 30       	cpi	r24, 0x04	; 4
    155e:	08 f4       	brcc	.+2      	; 0x1562 <HKEYPAD_u8GetPressedKey+0x1b8>
    1560:	33 cf       	rjmp	.-410    	; 0x13c8 <HKEYPAD_u8GetPressedKey+0x1e>
        if(local_u8Flag)
        {
            break;
        }
    }
    return local_u8PressedKey;
    1562:	8f 85       	ldd	r24, Y+15	; 0x0f
}
    1564:	62 96       	adiw	r28, 0x12	; 18
    1566:	0f b6       	in	r0, 0x3f	; 63
    1568:	f8 94       	cli
    156a:	de bf       	out	0x3e, r29	; 62
    156c:	0f be       	out	0x3f, r0	; 63
    156e:	cd bf       	out	0x3d, r28	; 61
    1570:	cf 91       	pop	r28
    1572:	df 91       	pop	r29
    1574:	08 95       	ret

00001576 <HLCD4_voidSendCommand>:


static u8 global_u8Init=0;

void HLCD4_voidSendCommand(u8 A_u8Command)
{
    1576:	df 93       	push	r29
    1578:	cf 93       	push	r28
    157a:	cd b7       	in	r28, 0x3d	; 61
    157c:	de b7       	in	r29, 0x3e	; 62
    157e:	ab 97       	sbiw	r28, 0x2b	; 43
    1580:	0f b6       	in	r0, 0x3f	; 63
    1582:	f8 94       	cli
    1584:	de bf       	out	0x3e, r29	; 62
    1586:	0f be       	out	0x3f, r0	; 63
    1588:	cd bf       	out	0x3d, r28	; 61
    158a:	8b a7       	std	Y+43, r24	; 0x2b
    //RS=0 RW=0
    MDIO_voidSetPinValue(LCD_CONTROL_PORT,RS_PIN,PIN_LOW);
    158c:	82 e0       	ldi	r24, 0x02	; 2
    158e:	60 e0       	ldi	r22, 0x00	; 0
    1590:	40 e0       	ldi	r20, 0x00	; 0
    1592:	0e 94 27 07 	call	0xe4e	; 0xe4e <MDIO_voidSetPinValue>
    MDIO_voidSetPinValue(LCD_CONTROL_PORT,RW_PIN,PIN_LOW);
    1596:	82 e0       	ldi	r24, 0x02	; 2
    1598:	61 e0       	ldi	r22, 0x01	; 1
    159a:	40 e0       	ldi	r20, 0x00	; 0
    159c:	0e 94 27 07 	call	0xe4e	; 0xe4e <MDIO_voidSetPinValue>

    //send UPPER Bits (B7 to B4)
    MDIO_voidSetPortValue(LCD_DATA_PORT,A_u8Command);
    15a0:	83 e0       	ldi	r24, 0x03	; 3
    15a2:	6b a5       	ldd	r22, Y+43	; 0x2b
    15a4:	0e 94 53 09 	call	0x12a6	; 0x12a6 <MDIO_voidSetPortValue>


    //pulse HIGH to LOW to ENABLE PIN
    MDIO_voidSetPinValue(LCD_CONTROL_PORT,E_PIN,PIN_HIGH);
    15a8:	82 e0       	ldi	r24, 0x02	; 2
    15aa:	62 e0       	ldi	r22, 0x02	; 2
    15ac:	41 e0       	ldi	r20, 0x01	; 1
    15ae:	0e 94 27 07 	call	0xe4e	; 0xe4e <MDIO_voidSetPinValue>
    15b2:	80 e0       	ldi	r24, 0x00	; 0
    15b4:	90 e0       	ldi	r25, 0x00	; 0
    15b6:	a0 e8       	ldi	r26, 0x80	; 128
    15b8:	bf e3       	ldi	r27, 0x3F	; 63
    15ba:	8f a3       	std	Y+39, r24	; 0x27
    15bc:	98 a7       	std	Y+40, r25	; 0x28
    15be:	a9 a7       	std	Y+41, r26	; 0x29
    15c0:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    15c2:	6f a1       	ldd	r22, Y+39	; 0x27
    15c4:	78 a5       	ldd	r23, Y+40	; 0x28
    15c6:	89 a5       	ldd	r24, Y+41	; 0x29
    15c8:	9a a5       	ldd	r25, Y+42	; 0x2a
    15ca:	20 e0       	ldi	r18, 0x00	; 0
    15cc:	30 e0       	ldi	r19, 0x00	; 0
    15ce:	4a ef       	ldi	r20, 0xFA	; 250
    15d0:	54 e4       	ldi	r21, 0x44	; 68
    15d2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15d6:	dc 01       	movw	r26, r24
    15d8:	cb 01       	movw	r24, r22
    15da:	8b a3       	std	Y+35, r24	; 0x23
    15dc:	9c a3       	std	Y+36, r25	; 0x24
    15de:	ad a3       	std	Y+37, r26	; 0x25
    15e0:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    15e2:	6b a1       	ldd	r22, Y+35	; 0x23
    15e4:	7c a1       	ldd	r23, Y+36	; 0x24
    15e6:	8d a1       	ldd	r24, Y+37	; 0x25
    15e8:	9e a1       	ldd	r25, Y+38	; 0x26
    15ea:	20 e0       	ldi	r18, 0x00	; 0
    15ec:	30 e0       	ldi	r19, 0x00	; 0
    15ee:	40 e8       	ldi	r20, 0x80	; 128
    15f0:	5f e3       	ldi	r21, 0x3F	; 63
    15f2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    15f6:	88 23       	and	r24, r24
    15f8:	2c f4       	brge	.+10     	; 0x1604 <HLCD4_voidSendCommand+0x8e>
		__ticks = 1;
    15fa:	81 e0       	ldi	r24, 0x01	; 1
    15fc:	90 e0       	ldi	r25, 0x00	; 0
    15fe:	9a a3       	std	Y+34, r25	; 0x22
    1600:	89 a3       	std	Y+33, r24	; 0x21
    1602:	3f c0       	rjmp	.+126    	; 0x1682 <HLCD4_voidSendCommand+0x10c>
	else if (__tmp > 65535)
    1604:	6b a1       	ldd	r22, Y+35	; 0x23
    1606:	7c a1       	ldd	r23, Y+36	; 0x24
    1608:	8d a1       	ldd	r24, Y+37	; 0x25
    160a:	9e a1       	ldd	r25, Y+38	; 0x26
    160c:	20 e0       	ldi	r18, 0x00	; 0
    160e:	3f ef       	ldi	r19, 0xFF	; 255
    1610:	4f e7       	ldi	r20, 0x7F	; 127
    1612:	57 e4       	ldi	r21, 0x47	; 71
    1614:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1618:	18 16       	cp	r1, r24
    161a:	4c f5       	brge	.+82     	; 0x166e <HLCD4_voidSendCommand+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    161c:	6f a1       	ldd	r22, Y+39	; 0x27
    161e:	78 a5       	ldd	r23, Y+40	; 0x28
    1620:	89 a5       	ldd	r24, Y+41	; 0x29
    1622:	9a a5       	ldd	r25, Y+42	; 0x2a
    1624:	20 e0       	ldi	r18, 0x00	; 0
    1626:	30 e0       	ldi	r19, 0x00	; 0
    1628:	40 e2       	ldi	r20, 0x20	; 32
    162a:	51 e4       	ldi	r21, 0x41	; 65
    162c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1630:	dc 01       	movw	r26, r24
    1632:	cb 01       	movw	r24, r22
    1634:	bc 01       	movw	r22, r24
    1636:	cd 01       	movw	r24, r26
    1638:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    163c:	dc 01       	movw	r26, r24
    163e:	cb 01       	movw	r24, r22
    1640:	9a a3       	std	Y+34, r25	; 0x22
    1642:	89 a3       	std	Y+33, r24	; 0x21
    1644:	0f c0       	rjmp	.+30     	; 0x1664 <HLCD4_voidSendCommand+0xee>
    1646:	88 ec       	ldi	r24, 0xC8	; 200
    1648:	90 e0       	ldi	r25, 0x00	; 0
    164a:	98 a3       	std	Y+32, r25	; 0x20
    164c:	8f 8f       	std	Y+31, r24	; 0x1f
    164e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1650:	98 a1       	ldd	r25, Y+32	; 0x20
    1652:	01 97       	sbiw	r24, 0x01	; 1
    1654:	f1 f7       	brne	.-4      	; 0x1652 <HLCD4_voidSendCommand+0xdc>
    1656:	98 a3       	std	Y+32, r25	; 0x20
    1658:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    165a:	89 a1       	ldd	r24, Y+33	; 0x21
    165c:	9a a1       	ldd	r25, Y+34	; 0x22
    165e:	01 97       	sbiw	r24, 0x01	; 1
    1660:	9a a3       	std	Y+34, r25	; 0x22
    1662:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1664:	89 a1       	ldd	r24, Y+33	; 0x21
    1666:	9a a1       	ldd	r25, Y+34	; 0x22
    1668:	00 97       	sbiw	r24, 0x00	; 0
    166a:	69 f7       	brne	.-38     	; 0x1646 <HLCD4_voidSendCommand+0xd0>
    166c:	14 c0       	rjmp	.+40     	; 0x1696 <HLCD4_voidSendCommand+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    166e:	6b a1       	ldd	r22, Y+35	; 0x23
    1670:	7c a1       	ldd	r23, Y+36	; 0x24
    1672:	8d a1       	ldd	r24, Y+37	; 0x25
    1674:	9e a1       	ldd	r25, Y+38	; 0x26
    1676:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    167a:	dc 01       	movw	r26, r24
    167c:	cb 01       	movw	r24, r22
    167e:	9a a3       	std	Y+34, r25	; 0x22
    1680:	89 a3       	std	Y+33, r24	; 0x21
    1682:	89 a1       	ldd	r24, Y+33	; 0x21
    1684:	9a a1       	ldd	r25, Y+34	; 0x22
    1686:	9e 8f       	std	Y+30, r25	; 0x1e
    1688:	8d 8f       	std	Y+29, r24	; 0x1d
    168a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    168c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    168e:	01 97       	sbiw	r24, 0x01	; 1
    1690:	f1 f7       	brne	.-4      	; 0x168e <HLCD4_voidSendCommand+0x118>
    1692:	9e 8f       	std	Y+30, r25	; 0x1e
    1694:	8d 8f       	std	Y+29, r24	; 0x1d
    _delay_ms(1);
    MDIO_voidSetPinValue(LCD_CONTROL_PORT,E_PIN,PIN_LOW);
    1696:	82 e0       	ldi	r24, 0x02	; 2
    1698:	62 e0       	ldi	r22, 0x02	; 2
    169a:	40 e0       	ldi	r20, 0x00	; 0
    169c:	0e 94 27 07 	call	0xe4e	; 0xe4e <MDIO_voidSetPinValue>

    if(global_u8Init)
    16a0:	80 91 a2 00 	lds	r24, 0x00A2
    16a4:	88 23       	and	r24, r24
    16a6:	09 f4       	brne	.+2      	; 0x16aa <HLCD4_voidSendCommand+0x134>
    16a8:	84 c0       	rjmp	.+264    	; 0x17b2 <HLCD4_voidSendCommand+0x23c>
    {

        //send LOWR Bits (B3 to B0)
        MDIO_voidSetPortValue(LCD_DATA_PORT,A_u8Command<<4);
    16aa:	8b a5       	ldd	r24, Y+43	; 0x2b
    16ac:	98 2f       	mov	r25, r24
    16ae:	92 95       	swap	r25
    16b0:	90 7f       	andi	r25, 0xF0	; 240
    16b2:	83 e0       	ldi	r24, 0x03	; 3
    16b4:	69 2f       	mov	r22, r25
    16b6:	0e 94 53 09 	call	0x12a6	; 0x12a6 <MDIO_voidSetPortValue>

        //pulse HIGH to LOW to ENABLE PIN
        MDIO_voidSetPinValue(LCD_CONTROL_PORT,E_PIN,PIN_HIGH);
    16ba:	82 e0       	ldi	r24, 0x02	; 2
    16bc:	62 e0       	ldi	r22, 0x02	; 2
    16be:	41 e0       	ldi	r20, 0x01	; 1
    16c0:	0e 94 27 07 	call	0xe4e	; 0xe4e <MDIO_voidSetPinValue>
    16c4:	80 e0       	ldi	r24, 0x00	; 0
    16c6:	90 e0       	ldi	r25, 0x00	; 0
    16c8:	a0 e8       	ldi	r26, 0x80	; 128
    16ca:	bf e3       	ldi	r27, 0x3F	; 63
    16cc:	89 8f       	std	Y+25, r24	; 0x19
    16ce:	9a 8f       	std	Y+26, r25	; 0x1a
    16d0:	ab 8f       	std	Y+27, r26	; 0x1b
    16d2:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    16d4:	69 8d       	ldd	r22, Y+25	; 0x19
    16d6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    16d8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    16da:	9c 8d       	ldd	r25, Y+28	; 0x1c
    16dc:	20 e0       	ldi	r18, 0x00	; 0
    16de:	30 e0       	ldi	r19, 0x00	; 0
    16e0:	4a ef       	ldi	r20, 0xFA	; 250
    16e2:	54 e4       	ldi	r21, 0x44	; 68
    16e4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16e8:	dc 01       	movw	r26, r24
    16ea:	cb 01       	movw	r24, r22
    16ec:	8d 8b       	std	Y+21, r24	; 0x15
    16ee:	9e 8b       	std	Y+22, r25	; 0x16
    16f0:	af 8b       	std	Y+23, r26	; 0x17
    16f2:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    16f4:	6d 89       	ldd	r22, Y+21	; 0x15
    16f6:	7e 89       	ldd	r23, Y+22	; 0x16
    16f8:	8f 89       	ldd	r24, Y+23	; 0x17
    16fa:	98 8d       	ldd	r25, Y+24	; 0x18
    16fc:	20 e0       	ldi	r18, 0x00	; 0
    16fe:	30 e0       	ldi	r19, 0x00	; 0
    1700:	40 e8       	ldi	r20, 0x80	; 128
    1702:	5f e3       	ldi	r21, 0x3F	; 63
    1704:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1708:	88 23       	and	r24, r24
    170a:	2c f4       	brge	.+10     	; 0x1716 <HLCD4_voidSendCommand+0x1a0>
		__ticks = 1;
    170c:	81 e0       	ldi	r24, 0x01	; 1
    170e:	90 e0       	ldi	r25, 0x00	; 0
    1710:	9c 8b       	std	Y+20, r25	; 0x14
    1712:	8b 8b       	std	Y+19, r24	; 0x13
    1714:	3f c0       	rjmp	.+126    	; 0x1794 <HLCD4_voidSendCommand+0x21e>
	else if (__tmp > 65535)
    1716:	6d 89       	ldd	r22, Y+21	; 0x15
    1718:	7e 89       	ldd	r23, Y+22	; 0x16
    171a:	8f 89       	ldd	r24, Y+23	; 0x17
    171c:	98 8d       	ldd	r25, Y+24	; 0x18
    171e:	20 e0       	ldi	r18, 0x00	; 0
    1720:	3f ef       	ldi	r19, 0xFF	; 255
    1722:	4f e7       	ldi	r20, 0x7F	; 127
    1724:	57 e4       	ldi	r21, 0x47	; 71
    1726:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    172a:	18 16       	cp	r1, r24
    172c:	4c f5       	brge	.+82     	; 0x1780 <HLCD4_voidSendCommand+0x20a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    172e:	69 8d       	ldd	r22, Y+25	; 0x19
    1730:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1732:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1734:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1736:	20 e0       	ldi	r18, 0x00	; 0
    1738:	30 e0       	ldi	r19, 0x00	; 0
    173a:	40 e2       	ldi	r20, 0x20	; 32
    173c:	51 e4       	ldi	r21, 0x41	; 65
    173e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1742:	dc 01       	movw	r26, r24
    1744:	cb 01       	movw	r24, r22
    1746:	bc 01       	movw	r22, r24
    1748:	cd 01       	movw	r24, r26
    174a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    174e:	dc 01       	movw	r26, r24
    1750:	cb 01       	movw	r24, r22
    1752:	9c 8b       	std	Y+20, r25	; 0x14
    1754:	8b 8b       	std	Y+19, r24	; 0x13
    1756:	0f c0       	rjmp	.+30     	; 0x1776 <HLCD4_voidSendCommand+0x200>
    1758:	88 ec       	ldi	r24, 0xC8	; 200
    175a:	90 e0       	ldi	r25, 0x00	; 0
    175c:	9a 8b       	std	Y+18, r25	; 0x12
    175e:	89 8b       	std	Y+17, r24	; 0x11
    1760:	89 89       	ldd	r24, Y+17	; 0x11
    1762:	9a 89       	ldd	r25, Y+18	; 0x12
    1764:	01 97       	sbiw	r24, 0x01	; 1
    1766:	f1 f7       	brne	.-4      	; 0x1764 <HLCD4_voidSendCommand+0x1ee>
    1768:	9a 8b       	std	Y+18, r25	; 0x12
    176a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    176c:	8b 89       	ldd	r24, Y+19	; 0x13
    176e:	9c 89       	ldd	r25, Y+20	; 0x14
    1770:	01 97       	sbiw	r24, 0x01	; 1
    1772:	9c 8b       	std	Y+20, r25	; 0x14
    1774:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1776:	8b 89       	ldd	r24, Y+19	; 0x13
    1778:	9c 89       	ldd	r25, Y+20	; 0x14
    177a:	00 97       	sbiw	r24, 0x00	; 0
    177c:	69 f7       	brne	.-38     	; 0x1758 <HLCD4_voidSendCommand+0x1e2>
    177e:	14 c0       	rjmp	.+40     	; 0x17a8 <HLCD4_voidSendCommand+0x232>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1780:	6d 89       	ldd	r22, Y+21	; 0x15
    1782:	7e 89       	ldd	r23, Y+22	; 0x16
    1784:	8f 89       	ldd	r24, Y+23	; 0x17
    1786:	98 8d       	ldd	r25, Y+24	; 0x18
    1788:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    178c:	dc 01       	movw	r26, r24
    178e:	cb 01       	movw	r24, r22
    1790:	9c 8b       	std	Y+20, r25	; 0x14
    1792:	8b 8b       	std	Y+19, r24	; 0x13
    1794:	8b 89       	ldd	r24, Y+19	; 0x13
    1796:	9c 89       	ldd	r25, Y+20	; 0x14
    1798:	98 8b       	std	Y+16, r25	; 0x10
    179a:	8f 87       	std	Y+15, r24	; 0x0f
    179c:	8f 85       	ldd	r24, Y+15	; 0x0f
    179e:	98 89       	ldd	r25, Y+16	; 0x10
    17a0:	01 97       	sbiw	r24, 0x01	; 1
    17a2:	f1 f7       	brne	.-4      	; 0x17a0 <HLCD4_voidSendCommand+0x22a>
    17a4:	98 8b       	std	Y+16, r25	; 0x10
    17a6:	8f 87       	std	Y+15, r24	; 0x0f
        _delay_ms(1);
        MDIO_voidSetPinValue(LCD_CONTROL_PORT,E_PIN,PIN_LOW);
    17a8:	82 e0       	ldi	r24, 0x02	; 2
    17aa:	62 e0       	ldi	r22, 0x02	; 2
    17ac:	40 e0       	ldi	r20, 0x00	; 0
    17ae:	0e 94 27 07 	call	0xe4e	; 0xe4e <MDIO_voidSetPinValue>
    17b2:	80 e0       	ldi	r24, 0x00	; 0
    17b4:	90 e0       	ldi	r25, 0x00	; 0
    17b6:	a0 e0       	ldi	r26, 0x00	; 0
    17b8:	b0 e4       	ldi	r27, 0x40	; 64
    17ba:	8b 87       	std	Y+11, r24	; 0x0b
    17bc:	9c 87       	std	Y+12, r25	; 0x0c
    17be:	ad 87       	std	Y+13, r26	; 0x0d
    17c0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    17c2:	6b 85       	ldd	r22, Y+11	; 0x0b
    17c4:	7c 85       	ldd	r23, Y+12	; 0x0c
    17c6:	8d 85       	ldd	r24, Y+13	; 0x0d
    17c8:	9e 85       	ldd	r25, Y+14	; 0x0e
    17ca:	20 e0       	ldi	r18, 0x00	; 0
    17cc:	30 e0       	ldi	r19, 0x00	; 0
    17ce:	4a ef       	ldi	r20, 0xFA	; 250
    17d0:	54 e4       	ldi	r21, 0x44	; 68
    17d2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17d6:	dc 01       	movw	r26, r24
    17d8:	cb 01       	movw	r24, r22
    17da:	8f 83       	std	Y+7, r24	; 0x07
    17dc:	98 87       	std	Y+8, r25	; 0x08
    17de:	a9 87       	std	Y+9, r26	; 0x09
    17e0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    17e2:	6f 81       	ldd	r22, Y+7	; 0x07
    17e4:	78 85       	ldd	r23, Y+8	; 0x08
    17e6:	89 85       	ldd	r24, Y+9	; 0x09
    17e8:	9a 85       	ldd	r25, Y+10	; 0x0a
    17ea:	20 e0       	ldi	r18, 0x00	; 0
    17ec:	30 e0       	ldi	r19, 0x00	; 0
    17ee:	40 e8       	ldi	r20, 0x80	; 128
    17f0:	5f e3       	ldi	r21, 0x3F	; 63
    17f2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    17f6:	88 23       	and	r24, r24
    17f8:	2c f4       	brge	.+10     	; 0x1804 <HLCD4_voidSendCommand+0x28e>
		__ticks = 1;
    17fa:	81 e0       	ldi	r24, 0x01	; 1
    17fc:	90 e0       	ldi	r25, 0x00	; 0
    17fe:	9e 83       	std	Y+6, r25	; 0x06
    1800:	8d 83       	std	Y+5, r24	; 0x05
    1802:	3f c0       	rjmp	.+126    	; 0x1882 <HLCD4_voidSendCommand+0x30c>
	else if (__tmp > 65535)
    1804:	6f 81       	ldd	r22, Y+7	; 0x07
    1806:	78 85       	ldd	r23, Y+8	; 0x08
    1808:	89 85       	ldd	r24, Y+9	; 0x09
    180a:	9a 85       	ldd	r25, Y+10	; 0x0a
    180c:	20 e0       	ldi	r18, 0x00	; 0
    180e:	3f ef       	ldi	r19, 0xFF	; 255
    1810:	4f e7       	ldi	r20, 0x7F	; 127
    1812:	57 e4       	ldi	r21, 0x47	; 71
    1814:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1818:	18 16       	cp	r1, r24
    181a:	4c f5       	brge	.+82     	; 0x186e <HLCD4_voidSendCommand+0x2f8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    181c:	6b 85       	ldd	r22, Y+11	; 0x0b
    181e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1820:	8d 85       	ldd	r24, Y+13	; 0x0d
    1822:	9e 85       	ldd	r25, Y+14	; 0x0e
    1824:	20 e0       	ldi	r18, 0x00	; 0
    1826:	30 e0       	ldi	r19, 0x00	; 0
    1828:	40 e2       	ldi	r20, 0x20	; 32
    182a:	51 e4       	ldi	r21, 0x41	; 65
    182c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1830:	dc 01       	movw	r26, r24
    1832:	cb 01       	movw	r24, r22
    1834:	bc 01       	movw	r22, r24
    1836:	cd 01       	movw	r24, r26
    1838:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    183c:	dc 01       	movw	r26, r24
    183e:	cb 01       	movw	r24, r22
    1840:	9e 83       	std	Y+6, r25	; 0x06
    1842:	8d 83       	std	Y+5, r24	; 0x05
    1844:	0f c0       	rjmp	.+30     	; 0x1864 <HLCD4_voidSendCommand+0x2ee>
    1846:	88 ec       	ldi	r24, 0xC8	; 200
    1848:	90 e0       	ldi	r25, 0x00	; 0
    184a:	9c 83       	std	Y+4, r25	; 0x04
    184c:	8b 83       	std	Y+3, r24	; 0x03
    184e:	8b 81       	ldd	r24, Y+3	; 0x03
    1850:	9c 81       	ldd	r25, Y+4	; 0x04
    1852:	01 97       	sbiw	r24, 0x01	; 1
    1854:	f1 f7       	brne	.-4      	; 0x1852 <HLCD4_voidSendCommand+0x2dc>
    1856:	9c 83       	std	Y+4, r25	; 0x04
    1858:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    185a:	8d 81       	ldd	r24, Y+5	; 0x05
    185c:	9e 81       	ldd	r25, Y+6	; 0x06
    185e:	01 97       	sbiw	r24, 0x01	; 1
    1860:	9e 83       	std	Y+6, r25	; 0x06
    1862:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1864:	8d 81       	ldd	r24, Y+5	; 0x05
    1866:	9e 81       	ldd	r25, Y+6	; 0x06
    1868:	00 97       	sbiw	r24, 0x00	; 0
    186a:	69 f7       	brne	.-38     	; 0x1846 <HLCD4_voidSendCommand+0x2d0>
    186c:	14 c0       	rjmp	.+40     	; 0x1896 <HLCD4_voidSendCommand+0x320>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    186e:	6f 81       	ldd	r22, Y+7	; 0x07
    1870:	78 85       	ldd	r23, Y+8	; 0x08
    1872:	89 85       	ldd	r24, Y+9	; 0x09
    1874:	9a 85       	ldd	r25, Y+10	; 0x0a
    1876:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    187a:	dc 01       	movw	r26, r24
    187c:	cb 01       	movw	r24, r22
    187e:	9e 83       	std	Y+6, r25	; 0x06
    1880:	8d 83       	std	Y+5, r24	; 0x05
    1882:	8d 81       	ldd	r24, Y+5	; 0x05
    1884:	9e 81       	ldd	r25, Y+6	; 0x06
    1886:	9a 83       	std	Y+2, r25	; 0x02
    1888:	89 83       	std	Y+1, r24	; 0x01
    188a:	89 81       	ldd	r24, Y+1	; 0x01
    188c:	9a 81       	ldd	r25, Y+2	; 0x02
    188e:	01 97       	sbiw	r24, 0x01	; 1
    1890:	f1 f7       	brne	.-4      	; 0x188e <HLCD4_voidSendCommand+0x318>
    1892:	9a 83       	std	Y+2, r25	; 0x02
    1894:	89 83       	std	Y+1, r24	; 0x01
    }
    _delay_ms(2);
}
    1896:	ab 96       	adiw	r28, 0x2b	; 43
    1898:	0f b6       	in	r0, 0x3f	; 63
    189a:	f8 94       	cli
    189c:	de bf       	out	0x3e, r29	; 62
    189e:	0f be       	out	0x3f, r0	; 63
    18a0:	cd bf       	out	0x3d, r28	; 61
    18a2:	cf 91       	pop	r28
    18a4:	df 91       	pop	r29
    18a6:	08 95       	ret

000018a8 <HLCD4_voidSendData>:


void HLCD4_voidSendData(u8 A_u8Data)
{
    18a8:	df 93       	push	r29
    18aa:	cf 93       	push	r28
    18ac:	cd b7       	in	r28, 0x3d	; 61
    18ae:	de b7       	in	r29, 0x3e	; 62
    18b0:	ab 97       	sbiw	r28, 0x2b	; 43
    18b2:	0f b6       	in	r0, 0x3f	; 63
    18b4:	f8 94       	cli
    18b6:	de bf       	out	0x3e, r29	; 62
    18b8:	0f be       	out	0x3f, r0	; 63
    18ba:	cd bf       	out	0x3d, r28	; 61
    18bc:	8b a7       	std	Y+43, r24	; 0x2b
    //RS=1 RW=0
    MDIO_voidSetPinValue(LCD_CONTROL_PORT,RS_PIN,PIN_HIGH);
    18be:	82 e0       	ldi	r24, 0x02	; 2
    18c0:	60 e0       	ldi	r22, 0x00	; 0
    18c2:	41 e0       	ldi	r20, 0x01	; 1
    18c4:	0e 94 27 07 	call	0xe4e	; 0xe4e <MDIO_voidSetPinValue>
    MDIO_voidSetPinValue(LCD_CONTROL_PORT,RW_PIN,PIN_LOW);
    18c8:	82 e0       	ldi	r24, 0x02	; 2
    18ca:	61 e0       	ldi	r22, 0x01	; 1
    18cc:	40 e0       	ldi	r20, 0x00	; 0
    18ce:	0e 94 27 07 	call	0xe4e	; 0xe4e <MDIO_voidSetPinValue>

	MDIO_voidSetPortValue(LCD_DATA_PORT,A_u8Data);
    18d2:	83 e0       	ldi	r24, 0x03	; 3
    18d4:	6b a5       	ldd	r22, Y+43	; 0x2b
    18d6:	0e 94 53 09 	call	0x12a6	; 0x12a6 <MDIO_voidSetPortValue>


    MDIO_voidSetPinValue(LCD_CONTROL_PORT,E_PIN,PIN_HIGH);
    18da:	82 e0       	ldi	r24, 0x02	; 2
    18dc:	62 e0       	ldi	r22, 0x02	; 2
    18de:	41 e0       	ldi	r20, 0x01	; 1
    18e0:	0e 94 27 07 	call	0xe4e	; 0xe4e <MDIO_voidSetPinValue>
    18e4:	80 e0       	ldi	r24, 0x00	; 0
    18e6:	90 e0       	ldi	r25, 0x00	; 0
    18e8:	a0 e8       	ldi	r26, 0x80	; 128
    18ea:	bf e3       	ldi	r27, 0x3F	; 63
    18ec:	8f a3       	std	Y+39, r24	; 0x27
    18ee:	98 a7       	std	Y+40, r25	; 0x28
    18f0:	a9 a7       	std	Y+41, r26	; 0x29
    18f2:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    18f4:	6f a1       	ldd	r22, Y+39	; 0x27
    18f6:	78 a5       	ldd	r23, Y+40	; 0x28
    18f8:	89 a5       	ldd	r24, Y+41	; 0x29
    18fa:	9a a5       	ldd	r25, Y+42	; 0x2a
    18fc:	20 e0       	ldi	r18, 0x00	; 0
    18fe:	30 e0       	ldi	r19, 0x00	; 0
    1900:	4a ef       	ldi	r20, 0xFA	; 250
    1902:	54 e4       	ldi	r21, 0x44	; 68
    1904:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1908:	dc 01       	movw	r26, r24
    190a:	cb 01       	movw	r24, r22
    190c:	8b a3       	std	Y+35, r24	; 0x23
    190e:	9c a3       	std	Y+36, r25	; 0x24
    1910:	ad a3       	std	Y+37, r26	; 0x25
    1912:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1914:	6b a1       	ldd	r22, Y+35	; 0x23
    1916:	7c a1       	ldd	r23, Y+36	; 0x24
    1918:	8d a1       	ldd	r24, Y+37	; 0x25
    191a:	9e a1       	ldd	r25, Y+38	; 0x26
    191c:	20 e0       	ldi	r18, 0x00	; 0
    191e:	30 e0       	ldi	r19, 0x00	; 0
    1920:	40 e8       	ldi	r20, 0x80	; 128
    1922:	5f e3       	ldi	r21, 0x3F	; 63
    1924:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1928:	88 23       	and	r24, r24
    192a:	2c f4       	brge	.+10     	; 0x1936 <HLCD4_voidSendData+0x8e>
		__ticks = 1;
    192c:	81 e0       	ldi	r24, 0x01	; 1
    192e:	90 e0       	ldi	r25, 0x00	; 0
    1930:	9a a3       	std	Y+34, r25	; 0x22
    1932:	89 a3       	std	Y+33, r24	; 0x21
    1934:	3f c0       	rjmp	.+126    	; 0x19b4 <HLCD4_voidSendData+0x10c>
	else if (__tmp > 65535)
    1936:	6b a1       	ldd	r22, Y+35	; 0x23
    1938:	7c a1       	ldd	r23, Y+36	; 0x24
    193a:	8d a1       	ldd	r24, Y+37	; 0x25
    193c:	9e a1       	ldd	r25, Y+38	; 0x26
    193e:	20 e0       	ldi	r18, 0x00	; 0
    1940:	3f ef       	ldi	r19, 0xFF	; 255
    1942:	4f e7       	ldi	r20, 0x7F	; 127
    1944:	57 e4       	ldi	r21, 0x47	; 71
    1946:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    194a:	18 16       	cp	r1, r24
    194c:	4c f5       	brge	.+82     	; 0x19a0 <HLCD4_voidSendData+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    194e:	6f a1       	ldd	r22, Y+39	; 0x27
    1950:	78 a5       	ldd	r23, Y+40	; 0x28
    1952:	89 a5       	ldd	r24, Y+41	; 0x29
    1954:	9a a5       	ldd	r25, Y+42	; 0x2a
    1956:	20 e0       	ldi	r18, 0x00	; 0
    1958:	30 e0       	ldi	r19, 0x00	; 0
    195a:	40 e2       	ldi	r20, 0x20	; 32
    195c:	51 e4       	ldi	r21, 0x41	; 65
    195e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1962:	dc 01       	movw	r26, r24
    1964:	cb 01       	movw	r24, r22
    1966:	bc 01       	movw	r22, r24
    1968:	cd 01       	movw	r24, r26
    196a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    196e:	dc 01       	movw	r26, r24
    1970:	cb 01       	movw	r24, r22
    1972:	9a a3       	std	Y+34, r25	; 0x22
    1974:	89 a3       	std	Y+33, r24	; 0x21
    1976:	0f c0       	rjmp	.+30     	; 0x1996 <HLCD4_voidSendData+0xee>
    1978:	88 ec       	ldi	r24, 0xC8	; 200
    197a:	90 e0       	ldi	r25, 0x00	; 0
    197c:	98 a3       	std	Y+32, r25	; 0x20
    197e:	8f 8f       	std	Y+31, r24	; 0x1f
    1980:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1982:	98 a1       	ldd	r25, Y+32	; 0x20
    1984:	01 97       	sbiw	r24, 0x01	; 1
    1986:	f1 f7       	brne	.-4      	; 0x1984 <HLCD4_voidSendData+0xdc>
    1988:	98 a3       	std	Y+32, r25	; 0x20
    198a:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    198c:	89 a1       	ldd	r24, Y+33	; 0x21
    198e:	9a a1       	ldd	r25, Y+34	; 0x22
    1990:	01 97       	sbiw	r24, 0x01	; 1
    1992:	9a a3       	std	Y+34, r25	; 0x22
    1994:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1996:	89 a1       	ldd	r24, Y+33	; 0x21
    1998:	9a a1       	ldd	r25, Y+34	; 0x22
    199a:	00 97       	sbiw	r24, 0x00	; 0
    199c:	69 f7       	brne	.-38     	; 0x1978 <HLCD4_voidSendData+0xd0>
    199e:	14 c0       	rjmp	.+40     	; 0x19c8 <HLCD4_voidSendData+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    19a0:	6b a1       	ldd	r22, Y+35	; 0x23
    19a2:	7c a1       	ldd	r23, Y+36	; 0x24
    19a4:	8d a1       	ldd	r24, Y+37	; 0x25
    19a6:	9e a1       	ldd	r25, Y+38	; 0x26
    19a8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19ac:	dc 01       	movw	r26, r24
    19ae:	cb 01       	movw	r24, r22
    19b0:	9a a3       	std	Y+34, r25	; 0x22
    19b2:	89 a3       	std	Y+33, r24	; 0x21
    19b4:	89 a1       	ldd	r24, Y+33	; 0x21
    19b6:	9a a1       	ldd	r25, Y+34	; 0x22
    19b8:	9e 8f       	std	Y+30, r25	; 0x1e
    19ba:	8d 8f       	std	Y+29, r24	; 0x1d
    19bc:	8d 8d       	ldd	r24, Y+29	; 0x1d
    19be:	9e 8d       	ldd	r25, Y+30	; 0x1e
    19c0:	01 97       	sbiw	r24, 0x01	; 1
    19c2:	f1 f7       	brne	.-4      	; 0x19c0 <HLCD4_voidSendData+0x118>
    19c4:	9e 8f       	std	Y+30, r25	; 0x1e
    19c6:	8d 8f       	std	Y+29, r24	; 0x1d
    _delay_ms(1);
    MDIO_voidSetPinValue(LCD_CONTROL_PORT,E_PIN,PIN_LOW);
    19c8:	82 e0       	ldi	r24, 0x02	; 2
    19ca:	62 e0       	ldi	r22, 0x02	; 2
    19cc:	40 e0       	ldi	r20, 0x00	; 0
    19ce:	0e 94 27 07 	call	0xe4e	; 0xe4e <MDIO_voidSetPinValue>

    MDIO_voidSetPortValue(LCD_DATA_PORT,A_u8Data<<4);
    19d2:	8b a5       	ldd	r24, Y+43	; 0x2b
    19d4:	98 2f       	mov	r25, r24
    19d6:	92 95       	swap	r25
    19d8:	90 7f       	andi	r25, 0xF0	; 240
    19da:	83 e0       	ldi	r24, 0x03	; 3
    19dc:	69 2f       	mov	r22, r25
    19de:	0e 94 53 09 	call	0x12a6	; 0x12a6 <MDIO_voidSetPortValue>


    MDIO_voidSetPinValue(LCD_CONTROL_PORT,E_PIN,PIN_HIGH);
    19e2:	82 e0       	ldi	r24, 0x02	; 2
    19e4:	62 e0       	ldi	r22, 0x02	; 2
    19e6:	41 e0       	ldi	r20, 0x01	; 1
    19e8:	0e 94 27 07 	call	0xe4e	; 0xe4e <MDIO_voidSetPinValue>
    19ec:	80 e0       	ldi	r24, 0x00	; 0
    19ee:	90 e0       	ldi	r25, 0x00	; 0
    19f0:	a0 e8       	ldi	r26, 0x80	; 128
    19f2:	bf e3       	ldi	r27, 0x3F	; 63
    19f4:	89 8f       	std	Y+25, r24	; 0x19
    19f6:	9a 8f       	std	Y+26, r25	; 0x1a
    19f8:	ab 8f       	std	Y+27, r26	; 0x1b
    19fa:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    19fc:	69 8d       	ldd	r22, Y+25	; 0x19
    19fe:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1a00:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1a02:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1a04:	20 e0       	ldi	r18, 0x00	; 0
    1a06:	30 e0       	ldi	r19, 0x00	; 0
    1a08:	4a ef       	ldi	r20, 0xFA	; 250
    1a0a:	54 e4       	ldi	r21, 0x44	; 68
    1a0c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a10:	dc 01       	movw	r26, r24
    1a12:	cb 01       	movw	r24, r22
    1a14:	8d 8b       	std	Y+21, r24	; 0x15
    1a16:	9e 8b       	std	Y+22, r25	; 0x16
    1a18:	af 8b       	std	Y+23, r26	; 0x17
    1a1a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1a1c:	6d 89       	ldd	r22, Y+21	; 0x15
    1a1e:	7e 89       	ldd	r23, Y+22	; 0x16
    1a20:	8f 89       	ldd	r24, Y+23	; 0x17
    1a22:	98 8d       	ldd	r25, Y+24	; 0x18
    1a24:	20 e0       	ldi	r18, 0x00	; 0
    1a26:	30 e0       	ldi	r19, 0x00	; 0
    1a28:	40 e8       	ldi	r20, 0x80	; 128
    1a2a:	5f e3       	ldi	r21, 0x3F	; 63
    1a2c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1a30:	88 23       	and	r24, r24
    1a32:	2c f4       	brge	.+10     	; 0x1a3e <HLCD4_voidSendData+0x196>
		__ticks = 1;
    1a34:	81 e0       	ldi	r24, 0x01	; 1
    1a36:	90 e0       	ldi	r25, 0x00	; 0
    1a38:	9c 8b       	std	Y+20, r25	; 0x14
    1a3a:	8b 8b       	std	Y+19, r24	; 0x13
    1a3c:	3f c0       	rjmp	.+126    	; 0x1abc <HLCD4_voidSendData+0x214>
	else if (__tmp > 65535)
    1a3e:	6d 89       	ldd	r22, Y+21	; 0x15
    1a40:	7e 89       	ldd	r23, Y+22	; 0x16
    1a42:	8f 89       	ldd	r24, Y+23	; 0x17
    1a44:	98 8d       	ldd	r25, Y+24	; 0x18
    1a46:	20 e0       	ldi	r18, 0x00	; 0
    1a48:	3f ef       	ldi	r19, 0xFF	; 255
    1a4a:	4f e7       	ldi	r20, 0x7F	; 127
    1a4c:	57 e4       	ldi	r21, 0x47	; 71
    1a4e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1a52:	18 16       	cp	r1, r24
    1a54:	4c f5       	brge	.+82     	; 0x1aa8 <HLCD4_voidSendData+0x200>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a56:	69 8d       	ldd	r22, Y+25	; 0x19
    1a58:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1a5a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1a5c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1a5e:	20 e0       	ldi	r18, 0x00	; 0
    1a60:	30 e0       	ldi	r19, 0x00	; 0
    1a62:	40 e2       	ldi	r20, 0x20	; 32
    1a64:	51 e4       	ldi	r21, 0x41	; 65
    1a66:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a6a:	dc 01       	movw	r26, r24
    1a6c:	cb 01       	movw	r24, r22
    1a6e:	bc 01       	movw	r22, r24
    1a70:	cd 01       	movw	r24, r26
    1a72:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a76:	dc 01       	movw	r26, r24
    1a78:	cb 01       	movw	r24, r22
    1a7a:	9c 8b       	std	Y+20, r25	; 0x14
    1a7c:	8b 8b       	std	Y+19, r24	; 0x13
    1a7e:	0f c0       	rjmp	.+30     	; 0x1a9e <HLCD4_voidSendData+0x1f6>
    1a80:	88 ec       	ldi	r24, 0xC8	; 200
    1a82:	90 e0       	ldi	r25, 0x00	; 0
    1a84:	9a 8b       	std	Y+18, r25	; 0x12
    1a86:	89 8b       	std	Y+17, r24	; 0x11
    1a88:	89 89       	ldd	r24, Y+17	; 0x11
    1a8a:	9a 89       	ldd	r25, Y+18	; 0x12
    1a8c:	01 97       	sbiw	r24, 0x01	; 1
    1a8e:	f1 f7       	brne	.-4      	; 0x1a8c <HLCD4_voidSendData+0x1e4>
    1a90:	9a 8b       	std	Y+18, r25	; 0x12
    1a92:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a94:	8b 89       	ldd	r24, Y+19	; 0x13
    1a96:	9c 89       	ldd	r25, Y+20	; 0x14
    1a98:	01 97       	sbiw	r24, 0x01	; 1
    1a9a:	9c 8b       	std	Y+20, r25	; 0x14
    1a9c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a9e:	8b 89       	ldd	r24, Y+19	; 0x13
    1aa0:	9c 89       	ldd	r25, Y+20	; 0x14
    1aa2:	00 97       	sbiw	r24, 0x00	; 0
    1aa4:	69 f7       	brne	.-38     	; 0x1a80 <HLCD4_voidSendData+0x1d8>
    1aa6:	14 c0       	rjmp	.+40     	; 0x1ad0 <HLCD4_voidSendData+0x228>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1aa8:	6d 89       	ldd	r22, Y+21	; 0x15
    1aaa:	7e 89       	ldd	r23, Y+22	; 0x16
    1aac:	8f 89       	ldd	r24, Y+23	; 0x17
    1aae:	98 8d       	ldd	r25, Y+24	; 0x18
    1ab0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ab4:	dc 01       	movw	r26, r24
    1ab6:	cb 01       	movw	r24, r22
    1ab8:	9c 8b       	std	Y+20, r25	; 0x14
    1aba:	8b 8b       	std	Y+19, r24	; 0x13
    1abc:	8b 89       	ldd	r24, Y+19	; 0x13
    1abe:	9c 89       	ldd	r25, Y+20	; 0x14
    1ac0:	98 8b       	std	Y+16, r25	; 0x10
    1ac2:	8f 87       	std	Y+15, r24	; 0x0f
    1ac4:	8f 85       	ldd	r24, Y+15	; 0x0f
    1ac6:	98 89       	ldd	r25, Y+16	; 0x10
    1ac8:	01 97       	sbiw	r24, 0x01	; 1
    1aca:	f1 f7       	brne	.-4      	; 0x1ac8 <HLCD4_voidSendData+0x220>
    1acc:	98 8b       	std	Y+16, r25	; 0x10
    1ace:	8f 87       	std	Y+15, r24	; 0x0f
    _delay_ms(1);
    MDIO_voidSetPinValue(LCD_CONTROL_PORT,E_PIN,PIN_LOW);
    1ad0:	82 e0       	ldi	r24, 0x02	; 2
    1ad2:	62 e0       	ldi	r22, 0x02	; 2
    1ad4:	40 e0       	ldi	r20, 0x00	; 0
    1ad6:	0e 94 27 07 	call	0xe4e	; 0xe4e <MDIO_voidSetPinValue>
    1ada:	80 e0       	ldi	r24, 0x00	; 0
    1adc:	90 e0       	ldi	r25, 0x00	; 0
    1ade:	a0 e0       	ldi	r26, 0x00	; 0
    1ae0:	b0 e4       	ldi	r27, 0x40	; 64
    1ae2:	8b 87       	std	Y+11, r24	; 0x0b
    1ae4:	9c 87       	std	Y+12, r25	; 0x0c
    1ae6:	ad 87       	std	Y+13, r26	; 0x0d
    1ae8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1aea:	6b 85       	ldd	r22, Y+11	; 0x0b
    1aec:	7c 85       	ldd	r23, Y+12	; 0x0c
    1aee:	8d 85       	ldd	r24, Y+13	; 0x0d
    1af0:	9e 85       	ldd	r25, Y+14	; 0x0e
    1af2:	20 e0       	ldi	r18, 0x00	; 0
    1af4:	30 e0       	ldi	r19, 0x00	; 0
    1af6:	4a ef       	ldi	r20, 0xFA	; 250
    1af8:	54 e4       	ldi	r21, 0x44	; 68
    1afa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1afe:	dc 01       	movw	r26, r24
    1b00:	cb 01       	movw	r24, r22
    1b02:	8f 83       	std	Y+7, r24	; 0x07
    1b04:	98 87       	std	Y+8, r25	; 0x08
    1b06:	a9 87       	std	Y+9, r26	; 0x09
    1b08:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1b0a:	6f 81       	ldd	r22, Y+7	; 0x07
    1b0c:	78 85       	ldd	r23, Y+8	; 0x08
    1b0e:	89 85       	ldd	r24, Y+9	; 0x09
    1b10:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b12:	20 e0       	ldi	r18, 0x00	; 0
    1b14:	30 e0       	ldi	r19, 0x00	; 0
    1b16:	40 e8       	ldi	r20, 0x80	; 128
    1b18:	5f e3       	ldi	r21, 0x3F	; 63
    1b1a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1b1e:	88 23       	and	r24, r24
    1b20:	2c f4       	brge	.+10     	; 0x1b2c <HLCD4_voidSendData+0x284>
		__ticks = 1;
    1b22:	81 e0       	ldi	r24, 0x01	; 1
    1b24:	90 e0       	ldi	r25, 0x00	; 0
    1b26:	9e 83       	std	Y+6, r25	; 0x06
    1b28:	8d 83       	std	Y+5, r24	; 0x05
    1b2a:	3f c0       	rjmp	.+126    	; 0x1baa <HLCD4_voidSendData+0x302>
	else if (__tmp > 65535)
    1b2c:	6f 81       	ldd	r22, Y+7	; 0x07
    1b2e:	78 85       	ldd	r23, Y+8	; 0x08
    1b30:	89 85       	ldd	r24, Y+9	; 0x09
    1b32:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b34:	20 e0       	ldi	r18, 0x00	; 0
    1b36:	3f ef       	ldi	r19, 0xFF	; 255
    1b38:	4f e7       	ldi	r20, 0x7F	; 127
    1b3a:	57 e4       	ldi	r21, 0x47	; 71
    1b3c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1b40:	18 16       	cp	r1, r24
    1b42:	4c f5       	brge	.+82     	; 0x1b96 <HLCD4_voidSendData+0x2ee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b44:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b46:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b48:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b4a:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b4c:	20 e0       	ldi	r18, 0x00	; 0
    1b4e:	30 e0       	ldi	r19, 0x00	; 0
    1b50:	40 e2       	ldi	r20, 0x20	; 32
    1b52:	51 e4       	ldi	r21, 0x41	; 65
    1b54:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b58:	dc 01       	movw	r26, r24
    1b5a:	cb 01       	movw	r24, r22
    1b5c:	bc 01       	movw	r22, r24
    1b5e:	cd 01       	movw	r24, r26
    1b60:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b64:	dc 01       	movw	r26, r24
    1b66:	cb 01       	movw	r24, r22
    1b68:	9e 83       	std	Y+6, r25	; 0x06
    1b6a:	8d 83       	std	Y+5, r24	; 0x05
    1b6c:	0f c0       	rjmp	.+30     	; 0x1b8c <HLCD4_voidSendData+0x2e4>
    1b6e:	88 ec       	ldi	r24, 0xC8	; 200
    1b70:	90 e0       	ldi	r25, 0x00	; 0
    1b72:	9c 83       	std	Y+4, r25	; 0x04
    1b74:	8b 83       	std	Y+3, r24	; 0x03
    1b76:	8b 81       	ldd	r24, Y+3	; 0x03
    1b78:	9c 81       	ldd	r25, Y+4	; 0x04
    1b7a:	01 97       	sbiw	r24, 0x01	; 1
    1b7c:	f1 f7       	brne	.-4      	; 0x1b7a <HLCD4_voidSendData+0x2d2>
    1b7e:	9c 83       	std	Y+4, r25	; 0x04
    1b80:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b82:	8d 81       	ldd	r24, Y+5	; 0x05
    1b84:	9e 81       	ldd	r25, Y+6	; 0x06
    1b86:	01 97       	sbiw	r24, 0x01	; 1
    1b88:	9e 83       	std	Y+6, r25	; 0x06
    1b8a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b8c:	8d 81       	ldd	r24, Y+5	; 0x05
    1b8e:	9e 81       	ldd	r25, Y+6	; 0x06
    1b90:	00 97       	sbiw	r24, 0x00	; 0
    1b92:	69 f7       	brne	.-38     	; 0x1b6e <HLCD4_voidSendData+0x2c6>
    1b94:	14 c0       	rjmp	.+40     	; 0x1bbe <HLCD4_voidSendData+0x316>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b96:	6f 81       	ldd	r22, Y+7	; 0x07
    1b98:	78 85       	ldd	r23, Y+8	; 0x08
    1b9a:	89 85       	ldd	r24, Y+9	; 0x09
    1b9c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b9e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ba2:	dc 01       	movw	r26, r24
    1ba4:	cb 01       	movw	r24, r22
    1ba6:	9e 83       	std	Y+6, r25	; 0x06
    1ba8:	8d 83       	std	Y+5, r24	; 0x05
    1baa:	8d 81       	ldd	r24, Y+5	; 0x05
    1bac:	9e 81       	ldd	r25, Y+6	; 0x06
    1bae:	9a 83       	std	Y+2, r25	; 0x02
    1bb0:	89 83       	std	Y+1, r24	; 0x01
    1bb2:	89 81       	ldd	r24, Y+1	; 0x01
    1bb4:	9a 81       	ldd	r25, Y+2	; 0x02
    1bb6:	01 97       	sbiw	r24, 0x01	; 1
    1bb8:	f1 f7       	brne	.-4      	; 0x1bb6 <HLCD4_voidSendData+0x30e>
    1bba:	9a 83       	std	Y+2, r25	; 0x02
    1bbc:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(2);
}
    1bbe:	ab 96       	adiw	r28, 0x2b	; 43
    1bc0:	0f b6       	in	r0, 0x3f	; 63
    1bc2:	f8 94       	cli
    1bc4:	de bf       	out	0x3e, r29	; 62
    1bc6:	0f be       	out	0x3f, r0	; 63
    1bc8:	cd bf       	out	0x3d, r28	; 61
    1bca:	cf 91       	pop	r28
    1bcc:	df 91       	pop	r29
    1bce:	08 95       	ret

00001bd0 <HLCD4_voidInit>:



void HLCD4_voidInit()
{
    1bd0:	0f 93       	push	r16
    1bd2:	1f 93       	push	r17
    1bd4:	df 93       	push	r29
    1bd6:	cf 93       	push	r28
    1bd8:	cd b7       	in	r28, 0x3d	; 61
    1bda:	de b7       	in	r29, 0x3e	; 62
    1bdc:	cc 54       	subi	r28, 0x4C	; 76
    1bde:	d0 40       	sbci	r29, 0x00	; 0
    1be0:	0f b6       	in	r0, 0x3f	; 63
    1be2:	f8 94       	cli
    1be4:	de bf       	out	0x3e, r29	; 62
    1be6:	0f be       	out	0x3f, r0	; 63
    1be8:	cd bf       	out	0x3d, r28	; 61
    1bea:	fe 01       	movw	r30, r28
    1bec:	e7 5b       	subi	r30, 0xB7	; 183
    1bee:	ff 4f       	sbci	r31, 0xFF	; 255
    1bf0:	80 e0       	ldi	r24, 0x00	; 0
    1bf2:	90 e0       	ldi	r25, 0x00	; 0
    1bf4:	a0 ef       	ldi	r26, 0xF0	; 240
    1bf6:	b1 e4       	ldi	r27, 0x41	; 65
    1bf8:	80 83       	st	Z, r24
    1bfa:	91 83       	std	Z+1, r25	; 0x01
    1bfc:	a2 83       	std	Z+2, r26	; 0x02
    1bfe:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c00:	8e 01       	movw	r16, r28
    1c02:	0b 5b       	subi	r16, 0xBB	; 187
    1c04:	1f 4f       	sbci	r17, 0xFF	; 255
    1c06:	fe 01       	movw	r30, r28
    1c08:	e7 5b       	subi	r30, 0xB7	; 183
    1c0a:	ff 4f       	sbci	r31, 0xFF	; 255
    1c0c:	60 81       	ld	r22, Z
    1c0e:	71 81       	ldd	r23, Z+1	; 0x01
    1c10:	82 81       	ldd	r24, Z+2	; 0x02
    1c12:	93 81       	ldd	r25, Z+3	; 0x03
    1c14:	20 e0       	ldi	r18, 0x00	; 0
    1c16:	30 e0       	ldi	r19, 0x00	; 0
    1c18:	4a ef       	ldi	r20, 0xFA	; 250
    1c1a:	54 e4       	ldi	r21, 0x44	; 68
    1c1c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c20:	dc 01       	movw	r26, r24
    1c22:	cb 01       	movw	r24, r22
    1c24:	f8 01       	movw	r30, r16
    1c26:	80 83       	st	Z, r24
    1c28:	91 83       	std	Z+1, r25	; 0x01
    1c2a:	a2 83       	std	Z+2, r26	; 0x02
    1c2c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1c2e:	fe 01       	movw	r30, r28
    1c30:	eb 5b       	subi	r30, 0xBB	; 187
    1c32:	ff 4f       	sbci	r31, 0xFF	; 255
    1c34:	60 81       	ld	r22, Z
    1c36:	71 81       	ldd	r23, Z+1	; 0x01
    1c38:	82 81       	ldd	r24, Z+2	; 0x02
    1c3a:	93 81       	ldd	r25, Z+3	; 0x03
    1c3c:	20 e0       	ldi	r18, 0x00	; 0
    1c3e:	30 e0       	ldi	r19, 0x00	; 0
    1c40:	40 e8       	ldi	r20, 0x80	; 128
    1c42:	5f e3       	ldi	r21, 0x3F	; 63
    1c44:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1c48:	88 23       	and	r24, r24
    1c4a:	44 f4       	brge	.+16     	; 0x1c5c <HLCD4_voidInit+0x8c>
		__ticks = 1;
    1c4c:	fe 01       	movw	r30, r28
    1c4e:	ed 5b       	subi	r30, 0xBD	; 189
    1c50:	ff 4f       	sbci	r31, 0xFF	; 255
    1c52:	81 e0       	ldi	r24, 0x01	; 1
    1c54:	90 e0       	ldi	r25, 0x00	; 0
    1c56:	91 83       	std	Z+1, r25	; 0x01
    1c58:	80 83       	st	Z, r24
    1c5a:	64 c0       	rjmp	.+200    	; 0x1d24 <HLCD4_voidInit+0x154>
	else if (__tmp > 65535)
    1c5c:	fe 01       	movw	r30, r28
    1c5e:	eb 5b       	subi	r30, 0xBB	; 187
    1c60:	ff 4f       	sbci	r31, 0xFF	; 255
    1c62:	60 81       	ld	r22, Z
    1c64:	71 81       	ldd	r23, Z+1	; 0x01
    1c66:	82 81       	ldd	r24, Z+2	; 0x02
    1c68:	93 81       	ldd	r25, Z+3	; 0x03
    1c6a:	20 e0       	ldi	r18, 0x00	; 0
    1c6c:	3f ef       	ldi	r19, 0xFF	; 255
    1c6e:	4f e7       	ldi	r20, 0x7F	; 127
    1c70:	57 e4       	ldi	r21, 0x47	; 71
    1c72:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1c76:	18 16       	cp	r1, r24
    1c78:	0c f0       	brlt	.+2      	; 0x1c7c <HLCD4_voidInit+0xac>
    1c7a:	43 c0       	rjmp	.+134    	; 0x1d02 <HLCD4_voidInit+0x132>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c7c:	fe 01       	movw	r30, r28
    1c7e:	e7 5b       	subi	r30, 0xB7	; 183
    1c80:	ff 4f       	sbci	r31, 0xFF	; 255
    1c82:	60 81       	ld	r22, Z
    1c84:	71 81       	ldd	r23, Z+1	; 0x01
    1c86:	82 81       	ldd	r24, Z+2	; 0x02
    1c88:	93 81       	ldd	r25, Z+3	; 0x03
    1c8a:	20 e0       	ldi	r18, 0x00	; 0
    1c8c:	30 e0       	ldi	r19, 0x00	; 0
    1c8e:	40 e2       	ldi	r20, 0x20	; 32
    1c90:	51 e4       	ldi	r21, 0x41	; 65
    1c92:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c96:	dc 01       	movw	r26, r24
    1c98:	cb 01       	movw	r24, r22
    1c9a:	8e 01       	movw	r16, r28
    1c9c:	0d 5b       	subi	r16, 0xBD	; 189
    1c9e:	1f 4f       	sbci	r17, 0xFF	; 255
    1ca0:	bc 01       	movw	r22, r24
    1ca2:	cd 01       	movw	r24, r26
    1ca4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ca8:	dc 01       	movw	r26, r24
    1caa:	cb 01       	movw	r24, r22
    1cac:	f8 01       	movw	r30, r16
    1cae:	91 83       	std	Z+1, r25	; 0x01
    1cb0:	80 83       	st	Z, r24
    1cb2:	1f c0       	rjmp	.+62     	; 0x1cf2 <HLCD4_voidInit+0x122>
    1cb4:	fe 01       	movw	r30, r28
    1cb6:	ef 5b       	subi	r30, 0xBF	; 191
    1cb8:	ff 4f       	sbci	r31, 0xFF	; 255
    1cba:	88 ec       	ldi	r24, 0xC8	; 200
    1cbc:	90 e0       	ldi	r25, 0x00	; 0
    1cbe:	91 83       	std	Z+1, r25	; 0x01
    1cc0:	80 83       	st	Z, r24
    1cc2:	fe 01       	movw	r30, r28
    1cc4:	ef 5b       	subi	r30, 0xBF	; 191
    1cc6:	ff 4f       	sbci	r31, 0xFF	; 255
    1cc8:	80 81       	ld	r24, Z
    1cca:	91 81       	ldd	r25, Z+1	; 0x01
    1ccc:	01 97       	sbiw	r24, 0x01	; 1
    1cce:	f1 f7       	brne	.-4      	; 0x1ccc <HLCD4_voidInit+0xfc>
    1cd0:	fe 01       	movw	r30, r28
    1cd2:	ef 5b       	subi	r30, 0xBF	; 191
    1cd4:	ff 4f       	sbci	r31, 0xFF	; 255
    1cd6:	91 83       	std	Z+1, r25	; 0x01
    1cd8:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1cda:	de 01       	movw	r26, r28
    1cdc:	ad 5b       	subi	r26, 0xBD	; 189
    1cde:	bf 4f       	sbci	r27, 0xFF	; 255
    1ce0:	fe 01       	movw	r30, r28
    1ce2:	ed 5b       	subi	r30, 0xBD	; 189
    1ce4:	ff 4f       	sbci	r31, 0xFF	; 255
    1ce6:	80 81       	ld	r24, Z
    1ce8:	91 81       	ldd	r25, Z+1	; 0x01
    1cea:	01 97       	sbiw	r24, 0x01	; 1
    1cec:	11 96       	adiw	r26, 0x01	; 1
    1cee:	9c 93       	st	X, r25
    1cf0:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1cf2:	fe 01       	movw	r30, r28
    1cf4:	ed 5b       	subi	r30, 0xBD	; 189
    1cf6:	ff 4f       	sbci	r31, 0xFF	; 255
    1cf8:	80 81       	ld	r24, Z
    1cfa:	91 81       	ldd	r25, Z+1	; 0x01
    1cfc:	00 97       	sbiw	r24, 0x00	; 0
    1cfe:	d1 f6       	brne	.-76     	; 0x1cb4 <HLCD4_voidInit+0xe4>
    1d00:	24 c0       	rjmp	.+72     	; 0x1d4a <HLCD4_voidInit+0x17a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d02:	8e 01       	movw	r16, r28
    1d04:	0d 5b       	subi	r16, 0xBD	; 189
    1d06:	1f 4f       	sbci	r17, 0xFF	; 255
    1d08:	fe 01       	movw	r30, r28
    1d0a:	eb 5b       	subi	r30, 0xBB	; 187
    1d0c:	ff 4f       	sbci	r31, 0xFF	; 255
    1d0e:	60 81       	ld	r22, Z
    1d10:	71 81       	ldd	r23, Z+1	; 0x01
    1d12:	82 81       	ldd	r24, Z+2	; 0x02
    1d14:	93 81       	ldd	r25, Z+3	; 0x03
    1d16:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d1a:	dc 01       	movw	r26, r24
    1d1c:	cb 01       	movw	r24, r22
    1d1e:	f8 01       	movw	r30, r16
    1d20:	91 83       	std	Z+1, r25	; 0x01
    1d22:	80 83       	st	Z, r24
    1d24:	fe 01       	movw	r30, r28
    1d26:	ed 5b       	subi	r30, 0xBD	; 189
    1d28:	ff 4f       	sbci	r31, 0xFF	; 255
    1d2a:	80 81       	ld	r24, Z
    1d2c:	91 81       	ldd	r25, Z+1	; 0x01
    1d2e:	fe 01       	movw	r30, r28
    1d30:	ff 96       	adiw	r30, 0x3f	; 63
    1d32:	91 83       	std	Z+1, r25	; 0x01
    1d34:	80 83       	st	Z, r24
    1d36:	fe 01       	movw	r30, r28
    1d38:	ff 96       	adiw	r30, 0x3f	; 63
    1d3a:	80 81       	ld	r24, Z
    1d3c:	91 81       	ldd	r25, Z+1	; 0x01
    1d3e:	01 97       	sbiw	r24, 0x01	; 1
    1d40:	f1 f7       	brne	.-4      	; 0x1d3e <HLCD4_voidInit+0x16e>
    1d42:	fe 01       	movw	r30, r28
    1d44:	ff 96       	adiw	r30, 0x3f	; 63
    1d46:	91 83       	std	Z+1, r25	; 0x01
    1d48:	80 83       	st	Z, r24
    _delay_ms(30);
    HLCD4_voidSendCommand(FUNCTION_SET1);
    1d4a:	80 e2       	ldi	r24, 0x20	; 32
    1d4c:	0e 94 bb 0a 	call	0x1576	; 0x1576 <HLCD4_voidSendCommand>
    HLCD4_voidSendCommand(FUNCTION_SET2);
    1d50:	80 e2       	ldi	r24, 0x20	; 32
    1d52:	0e 94 bb 0a 	call	0x1576	; 0x1576 <HLCD4_voidSendCommand>
    HLCD4_voidSendCommand(FUNCTION_SET3);
    1d56:	80 e8       	ldi	r24, 0x80	; 128
    1d58:	0e 94 bb 0a 	call	0x1576	; 0x1576 <HLCD4_voidSendCommand>
    1d5c:	80 e0       	ldi	r24, 0x00	; 0
    1d5e:	90 e0       	ldi	r25, 0x00	; 0
    1d60:	a0 e2       	ldi	r26, 0x20	; 32
    1d62:	b2 e4       	ldi	r27, 0x42	; 66
    1d64:	8b af       	std	Y+59, r24	; 0x3b
    1d66:	9c af       	std	Y+60, r25	; 0x3c
    1d68:	ad af       	std	Y+61, r26	; 0x3d
    1d6a:	be af       	std	Y+62, r27	; 0x3e
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1d6c:	6b ad       	ldd	r22, Y+59	; 0x3b
    1d6e:	7c ad       	ldd	r23, Y+60	; 0x3c
    1d70:	8d ad       	ldd	r24, Y+61	; 0x3d
    1d72:	9e ad       	ldd	r25, Y+62	; 0x3e
    1d74:	2b ea       	ldi	r18, 0xAB	; 171
    1d76:	3a ea       	ldi	r19, 0xAA	; 170
    1d78:	4a e2       	ldi	r20, 0x2A	; 42
    1d7a:	50 e4       	ldi	r21, 0x40	; 64
    1d7c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d80:	dc 01       	movw	r26, r24
    1d82:	cb 01       	movw	r24, r22
    1d84:	8f ab       	std	Y+55, r24	; 0x37
    1d86:	98 af       	std	Y+56, r25	; 0x38
    1d88:	a9 af       	std	Y+57, r26	; 0x39
    1d8a:	ba af       	std	Y+58, r27	; 0x3a
	if (__tmp < 1.0)
    1d8c:	6f a9       	ldd	r22, Y+55	; 0x37
    1d8e:	78 ad       	ldd	r23, Y+56	; 0x38
    1d90:	89 ad       	ldd	r24, Y+57	; 0x39
    1d92:	9a ad       	ldd	r25, Y+58	; 0x3a
    1d94:	20 e0       	ldi	r18, 0x00	; 0
    1d96:	30 e0       	ldi	r19, 0x00	; 0
    1d98:	40 e8       	ldi	r20, 0x80	; 128
    1d9a:	5f e3       	ldi	r21, 0x3F	; 63
    1d9c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1da0:	88 23       	and	r24, r24
    1da2:	1c f4       	brge	.+6      	; 0x1daa <HLCD4_voidInit+0x1da>
		__ticks = 1;
    1da4:	81 e0       	ldi	r24, 0x01	; 1
    1da6:	8e ab       	std	Y+54, r24	; 0x36
    1da8:	91 c0       	rjmp	.+290    	; 0x1ecc <HLCD4_voidInit+0x2fc>
	else if (__tmp > 255)
    1daa:	6f a9       	ldd	r22, Y+55	; 0x37
    1dac:	78 ad       	ldd	r23, Y+56	; 0x38
    1dae:	89 ad       	ldd	r24, Y+57	; 0x39
    1db0:	9a ad       	ldd	r25, Y+58	; 0x3a
    1db2:	20 e0       	ldi	r18, 0x00	; 0
    1db4:	30 e0       	ldi	r19, 0x00	; 0
    1db6:	4f e7       	ldi	r20, 0x7F	; 127
    1db8:	53 e4       	ldi	r21, 0x43	; 67
    1dba:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1dbe:	18 16       	cp	r1, r24
    1dc0:	0c f0       	brlt	.+2      	; 0x1dc4 <HLCD4_voidInit+0x1f4>
    1dc2:	7b c0       	rjmp	.+246    	; 0x1eba <HLCD4_voidInit+0x2ea>
	{
		_delay_ms(__us / 1000.0);
    1dc4:	6b ad       	ldd	r22, Y+59	; 0x3b
    1dc6:	7c ad       	ldd	r23, Y+60	; 0x3c
    1dc8:	8d ad       	ldd	r24, Y+61	; 0x3d
    1dca:	9e ad       	ldd	r25, Y+62	; 0x3e
    1dcc:	20 e0       	ldi	r18, 0x00	; 0
    1dce:	30 e0       	ldi	r19, 0x00	; 0
    1dd0:	4a e7       	ldi	r20, 0x7A	; 122
    1dd2:	54 e4       	ldi	r21, 0x44	; 68
    1dd4:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1dd8:	dc 01       	movw	r26, r24
    1dda:	cb 01       	movw	r24, r22
    1ddc:	8a ab       	std	Y+50, r24	; 0x32
    1dde:	9b ab       	std	Y+51, r25	; 0x33
    1de0:	ac ab       	std	Y+52, r26	; 0x34
    1de2:	bd ab       	std	Y+53, r27	; 0x35
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1de4:	6a a9       	ldd	r22, Y+50	; 0x32
    1de6:	7b a9       	ldd	r23, Y+51	; 0x33
    1de8:	8c a9       	ldd	r24, Y+52	; 0x34
    1dea:	9d a9       	ldd	r25, Y+53	; 0x35
    1dec:	20 e0       	ldi	r18, 0x00	; 0
    1dee:	30 e0       	ldi	r19, 0x00	; 0
    1df0:	4a ef       	ldi	r20, 0xFA	; 250
    1df2:	54 e4       	ldi	r21, 0x44	; 68
    1df4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1df8:	dc 01       	movw	r26, r24
    1dfa:	cb 01       	movw	r24, r22
    1dfc:	8e a7       	std	Y+46, r24	; 0x2e
    1dfe:	9f a7       	std	Y+47, r25	; 0x2f
    1e00:	a8 ab       	std	Y+48, r26	; 0x30
    1e02:	b9 ab       	std	Y+49, r27	; 0x31
	if (__tmp < 1.0)
    1e04:	6e a5       	ldd	r22, Y+46	; 0x2e
    1e06:	7f a5       	ldd	r23, Y+47	; 0x2f
    1e08:	88 a9       	ldd	r24, Y+48	; 0x30
    1e0a:	99 a9       	ldd	r25, Y+49	; 0x31
    1e0c:	20 e0       	ldi	r18, 0x00	; 0
    1e0e:	30 e0       	ldi	r19, 0x00	; 0
    1e10:	40 e8       	ldi	r20, 0x80	; 128
    1e12:	5f e3       	ldi	r21, 0x3F	; 63
    1e14:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1e18:	88 23       	and	r24, r24
    1e1a:	2c f4       	brge	.+10     	; 0x1e26 <HLCD4_voidInit+0x256>
		__ticks = 1;
    1e1c:	81 e0       	ldi	r24, 0x01	; 1
    1e1e:	90 e0       	ldi	r25, 0x00	; 0
    1e20:	9d a7       	std	Y+45, r25	; 0x2d
    1e22:	8c a7       	std	Y+44, r24	; 0x2c
    1e24:	3f c0       	rjmp	.+126    	; 0x1ea4 <HLCD4_voidInit+0x2d4>
	else if (__tmp > 65535)
    1e26:	6e a5       	ldd	r22, Y+46	; 0x2e
    1e28:	7f a5       	ldd	r23, Y+47	; 0x2f
    1e2a:	88 a9       	ldd	r24, Y+48	; 0x30
    1e2c:	99 a9       	ldd	r25, Y+49	; 0x31
    1e2e:	20 e0       	ldi	r18, 0x00	; 0
    1e30:	3f ef       	ldi	r19, 0xFF	; 255
    1e32:	4f e7       	ldi	r20, 0x7F	; 127
    1e34:	57 e4       	ldi	r21, 0x47	; 71
    1e36:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1e3a:	18 16       	cp	r1, r24
    1e3c:	4c f5       	brge	.+82     	; 0x1e90 <HLCD4_voidInit+0x2c0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e3e:	6a a9       	ldd	r22, Y+50	; 0x32
    1e40:	7b a9       	ldd	r23, Y+51	; 0x33
    1e42:	8c a9       	ldd	r24, Y+52	; 0x34
    1e44:	9d a9       	ldd	r25, Y+53	; 0x35
    1e46:	20 e0       	ldi	r18, 0x00	; 0
    1e48:	30 e0       	ldi	r19, 0x00	; 0
    1e4a:	40 e2       	ldi	r20, 0x20	; 32
    1e4c:	51 e4       	ldi	r21, 0x41	; 65
    1e4e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e52:	dc 01       	movw	r26, r24
    1e54:	cb 01       	movw	r24, r22
    1e56:	bc 01       	movw	r22, r24
    1e58:	cd 01       	movw	r24, r26
    1e5a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e5e:	dc 01       	movw	r26, r24
    1e60:	cb 01       	movw	r24, r22
    1e62:	9d a7       	std	Y+45, r25	; 0x2d
    1e64:	8c a7       	std	Y+44, r24	; 0x2c
    1e66:	0f c0       	rjmp	.+30     	; 0x1e86 <HLCD4_voidInit+0x2b6>
    1e68:	88 ec       	ldi	r24, 0xC8	; 200
    1e6a:	90 e0       	ldi	r25, 0x00	; 0
    1e6c:	9b a7       	std	Y+43, r25	; 0x2b
    1e6e:	8a a7       	std	Y+42, r24	; 0x2a
    1e70:	8a a5       	ldd	r24, Y+42	; 0x2a
    1e72:	9b a5       	ldd	r25, Y+43	; 0x2b
    1e74:	01 97       	sbiw	r24, 0x01	; 1
    1e76:	f1 f7       	brne	.-4      	; 0x1e74 <HLCD4_voidInit+0x2a4>
    1e78:	9b a7       	std	Y+43, r25	; 0x2b
    1e7a:	8a a7       	std	Y+42, r24	; 0x2a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e7c:	8c a5       	ldd	r24, Y+44	; 0x2c
    1e7e:	9d a5       	ldd	r25, Y+45	; 0x2d
    1e80:	01 97       	sbiw	r24, 0x01	; 1
    1e82:	9d a7       	std	Y+45, r25	; 0x2d
    1e84:	8c a7       	std	Y+44, r24	; 0x2c
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e86:	8c a5       	ldd	r24, Y+44	; 0x2c
    1e88:	9d a5       	ldd	r25, Y+45	; 0x2d
    1e8a:	00 97       	sbiw	r24, 0x00	; 0
    1e8c:	69 f7       	brne	.-38     	; 0x1e68 <HLCD4_voidInit+0x298>
    1e8e:	24 c0       	rjmp	.+72     	; 0x1ed8 <HLCD4_voidInit+0x308>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e90:	6e a5       	ldd	r22, Y+46	; 0x2e
    1e92:	7f a5       	ldd	r23, Y+47	; 0x2f
    1e94:	88 a9       	ldd	r24, Y+48	; 0x30
    1e96:	99 a9       	ldd	r25, Y+49	; 0x31
    1e98:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e9c:	dc 01       	movw	r26, r24
    1e9e:	cb 01       	movw	r24, r22
    1ea0:	9d a7       	std	Y+45, r25	; 0x2d
    1ea2:	8c a7       	std	Y+44, r24	; 0x2c
    1ea4:	8c a5       	ldd	r24, Y+44	; 0x2c
    1ea6:	9d a5       	ldd	r25, Y+45	; 0x2d
    1ea8:	99 a7       	std	Y+41, r25	; 0x29
    1eaa:	88 a7       	std	Y+40, r24	; 0x28
    1eac:	88 a5       	ldd	r24, Y+40	; 0x28
    1eae:	99 a5       	ldd	r25, Y+41	; 0x29
    1eb0:	01 97       	sbiw	r24, 0x01	; 1
    1eb2:	f1 f7       	brne	.-4      	; 0x1eb0 <HLCD4_voidInit+0x2e0>
    1eb4:	99 a7       	std	Y+41, r25	; 0x29
    1eb6:	88 a7       	std	Y+40, r24	; 0x28
    1eb8:	0f c0       	rjmp	.+30     	; 0x1ed8 <HLCD4_voidInit+0x308>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1eba:	6f a9       	ldd	r22, Y+55	; 0x37
    1ebc:	78 ad       	ldd	r23, Y+56	; 0x38
    1ebe:	89 ad       	ldd	r24, Y+57	; 0x39
    1ec0:	9a ad       	ldd	r25, Y+58	; 0x3a
    1ec2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ec6:	dc 01       	movw	r26, r24
    1ec8:	cb 01       	movw	r24, r22
    1eca:	8e ab       	std	Y+54, r24	; 0x36
    1ecc:	8e a9       	ldd	r24, Y+54	; 0x36
    1ece:	8f a3       	std	Y+39, r24	; 0x27
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1ed0:	8f a1       	ldd	r24, Y+39	; 0x27
    1ed2:	8a 95       	dec	r24
    1ed4:	f1 f7       	brne	.-4      	; 0x1ed2 <HLCD4_voidInit+0x302>
    1ed6:	8f a3       	std	Y+39, r24	; 0x27
    _delay_us(40);
    HLCD4_voidSendCommand(ON_OFF_CONTROL1);
    1ed8:	80 e0       	ldi	r24, 0x00	; 0
    1eda:	0e 94 bb 0a 	call	0x1576	; 0x1576 <HLCD4_voidSendCommand>
    HLCD4_voidSendCommand(ON_OFF_CONTROL2);
    1ede:	80 ec       	ldi	r24, 0xC0	; 192
    1ee0:	0e 94 bb 0a 	call	0x1576	; 0x1576 <HLCD4_voidSendCommand>
    1ee4:	80 e0       	ldi	r24, 0x00	; 0
    1ee6:	90 e0       	ldi	r25, 0x00	; 0
    1ee8:	a0 e2       	ldi	r26, 0x20	; 32
    1eea:	b2 e4       	ldi	r27, 0x42	; 66
    1eec:	8b a3       	std	Y+35, r24	; 0x23
    1eee:	9c a3       	std	Y+36, r25	; 0x24
    1ef0:	ad a3       	std	Y+37, r26	; 0x25
    1ef2:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1ef4:	6b a1       	ldd	r22, Y+35	; 0x23
    1ef6:	7c a1       	ldd	r23, Y+36	; 0x24
    1ef8:	8d a1       	ldd	r24, Y+37	; 0x25
    1efa:	9e a1       	ldd	r25, Y+38	; 0x26
    1efc:	2b ea       	ldi	r18, 0xAB	; 171
    1efe:	3a ea       	ldi	r19, 0xAA	; 170
    1f00:	4a e2       	ldi	r20, 0x2A	; 42
    1f02:	50 e4       	ldi	r21, 0x40	; 64
    1f04:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f08:	dc 01       	movw	r26, r24
    1f0a:	cb 01       	movw	r24, r22
    1f0c:	8f 8f       	std	Y+31, r24	; 0x1f
    1f0e:	98 a3       	std	Y+32, r25	; 0x20
    1f10:	a9 a3       	std	Y+33, r26	; 0x21
    1f12:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    1f14:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1f16:	78 a1       	ldd	r23, Y+32	; 0x20
    1f18:	89 a1       	ldd	r24, Y+33	; 0x21
    1f1a:	9a a1       	ldd	r25, Y+34	; 0x22
    1f1c:	20 e0       	ldi	r18, 0x00	; 0
    1f1e:	30 e0       	ldi	r19, 0x00	; 0
    1f20:	40 e8       	ldi	r20, 0x80	; 128
    1f22:	5f e3       	ldi	r21, 0x3F	; 63
    1f24:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1f28:	88 23       	and	r24, r24
    1f2a:	1c f4       	brge	.+6      	; 0x1f32 <HLCD4_voidInit+0x362>
		__ticks = 1;
    1f2c:	81 e0       	ldi	r24, 0x01	; 1
    1f2e:	8e 8f       	std	Y+30, r24	; 0x1e
    1f30:	91 c0       	rjmp	.+290    	; 0x2054 <HLCD4_voidInit+0x484>
	else if (__tmp > 255)
    1f32:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1f34:	78 a1       	ldd	r23, Y+32	; 0x20
    1f36:	89 a1       	ldd	r24, Y+33	; 0x21
    1f38:	9a a1       	ldd	r25, Y+34	; 0x22
    1f3a:	20 e0       	ldi	r18, 0x00	; 0
    1f3c:	30 e0       	ldi	r19, 0x00	; 0
    1f3e:	4f e7       	ldi	r20, 0x7F	; 127
    1f40:	53 e4       	ldi	r21, 0x43	; 67
    1f42:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1f46:	18 16       	cp	r1, r24
    1f48:	0c f0       	brlt	.+2      	; 0x1f4c <HLCD4_voidInit+0x37c>
    1f4a:	7b c0       	rjmp	.+246    	; 0x2042 <HLCD4_voidInit+0x472>
	{
		_delay_ms(__us / 1000.0);
    1f4c:	6b a1       	ldd	r22, Y+35	; 0x23
    1f4e:	7c a1       	ldd	r23, Y+36	; 0x24
    1f50:	8d a1       	ldd	r24, Y+37	; 0x25
    1f52:	9e a1       	ldd	r25, Y+38	; 0x26
    1f54:	20 e0       	ldi	r18, 0x00	; 0
    1f56:	30 e0       	ldi	r19, 0x00	; 0
    1f58:	4a e7       	ldi	r20, 0x7A	; 122
    1f5a:	54 e4       	ldi	r21, 0x44	; 68
    1f5c:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1f60:	dc 01       	movw	r26, r24
    1f62:	cb 01       	movw	r24, r22
    1f64:	8a 8f       	std	Y+26, r24	; 0x1a
    1f66:	9b 8f       	std	Y+27, r25	; 0x1b
    1f68:	ac 8f       	std	Y+28, r26	; 0x1c
    1f6a:	bd 8f       	std	Y+29, r27	; 0x1d
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f6c:	6a 8d       	ldd	r22, Y+26	; 0x1a
    1f6e:	7b 8d       	ldd	r23, Y+27	; 0x1b
    1f70:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1f72:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1f74:	20 e0       	ldi	r18, 0x00	; 0
    1f76:	30 e0       	ldi	r19, 0x00	; 0
    1f78:	4a ef       	ldi	r20, 0xFA	; 250
    1f7a:	54 e4       	ldi	r21, 0x44	; 68
    1f7c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f80:	dc 01       	movw	r26, r24
    1f82:	cb 01       	movw	r24, r22
    1f84:	8e 8b       	std	Y+22, r24	; 0x16
    1f86:	9f 8b       	std	Y+23, r25	; 0x17
    1f88:	a8 8f       	std	Y+24, r26	; 0x18
    1f8a:	b9 8f       	std	Y+25, r27	; 0x19
	if (__tmp < 1.0)
    1f8c:	6e 89       	ldd	r22, Y+22	; 0x16
    1f8e:	7f 89       	ldd	r23, Y+23	; 0x17
    1f90:	88 8d       	ldd	r24, Y+24	; 0x18
    1f92:	99 8d       	ldd	r25, Y+25	; 0x19
    1f94:	20 e0       	ldi	r18, 0x00	; 0
    1f96:	30 e0       	ldi	r19, 0x00	; 0
    1f98:	40 e8       	ldi	r20, 0x80	; 128
    1f9a:	5f e3       	ldi	r21, 0x3F	; 63
    1f9c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1fa0:	88 23       	and	r24, r24
    1fa2:	2c f4       	brge	.+10     	; 0x1fae <HLCD4_voidInit+0x3de>
		__ticks = 1;
    1fa4:	81 e0       	ldi	r24, 0x01	; 1
    1fa6:	90 e0       	ldi	r25, 0x00	; 0
    1fa8:	9d 8b       	std	Y+21, r25	; 0x15
    1faa:	8c 8b       	std	Y+20, r24	; 0x14
    1fac:	3f c0       	rjmp	.+126    	; 0x202c <HLCD4_voidInit+0x45c>
	else if (__tmp > 65535)
    1fae:	6e 89       	ldd	r22, Y+22	; 0x16
    1fb0:	7f 89       	ldd	r23, Y+23	; 0x17
    1fb2:	88 8d       	ldd	r24, Y+24	; 0x18
    1fb4:	99 8d       	ldd	r25, Y+25	; 0x19
    1fb6:	20 e0       	ldi	r18, 0x00	; 0
    1fb8:	3f ef       	ldi	r19, 0xFF	; 255
    1fba:	4f e7       	ldi	r20, 0x7F	; 127
    1fbc:	57 e4       	ldi	r21, 0x47	; 71
    1fbe:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1fc2:	18 16       	cp	r1, r24
    1fc4:	4c f5       	brge	.+82     	; 0x2018 <HLCD4_voidInit+0x448>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1fc6:	6a 8d       	ldd	r22, Y+26	; 0x1a
    1fc8:	7b 8d       	ldd	r23, Y+27	; 0x1b
    1fca:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1fcc:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1fce:	20 e0       	ldi	r18, 0x00	; 0
    1fd0:	30 e0       	ldi	r19, 0x00	; 0
    1fd2:	40 e2       	ldi	r20, 0x20	; 32
    1fd4:	51 e4       	ldi	r21, 0x41	; 65
    1fd6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fda:	dc 01       	movw	r26, r24
    1fdc:	cb 01       	movw	r24, r22
    1fde:	bc 01       	movw	r22, r24
    1fe0:	cd 01       	movw	r24, r26
    1fe2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fe6:	dc 01       	movw	r26, r24
    1fe8:	cb 01       	movw	r24, r22
    1fea:	9d 8b       	std	Y+21, r25	; 0x15
    1fec:	8c 8b       	std	Y+20, r24	; 0x14
    1fee:	0f c0       	rjmp	.+30     	; 0x200e <HLCD4_voidInit+0x43e>
    1ff0:	88 ec       	ldi	r24, 0xC8	; 200
    1ff2:	90 e0       	ldi	r25, 0x00	; 0
    1ff4:	9b 8b       	std	Y+19, r25	; 0x13
    1ff6:	8a 8b       	std	Y+18, r24	; 0x12
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1ff8:	8a 89       	ldd	r24, Y+18	; 0x12
    1ffa:	9b 89       	ldd	r25, Y+19	; 0x13
    1ffc:	01 97       	sbiw	r24, 0x01	; 1
    1ffe:	f1 f7       	brne	.-4      	; 0x1ffc <HLCD4_voidInit+0x42c>
    2000:	9b 8b       	std	Y+19, r25	; 0x13
    2002:	8a 8b       	std	Y+18, r24	; 0x12
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2004:	8c 89       	ldd	r24, Y+20	; 0x14
    2006:	9d 89       	ldd	r25, Y+21	; 0x15
    2008:	01 97       	sbiw	r24, 0x01	; 1
    200a:	9d 8b       	std	Y+21, r25	; 0x15
    200c:	8c 8b       	std	Y+20, r24	; 0x14
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    200e:	8c 89       	ldd	r24, Y+20	; 0x14
    2010:	9d 89       	ldd	r25, Y+21	; 0x15
    2012:	00 97       	sbiw	r24, 0x00	; 0
    2014:	69 f7       	brne	.-38     	; 0x1ff0 <HLCD4_voidInit+0x420>
    2016:	24 c0       	rjmp	.+72     	; 0x2060 <HLCD4_voidInit+0x490>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2018:	6e 89       	ldd	r22, Y+22	; 0x16
    201a:	7f 89       	ldd	r23, Y+23	; 0x17
    201c:	88 8d       	ldd	r24, Y+24	; 0x18
    201e:	99 8d       	ldd	r25, Y+25	; 0x19
    2020:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2024:	dc 01       	movw	r26, r24
    2026:	cb 01       	movw	r24, r22
    2028:	9d 8b       	std	Y+21, r25	; 0x15
    202a:	8c 8b       	std	Y+20, r24	; 0x14
    202c:	8c 89       	ldd	r24, Y+20	; 0x14
    202e:	9d 89       	ldd	r25, Y+21	; 0x15
    2030:	99 8b       	std	Y+17, r25	; 0x11
    2032:	88 8b       	std	Y+16, r24	; 0x10
    2034:	88 89       	ldd	r24, Y+16	; 0x10
    2036:	99 89       	ldd	r25, Y+17	; 0x11
    2038:	01 97       	sbiw	r24, 0x01	; 1
    203a:	f1 f7       	brne	.-4      	; 0x2038 <HLCD4_voidInit+0x468>
    203c:	99 8b       	std	Y+17, r25	; 0x11
    203e:	88 8b       	std	Y+16, r24	; 0x10
    2040:	0f c0       	rjmp	.+30     	; 0x2060 <HLCD4_voidInit+0x490>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2042:	6f 8d       	ldd	r22, Y+31	; 0x1f
    2044:	78 a1       	ldd	r23, Y+32	; 0x20
    2046:	89 a1       	ldd	r24, Y+33	; 0x21
    2048:	9a a1       	ldd	r25, Y+34	; 0x22
    204a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    204e:	dc 01       	movw	r26, r24
    2050:	cb 01       	movw	r24, r22
    2052:	8e 8f       	std	Y+30, r24	; 0x1e
    2054:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2056:	8f 87       	std	Y+15, r24	; 0x0f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2058:	8f 85       	ldd	r24, Y+15	; 0x0f
    205a:	8a 95       	dec	r24
    205c:	f1 f7       	brne	.-4      	; 0x205a <HLCD4_voidInit+0x48a>
    205e:	8f 87       	std	Y+15, r24	; 0x0f
    _delay_us(40);
    HLCD4_voidSendCommand(DISPLAY_CLEAR1);
    2060:	80 e0       	ldi	r24, 0x00	; 0
    2062:	0e 94 bb 0a 	call	0x1576	; 0x1576 <HLCD4_voidSendCommand>
    HLCD4_voidSendCommand(DISPLAY_CLEAR2);
    2066:	80 e1       	ldi	r24, 0x10	; 16
    2068:	0e 94 bb 0a 	call	0x1576	; 0x1576 <HLCD4_voidSendCommand>
    206c:	80 e0       	ldi	r24, 0x00	; 0
    206e:	90 e0       	ldi	r25, 0x00	; 0
    2070:	a0 e0       	ldi	r26, 0x00	; 0
    2072:	b0 e4       	ldi	r27, 0x40	; 64
    2074:	8b 87       	std	Y+11, r24	; 0x0b
    2076:	9c 87       	std	Y+12, r25	; 0x0c
    2078:	ad 87       	std	Y+13, r26	; 0x0d
    207a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    207c:	6b 85       	ldd	r22, Y+11	; 0x0b
    207e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2080:	8d 85       	ldd	r24, Y+13	; 0x0d
    2082:	9e 85       	ldd	r25, Y+14	; 0x0e
    2084:	20 e0       	ldi	r18, 0x00	; 0
    2086:	30 e0       	ldi	r19, 0x00	; 0
    2088:	4a ef       	ldi	r20, 0xFA	; 250
    208a:	54 e4       	ldi	r21, 0x44	; 68
    208c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2090:	dc 01       	movw	r26, r24
    2092:	cb 01       	movw	r24, r22
    2094:	8f 83       	std	Y+7, r24	; 0x07
    2096:	98 87       	std	Y+8, r25	; 0x08
    2098:	a9 87       	std	Y+9, r26	; 0x09
    209a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    209c:	6f 81       	ldd	r22, Y+7	; 0x07
    209e:	78 85       	ldd	r23, Y+8	; 0x08
    20a0:	89 85       	ldd	r24, Y+9	; 0x09
    20a2:	9a 85       	ldd	r25, Y+10	; 0x0a
    20a4:	20 e0       	ldi	r18, 0x00	; 0
    20a6:	30 e0       	ldi	r19, 0x00	; 0
    20a8:	40 e8       	ldi	r20, 0x80	; 128
    20aa:	5f e3       	ldi	r21, 0x3F	; 63
    20ac:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    20b0:	88 23       	and	r24, r24
    20b2:	2c f4       	brge	.+10     	; 0x20be <HLCD4_voidInit+0x4ee>
		__ticks = 1;
    20b4:	81 e0       	ldi	r24, 0x01	; 1
    20b6:	90 e0       	ldi	r25, 0x00	; 0
    20b8:	9e 83       	std	Y+6, r25	; 0x06
    20ba:	8d 83       	std	Y+5, r24	; 0x05
    20bc:	3f c0       	rjmp	.+126    	; 0x213c <HLCD4_voidInit+0x56c>
	else if (__tmp > 65535)
    20be:	6f 81       	ldd	r22, Y+7	; 0x07
    20c0:	78 85       	ldd	r23, Y+8	; 0x08
    20c2:	89 85       	ldd	r24, Y+9	; 0x09
    20c4:	9a 85       	ldd	r25, Y+10	; 0x0a
    20c6:	20 e0       	ldi	r18, 0x00	; 0
    20c8:	3f ef       	ldi	r19, 0xFF	; 255
    20ca:	4f e7       	ldi	r20, 0x7F	; 127
    20cc:	57 e4       	ldi	r21, 0x47	; 71
    20ce:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    20d2:	18 16       	cp	r1, r24
    20d4:	4c f5       	brge	.+82     	; 0x2128 <HLCD4_voidInit+0x558>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    20d6:	6b 85       	ldd	r22, Y+11	; 0x0b
    20d8:	7c 85       	ldd	r23, Y+12	; 0x0c
    20da:	8d 85       	ldd	r24, Y+13	; 0x0d
    20dc:	9e 85       	ldd	r25, Y+14	; 0x0e
    20de:	20 e0       	ldi	r18, 0x00	; 0
    20e0:	30 e0       	ldi	r19, 0x00	; 0
    20e2:	40 e2       	ldi	r20, 0x20	; 32
    20e4:	51 e4       	ldi	r21, 0x41	; 65
    20e6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20ea:	dc 01       	movw	r26, r24
    20ec:	cb 01       	movw	r24, r22
    20ee:	bc 01       	movw	r22, r24
    20f0:	cd 01       	movw	r24, r26
    20f2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20f6:	dc 01       	movw	r26, r24
    20f8:	cb 01       	movw	r24, r22
    20fa:	9e 83       	std	Y+6, r25	; 0x06
    20fc:	8d 83       	std	Y+5, r24	; 0x05
    20fe:	0f c0       	rjmp	.+30     	; 0x211e <HLCD4_voidInit+0x54e>
    2100:	88 ec       	ldi	r24, 0xC8	; 200
    2102:	90 e0       	ldi	r25, 0x00	; 0
    2104:	9c 83       	std	Y+4, r25	; 0x04
    2106:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2108:	8b 81       	ldd	r24, Y+3	; 0x03
    210a:	9c 81       	ldd	r25, Y+4	; 0x04
    210c:	01 97       	sbiw	r24, 0x01	; 1
    210e:	f1 f7       	brne	.-4      	; 0x210c <HLCD4_voidInit+0x53c>
    2110:	9c 83       	std	Y+4, r25	; 0x04
    2112:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2114:	8d 81       	ldd	r24, Y+5	; 0x05
    2116:	9e 81       	ldd	r25, Y+6	; 0x06
    2118:	01 97       	sbiw	r24, 0x01	; 1
    211a:	9e 83       	std	Y+6, r25	; 0x06
    211c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    211e:	8d 81       	ldd	r24, Y+5	; 0x05
    2120:	9e 81       	ldd	r25, Y+6	; 0x06
    2122:	00 97       	sbiw	r24, 0x00	; 0
    2124:	69 f7       	brne	.-38     	; 0x2100 <HLCD4_voidInit+0x530>
    2126:	14 c0       	rjmp	.+40     	; 0x2150 <HLCD4_voidInit+0x580>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2128:	6f 81       	ldd	r22, Y+7	; 0x07
    212a:	78 85       	ldd	r23, Y+8	; 0x08
    212c:	89 85       	ldd	r24, Y+9	; 0x09
    212e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2130:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2134:	dc 01       	movw	r26, r24
    2136:	cb 01       	movw	r24, r22
    2138:	9e 83       	std	Y+6, r25	; 0x06
    213a:	8d 83       	std	Y+5, r24	; 0x05
    213c:	8d 81       	ldd	r24, Y+5	; 0x05
    213e:	9e 81       	ldd	r25, Y+6	; 0x06
    2140:	9a 83       	std	Y+2, r25	; 0x02
    2142:	89 83       	std	Y+1, r24	; 0x01
    2144:	89 81       	ldd	r24, Y+1	; 0x01
    2146:	9a 81       	ldd	r25, Y+2	; 0x02
    2148:	01 97       	sbiw	r24, 0x01	; 1
    214a:	f1 f7       	brne	.-4      	; 0x2148 <HLCD4_voidInit+0x578>
    214c:	9a 83       	std	Y+2, r25	; 0x02
    214e:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(2);
    HLCD4_voidSendCommand(ENTRY_MODE_SET1);
    2150:	80 e0       	ldi	r24, 0x00	; 0
    2152:	0e 94 bb 0a 	call	0x1576	; 0x1576 <HLCD4_voidSendCommand>
    HLCD4_voidSendCommand(ENTRY_MODE_SET2);
    2156:	80 e6       	ldi	r24, 0x60	; 96
    2158:	0e 94 bb 0a 	call	0x1576	; 0x1576 <HLCD4_voidSendCommand>
    global_u8Init=1;
    215c:	81 e0       	ldi	r24, 0x01	; 1
    215e:	80 93 a2 00 	sts	0x00A2, r24
} 
    2162:	c4 5b       	subi	r28, 0xB4	; 180
    2164:	df 4f       	sbci	r29, 0xFF	; 255
    2166:	0f b6       	in	r0, 0x3f	; 63
    2168:	f8 94       	cli
    216a:	de bf       	out	0x3e, r29	; 62
    216c:	0f be       	out	0x3f, r0	; 63
    216e:	cd bf       	out	0x3d, r28	; 61
    2170:	cf 91       	pop	r28
    2172:	df 91       	pop	r29
    2174:	1f 91       	pop	r17
    2176:	0f 91       	pop	r16
    2178:	08 95       	ret

0000217a <HLCD4_voidClearDisplay>:

void HLCD4_voidClearDisplay(void)
{
    217a:	df 93       	push	r29
    217c:	cf 93       	push	r28
    217e:	cd b7       	in	r28, 0x3d	; 61
    2180:	de b7       	in	r29, 0x3e	; 62
    2182:	2e 97       	sbiw	r28, 0x0e	; 14
    2184:	0f b6       	in	r0, 0x3f	; 63
    2186:	f8 94       	cli
    2188:	de bf       	out	0x3e, r29	; 62
    218a:	0f be       	out	0x3f, r0	; 63
    218c:	cd bf       	out	0x3d, r28	; 61
    HLCD4_voidSendCommand(DISPLAY_CLEAR1);
    218e:	80 e0       	ldi	r24, 0x00	; 0
    2190:	0e 94 bb 0a 	call	0x1576	; 0x1576 <HLCD4_voidSendCommand>
    HLCD4_voidSendCommand(DISPLAY_CLEAR2);
    2194:	80 e1       	ldi	r24, 0x10	; 16
    2196:	0e 94 bb 0a 	call	0x1576	; 0x1576 <HLCD4_voidSendCommand>
    219a:	80 e0       	ldi	r24, 0x00	; 0
    219c:	90 e0       	ldi	r25, 0x00	; 0
    219e:	a0 e0       	ldi	r26, 0x00	; 0
    21a0:	b0 e4       	ldi	r27, 0x40	; 64
    21a2:	8b 87       	std	Y+11, r24	; 0x0b
    21a4:	9c 87       	std	Y+12, r25	; 0x0c
    21a6:	ad 87       	std	Y+13, r26	; 0x0d
    21a8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    21aa:	6b 85       	ldd	r22, Y+11	; 0x0b
    21ac:	7c 85       	ldd	r23, Y+12	; 0x0c
    21ae:	8d 85       	ldd	r24, Y+13	; 0x0d
    21b0:	9e 85       	ldd	r25, Y+14	; 0x0e
    21b2:	20 e0       	ldi	r18, 0x00	; 0
    21b4:	30 e0       	ldi	r19, 0x00	; 0
    21b6:	4a ef       	ldi	r20, 0xFA	; 250
    21b8:	54 e4       	ldi	r21, 0x44	; 68
    21ba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21be:	dc 01       	movw	r26, r24
    21c0:	cb 01       	movw	r24, r22
    21c2:	8f 83       	std	Y+7, r24	; 0x07
    21c4:	98 87       	std	Y+8, r25	; 0x08
    21c6:	a9 87       	std	Y+9, r26	; 0x09
    21c8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    21ca:	6f 81       	ldd	r22, Y+7	; 0x07
    21cc:	78 85       	ldd	r23, Y+8	; 0x08
    21ce:	89 85       	ldd	r24, Y+9	; 0x09
    21d0:	9a 85       	ldd	r25, Y+10	; 0x0a
    21d2:	20 e0       	ldi	r18, 0x00	; 0
    21d4:	30 e0       	ldi	r19, 0x00	; 0
    21d6:	40 e8       	ldi	r20, 0x80	; 128
    21d8:	5f e3       	ldi	r21, 0x3F	; 63
    21da:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    21de:	88 23       	and	r24, r24
    21e0:	2c f4       	brge	.+10     	; 0x21ec <HLCD4_voidClearDisplay+0x72>
		__ticks = 1;
    21e2:	81 e0       	ldi	r24, 0x01	; 1
    21e4:	90 e0       	ldi	r25, 0x00	; 0
    21e6:	9e 83       	std	Y+6, r25	; 0x06
    21e8:	8d 83       	std	Y+5, r24	; 0x05
    21ea:	3f c0       	rjmp	.+126    	; 0x226a <HLCD4_voidClearDisplay+0xf0>
	else if (__tmp > 65535)
    21ec:	6f 81       	ldd	r22, Y+7	; 0x07
    21ee:	78 85       	ldd	r23, Y+8	; 0x08
    21f0:	89 85       	ldd	r24, Y+9	; 0x09
    21f2:	9a 85       	ldd	r25, Y+10	; 0x0a
    21f4:	20 e0       	ldi	r18, 0x00	; 0
    21f6:	3f ef       	ldi	r19, 0xFF	; 255
    21f8:	4f e7       	ldi	r20, 0x7F	; 127
    21fa:	57 e4       	ldi	r21, 0x47	; 71
    21fc:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2200:	18 16       	cp	r1, r24
    2202:	4c f5       	brge	.+82     	; 0x2256 <HLCD4_voidClearDisplay+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2204:	6b 85       	ldd	r22, Y+11	; 0x0b
    2206:	7c 85       	ldd	r23, Y+12	; 0x0c
    2208:	8d 85       	ldd	r24, Y+13	; 0x0d
    220a:	9e 85       	ldd	r25, Y+14	; 0x0e
    220c:	20 e0       	ldi	r18, 0x00	; 0
    220e:	30 e0       	ldi	r19, 0x00	; 0
    2210:	40 e2       	ldi	r20, 0x20	; 32
    2212:	51 e4       	ldi	r21, 0x41	; 65
    2214:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2218:	dc 01       	movw	r26, r24
    221a:	cb 01       	movw	r24, r22
    221c:	bc 01       	movw	r22, r24
    221e:	cd 01       	movw	r24, r26
    2220:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2224:	dc 01       	movw	r26, r24
    2226:	cb 01       	movw	r24, r22
    2228:	9e 83       	std	Y+6, r25	; 0x06
    222a:	8d 83       	std	Y+5, r24	; 0x05
    222c:	0f c0       	rjmp	.+30     	; 0x224c <HLCD4_voidClearDisplay+0xd2>
    222e:	88 ec       	ldi	r24, 0xC8	; 200
    2230:	90 e0       	ldi	r25, 0x00	; 0
    2232:	9c 83       	std	Y+4, r25	; 0x04
    2234:	8b 83       	std	Y+3, r24	; 0x03
    2236:	8b 81       	ldd	r24, Y+3	; 0x03
    2238:	9c 81       	ldd	r25, Y+4	; 0x04
    223a:	01 97       	sbiw	r24, 0x01	; 1
    223c:	f1 f7       	brne	.-4      	; 0x223a <HLCD4_voidClearDisplay+0xc0>
    223e:	9c 83       	std	Y+4, r25	; 0x04
    2240:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2242:	8d 81       	ldd	r24, Y+5	; 0x05
    2244:	9e 81       	ldd	r25, Y+6	; 0x06
    2246:	01 97       	sbiw	r24, 0x01	; 1
    2248:	9e 83       	std	Y+6, r25	; 0x06
    224a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    224c:	8d 81       	ldd	r24, Y+5	; 0x05
    224e:	9e 81       	ldd	r25, Y+6	; 0x06
    2250:	00 97       	sbiw	r24, 0x00	; 0
    2252:	69 f7       	brne	.-38     	; 0x222e <HLCD4_voidClearDisplay+0xb4>
    2254:	14 c0       	rjmp	.+40     	; 0x227e <HLCD4_voidClearDisplay+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2256:	6f 81       	ldd	r22, Y+7	; 0x07
    2258:	78 85       	ldd	r23, Y+8	; 0x08
    225a:	89 85       	ldd	r24, Y+9	; 0x09
    225c:	9a 85       	ldd	r25, Y+10	; 0x0a
    225e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2262:	dc 01       	movw	r26, r24
    2264:	cb 01       	movw	r24, r22
    2266:	9e 83       	std	Y+6, r25	; 0x06
    2268:	8d 83       	std	Y+5, r24	; 0x05
    226a:	8d 81       	ldd	r24, Y+5	; 0x05
    226c:	9e 81       	ldd	r25, Y+6	; 0x06
    226e:	9a 83       	std	Y+2, r25	; 0x02
    2270:	89 83       	std	Y+1, r24	; 0x01
    2272:	89 81       	ldd	r24, Y+1	; 0x01
    2274:	9a 81       	ldd	r25, Y+2	; 0x02
    2276:	01 97       	sbiw	r24, 0x01	; 1
    2278:	f1 f7       	brne	.-4      	; 0x2276 <HLCD4_voidClearDisplay+0xfc>
    227a:	9a 83       	std	Y+2, r25	; 0x02
    227c:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(2);
}
    227e:	2e 96       	adiw	r28, 0x0e	; 14
    2280:	0f b6       	in	r0, 0x3f	; 63
    2282:	f8 94       	cli
    2284:	de bf       	out	0x3e, r29	; 62
    2286:	0f be       	out	0x3f, r0	; 63
    2288:	cd bf       	out	0x3d, r28	; 61
    228a:	cf 91       	pop	r28
    228c:	df 91       	pop	r29
    228e:	08 95       	ret

00002290 <HLCD4_voidSendString>:

void HLCD4_voidSendString(u8 * A_Pu8String)
{
    2290:	df 93       	push	r29
    2292:	cf 93       	push	r28
    2294:	00 d0       	rcall	.+0      	; 0x2296 <HLCD4_voidSendString+0x6>
    2296:	0f 92       	push	r0
    2298:	cd b7       	in	r28, 0x3d	; 61
    229a:	de b7       	in	r29, 0x3e	; 62
    229c:	9b 83       	std	Y+3, r25	; 0x03
    229e:	8a 83       	std	Y+2, r24	; 0x02
    u8 local_u8Couter=0;
    22a0:	19 82       	std	Y+1, r1	; 0x01
    22a2:	0e c0       	rjmp	.+28     	; 0x22c0 <HLCD4_voidSendString+0x30>
    while (A_Pu8String[local_u8Couter]!='\0')
    {
        HLCD4_voidSendData(A_Pu8String[local_u8Couter]);
    22a4:	89 81       	ldd	r24, Y+1	; 0x01
    22a6:	28 2f       	mov	r18, r24
    22a8:	30 e0       	ldi	r19, 0x00	; 0
    22aa:	8a 81       	ldd	r24, Y+2	; 0x02
    22ac:	9b 81       	ldd	r25, Y+3	; 0x03
    22ae:	fc 01       	movw	r30, r24
    22b0:	e2 0f       	add	r30, r18
    22b2:	f3 1f       	adc	r31, r19
    22b4:	80 81       	ld	r24, Z
    22b6:	0e 94 54 0c 	call	0x18a8	; 0x18a8 <HLCD4_voidSendData>
        local_u8Couter++;
    22ba:	89 81       	ldd	r24, Y+1	; 0x01
    22bc:	8f 5f       	subi	r24, 0xFF	; 255
    22be:	89 83       	std	Y+1, r24	; 0x01
}

void HLCD4_voidSendString(u8 * A_Pu8String)
{
    u8 local_u8Couter=0;
    while (A_Pu8String[local_u8Couter]!='\0')
    22c0:	89 81       	ldd	r24, Y+1	; 0x01
    22c2:	28 2f       	mov	r18, r24
    22c4:	30 e0       	ldi	r19, 0x00	; 0
    22c6:	8a 81       	ldd	r24, Y+2	; 0x02
    22c8:	9b 81       	ldd	r25, Y+3	; 0x03
    22ca:	fc 01       	movw	r30, r24
    22cc:	e2 0f       	add	r30, r18
    22ce:	f3 1f       	adc	r31, r19
    22d0:	80 81       	ld	r24, Z
    22d2:	88 23       	and	r24, r24
    22d4:	39 f7       	brne	.-50     	; 0x22a4 <HLCD4_voidSendString+0x14>
    {
        HLCD4_voidSendData(A_Pu8String[local_u8Couter]);
        local_u8Couter++;
    }
    
}
    22d6:	0f 90       	pop	r0
    22d8:	0f 90       	pop	r0
    22da:	0f 90       	pop	r0
    22dc:	cf 91       	pop	r28
    22de:	df 91       	pop	r29
    22e0:	08 95       	ret

000022e2 <HLCD4_voidGoToPos>:

void HLCD4_voidGoToPos(u8 A_u8RowNum,u8 A_u8ColNum)
{
    22e2:	df 93       	push	r29
    22e4:	cf 93       	push	r28
    22e6:	cd b7       	in	r28, 0x3d	; 61
    22e8:	de b7       	in	r29, 0x3e	; 62
    22ea:	63 97       	sbiw	r28, 0x13	; 19
    22ec:	0f b6       	in	r0, 0x3f	; 63
    22ee:	f8 94       	cli
    22f0:	de bf       	out	0x3e, r29	; 62
    22f2:	0f be       	out	0x3f, r0	; 63
    22f4:	cd bf       	out	0x3d, r28	; 61
    22f6:	88 8b       	std	Y+16, r24	; 0x10
    22f8:	69 8b       	std	Y+17, r22	; 0x11
    // _delay_ms(1);

    //*******************************//
    //Second method
	u8 local_u8Address;
    switch(A_u8RowNum)
    22fa:	88 89       	ldd	r24, Y+16	; 0x10
    22fc:	28 2f       	mov	r18, r24
    22fe:	30 e0       	ldi	r19, 0x00	; 0
    2300:	3b 8b       	std	Y+19, r19	; 0x13
    2302:	2a 8b       	std	Y+18, r18	; 0x12
    2304:	8a 89       	ldd	r24, Y+18	; 0x12
    2306:	9b 89       	ldd	r25, Y+19	; 0x13
    2308:	81 30       	cpi	r24, 0x01	; 1
    230a:	91 05       	cpc	r25, r1
    230c:	31 f0       	breq	.+12     	; 0x231a <HLCD4_voidGoToPos+0x38>
    230e:	2a 89       	ldd	r18, Y+18	; 0x12
    2310:	3b 89       	ldd	r19, Y+19	; 0x13
    2312:	22 30       	cpi	r18, 0x02	; 2
    2314:	31 05       	cpc	r19, r1
    2316:	59 f0       	breq	.+22     	; 0x232e <HLCD4_voidGoToPos+0x4c>
    2318:	13 c0       	rjmp	.+38     	; 0x2340 <HLCD4_voidGoToPos+0x5e>
    {
        case LCD_ROW_ONE:
        local_u8Address=FIRST_ROW_ADDRESS + A_u8ColNum -1;
    231a:	89 89       	ldd	r24, Y+17	; 0x11
    231c:	81 50       	subi	r24, 0x01	; 1
    231e:	8f 87       	std	Y+15, r24	; 0x0f
        SET_BIT(local_u8Address,PIN7);
    2320:	8f 85       	ldd	r24, Y+15	; 0x0f
    2322:	80 68       	ori	r24, 0x80	; 128
    2324:	8f 87       	std	Y+15, r24	; 0x0f
        HLCD4_voidSendCommand(local_u8Address);
    2326:	8f 85       	ldd	r24, Y+15	; 0x0f
    2328:	0e 94 bb 0a 	call	0x1576	; 0x1576 <HLCD4_voidSendCommand>
    232c:	09 c0       	rjmp	.+18     	; 0x2340 <HLCD4_voidGoToPos+0x5e>
        break;

        case LCD_ROW_TWO:
        local_u8Address=SECOND_ROW_ADDRESS + A_u8ColNum;
    232e:	89 89       	ldd	r24, Y+17	; 0x11
    2330:	81 5c       	subi	r24, 0xC1	; 193
    2332:	8f 87       	std	Y+15, r24	; 0x0f
        SET_BIT(local_u8Address,PIN7);
    2334:	8f 85       	ldd	r24, Y+15	; 0x0f
    2336:	80 68       	ori	r24, 0x80	; 128
    2338:	8f 87       	std	Y+15, r24	; 0x0f
        HLCD4_voidSendCommand(local_u8Address);
    233a:	8f 85       	ldd	r24, Y+15	; 0x0f
    233c:	0e 94 bb 0a 	call	0x1576	; 0x1576 <HLCD4_voidSendCommand>
    2340:	80 e0       	ldi	r24, 0x00	; 0
    2342:	90 e0       	ldi	r25, 0x00	; 0
    2344:	a0 e8       	ldi	r26, 0x80	; 128
    2346:	bf e3       	ldi	r27, 0x3F	; 63
    2348:	8b 87       	std	Y+11, r24	; 0x0b
    234a:	9c 87       	std	Y+12, r25	; 0x0c
    234c:	ad 87       	std	Y+13, r26	; 0x0d
    234e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2350:	6b 85       	ldd	r22, Y+11	; 0x0b
    2352:	7c 85       	ldd	r23, Y+12	; 0x0c
    2354:	8d 85       	ldd	r24, Y+13	; 0x0d
    2356:	9e 85       	ldd	r25, Y+14	; 0x0e
    2358:	20 e0       	ldi	r18, 0x00	; 0
    235a:	30 e0       	ldi	r19, 0x00	; 0
    235c:	4a ef       	ldi	r20, 0xFA	; 250
    235e:	54 e4       	ldi	r21, 0x44	; 68
    2360:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2364:	dc 01       	movw	r26, r24
    2366:	cb 01       	movw	r24, r22
    2368:	8f 83       	std	Y+7, r24	; 0x07
    236a:	98 87       	std	Y+8, r25	; 0x08
    236c:	a9 87       	std	Y+9, r26	; 0x09
    236e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2370:	6f 81       	ldd	r22, Y+7	; 0x07
    2372:	78 85       	ldd	r23, Y+8	; 0x08
    2374:	89 85       	ldd	r24, Y+9	; 0x09
    2376:	9a 85       	ldd	r25, Y+10	; 0x0a
    2378:	20 e0       	ldi	r18, 0x00	; 0
    237a:	30 e0       	ldi	r19, 0x00	; 0
    237c:	40 e8       	ldi	r20, 0x80	; 128
    237e:	5f e3       	ldi	r21, 0x3F	; 63
    2380:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2384:	88 23       	and	r24, r24
    2386:	2c f4       	brge	.+10     	; 0x2392 <HLCD4_voidGoToPos+0xb0>
		__ticks = 1;
    2388:	81 e0       	ldi	r24, 0x01	; 1
    238a:	90 e0       	ldi	r25, 0x00	; 0
    238c:	9e 83       	std	Y+6, r25	; 0x06
    238e:	8d 83       	std	Y+5, r24	; 0x05
    2390:	3f c0       	rjmp	.+126    	; 0x2410 <HLCD4_voidGoToPos+0x12e>
	else if (__tmp > 65535)
    2392:	6f 81       	ldd	r22, Y+7	; 0x07
    2394:	78 85       	ldd	r23, Y+8	; 0x08
    2396:	89 85       	ldd	r24, Y+9	; 0x09
    2398:	9a 85       	ldd	r25, Y+10	; 0x0a
    239a:	20 e0       	ldi	r18, 0x00	; 0
    239c:	3f ef       	ldi	r19, 0xFF	; 255
    239e:	4f e7       	ldi	r20, 0x7F	; 127
    23a0:	57 e4       	ldi	r21, 0x47	; 71
    23a2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    23a6:	18 16       	cp	r1, r24
    23a8:	4c f5       	brge	.+82     	; 0x23fc <HLCD4_voidGoToPos+0x11a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    23aa:	6b 85       	ldd	r22, Y+11	; 0x0b
    23ac:	7c 85       	ldd	r23, Y+12	; 0x0c
    23ae:	8d 85       	ldd	r24, Y+13	; 0x0d
    23b0:	9e 85       	ldd	r25, Y+14	; 0x0e
    23b2:	20 e0       	ldi	r18, 0x00	; 0
    23b4:	30 e0       	ldi	r19, 0x00	; 0
    23b6:	40 e2       	ldi	r20, 0x20	; 32
    23b8:	51 e4       	ldi	r21, 0x41	; 65
    23ba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23be:	dc 01       	movw	r26, r24
    23c0:	cb 01       	movw	r24, r22
    23c2:	bc 01       	movw	r22, r24
    23c4:	cd 01       	movw	r24, r26
    23c6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23ca:	dc 01       	movw	r26, r24
    23cc:	cb 01       	movw	r24, r22
    23ce:	9e 83       	std	Y+6, r25	; 0x06
    23d0:	8d 83       	std	Y+5, r24	; 0x05
    23d2:	0f c0       	rjmp	.+30     	; 0x23f2 <HLCD4_voidGoToPos+0x110>
    23d4:	88 ec       	ldi	r24, 0xC8	; 200
    23d6:	90 e0       	ldi	r25, 0x00	; 0
    23d8:	9c 83       	std	Y+4, r25	; 0x04
    23da:	8b 83       	std	Y+3, r24	; 0x03
    23dc:	8b 81       	ldd	r24, Y+3	; 0x03
    23de:	9c 81       	ldd	r25, Y+4	; 0x04
    23e0:	01 97       	sbiw	r24, 0x01	; 1
    23e2:	f1 f7       	brne	.-4      	; 0x23e0 <HLCD4_voidGoToPos+0xfe>
    23e4:	9c 83       	std	Y+4, r25	; 0x04
    23e6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    23e8:	8d 81       	ldd	r24, Y+5	; 0x05
    23ea:	9e 81       	ldd	r25, Y+6	; 0x06
    23ec:	01 97       	sbiw	r24, 0x01	; 1
    23ee:	9e 83       	std	Y+6, r25	; 0x06
    23f0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    23f2:	8d 81       	ldd	r24, Y+5	; 0x05
    23f4:	9e 81       	ldd	r25, Y+6	; 0x06
    23f6:	00 97       	sbiw	r24, 0x00	; 0
    23f8:	69 f7       	brne	.-38     	; 0x23d4 <HLCD4_voidGoToPos+0xf2>
    23fa:	14 c0       	rjmp	.+40     	; 0x2424 <HLCD4_voidGoToPos+0x142>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    23fc:	6f 81       	ldd	r22, Y+7	; 0x07
    23fe:	78 85       	ldd	r23, Y+8	; 0x08
    2400:	89 85       	ldd	r24, Y+9	; 0x09
    2402:	9a 85       	ldd	r25, Y+10	; 0x0a
    2404:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2408:	dc 01       	movw	r26, r24
    240a:	cb 01       	movw	r24, r22
    240c:	9e 83       	std	Y+6, r25	; 0x06
    240e:	8d 83       	std	Y+5, r24	; 0x05
    2410:	8d 81       	ldd	r24, Y+5	; 0x05
    2412:	9e 81       	ldd	r25, Y+6	; 0x06
    2414:	9a 83       	std	Y+2, r25	; 0x02
    2416:	89 83       	std	Y+1, r24	; 0x01
    2418:	89 81       	ldd	r24, Y+1	; 0x01
    241a:	9a 81       	ldd	r25, Y+2	; 0x02
    241c:	01 97       	sbiw	r24, 0x01	; 1
    241e:	f1 f7       	brne	.-4      	; 0x241c <HLCD4_voidGoToPos+0x13a>
    2420:	9a 83       	std	Y+2, r25	; 0x02
    2422:	89 83       	std	Y+1, r24	; 0x01
        break;

    }
    _delay_ms(1);

}
    2424:	63 96       	adiw	r28, 0x13	; 19
    2426:	0f b6       	in	r0, 0x3f	; 63
    2428:	f8 94       	cli
    242a:	de bf       	out	0x3e, r29	; 62
    242c:	0f be       	out	0x3f, r0	; 63
    242e:	cd bf       	out	0x3d, r28	; 61
    2430:	cf 91       	pop	r28
    2432:	df 91       	pop	r29
    2434:	08 95       	ret

00002436 <HLCD4_voidDisplayNumber>:

void HLCD4_voidDisplayNumber(u32 A_u32Number)
{
    2436:	df 93       	push	r29
    2438:	cf 93       	push	r28
    243a:	00 d0       	rcall	.+0      	; 0x243c <HLCD4_voidDisplayNumber+0x6>
    243c:	00 d0       	rcall	.+0      	; 0x243e <HLCD4_voidDisplayNumber+0x8>
    243e:	cd b7       	in	r28, 0x3d	; 61
    2440:	de b7       	in	r29, 0x3e	; 62
    2442:	9c 83       	std	Y+4, r25	; 0x04
    2444:	8b 83       	std	Y+3, r24	; 0x03
    // u8 local_u8NumToStr[100];
    // itoa(A_u32Number,local_u8NumToStr,10);
    // HLCD4_voidSendString(local_u8NumToStr);
    //****************************************************//
    //third method: it will deal with zero unlike the first method so it's not problem here
    u32 local_u32Number=1;
    2446:	81 e0       	ldi	r24, 0x01	; 1
    2448:	90 e0       	ldi	r25, 0x00	; 0
    244a:	9a 83       	std	Y+2, r25	; 0x02
    244c:	89 83       	std	Y+1, r24	; 0x01
    if(A_u32Number==0)
    244e:	8b 81       	ldd	r24, Y+3	; 0x03
    2450:	9c 81       	ldd	r25, Y+4	; 0x04
    2452:	00 97       	sbiw	r24, 0x00	; 0
    2454:	31 f5       	brne	.+76     	; 0x24a2 <HLCD4_voidDisplayNumber+0x6c>
    {
        HLCD4_voidSendData('0');
    2456:	80 e3       	ldi	r24, 0x30	; 48
    2458:	0e 94 54 0c 	call	0x18a8	; 0x18a8 <HLCD4_voidSendData>
    245c:	22 c0       	rjmp	.+68     	; 0x24a2 <HLCD4_voidDisplayNumber+0x6c>
    }   
    while(A_u32Number !=0)
    {
            local_u32Number=((local_u32Number * 10)+(A_u32Number%10));
    245e:	89 81       	ldd	r24, Y+1	; 0x01
    2460:	9a 81       	ldd	r25, Y+2	; 0x02
    2462:	9c 01       	movw	r18, r24
    2464:	22 0f       	add	r18, r18
    2466:	33 1f       	adc	r19, r19
    2468:	c9 01       	movw	r24, r18
    246a:	88 0f       	add	r24, r24
    246c:	99 1f       	adc	r25, r25
    246e:	88 0f       	add	r24, r24
    2470:	99 1f       	adc	r25, r25
    2472:	f9 01       	movw	r30, r18
    2474:	e8 0f       	add	r30, r24
    2476:	f9 1f       	adc	r31, r25
    2478:	8b 81       	ldd	r24, Y+3	; 0x03
    247a:	9c 81       	ldd	r25, Y+4	; 0x04
    247c:	2a e0       	ldi	r18, 0x0A	; 10
    247e:	30 e0       	ldi	r19, 0x00	; 0
    2480:	b9 01       	movw	r22, r18
    2482:	0e 94 a8 1c 	call	0x3950	; 0x3950 <__udivmodhi4>
    2486:	8e 0f       	add	r24, r30
    2488:	9f 1f       	adc	r25, r31
    248a:	9a 83       	std	Y+2, r25	; 0x02
    248c:	89 83       	std	Y+1, r24	; 0x01
            A_u32Number=A_u32Number/10;
    248e:	8b 81       	ldd	r24, Y+3	; 0x03
    2490:	9c 81       	ldd	r25, Y+4	; 0x04
    2492:	2a e0       	ldi	r18, 0x0A	; 10
    2494:	30 e0       	ldi	r19, 0x00	; 0
    2496:	b9 01       	movw	r22, r18
    2498:	0e 94 a8 1c 	call	0x3950	; 0x3950 <__udivmodhi4>
    249c:	cb 01       	movw	r24, r22
    249e:	9c 83       	std	Y+4, r25	; 0x04
    24a0:	8b 83       	std	Y+3, r24	; 0x03
    u32 local_u32Number=1;
    if(A_u32Number==0)
    {
        HLCD4_voidSendData('0');
    }   
    while(A_u32Number !=0)
    24a2:	8b 81       	ldd	r24, Y+3	; 0x03
    24a4:	9c 81       	ldd	r25, Y+4	; 0x04
    24a6:	00 97       	sbiw	r24, 0x00	; 0
    24a8:	d1 f6       	brne	.-76     	; 0x245e <HLCD4_voidDisplayNumber+0x28>
    24aa:	14 c0       	rjmp	.+40     	; 0x24d4 <HLCD4_voidDisplayNumber+0x9e>
            A_u32Number=A_u32Number/10;

    }
    while (local_u32Number!=1)
    {
        HLCD4_voidSendData((local_u32Number%10)+48);
    24ac:	89 81       	ldd	r24, Y+1	; 0x01
    24ae:	9a 81       	ldd	r25, Y+2	; 0x02
    24b0:	2a e0       	ldi	r18, 0x0A	; 10
    24b2:	30 e0       	ldi	r19, 0x00	; 0
    24b4:	b9 01       	movw	r22, r18
    24b6:	0e 94 a8 1c 	call	0x3950	; 0x3950 <__udivmodhi4>
    24ba:	80 5d       	subi	r24, 0xD0	; 208
    24bc:	0e 94 54 0c 	call	0x18a8	; 0x18a8 <HLCD4_voidSendData>
        local_u32Number=local_u32Number/10;
    24c0:	89 81       	ldd	r24, Y+1	; 0x01
    24c2:	9a 81       	ldd	r25, Y+2	; 0x02
    24c4:	2a e0       	ldi	r18, 0x0A	; 10
    24c6:	30 e0       	ldi	r19, 0x00	; 0
    24c8:	b9 01       	movw	r22, r18
    24ca:	0e 94 a8 1c 	call	0x3950	; 0x3950 <__udivmodhi4>
    24ce:	cb 01       	movw	r24, r22
    24d0:	9a 83       	std	Y+2, r25	; 0x02
    24d2:	89 83       	std	Y+1, r24	; 0x01
    {
            local_u32Number=((local_u32Number * 10)+(A_u32Number%10));
            A_u32Number=A_u32Number/10;

    }
    while (local_u32Number!=1)
    24d4:	89 81       	ldd	r24, Y+1	; 0x01
    24d6:	9a 81       	ldd	r25, Y+2	; 0x02
    24d8:	81 30       	cpi	r24, 0x01	; 1
    24da:	91 05       	cpc	r25, r1
    24dc:	39 f7       	brne	.-50     	; 0x24ac <HLCD4_voidDisplayNumber+0x76>
    {
        HLCD4_voidSendData((local_u32Number%10)+48);
        local_u32Number=local_u32Number/10;
    }
}
    24de:	0f 90       	pop	r0
    24e0:	0f 90       	pop	r0
    24e2:	0f 90       	pop	r0
    24e4:	0f 90       	pop	r0
    24e6:	cf 91       	pop	r28
    24e8:	df 91       	pop	r29
    24ea:	08 95       	ret

000024ec <HLCD4_voidStoreCustomChar>:

void HLCD4_voidStoreCustomChar(u8 * A_u8Pattern,u8 A_u8CGRAMIndex)
{
    24ec:	df 93       	push	r29
    24ee:	cf 93       	push	r28
    24f0:	cd b7       	in	r28, 0x3d	; 61
    24f2:	de b7       	in	r29, 0x3e	; 62
    24f4:	ab 97       	sbiw	r28, 0x2b	; 43
    24f6:	0f b6       	in	r0, 0x3f	; 63
    24f8:	f8 94       	cli
    24fa:	de bf       	out	0x3e, r29	; 62
    24fc:	0f be       	out	0x3f, r0	; 63
    24fe:	cd bf       	out	0x3d, r28	; 61
    2500:	9a a7       	std	Y+42, r25	; 0x2a
    2502:	89 a7       	std	Y+41, r24	; 0x29
    2504:	6b a7       	std	Y+43, r22	; 0x2b
    u8 local_u8Address;
    if(A_u8CGRAMIndex<8)
    2506:	8b a5       	ldd	r24, Y+43	; 0x2b
    2508:	88 30       	cpi	r24, 0x08	; 8
    250a:	08 f0       	brcs	.+2      	; 0x250e <HLCD4_voidStoreCustomChar+0x22>
    250c:	e5 c0       	rjmp	.+458    	; 0x26d8 <HLCD4_voidStoreCustomChar+0x1ec>
    {
        A_u8CGRAMIndex=A_u8CGRAMIndex*8;
    250e:	8b a5       	ldd	r24, Y+43	; 0x2b
    2510:	88 2f       	mov	r24, r24
    2512:	90 e0       	ldi	r25, 0x00	; 0
    2514:	88 0f       	add	r24, r24
    2516:	99 1f       	adc	r25, r25
    2518:	88 0f       	add	r24, r24
    251a:	99 1f       	adc	r25, r25
    251c:	88 0f       	add	r24, r24
    251e:	99 1f       	adc	r25, r25
    2520:	8b a7       	std	Y+43, r24	; 0x2b
        SET_BIT(A_u8CGRAMIndex,PIN6);
    2522:	8b a5       	ldd	r24, Y+43	; 0x2b
    2524:	80 64       	ori	r24, 0x40	; 64
    2526:	8b a7       	std	Y+43, r24	; 0x2b
        CLR_BIT(A_u8CGRAMIndex,PIN7);
    2528:	8b a5       	ldd	r24, Y+43	; 0x2b
    252a:	8f 77       	andi	r24, 0x7F	; 127
    252c:	8b a7       	std	Y+43, r24	; 0x2b
        HLCD4_voidSendCommand(A_u8CGRAMIndex);
    252e:	8b a5       	ldd	r24, Y+43	; 0x2b
    2530:	0e 94 bb 0a 	call	0x1576	; 0x1576 <HLCD4_voidSendCommand>
        for(u8 i=0;i<8;i++)
    2534:	1f a2       	std	Y+39, r1	; 0x27
    2536:	cc c0       	rjmp	.+408    	; 0x26d0 <HLCD4_voidStoreCustomChar+0x1e4>
        {
            HLCD4_voidSendData(A_u8Pattern[i]);
    2538:	8f a1       	ldd	r24, Y+39	; 0x27
    253a:	28 2f       	mov	r18, r24
    253c:	30 e0       	ldi	r19, 0x00	; 0
    253e:	89 a5       	ldd	r24, Y+41	; 0x29
    2540:	9a a5       	ldd	r25, Y+42	; 0x2a
    2542:	fc 01       	movw	r30, r24
    2544:	e2 0f       	add	r30, r18
    2546:	f3 1f       	adc	r31, r19
    2548:	80 81       	ld	r24, Z
    254a:	0e 94 54 0c 	call	0x18a8	; 0x18a8 <HLCD4_voidSendData>
    254e:	80 e0       	ldi	r24, 0x00	; 0
    2550:	90 e0       	ldi	r25, 0x00	; 0
    2552:	a0 e7       	ldi	r26, 0x70	; 112
    2554:	b2 e4       	ldi	r27, 0x42	; 66
    2556:	8b a3       	std	Y+35, r24	; 0x23
    2558:	9c a3       	std	Y+36, r25	; 0x24
    255a:	ad a3       	std	Y+37, r26	; 0x25
    255c:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    255e:	6b a1       	ldd	r22, Y+35	; 0x23
    2560:	7c a1       	ldd	r23, Y+36	; 0x24
    2562:	8d a1       	ldd	r24, Y+37	; 0x25
    2564:	9e a1       	ldd	r25, Y+38	; 0x26
    2566:	2b ea       	ldi	r18, 0xAB	; 171
    2568:	3a ea       	ldi	r19, 0xAA	; 170
    256a:	4a e2       	ldi	r20, 0x2A	; 42
    256c:	50 e4       	ldi	r21, 0x40	; 64
    256e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2572:	dc 01       	movw	r26, r24
    2574:	cb 01       	movw	r24, r22
    2576:	8f 8f       	std	Y+31, r24	; 0x1f
    2578:	98 a3       	std	Y+32, r25	; 0x20
    257a:	a9 a3       	std	Y+33, r26	; 0x21
    257c:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    257e:	6f 8d       	ldd	r22, Y+31	; 0x1f
    2580:	78 a1       	ldd	r23, Y+32	; 0x20
    2582:	89 a1       	ldd	r24, Y+33	; 0x21
    2584:	9a a1       	ldd	r25, Y+34	; 0x22
    2586:	20 e0       	ldi	r18, 0x00	; 0
    2588:	30 e0       	ldi	r19, 0x00	; 0
    258a:	40 e8       	ldi	r20, 0x80	; 128
    258c:	5f e3       	ldi	r21, 0x3F	; 63
    258e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2592:	88 23       	and	r24, r24
    2594:	1c f4       	brge	.+6      	; 0x259c <HLCD4_voidStoreCustomChar+0xb0>
		__ticks = 1;
    2596:	81 e0       	ldi	r24, 0x01	; 1
    2598:	8e 8f       	std	Y+30, r24	; 0x1e
    259a:	91 c0       	rjmp	.+290    	; 0x26be <HLCD4_voidStoreCustomChar+0x1d2>
	else if (__tmp > 255)
    259c:	6f 8d       	ldd	r22, Y+31	; 0x1f
    259e:	78 a1       	ldd	r23, Y+32	; 0x20
    25a0:	89 a1       	ldd	r24, Y+33	; 0x21
    25a2:	9a a1       	ldd	r25, Y+34	; 0x22
    25a4:	20 e0       	ldi	r18, 0x00	; 0
    25a6:	30 e0       	ldi	r19, 0x00	; 0
    25a8:	4f e7       	ldi	r20, 0x7F	; 127
    25aa:	53 e4       	ldi	r21, 0x43	; 67
    25ac:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    25b0:	18 16       	cp	r1, r24
    25b2:	0c f0       	brlt	.+2      	; 0x25b6 <HLCD4_voidStoreCustomChar+0xca>
    25b4:	7b c0       	rjmp	.+246    	; 0x26ac <HLCD4_voidStoreCustomChar+0x1c0>
	{
		_delay_ms(__us / 1000.0);
    25b6:	6b a1       	ldd	r22, Y+35	; 0x23
    25b8:	7c a1       	ldd	r23, Y+36	; 0x24
    25ba:	8d a1       	ldd	r24, Y+37	; 0x25
    25bc:	9e a1       	ldd	r25, Y+38	; 0x26
    25be:	20 e0       	ldi	r18, 0x00	; 0
    25c0:	30 e0       	ldi	r19, 0x00	; 0
    25c2:	4a e7       	ldi	r20, 0x7A	; 122
    25c4:	54 e4       	ldi	r21, 0x44	; 68
    25c6:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    25ca:	dc 01       	movw	r26, r24
    25cc:	cb 01       	movw	r24, r22
    25ce:	8a 8f       	std	Y+26, r24	; 0x1a
    25d0:	9b 8f       	std	Y+27, r25	; 0x1b
    25d2:	ac 8f       	std	Y+28, r26	; 0x1c
    25d4:	bd 8f       	std	Y+29, r27	; 0x1d
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    25d6:	6a 8d       	ldd	r22, Y+26	; 0x1a
    25d8:	7b 8d       	ldd	r23, Y+27	; 0x1b
    25da:	8c 8d       	ldd	r24, Y+28	; 0x1c
    25dc:	9d 8d       	ldd	r25, Y+29	; 0x1d
    25de:	20 e0       	ldi	r18, 0x00	; 0
    25e0:	30 e0       	ldi	r19, 0x00	; 0
    25e2:	4a ef       	ldi	r20, 0xFA	; 250
    25e4:	54 e4       	ldi	r21, 0x44	; 68
    25e6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25ea:	dc 01       	movw	r26, r24
    25ec:	cb 01       	movw	r24, r22
    25ee:	8e 8b       	std	Y+22, r24	; 0x16
    25f0:	9f 8b       	std	Y+23, r25	; 0x17
    25f2:	a8 8f       	std	Y+24, r26	; 0x18
    25f4:	b9 8f       	std	Y+25, r27	; 0x19
	if (__tmp < 1.0)
    25f6:	6e 89       	ldd	r22, Y+22	; 0x16
    25f8:	7f 89       	ldd	r23, Y+23	; 0x17
    25fa:	88 8d       	ldd	r24, Y+24	; 0x18
    25fc:	99 8d       	ldd	r25, Y+25	; 0x19
    25fe:	20 e0       	ldi	r18, 0x00	; 0
    2600:	30 e0       	ldi	r19, 0x00	; 0
    2602:	40 e8       	ldi	r20, 0x80	; 128
    2604:	5f e3       	ldi	r21, 0x3F	; 63
    2606:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    260a:	88 23       	and	r24, r24
    260c:	2c f4       	brge	.+10     	; 0x2618 <HLCD4_voidStoreCustomChar+0x12c>
		__ticks = 1;
    260e:	81 e0       	ldi	r24, 0x01	; 1
    2610:	90 e0       	ldi	r25, 0x00	; 0
    2612:	9d 8b       	std	Y+21, r25	; 0x15
    2614:	8c 8b       	std	Y+20, r24	; 0x14
    2616:	3f c0       	rjmp	.+126    	; 0x2696 <HLCD4_voidStoreCustomChar+0x1aa>
	else if (__tmp > 65535)
    2618:	6e 89       	ldd	r22, Y+22	; 0x16
    261a:	7f 89       	ldd	r23, Y+23	; 0x17
    261c:	88 8d       	ldd	r24, Y+24	; 0x18
    261e:	99 8d       	ldd	r25, Y+25	; 0x19
    2620:	20 e0       	ldi	r18, 0x00	; 0
    2622:	3f ef       	ldi	r19, 0xFF	; 255
    2624:	4f e7       	ldi	r20, 0x7F	; 127
    2626:	57 e4       	ldi	r21, 0x47	; 71
    2628:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    262c:	18 16       	cp	r1, r24
    262e:	4c f5       	brge	.+82     	; 0x2682 <HLCD4_voidStoreCustomChar+0x196>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2630:	6a 8d       	ldd	r22, Y+26	; 0x1a
    2632:	7b 8d       	ldd	r23, Y+27	; 0x1b
    2634:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2636:	9d 8d       	ldd	r25, Y+29	; 0x1d
    2638:	20 e0       	ldi	r18, 0x00	; 0
    263a:	30 e0       	ldi	r19, 0x00	; 0
    263c:	40 e2       	ldi	r20, 0x20	; 32
    263e:	51 e4       	ldi	r21, 0x41	; 65
    2640:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2644:	dc 01       	movw	r26, r24
    2646:	cb 01       	movw	r24, r22
    2648:	bc 01       	movw	r22, r24
    264a:	cd 01       	movw	r24, r26
    264c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2650:	dc 01       	movw	r26, r24
    2652:	cb 01       	movw	r24, r22
    2654:	9d 8b       	std	Y+21, r25	; 0x15
    2656:	8c 8b       	std	Y+20, r24	; 0x14
    2658:	0f c0       	rjmp	.+30     	; 0x2678 <HLCD4_voidStoreCustomChar+0x18c>
    265a:	88 ec       	ldi	r24, 0xC8	; 200
    265c:	90 e0       	ldi	r25, 0x00	; 0
    265e:	9b 8b       	std	Y+19, r25	; 0x13
    2660:	8a 8b       	std	Y+18, r24	; 0x12
    2662:	8a 89       	ldd	r24, Y+18	; 0x12
    2664:	9b 89       	ldd	r25, Y+19	; 0x13
    2666:	01 97       	sbiw	r24, 0x01	; 1
    2668:	f1 f7       	brne	.-4      	; 0x2666 <HLCD4_voidStoreCustomChar+0x17a>
    266a:	9b 8b       	std	Y+19, r25	; 0x13
    266c:	8a 8b       	std	Y+18, r24	; 0x12
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    266e:	8c 89       	ldd	r24, Y+20	; 0x14
    2670:	9d 89       	ldd	r25, Y+21	; 0x15
    2672:	01 97       	sbiw	r24, 0x01	; 1
    2674:	9d 8b       	std	Y+21, r25	; 0x15
    2676:	8c 8b       	std	Y+20, r24	; 0x14
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2678:	8c 89       	ldd	r24, Y+20	; 0x14
    267a:	9d 89       	ldd	r25, Y+21	; 0x15
    267c:	00 97       	sbiw	r24, 0x00	; 0
    267e:	69 f7       	brne	.-38     	; 0x265a <HLCD4_voidStoreCustomChar+0x16e>
    2680:	24 c0       	rjmp	.+72     	; 0x26ca <HLCD4_voidStoreCustomChar+0x1de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2682:	6e 89       	ldd	r22, Y+22	; 0x16
    2684:	7f 89       	ldd	r23, Y+23	; 0x17
    2686:	88 8d       	ldd	r24, Y+24	; 0x18
    2688:	99 8d       	ldd	r25, Y+25	; 0x19
    268a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    268e:	dc 01       	movw	r26, r24
    2690:	cb 01       	movw	r24, r22
    2692:	9d 8b       	std	Y+21, r25	; 0x15
    2694:	8c 8b       	std	Y+20, r24	; 0x14
    2696:	8c 89       	ldd	r24, Y+20	; 0x14
    2698:	9d 89       	ldd	r25, Y+21	; 0x15
    269a:	99 8b       	std	Y+17, r25	; 0x11
    269c:	88 8b       	std	Y+16, r24	; 0x10
    269e:	88 89       	ldd	r24, Y+16	; 0x10
    26a0:	99 89       	ldd	r25, Y+17	; 0x11
    26a2:	01 97       	sbiw	r24, 0x01	; 1
    26a4:	f1 f7       	brne	.-4      	; 0x26a2 <HLCD4_voidStoreCustomChar+0x1b6>
    26a6:	99 8b       	std	Y+17, r25	; 0x11
    26a8:	88 8b       	std	Y+16, r24	; 0x10
    26aa:	0f c0       	rjmp	.+30     	; 0x26ca <HLCD4_voidStoreCustomChar+0x1de>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    26ac:	6f 8d       	ldd	r22, Y+31	; 0x1f
    26ae:	78 a1       	ldd	r23, Y+32	; 0x20
    26b0:	89 a1       	ldd	r24, Y+33	; 0x21
    26b2:	9a a1       	ldd	r25, Y+34	; 0x22
    26b4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26b8:	dc 01       	movw	r26, r24
    26ba:	cb 01       	movw	r24, r22
    26bc:	8e 8f       	std	Y+30, r24	; 0x1e
    26be:	8e 8d       	ldd	r24, Y+30	; 0x1e
    26c0:	8f 87       	std	Y+15, r24	; 0x0f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    26c2:	8f 85       	ldd	r24, Y+15	; 0x0f
    26c4:	8a 95       	dec	r24
    26c6:	f1 f7       	brne	.-4      	; 0x26c4 <HLCD4_voidStoreCustomChar+0x1d8>
    26c8:	8f 87       	std	Y+15, r24	; 0x0f
    {
        A_u8CGRAMIndex=A_u8CGRAMIndex*8;
        SET_BIT(A_u8CGRAMIndex,PIN6);
        CLR_BIT(A_u8CGRAMIndex,PIN7);
        HLCD4_voidSendCommand(A_u8CGRAMIndex);
        for(u8 i=0;i<8;i++)
    26ca:	8f a1       	ldd	r24, Y+39	; 0x27
    26cc:	8f 5f       	subi	r24, 0xFF	; 255
    26ce:	8f a3       	std	Y+39, r24	; 0x27
    26d0:	8f a1       	ldd	r24, Y+39	; 0x27
    26d2:	88 30       	cpi	r24, 0x08	; 8
    26d4:	08 f4       	brcc	.+2      	; 0x26d8 <HLCD4_voidStoreCustomChar+0x1ec>
    26d6:	30 cf       	rjmp	.-416    	; 0x2538 <HLCD4_voidStoreCustomChar+0x4c>
        {
            HLCD4_voidSendData(A_u8Pattern[i]);
            _delay_us(60);
        }
    }
    HLCD4_voidSendCommand(RETURN_HOME);
    26d8:	82 e0       	ldi	r24, 0x02	; 2
    26da:	0e 94 bb 0a 	call	0x1576	; 0x1576 <HLCD4_voidSendCommand>
    26de:	80 e0       	ldi	r24, 0x00	; 0
    26e0:	90 e0       	ldi	r25, 0x00	; 0
    26e2:	a0 e0       	ldi	r26, 0x00	; 0
    26e4:	b0 e4       	ldi	r27, 0x40	; 64
    26e6:	8b 87       	std	Y+11, r24	; 0x0b
    26e8:	9c 87       	std	Y+12, r25	; 0x0c
    26ea:	ad 87       	std	Y+13, r26	; 0x0d
    26ec:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    26ee:	6b 85       	ldd	r22, Y+11	; 0x0b
    26f0:	7c 85       	ldd	r23, Y+12	; 0x0c
    26f2:	8d 85       	ldd	r24, Y+13	; 0x0d
    26f4:	9e 85       	ldd	r25, Y+14	; 0x0e
    26f6:	20 e0       	ldi	r18, 0x00	; 0
    26f8:	30 e0       	ldi	r19, 0x00	; 0
    26fa:	4a ef       	ldi	r20, 0xFA	; 250
    26fc:	54 e4       	ldi	r21, 0x44	; 68
    26fe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2702:	dc 01       	movw	r26, r24
    2704:	cb 01       	movw	r24, r22
    2706:	8f 83       	std	Y+7, r24	; 0x07
    2708:	98 87       	std	Y+8, r25	; 0x08
    270a:	a9 87       	std	Y+9, r26	; 0x09
    270c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    270e:	6f 81       	ldd	r22, Y+7	; 0x07
    2710:	78 85       	ldd	r23, Y+8	; 0x08
    2712:	89 85       	ldd	r24, Y+9	; 0x09
    2714:	9a 85       	ldd	r25, Y+10	; 0x0a
    2716:	20 e0       	ldi	r18, 0x00	; 0
    2718:	30 e0       	ldi	r19, 0x00	; 0
    271a:	40 e8       	ldi	r20, 0x80	; 128
    271c:	5f e3       	ldi	r21, 0x3F	; 63
    271e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2722:	88 23       	and	r24, r24
    2724:	2c f4       	brge	.+10     	; 0x2730 <HLCD4_voidStoreCustomChar+0x244>
		__ticks = 1;
    2726:	81 e0       	ldi	r24, 0x01	; 1
    2728:	90 e0       	ldi	r25, 0x00	; 0
    272a:	9e 83       	std	Y+6, r25	; 0x06
    272c:	8d 83       	std	Y+5, r24	; 0x05
    272e:	3f c0       	rjmp	.+126    	; 0x27ae <HLCD4_voidStoreCustomChar+0x2c2>
	else if (__tmp > 65535)
    2730:	6f 81       	ldd	r22, Y+7	; 0x07
    2732:	78 85       	ldd	r23, Y+8	; 0x08
    2734:	89 85       	ldd	r24, Y+9	; 0x09
    2736:	9a 85       	ldd	r25, Y+10	; 0x0a
    2738:	20 e0       	ldi	r18, 0x00	; 0
    273a:	3f ef       	ldi	r19, 0xFF	; 255
    273c:	4f e7       	ldi	r20, 0x7F	; 127
    273e:	57 e4       	ldi	r21, 0x47	; 71
    2740:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2744:	18 16       	cp	r1, r24
    2746:	4c f5       	brge	.+82     	; 0x279a <HLCD4_voidStoreCustomChar+0x2ae>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2748:	6b 85       	ldd	r22, Y+11	; 0x0b
    274a:	7c 85       	ldd	r23, Y+12	; 0x0c
    274c:	8d 85       	ldd	r24, Y+13	; 0x0d
    274e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2750:	20 e0       	ldi	r18, 0x00	; 0
    2752:	30 e0       	ldi	r19, 0x00	; 0
    2754:	40 e2       	ldi	r20, 0x20	; 32
    2756:	51 e4       	ldi	r21, 0x41	; 65
    2758:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    275c:	dc 01       	movw	r26, r24
    275e:	cb 01       	movw	r24, r22
    2760:	bc 01       	movw	r22, r24
    2762:	cd 01       	movw	r24, r26
    2764:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2768:	dc 01       	movw	r26, r24
    276a:	cb 01       	movw	r24, r22
    276c:	9e 83       	std	Y+6, r25	; 0x06
    276e:	8d 83       	std	Y+5, r24	; 0x05
    2770:	0f c0       	rjmp	.+30     	; 0x2790 <HLCD4_voidStoreCustomChar+0x2a4>
    2772:	88 ec       	ldi	r24, 0xC8	; 200
    2774:	90 e0       	ldi	r25, 0x00	; 0
    2776:	9c 83       	std	Y+4, r25	; 0x04
    2778:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    277a:	8b 81       	ldd	r24, Y+3	; 0x03
    277c:	9c 81       	ldd	r25, Y+4	; 0x04
    277e:	01 97       	sbiw	r24, 0x01	; 1
    2780:	f1 f7       	brne	.-4      	; 0x277e <HLCD4_voidStoreCustomChar+0x292>
    2782:	9c 83       	std	Y+4, r25	; 0x04
    2784:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2786:	8d 81       	ldd	r24, Y+5	; 0x05
    2788:	9e 81       	ldd	r25, Y+6	; 0x06
    278a:	01 97       	sbiw	r24, 0x01	; 1
    278c:	9e 83       	std	Y+6, r25	; 0x06
    278e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2790:	8d 81       	ldd	r24, Y+5	; 0x05
    2792:	9e 81       	ldd	r25, Y+6	; 0x06
    2794:	00 97       	sbiw	r24, 0x00	; 0
    2796:	69 f7       	brne	.-38     	; 0x2772 <HLCD4_voidStoreCustomChar+0x286>
    2798:	14 c0       	rjmp	.+40     	; 0x27c2 <HLCD4_voidStoreCustomChar+0x2d6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    279a:	6f 81       	ldd	r22, Y+7	; 0x07
    279c:	78 85       	ldd	r23, Y+8	; 0x08
    279e:	89 85       	ldd	r24, Y+9	; 0x09
    27a0:	9a 85       	ldd	r25, Y+10	; 0x0a
    27a2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27a6:	dc 01       	movw	r26, r24
    27a8:	cb 01       	movw	r24, r22
    27aa:	9e 83       	std	Y+6, r25	; 0x06
    27ac:	8d 83       	std	Y+5, r24	; 0x05
    27ae:	8d 81       	ldd	r24, Y+5	; 0x05
    27b0:	9e 81       	ldd	r25, Y+6	; 0x06
    27b2:	9a 83       	std	Y+2, r25	; 0x02
    27b4:	89 83       	std	Y+1, r24	; 0x01
    27b6:	89 81       	ldd	r24, Y+1	; 0x01
    27b8:	9a 81       	ldd	r25, Y+2	; 0x02
    27ba:	01 97       	sbiw	r24, 0x01	; 1
    27bc:	f1 f7       	brne	.-4      	; 0x27ba <HLCD4_voidStoreCustomChar+0x2ce>
    27be:	9a 83       	std	Y+2, r25	; 0x02
    27c0:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(2);

}
    27c2:	ab 96       	adiw	r28, 0x2b	; 43
    27c4:	0f b6       	in	r0, 0x3f	; 63
    27c6:	f8 94       	cli
    27c8:	de bf       	out	0x3e, r29	; 62
    27ca:	0f be       	out	0x3f, r0	; 63
    27cc:	cd bf       	out	0x3d, r28	; 61
    27ce:	cf 91       	pop	r28
    27d0:	df 91       	pop	r29
    27d2:	08 95       	ret

000027d4 <HLCD4_voidDisplayCustomChar>:

void HLCD4_voidDisplayCustomChar(u8 A_u8CGRAMIndex,u8 A_u8Row,u8 A_u8Col)
{
    27d4:	df 93       	push	r29
    27d6:	cf 93       	push	r28
    27d8:	00 d0       	rcall	.+0      	; 0x27da <HLCD4_voidDisplayCustomChar+0x6>
    27da:	0f 92       	push	r0
    27dc:	cd b7       	in	r28, 0x3d	; 61
    27de:	de b7       	in	r29, 0x3e	; 62
    27e0:	89 83       	std	Y+1, r24	; 0x01
    27e2:	6a 83       	std	Y+2, r22	; 0x02
    27e4:	4b 83       	std	Y+3, r20	; 0x03
    HLCD4_voidGoToPos(A_u8Row,A_u8Col);
    27e6:	8a 81       	ldd	r24, Y+2	; 0x02
    27e8:	6b 81       	ldd	r22, Y+3	; 0x03
    27ea:	0e 94 71 11 	call	0x22e2	; 0x22e2 <HLCD4_voidGoToPos>
    HLCD4_voidSendData(A_u8CGRAMIndex);
    27ee:	89 81       	ldd	r24, Y+1	; 0x01
    27f0:	0e 94 54 0c 	call	0x18a8	; 0x18a8 <HLCD4_voidSendData>
    27f4:	0f 90       	pop	r0
    27f6:	0f 90       	pop	r0
    27f8:	0f 90       	pop	r0
    27fa:	cf 91       	pop	r28
    27fc:	df 91       	pop	r29
    27fe:	08 95       	ret

00002800 <HLCD8_voidSendCommand>:
#define F_CPU 8000000UL
#include <math.h>
#include <stdlib.h>

void HLCD8_voidSendCommand(u8 A_u8Command)
{
    2800:	df 93       	push	r29
    2802:	cf 93       	push	r28
    2804:	cd b7       	in	r28, 0x3d	; 61
    2806:	de b7       	in	r29, 0x3e	; 62
    2808:	2f 97       	sbiw	r28, 0x0f	; 15
    280a:	0f b6       	in	r0, 0x3f	; 63
    280c:	f8 94       	cli
    280e:	de bf       	out	0x3e, r29	; 62
    2810:	0f be       	out	0x3f, r0	; 63
    2812:	cd bf       	out	0x3d, r28	; 61
    2814:	8f 87       	std	Y+15, r24	; 0x0f
    //RS=0 RW=0
    MDIO_voidSetPinValue(LCD_CONTROL_PORT,RS_PIN,PIN_LOW);
    2816:	82 e0       	ldi	r24, 0x02	; 2
    2818:	60 e0       	ldi	r22, 0x00	; 0
    281a:	40 e0       	ldi	r20, 0x00	; 0
    281c:	0e 94 27 07 	call	0xe4e	; 0xe4e <MDIO_voidSetPinValue>
    MDIO_voidSetPinValue(LCD_CONTROL_PORT,RW_PIN,PIN_LOW);
    2820:	82 e0       	ldi	r24, 0x02	; 2
    2822:	61 e0       	ldi	r22, 0x01	; 1
    2824:	40 e0       	ldi	r20, 0x00	; 0
    2826:	0e 94 27 07 	call	0xe4e	; 0xe4e <MDIO_voidSetPinValue>

    MDIO_voidSetPortValue(LCD_DATA_PORT,A_u8Command);
    282a:	83 e0       	ldi	r24, 0x03	; 3
    282c:	6f 85       	ldd	r22, Y+15	; 0x0f
    282e:	0e 94 53 09 	call	0x12a6	; 0x12a6 <MDIO_voidSetPortValue>
    MDIO_voidSetPinValue(LCD_CONTROL_PORT,E_PIN,PIN_HIGH);
    2832:	82 e0       	ldi	r24, 0x02	; 2
    2834:	62 e0       	ldi	r22, 0x02	; 2
    2836:	41 e0       	ldi	r20, 0x01	; 1
    2838:	0e 94 27 07 	call	0xe4e	; 0xe4e <MDIO_voidSetPinValue>
    283c:	80 e0       	ldi	r24, 0x00	; 0
    283e:	90 e0       	ldi	r25, 0x00	; 0
    2840:	a0 e0       	ldi	r26, 0x00	; 0
    2842:	b0 e4       	ldi	r27, 0x40	; 64
    2844:	8b 87       	std	Y+11, r24	; 0x0b
    2846:	9c 87       	std	Y+12, r25	; 0x0c
    2848:	ad 87       	std	Y+13, r26	; 0x0d
    284a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    284c:	6b 85       	ldd	r22, Y+11	; 0x0b
    284e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2850:	8d 85       	ldd	r24, Y+13	; 0x0d
    2852:	9e 85       	ldd	r25, Y+14	; 0x0e
    2854:	20 e0       	ldi	r18, 0x00	; 0
    2856:	30 e0       	ldi	r19, 0x00	; 0
    2858:	4a ef       	ldi	r20, 0xFA	; 250
    285a:	54 e4       	ldi	r21, 0x44	; 68
    285c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2860:	dc 01       	movw	r26, r24
    2862:	cb 01       	movw	r24, r22
    2864:	8f 83       	std	Y+7, r24	; 0x07
    2866:	98 87       	std	Y+8, r25	; 0x08
    2868:	a9 87       	std	Y+9, r26	; 0x09
    286a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    286c:	6f 81       	ldd	r22, Y+7	; 0x07
    286e:	78 85       	ldd	r23, Y+8	; 0x08
    2870:	89 85       	ldd	r24, Y+9	; 0x09
    2872:	9a 85       	ldd	r25, Y+10	; 0x0a
    2874:	20 e0       	ldi	r18, 0x00	; 0
    2876:	30 e0       	ldi	r19, 0x00	; 0
    2878:	40 e8       	ldi	r20, 0x80	; 128
    287a:	5f e3       	ldi	r21, 0x3F	; 63
    287c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2880:	88 23       	and	r24, r24
    2882:	2c f4       	brge	.+10     	; 0x288e <HLCD8_voidSendCommand+0x8e>
		__ticks = 1;
    2884:	81 e0       	ldi	r24, 0x01	; 1
    2886:	90 e0       	ldi	r25, 0x00	; 0
    2888:	9e 83       	std	Y+6, r25	; 0x06
    288a:	8d 83       	std	Y+5, r24	; 0x05
    288c:	3f c0       	rjmp	.+126    	; 0x290c <HLCD8_voidSendCommand+0x10c>
	else if (__tmp > 65535)
    288e:	6f 81       	ldd	r22, Y+7	; 0x07
    2890:	78 85       	ldd	r23, Y+8	; 0x08
    2892:	89 85       	ldd	r24, Y+9	; 0x09
    2894:	9a 85       	ldd	r25, Y+10	; 0x0a
    2896:	20 e0       	ldi	r18, 0x00	; 0
    2898:	3f ef       	ldi	r19, 0xFF	; 255
    289a:	4f e7       	ldi	r20, 0x7F	; 127
    289c:	57 e4       	ldi	r21, 0x47	; 71
    289e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    28a2:	18 16       	cp	r1, r24
    28a4:	4c f5       	brge	.+82     	; 0x28f8 <HLCD8_voidSendCommand+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    28a6:	6b 85       	ldd	r22, Y+11	; 0x0b
    28a8:	7c 85       	ldd	r23, Y+12	; 0x0c
    28aa:	8d 85       	ldd	r24, Y+13	; 0x0d
    28ac:	9e 85       	ldd	r25, Y+14	; 0x0e
    28ae:	20 e0       	ldi	r18, 0x00	; 0
    28b0:	30 e0       	ldi	r19, 0x00	; 0
    28b2:	40 e2       	ldi	r20, 0x20	; 32
    28b4:	51 e4       	ldi	r21, 0x41	; 65
    28b6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28ba:	dc 01       	movw	r26, r24
    28bc:	cb 01       	movw	r24, r22
    28be:	bc 01       	movw	r22, r24
    28c0:	cd 01       	movw	r24, r26
    28c2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28c6:	dc 01       	movw	r26, r24
    28c8:	cb 01       	movw	r24, r22
    28ca:	9e 83       	std	Y+6, r25	; 0x06
    28cc:	8d 83       	std	Y+5, r24	; 0x05
    28ce:	0f c0       	rjmp	.+30     	; 0x28ee <HLCD8_voidSendCommand+0xee>
    28d0:	88 ec       	ldi	r24, 0xC8	; 200
    28d2:	90 e0       	ldi	r25, 0x00	; 0
    28d4:	9c 83       	std	Y+4, r25	; 0x04
    28d6:	8b 83       	std	Y+3, r24	; 0x03
    28d8:	8b 81       	ldd	r24, Y+3	; 0x03
    28da:	9c 81       	ldd	r25, Y+4	; 0x04
    28dc:	01 97       	sbiw	r24, 0x01	; 1
    28de:	f1 f7       	brne	.-4      	; 0x28dc <HLCD8_voidSendCommand+0xdc>
    28e0:	9c 83       	std	Y+4, r25	; 0x04
    28e2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    28e4:	8d 81       	ldd	r24, Y+5	; 0x05
    28e6:	9e 81       	ldd	r25, Y+6	; 0x06
    28e8:	01 97       	sbiw	r24, 0x01	; 1
    28ea:	9e 83       	std	Y+6, r25	; 0x06
    28ec:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    28ee:	8d 81       	ldd	r24, Y+5	; 0x05
    28f0:	9e 81       	ldd	r25, Y+6	; 0x06
    28f2:	00 97       	sbiw	r24, 0x00	; 0
    28f4:	69 f7       	brne	.-38     	; 0x28d0 <HLCD8_voidSendCommand+0xd0>
    28f6:	14 c0       	rjmp	.+40     	; 0x2920 <HLCD8_voidSendCommand+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    28f8:	6f 81       	ldd	r22, Y+7	; 0x07
    28fa:	78 85       	ldd	r23, Y+8	; 0x08
    28fc:	89 85       	ldd	r24, Y+9	; 0x09
    28fe:	9a 85       	ldd	r25, Y+10	; 0x0a
    2900:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2904:	dc 01       	movw	r26, r24
    2906:	cb 01       	movw	r24, r22
    2908:	9e 83       	std	Y+6, r25	; 0x06
    290a:	8d 83       	std	Y+5, r24	; 0x05
    290c:	8d 81       	ldd	r24, Y+5	; 0x05
    290e:	9e 81       	ldd	r25, Y+6	; 0x06
    2910:	9a 83       	std	Y+2, r25	; 0x02
    2912:	89 83       	std	Y+1, r24	; 0x01
    2914:	89 81       	ldd	r24, Y+1	; 0x01
    2916:	9a 81       	ldd	r25, Y+2	; 0x02
    2918:	01 97       	sbiw	r24, 0x01	; 1
    291a:	f1 f7       	brne	.-4      	; 0x2918 <HLCD8_voidSendCommand+0x118>
    291c:	9a 83       	std	Y+2, r25	; 0x02
    291e:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(2);
    MDIO_voidSetPinValue(LCD_CONTROL_PORT,E_PIN,PIN_LOW);
    2920:	82 e0       	ldi	r24, 0x02	; 2
    2922:	62 e0       	ldi	r22, 0x02	; 2
    2924:	40 e0       	ldi	r20, 0x00	; 0
    2926:	0e 94 27 07 	call	0xe4e	; 0xe4e <MDIO_voidSetPinValue>
}
    292a:	2f 96       	adiw	r28, 0x0f	; 15
    292c:	0f b6       	in	r0, 0x3f	; 63
    292e:	f8 94       	cli
    2930:	de bf       	out	0x3e, r29	; 62
    2932:	0f be       	out	0x3f, r0	; 63
    2934:	cd bf       	out	0x3d, r28	; 61
    2936:	cf 91       	pop	r28
    2938:	df 91       	pop	r29
    293a:	08 95       	ret

0000293c <HLCD8_voidSendData>:


void HLCD8_voidSendData(u8 A_u8Data)
{
    293c:	df 93       	push	r29
    293e:	cf 93       	push	r28
    2940:	cd b7       	in	r28, 0x3d	; 61
    2942:	de b7       	in	r29, 0x3e	; 62
    2944:	2f 97       	sbiw	r28, 0x0f	; 15
    2946:	0f b6       	in	r0, 0x3f	; 63
    2948:	f8 94       	cli
    294a:	de bf       	out	0x3e, r29	; 62
    294c:	0f be       	out	0x3f, r0	; 63
    294e:	cd bf       	out	0x3d, r28	; 61
    2950:	8f 87       	std	Y+15, r24	; 0x0f
    //RS=1 RW=0
    MDIO_voidSetPinValue(LCD_CONTROL_PORT,RS_PIN,PIN_HIGH);
    2952:	82 e0       	ldi	r24, 0x02	; 2
    2954:	60 e0       	ldi	r22, 0x00	; 0
    2956:	41 e0       	ldi	r20, 0x01	; 1
    2958:	0e 94 27 07 	call	0xe4e	; 0xe4e <MDIO_voidSetPinValue>
    MDIO_voidSetPinValue(LCD_CONTROL_PORT,RW_PIN,PIN_LOW);
    295c:	82 e0       	ldi	r24, 0x02	; 2
    295e:	61 e0       	ldi	r22, 0x01	; 1
    2960:	40 e0       	ldi	r20, 0x00	; 0
    2962:	0e 94 27 07 	call	0xe4e	; 0xe4e <MDIO_voidSetPinValue>

    MDIO_voidSetPortValue(LCD_DATA_PORT,A_u8Data);
    2966:	83 e0       	ldi	r24, 0x03	; 3
    2968:	6f 85       	ldd	r22, Y+15	; 0x0f
    296a:	0e 94 53 09 	call	0x12a6	; 0x12a6 <MDIO_voidSetPortValue>

    MDIO_voidSetPinValue(LCD_CONTROL_PORT,E_PIN,PIN_HIGH);
    296e:	82 e0       	ldi	r24, 0x02	; 2
    2970:	62 e0       	ldi	r22, 0x02	; 2
    2972:	41 e0       	ldi	r20, 0x01	; 1
    2974:	0e 94 27 07 	call	0xe4e	; 0xe4e <MDIO_voidSetPinValue>
    2978:	80 e0       	ldi	r24, 0x00	; 0
    297a:	90 e0       	ldi	r25, 0x00	; 0
    297c:	a0 e0       	ldi	r26, 0x00	; 0
    297e:	b0 e4       	ldi	r27, 0x40	; 64
    2980:	8b 87       	std	Y+11, r24	; 0x0b
    2982:	9c 87       	std	Y+12, r25	; 0x0c
    2984:	ad 87       	std	Y+13, r26	; 0x0d
    2986:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2988:	6b 85       	ldd	r22, Y+11	; 0x0b
    298a:	7c 85       	ldd	r23, Y+12	; 0x0c
    298c:	8d 85       	ldd	r24, Y+13	; 0x0d
    298e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2990:	20 e0       	ldi	r18, 0x00	; 0
    2992:	30 e0       	ldi	r19, 0x00	; 0
    2994:	4a ef       	ldi	r20, 0xFA	; 250
    2996:	54 e4       	ldi	r21, 0x44	; 68
    2998:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    299c:	dc 01       	movw	r26, r24
    299e:	cb 01       	movw	r24, r22
    29a0:	8f 83       	std	Y+7, r24	; 0x07
    29a2:	98 87       	std	Y+8, r25	; 0x08
    29a4:	a9 87       	std	Y+9, r26	; 0x09
    29a6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    29a8:	6f 81       	ldd	r22, Y+7	; 0x07
    29aa:	78 85       	ldd	r23, Y+8	; 0x08
    29ac:	89 85       	ldd	r24, Y+9	; 0x09
    29ae:	9a 85       	ldd	r25, Y+10	; 0x0a
    29b0:	20 e0       	ldi	r18, 0x00	; 0
    29b2:	30 e0       	ldi	r19, 0x00	; 0
    29b4:	40 e8       	ldi	r20, 0x80	; 128
    29b6:	5f e3       	ldi	r21, 0x3F	; 63
    29b8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    29bc:	88 23       	and	r24, r24
    29be:	2c f4       	brge	.+10     	; 0x29ca <HLCD8_voidSendData+0x8e>
		__ticks = 1;
    29c0:	81 e0       	ldi	r24, 0x01	; 1
    29c2:	90 e0       	ldi	r25, 0x00	; 0
    29c4:	9e 83       	std	Y+6, r25	; 0x06
    29c6:	8d 83       	std	Y+5, r24	; 0x05
    29c8:	3f c0       	rjmp	.+126    	; 0x2a48 <HLCD8_voidSendData+0x10c>
	else if (__tmp > 65535)
    29ca:	6f 81       	ldd	r22, Y+7	; 0x07
    29cc:	78 85       	ldd	r23, Y+8	; 0x08
    29ce:	89 85       	ldd	r24, Y+9	; 0x09
    29d0:	9a 85       	ldd	r25, Y+10	; 0x0a
    29d2:	20 e0       	ldi	r18, 0x00	; 0
    29d4:	3f ef       	ldi	r19, 0xFF	; 255
    29d6:	4f e7       	ldi	r20, 0x7F	; 127
    29d8:	57 e4       	ldi	r21, 0x47	; 71
    29da:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    29de:	18 16       	cp	r1, r24
    29e0:	4c f5       	brge	.+82     	; 0x2a34 <HLCD8_voidSendData+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    29e2:	6b 85       	ldd	r22, Y+11	; 0x0b
    29e4:	7c 85       	ldd	r23, Y+12	; 0x0c
    29e6:	8d 85       	ldd	r24, Y+13	; 0x0d
    29e8:	9e 85       	ldd	r25, Y+14	; 0x0e
    29ea:	20 e0       	ldi	r18, 0x00	; 0
    29ec:	30 e0       	ldi	r19, 0x00	; 0
    29ee:	40 e2       	ldi	r20, 0x20	; 32
    29f0:	51 e4       	ldi	r21, 0x41	; 65
    29f2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29f6:	dc 01       	movw	r26, r24
    29f8:	cb 01       	movw	r24, r22
    29fa:	bc 01       	movw	r22, r24
    29fc:	cd 01       	movw	r24, r26
    29fe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a02:	dc 01       	movw	r26, r24
    2a04:	cb 01       	movw	r24, r22
    2a06:	9e 83       	std	Y+6, r25	; 0x06
    2a08:	8d 83       	std	Y+5, r24	; 0x05
    2a0a:	0f c0       	rjmp	.+30     	; 0x2a2a <HLCD8_voidSendData+0xee>
    2a0c:	88 ec       	ldi	r24, 0xC8	; 200
    2a0e:	90 e0       	ldi	r25, 0x00	; 0
    2a10:	9c 83       	std	Y+4, r25	; 0x04
    2a12:	8b 83       	std	Y+3, r24	; 0x03
    2a14:	8b 81       	ldd	r24, Y+3	; 0x03
    2a16:	9c 81       	ldd	r25, Y+4	; 0x04
    2a18:	01 97       	sbiw	r24, 0x01	; 1
    2a1a:	f1 f7       	brne	.-4      	; 0x2a18 <HLCD8_voidSendData+0xdc>
    2a1c:	9c 83       	std	Y+4, r25	; 0x04
    2a1e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a20:	8d 81       	ldd	r24, Y+5	; 0x05
    2a22:	9e 81       	ldd	r25, Y+6	; 0x06
    2a24:	01 97       	sbiw	r24, 0x01	; 1
    2a26:	9e 83       	std	Y+6, r25	; 0x06
    2a28:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a2a:	8d 81       	ldd	r24, Y+5	; 0x05
    2a2c:	9e 81       	ldd	r25, Y+6	; 0x06
    2a2e:	00 97       	sbiw	r24, 0x00	; 0
    2a30:	69 f7       	brne	.-38     	; 0x2a0c <HLCD8_voidSendData+0xd0>
    2a32:	14 c0       	rjmp	.+40     	; 0x2a5c <HLCD8_voidSendData+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a34:	6f 81       	ldd	r22, Y+7	; 0x07
    2a36:	78 85       	ldd	r23, Y+8	; 0x08
    2a38:	89 85       	ldd	r24, Y+9	; 0x09
    2a3a:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a3c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a40:	dc 01       	movw	r26, r24
    2a42:	cb 01       	movw	r24, r22
    2a44:	9e 83       	std	Y+6, r25	; 0x06
    2a46:	8d 83       	std	Y+5, r24	; 0x05
    2a48:	8d 81       	ldd	r24, Y+5	; 0x05
    2a4a:	9e 81       	ldd	r25, Y+6	; 0x06
    2a4c:	9a 83       	std	Y+2, r25	; 0x02
    2a4e:	89 83       	std	Y+1, r24	; 0x01
    2a50:	89 81       	ldd	r24, Y+1	; 0x01
    2a52:	9a 81       	ldd	r25, Y+2	; 0x02
    2a54:	01 97       	sbiw	r24, 0x01	; 1
    2a56:	f1 f7       	brne	.-4      	; 0x2a54 <HLCD8_voidSendData+0x118>
    2a58:	9a 83       	std	Y+2, r25	; 0x02
    2a5a:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(2);
    MDIO_voidSetPinValue(LCD_CONTROL_PORT,E_PIN,PIN_LOW);
    2a5c:	82 e0       	ldi	r24, 0x02	; 2
    2a5e:	62 e0       	ldi	r22, 0x02	; 2
    2a60:	40 e0       	ldi	r20, 0x00	; 0
    2a62:	0e 94 27 07 	call	0xe4e	; 0xe4e <MDIO_voidSetPinValue>
}
    2a66:	2f 96       	adiw	r28, 0x0f	; 15
    2a68:	0f b6       	in	r0, 0x3f	; 63
    2a6a:	f8 94       	cli
    2a6c:	de bf       	out	0x3e, r29	; 62
    2a6e:	0f be       	out	0x3f, r0	; 63
    2a70:	cd bf       	out	0x3d, r28	; 61
    2a72:	cf 91       	pop	r28
    2a74:	df 91       	pop	r29
    2a76:	08 95       	ret

00002a78 <HLCD8_voidInit>:


void HLCD8_voidInit()
{
    2a78:	df 93       	push	r29
    2a7a:	cf 93       	push	r28
    2a7c:	cd b7       	in	r28, 0x3d	; 61
    2a7e:	de b7       	in	r29, 0x3e	; 62
    2a80:	e8 97       	sbiw	r28, 0x38	; 56
    2a82:	0f b6       	in	r0, 0x3f	; 63
    2a84:	f8 94       	cli
    2a86:	de bf       	out	0x3e, r29	; 62
    2a88:	0f be       	out	0x3f, r0	; 63
    2a8a:	cd bf       	out	0x3d, r28	; 61
    2a8c:	80 e0       	ldi	r24, 0x00	; 0
    2a8e:	90 e0       	ldi	r25, 0x00	; 0
    2a90:	a0 ef       	ldi	r26, 0xF0	; 240
    2a92:	b1 e4       	ldi	r27, 0x41	; 65
    2a94:	8d ab       	std	Y+53, r24	; 0x35
    2a96:	9e ab       	std	Y+54, r25	; 0x36
    2a98:	af ab       	std	Y+55, r26	; 0x37
    2a9a:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a9c:	6d a9       	ldd	r22, Y+53	; 0x35
    2a9e:	7e a9       	ldd	r23, Y+54	; 0x36
    2aa0:	8f a9       	ldd	r24, Y+55	; 0x37
    2aa2:	98 ad       	ldd	r25, Y+56	; 0x38
    2aa4:	20 e0       	ldi	r18, 0x00	; 0
    2aa6:	30 e0       	ldi	r19, 0x00	; 0
    2aa8:	4a ef       	ldi	r20, 0xFA	; 250
    2aaa:	54 e4       	ldi	r21, 0x44	; 68
    2aac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ab0:	dc 01       	movw	r26, r24
    2ab2:	cb 01       	movw	r24, r22
    2ab4:	89 ab       	std	Y+49, r24	; 0x31
    2ab6:	9a ab       	std	Y+50, r25	; 0x32
    2ab8:	ab ab       	std	Y+51, r26	; 0x33
    2aba:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2abc:	69 a9       	ldd	r22, Y+49	; 0x31
    2abe:	7a a9       	ldd	r23, Y+50	; 0x32
    2ac0:	8b a9       	ldd	r24, Y+51	; 0x33
    2ac2:	9c a9       	ldd	r25, Y+52	; 0x34
    2ac4:	20 e0       	ldi	r18, 0x00	; 0
    2ac6:	30 e0       	ldi	r19, 0x00	; 0
    2ac8:	40 e8       	ldi	r20, 0x80	; 128
    2aca:	5f e3       	ldi	r21, 0x3F	; 63
    2acc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2ad0:	88 23       	and	r24, r24
    2ad2:	2c f4       	brge	.+10     	; 0x2ade <HLCD8_voidInit+0x66>
		__ticks = 1;
    2ad4:	81 e0       	ldi	r24, 0x01	; 1
    2ad6:	90 e0       	ldi	r25, 0x00	; 0
    2ad8:	98 ab       	std	Y+48, r25	; 0x30
    2ada:	8f a7       	std	Y+47, r24	; 0x2f
    2adc:	3f c0       	rjmp	.+126    	; 0x2b5c <HLCD8_voidInit+0xe4>
	else if (__tmp > 65535)
    2ade:	69 a9       	ldd	r22, Y+49	; 0x31
    2ae0:	7a a9       	ldd	r23, Y+50	; 0x32
    2ae2:	8b a9       	ldd	r24, Y+51	; 0x33
    2ae4:	9c a9       	ldd	r25, Y+52	; 0x34
    2ae6:	20 e0       	ldi	r18, 0x00	; 0
    2ae8:	3f ef       	ldi	r19, 0xFF	; 255
    2aea:	4f e7       	ldi	r20, 0x7F	; 127
    2aec:	57 e4       	ldi	r21, 0x47	; 71
    2aee:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2af2:	18 16       	cp	r1, r24
    2af4:	4c f5       	brge	.+82     	; 0x2b48 <HLCD8_voidInit+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2af6:	6d a9       	ldd	r22, Y+53	; 0x35
    2af8:	7e a9       	ldd	r23, Y+54	; 0x36
    2afa:	8f a9       	ldd	r24, Y+55	; 0x37
    2afc:	98 ad       	ldd	r25, Y+56	; 0x38
    2afe:	20 e0       	ldi	r18, 0x00	; 0
    2b00:	30 e0       	ldi	r19, 0x00	; 0
    2b02:	40 e2       	ldi	r20, 0x20	; 32
    2b04:	51 e4       	ldi	r21, 0x41	; 65
    2b06:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b0a:	dc 01       	movw	r26, r24
    2b0c:	cb 01       	movw	r24, r22
    2b0e:	bc 01       	movw	r22, r24
    2b10:	cd 01       	movw	r24, r26
    2b12:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b16:	dc 01       	movw	r26, r24
    2b18:	cb 01       	movw	r24, r22
    2b1a:	98 ab       	std	Y+48, r25	; 0x30
    2b1c:	8f a7       	std	Y+47, r24	; 0x2f
    2b1e:	0f c0       	rjmp	.+30     	; 0x2b3e <HLCD8_voidInit+0xc6>
    2b20:	88 ec       	ldi	r24, 0xC8	; 200
    2b22:	90 e0       	ldi	r25, 0x00	; 0
    2b24:	9e a7       	std	Y+46, r25	; 0x2e
    2b26:	8d a7       	std	Y+45, r24	; 0x2d
    2b28:	8d a5       	ldd	r24, Y+45	; 0x2d
    2b2a:	9e a5       	ldd	r25, Y+46	; 0x2e
    2b2c:	01 97       	sbiw	r24, 0x01	; 1
    2b2e:	f1 f7       	brne	.-4      	; 0x2b2c <HLCD8_voidInit+0xb4>
    2b30:	9e a7       	std	Y+46, r25	; 0x2e
    2b32:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b34:	8f a5       	ldd	r24, Y+47	; 0x2f
    2b36:	98 a9       	ldd	r25, Y+48	; 0x30
    2b38:	01 97       	sbiw	r24, 0x01	; 1
    2b3a:	98 ab       	std	Y+48, r25	; 0x30
    2b3c:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b3e:	8f a5       	ldd	r24, Y+47	; 0x2f
    2b40:	98 a9       	ldd	r25, Y+48	; 0x30
    2b42:	00 97       	sbiw	r24, 0x00	; 0
    2b44:	69 f7       	brne	.-38     	; 0x2b20 <HLCD8_voidInit+0xa8>
    2b46:	14 c0       	rjmp	.+40     	; 0x2b70 <HLCD8_voidInit+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b48:	69 a9       	ldd	r22, Y+49	; 0x31
    2b4a:	7a a9       	ldd	r23, Y+50	; 0x32
    2b4c:	8b a9       	ldd	r24, Y+51	; 0x33
    2b4e:	9c a9       	ldd	r25, Y+52	; 0x34
    2b50:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b54:	dc 01       	movw	r26, r24
    2b56:	cb 01       	movw	r24, r22
    2b58:	98 ab       	std	Y+48, r25	; 0x30
    2b5a:	8f a7       	std	Y+47, r24	; 0x2f
    2b5c:	8f a5       	ldd	r24, Y+47	; 0x2f
    2b5e:	98 a9       	ldd	r25, Y+48	; 0x30
    2b60:	9c a7       	std	Y+44, r25	; 0x2c
    2b62:	8b a7       	std	Y+43, r24	; 0x2b
    2b64:	8b a5       	ldd	r24, Y+43	; 0x2b
    2b66:	9c a5       	ldd	r25, Y+44	; 0x2c
    2b68:	01 97       	sbiw	r24, 0x01	; 1
    2b6a:	f1 f7       	brne	.-4      	; 0x2b68 <HLCD8_voidInit+0xf0>
    2b6c:	9c a7       	std	Y+44, r25	; 0x2c
    2b6e:	8b a7       	std	Y+43, r24	; 0x2b
    _delay_ms(30);
    HLCD8_voidSendCommand(FUNCTION_SET);
    2b70:	88 e3       	ldi	r24, 0x38	; 56
    2b72:	0e 94 00 14 	call	0x2800	; 0x2800 <HLCD8_voidSendCommand>
    2b76:	80 e0       	ldi	r24, 0x00	; 0
    2b78:	90 e0       	ldi	r25, 0x00	; 0
    2b7a:	a0 e8       	ldi	r26, 0x80	; 128
    2b7c:	bf e3       	ldi	r27, 0x3F	; 63
    2b7e:	8f a3       	std	Y+39, r24	; 0x27
    2b80:	98 a7       	std	Y+40, r25	; 0x28
    2b82:	a9 a7       	std	Y+41, r26	; 0x29
    2b84:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b86:	6f a1       	ldd	r22, Y+39	; 0x27
    2b88:	78 a5       	ldd	r23, Y+40	; 0x28
    2b8a:	89 a5       	ldd	r24, Y+41	; 0x29
    2b8c:	9a a5       	ldd	r25, Y+42	; 0x2a
    2b8e:	20 e0       	ldi	r18, 0x00	; 0
    2b90:	30 e0       	ldi	r19, 0x00	; 0
    2b92:	4a ef       	ldi	r20, 0xFA	; 250
    2b94:	54 e4       	ldi	r21, 0x44	; 68
    2b96:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b9a:	dc 01       	movw	r26, r24
    2b9c:	cb 01       	movw	r24, r22
    2b9e:	8b a3       	std	Y+35, r24	; 0x23
    2ba0:	9c a3       	std	Y+36, r25	; 0x24
    2ba2:	ad a3       	std	Y+37, r26	; 0x25
    2ba4:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2ba6:	6b a1       	ldd	r22, Y+35	; 0x23
    2ba8:	7c a1       	ldd	r23, Y+36	; 0x24
    2baa:	8d a1       	ldd	r24, Y+37	; 0x25
    2bac:	9e a1       	ldd	r25, Y+38	; 0x26
    2bae:	20 e0       	ldi	r18, 0x00	; 0
    2bb0:	30 e0       	ldi	r19, 0x00	; 0
    2bb2:	40 e8       	ldi	r20, 0x80	; 128
    2bb4:	5f e3       	ldi	r21, 0x3F	; 63
    2bb6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2bba:	88 23       	and	r24, r24
    2bbc:	2c f4       	brge	.+10     	; 0x2bc8 <HLCD8_voidInit+0x150>
		__ticks = 1;
    2bbe:	81 e0       	ldi	r24, 0x01	; 1
    2bc0:	90 e0       	ldi	r25, 0x00	; 0
    2bc2:	9a a3       	std	Y+34, r25	; 0x22
    2bc4:	89 a3       	std	Y+33, r24	; 0x21
    2bc6:	3f c0       	rjmp	.+126    	; 0x2c46 <HLCD8_voidInit+0x1ce>
	else if (__tmp > 65535)
    2bc8:	6b a1       	ldd	r22, Y+35	; 0x23
    2bca:	7c a1       	ldd	r23, Y+36	; 0x24
    2bcc:	8d a1       	ldd	r24, Y+37	; 0x25
    2bce:	9e a1       	ldd	r25, Y+38	; 0x26
    2bd0:	20 e0       	ldi	r18, 0x00	; 0
    2bd2:	3f ef       	ldi	r19, 0xFF	; 255
    2bd4:	4f e7       	ldi	r20, 0x7F	; 127
    2bd6:	57 e4       	ldi	r21, 0x47	; 71
    2bd8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2bdc:	18 16       	cp	r1, r24
    2bde:	4c f5       	brge	.+82     	; 0x2c32 <HLCD8_voidInit+0x1ba>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2be0:	6f a1       	ldd	r22, Y+39	; 0x27
    2be2:	78 a5       	ldd	r23, Y+40	; 0x28
    2be4:	89 a5       	ldd	r24, Y+41	; 0x29
    2be6:	9a a5       	ldd	r25, Y+42	; 0x2a
    2be8:	20 e0       	ldi	r18, 0x00	; 0
    2bea:	30 e0       	ldi	r19, 0x00	; 0
    2bec:	40 e2       	ldi	r20, 0x20	; 32
    2bee:	51 e4       	ldi	r21, 0x41	; 65
    2bf0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2bf4:	dc 01       	movw	r26, r24
    2bf6:	cb 01       	movw	r24, r22
    2bf8:	bc 01       	movw	r22, r24
    2bfa:	cd 01       	movw	r24, r26
    2bfc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c00:	dc 01       	movw	r26, r24
    2c02:	cb 01       	movw	r24, r22
    2c04:	9a a3       	std	Y+34, r25	; 0x22
    2c06:	89 a3       	std	Y+33, r24	; 0x21
    2c08:	0f c0       	rjmp	.+30     	; 0x2c28 <HLCD8_voidInit+0x1b0>
    2c0a:	88 ec       	ldi	r24, 0xC8	; 200
    2c0c:	90 e0       	ldi	r25, 0x00	; 0
    2c0e:	98 a3       	std	Y+32, r25	; 0x20
    2c10:	8f 8f       	std	Y+31, r24	; 0x1f
    2c12:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2c14:	98 a1       	ldd	r25, Y+32	; 0x20
    2c16:	01 97       	sbiw	r24, 0x01	; 1
    2c18:	f1 f7       	brne	.-4      	; 0x2c16 <HLCD8_voidInit+0x19e>
    2c1a:	98 a3       	std	Y+32, r25	; 0x20
    2c1c:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c1e:	89 a1       	ldd	r24, Y+33	; 0x21
    2c20:	9a a1       	ldd	r25, Y+34	; 0x22
    2c22:	01 97       	sbiw	r24, 0x01	; 1
    2c24:	9a a3       	std	Y+34, r25	; 0x22
    2c26:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c28:	89 a1       	ldd	r24, Y+33	; 0x21
    2c2a:	9a a1       	ldd	r25, Y+34	; 0x22
    2c2c:	00 97       	sbiw	r24, 0x00	; 0
    2c2e:	69 f7       	brne	.-38     	; 0x2c0a <HLCD8_voidInit+0x192>
    2c30:	14 c0       	rjmp	.+40     	; 0x2c5a <HLCD8_voidInit+0x1e2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c32:	6b a1       	ldd	r22, Y+35	; 0x23
    2c34:	7c a1       	ldd	r23, Y+36	; 0x24
    2c36:	8d a1       	ldd	r24, Y+37	; 0x25
    2c38:	9e a1       	ldd	r25, Y+38	; 0x26
    2c3a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c3e:	dc 01       	movw	r26, r24
    2c40:	cb 01       	movw	r24, r22
    2c42:	9a a3       	std	Y+34, r25	; 0x22
    2c44:	89 a3       	std	Y+33, r24	; 0x21
    2c46:	89 a1       	ldd	r24, Y+33	; 0x21
    2c48:	9a a1       	ldd	r25, Y+34	; 0x22
    2c4a:	9e 8f       	std	Y+30, r25	; 0x1e
    2c4c:	8d 8f       	std	Y+29, r24	; 0x1d
    2c4e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2c50:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2c52:	01 97       	sbiw	r24, 0x01	; 1
    2c54:	f1 f7       	brne	.-4      	; 0x2c52 <HLCD8_voidInit+0x1da>
    2c56:	9e 8f       	std	Y+30, r25	; 0x1e
    2c58:	8d 8f       	std	Y+29, r24	; 0x1d
    _delay_ms(1);
    HLCD8_voidSendCommand(ON_OFF_CONTROL);
    2c5a:	8c e0       	ldi	r24, 0x0C	; 12
    2c5c:	0e 94 00 14 	call	0x2800	; 0x2800 <HLCD8_voidSendCommand>
    2c60:	80 e0       	ldi	r24, 0x00	; 0
    2c62:	90 e0       	ldi	r25, 0x00	; 0
    2c64:	a0 e8       	ldi	r26, 0x80	; 128
    2c66:	bf e3       	ldi	r27, 0x3F	; 63
    2c68:	89 8f       	std	Y+25, r24	; 0x19
    2c6a:	9a 8f       	std	Y+26, r25	; 0x1a
    2c6c:	ab 8f       	std	Y+27, r26	; 0x1b
    2c6e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c70:	69 8d       	ldd	r22, Y+25	; 0x19
    2c72:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2c74:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2c76:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2c78:	20 e0       	ldi	r18, 0x00	; 0
    2c7a:	30 e0       	ldi	r19, 0x00	; 0
    2c7c:	4a ef       	ldi	r20, 0xFA	; 250
    2c7e:	54 e4       	ldi	r21, 0x44	; 68
    2c80:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c84:	dc 01       	movw	r26, r24
    2c86:	cb 01       	movw	r24, r22
    2c88:	8d 8b       	std	Y+21, r24	; 0x15
    2c8a:	9e 8b       	std	Y+22, r25	; 0x16
    2c8c:	af 8b       	std	Y+23, r26	; 0x17
    2c8e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2c90:	6d 89       	ldd	r22, Y+21	; 0x15
    2c92:	7e 89       	ldd	r23, Y+22	; 0x16
    2c94:	8f 89       	ldd	r24, Y+23	; 0x17
    2c96:	98 8d       	ldd	r25, Y+24	; 0x18
    2c98:	20 e0       	ldi	r18, 0x00	; 0
    2c9a:	30 e0       	ldi	r19, 0x00	; 0
    2c9c:	40 e8       	ldi	r20, 0x80	; 128
    2c9e:	5f e3       	ldi	r21, 0x3F	; 63
    2ca0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2ca4:	88 23       	and	r24, r24
    2ca6:	2c f4       	brge	.+10     	; 0x2cb2 <HLCD8_voidInit+0x23a>
		__ticks = 1;
    2ca8:	81 e0       	ldi	r24, 0x01	; 1
    2caa:	90 e0       	ldi	r25, 0x00	; 0
    2cac:	9c 8b       	std	Y+20, r25	; 0x14
    2cae:	8b 8b       	std	Y+19, r24	; 0x13
    2cb0:	3f c0       	rjmp	.+126    	; 0x2d30 <HLCD8_voidInit+0x2b8>
	else if (__tmp > 65535)
    2cb2:	6d 89       	ldd	r22, Y+21	; 0x15
    2cb4:	7e 89       	ldd	r23, Y+22	; 0x16
    2cb6:	8f 89       	ldd	r24, Y+23	; 0x17
    2cb8:	98 8d       	ldd	r25, Y+24	; 0x18
    2cba:	20 e0       	ldi	r18, 0x00	; 0
    2cbc:	3f ef       	ldi	r19, 0xFF	; 255
    2cbe:	4f e7       	ldi	r20, 0x7F	; 127
    2cc0:	57 e4       	ldi	r21, 0x47	; 71
    2cc2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2cc6:	18 16       	cp	r1, r24
    2cc8:	4c f5       	brge	.+82     	; 0x2d1c <HLCD8_voidInit+0x2a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2cca:	69 8d       	ldd	r22, Y+25	; 0x19
    2ccc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2cce:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2cd0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2cd2:	20 e0       	ldi	r18, 0x00	; 0
    2cd4:	30 e0       	ldi	r19, 0x00	; 0
    2cd6:	40 e2       	ldi	r20, 0x20	; 32
    2cd8:	51 e4       	ldi	r21, 0x41	; 65
    2cda:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2cde:	dc 01       	movw	r26, r24
    2ce0:	cb 01       	movw	r24, r22
    2ce2:	bc 01       	movw	r22, r24
    2ce4:	cd 01       	movw	r24, r26
    2ce6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2cea:	dc 01       	movw	r26, r24
    2cec:	cb 01       	movw	r24, r22
    2cee:	9c 8b       	std	Y+20, r25	; 0x14
    2cf0:	8b 8b       	std	Y+19, r24	; 0x13
    2cf2:	0f c0       	rjmp	.+30     	; 0x2d12 <HLCD8_voidInit+0x29a>
    2cf4:	88 ec       	ldi	r24, 0xC8	; 200
    2cf6:	90 e0       	ldi	r25, 0x00	; 0
    2cf8:	9a 8b       	std	Y+18, r25	; 0x12
    2cfa:	89 8b       	std	Y+17, r24	; 0x11
    2cfc:	89 89       	ldd	r24, Y+17	; 0x11
    2cfe:	9a 89       	ldd	r25, Y+18	; 0x12
    2d00:	01 97       	sbiw	r24, 0x01	; 1
    2d02:	f1 f7       	brne	.-4      	; 0x2d00 <HLCD8_voidInit+0x288>
    2d04:	9a 8b       	std	Y+18, r25	; 0x12
    2d06:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d08:	8b 89       	ldd	r24, Y+19	; 0x13
    2d0a:	9c 89       	ldd	r25, Y+20	; 0x14
    2d0c:	01 97       	sbiw	r24, 0x01	; 1
    2d0e:	9c 8b       	std	Y+20, r25	; 0x14
    2d10:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d12:	8b 89       	ldd	r24, Y+19	; 0x13
    2d14:	9c 89       	ldd	r25, Y+20	; 0x14
    2d16:	00 97       	sbiw	r24, 0x00	; 0
    2d18:	69 f7       	brne	.-38     	; 0x2cf4 <HLCD8_voidInit+0x27c>
    2d1a:	14 c0       	rjmp	.+40     	; 0x2d44 <HLCD8_voidInit+0x2cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d1c:	6d 89       	ldd	r22, Y+21	; 0x15
    2d1e:	7e 89       	ldd	r23, Y+22	; 0x16
    2d20:	8f 89       	ldd	r24, Y+23	; 0x17
    2d22:	98 8d       	ldd	r25, Y+24	; 0x18
    2d24:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d28:	dc 01       	movw	r26, r24
    2d2a:	cb 01       	movw	r24, r22
    2d2c:	9c 8b       	std	Y+20, r25	; 0x14
    2d2e:	8b 8b       	std	Y+19, r24	; 0x13
    2d30:	8b 89       	ldd	r24, Y+19	; 0x13
    2d32:	9c 89       	ldd	r25, Y+20	; 0x14
    2d34:	98 8b       	std	Y+16, r25	; 0x10
    2d36:	8f 87       	std	Y+15, r24	; 0x0f
    2d38:	8f 85       	ldd	r24, Y+15	; 0x0f
    2d3a:	98 89       	ldd	r25, Y+16	; 0x10
    2d3c:	01 97       	sbiw	r24, 0x01	; 1
    2d3e:	f1 f7       	brne	.-4      	; 0x2d3c <HLCD8_voidInit+0x2c4>
    2d40:	98 8b       	std	Y+16, r25	; 0x10
    2d42:	8f 87       	std	Y+15, r24	; 0x0f
    _delay_ms(1);
    HLCD8_voidSendCommand(DISPLAY_CLEAR);
    2d44:	81 e0       	ldi	r24, 0x01	; 1
    2d46:	0e 94 00 14 	call	0x2800	; 0x2800 <HLCD8_voidSendCommand>
    2d4a:	80 e0       	ldi	r24, 0x00	; 0
    2d4c:	90 e0       	ldi	r25, 0x00	; 0
    2d4e:	a0 e0       	ldi	r26, 0x00	; 0
    2d50:	b0 e4       	ldi	r27, 0x40	; 64
    2d52:	8b 87       	std	Y+11, r24	; 0x0b
    2d54:	9c 87       	std	Y+12, r25	; 0x0c
    2d56:	ad 87       	std	Y+13, r26	; 0x0d
    2d58:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2d5a:	6b 85       	ldd	r22, Y+11	; 0x0b
    2d5c:	7c 85       	ldd	r23, Y+12	; 0x0c
    2d5e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2d60:	9e 85       	ldd	r25, Y+14	; 0x0e
    2d62:	20 e0       	ldi	r18, 0x00	; 0
    2d64:	30 e0       	ldi	r19, 0x00	; 0
    2d66:	4a ef       	ldi	r20, 0xFA	; 250
    2d68:	54 e4       	ldi	r21, 0x44	; 68
    2d6a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d6e:	dc 01       	movw	r26, r24
    2d70:	cb 01       	movw	r24, r22
    2d72:	8f 83       	std	Y+7, r24	; 0x07
    2d74:	98 87       	std	Y+8, r25	; 0x08
    2d76:	a9 87       	std	Y+9, r26	; 0x09
    2d78:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2d7a:	6f 81       	ldd	r22, Y+7	; 0x07
    2d7c:	78 85       	ldd	r23, Y+8	; 0x08
    2d7e:	89 85       	ldd	r24, Y+9	; 0x09
    2d80:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d82:	20 e0       	ldi	r18, 0x00	; 0
    2d84:	30 e0       	ldi	r19, 0x00	; 0
    2d86:	40 e8       	ldi	r20, 0x80	; 128
    2d88:	5f e3       	ldi	r21, 0x3F	; 63
    2d8a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2d8e:	88 23       	and	r24, r24
    2d90:	2c f4       	brge	.+10     	; 0x2d9c <HLCD8_voidInit+0x324>
		__ticks = 1;
    2d92:	81 e0       	ldi	r24, 0x01	; 1
    2d94:	90 e0       	ldi	r25, 0x00	; 0
    2d96:	9e 83       	std	Y+6, r25	; 0x06
    2d98:	8d 83       	std	Y+5, r24	; 0x05
    2d9a:	3f c0       	rjmp	.+126    	; 0x2e1a <HLCD8_voidInit+0x3a2>
	else if (__tmp > 65535)
    2d9c:	6f 81       	ldd	r22, Y+7	; 0x07
    2d9e:	78 85       	ldd	r23, Y+8	; 0x08
    2da0:	89 85       	ldd	r24, Y+9	; 0x09
    2da2:	9a 85       	ldd	r25, Y+10	; 0x0a
    2da4:	20 e0       	ldi	r18, 0x00	; 0
    2da6:	3f ef       	ldi	r19, 0xFF	; 255
    2da8:	4f e7       	ldi	r20, 0x7F	; 127
    2daa:	57 e4       	ldi	r21, 0x47	; 71
    2dac:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2db0:	18 16       	cp	r1, r24
    2db2:	4c f5       	brge	.+82     	; 0x2e06 <HLCD8_voidInit+0x38e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2db4:	6b 85       	ldd	r22, Y+11	; 0x0b
    2db6:	7c 85       	ldd	r23, Y+12	; 0x0c
    2db8:	8d 85       	ldd	r24, Y+13	; 0x0d
    2dba:	9e 85       	ldd	r25, Y+14	; 0x0e
    2dbc:	20 e0       	ldi	r18, 0x00	; 0
    2dbe:	30 e0       	ldi	r19, 0x00	; 0
    2dc0:	40 e2       	ldi	r20, 0x20	; 32
    2dc2:	51 e4       	ldi	r21, 0x41	; 65
    2dc4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2dc8:	dc 01       	movw	r26, r24
    2dca:	cb 01       	movw	r24, r22
    2dcc:	bc 01       	movw	r22, r24
    2dce:	cd 01       	movw	r24, r26
    2dd0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2dd4:	dc 01       	movw	r26, r24
    2dd6:	cb 01       	movw	r24, r22
    2dd8:	9e 83       	std	Y+6, r25	; 0x06
    2dda:	8d 83       	std	Y+5, r24	; 0x05
    2ddc:	0f c0       	rjmp	.+30     	; 0x2dfc <HLCD8_voidInit+0x384>
    2dde:	88 ec       	ldi	r24, 0xC8	; 200
    2de0:	90 e0       	ldi	r25, 0x00	; 0
    2de2:	9c 83       	std	Y+4, r25	; 0x04
    2de4:	8b 83       	std	Y+3, r24	; 0x03
    2de6:	8b 81       	ldd	r24, Y+3	; 0x03
    2de8:	9c 81       	ldd	r25, Y+4	; 0x04
    2dea:	01 97       	sbiw	r24, 0x01	; 1
    2dec:	f1 f7       	brne	.-4      	; 0x2dea <HLCD8_voidInit+0x372>
    2dee:	9c 83       	std	Y+4, r25	; 0x04
    2df0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2df2:	8d 81       	ldd	r24, Y+5	; 0x05
    2df4:	9e 81       	ldd	r25, Y+6	; 0x06
    2df6:	01 97       	sbiw	r24, 0x01	; 1
    2df8:	9e 83       	std	Y+6, r25	; 0x06
    2dfa:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2dfc:	8d 81       	ldd	r24, Y+5	; 0x05
    2dfe:	9e 81       	ldd	r25, Y+6	; 0x06
    2e00:	00 97       	sbiw	r24, 0x00	; 0
    2e02:	69 f7       	brne	.-38     	; 0x2dde <HLCD8_voidInit+0x366>
    2e04:	14 c0       	rjmp	.+40     	; 0x2e2e <HLCD8_voidInit+0x3b6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2e06:	6f 81       	ldd	r22, Y+7	; 0x07
    2e08:	78 85       	ldd	r23, Y+8	; 0x08
    2e0a:	89 85       	ldd	r24, Y+9	; 0x09
    2e0c:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e0e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e12:	dc 01       	movw	r26, r24
    2e14:	cb 01       	movw	r24, r22
    2e16:	9e 83       	std	Y+6, r25	; 0x06
    2e18:	8d 83       	std	Y+5, r24	; 0x05
    2e1a:	8d 81       	ldd	r24, Y+5	; 0x05
    2e1c:	9e 81       	ldd	r25, Y+6	; 0x06
    2e1e:	9a 83       	std	Y+2, r25	; 0x02
    2e20:	89 83       	std	Y+1, r24	; 0x01
    2e22:	89 81       	ldd	r24, Y+1	; 0x01
    2e24:	9a 81       	ldd	r25, Y+2	; 0x02
    2e26:	01 97       	sbiw	r24, 0x01	; 1
    2e28:	f1 f7       	brne	.-4      	; 0x2e26 <HLCD8_voidInit+0x3ae>
    2e2a:	9a 83       	std	Y+2, r25	; 0x02
    2e2c:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(2);
    HLCD8_voidSendCommand(ENTRY_MODE_SET);
    2e2e:	86 e0       	ldi	r24, 0x06	; 6
    2e30:	0e 94 00 14 	call	0x2800	; 0x2800 <HLCD8_voidSendCommand>
}
    2e34:	e8 96       	adiw	r28, 0x38	; 56
    2e36:	0f b6       	in	r0, 0x3f	; 63
    2e38:	f8 94       	cli
    2e3a:	de bf       	out	0x3e, r29	; 62
    2e3c:	0f be       	out	0x3f, r0	; 63
    2e3e:	cd bf       	out	0x3d, r28	; 61
    2e40:	cf 91       	pop	r28
    2e42:	df 91       	pop	r29
    2e44:	08 95       	ret

00002e46 <HLCD8_voidClearDisplay>:

void HLCD8_voidClearDisplay(void)
{
    2e46:	df 93       	push	r29
    2e48:	cf 93       	push	r28
    2e4a:	cd b7       	in	r28, 0x3d	; 61
    2e4c:	de b7       	in	r29, 0x3e	; 62
    2e4e:	2e 97       	sbiw	r28, 0x0e	; 14
    2e50:	0f b6       	in	r0, 0x3f	; 63
    2e52:	f8 94       	cli
    2e54:	de bf       	out	0x3e, r29	; 62
    2e56:	0f be       	out	0x3f, r0	; 63
    2e58:	cd bf       	out	0x3d, r28	; 61
    HLCD8_voidSendCommand(DISPLAY_CLEAR);
    2e5a:	81 e0       	ldi	r24, 0x01	; 1
    2e5c:	0e 94 00 14 	call	0x2800	; 0x2800 <HLCD8_voidSendCommand>
    2e60:	80 e0       	ldi	r24, 0x00	; 0
    2e62:	90 e0       	ldi	r25, 0x00	; 0
    2e64:	a0 e0       	ldi	r26, 0x00	; 0
    2e66:	b0 e4       	ldi	r27, 0x40	; 64
    2e68:	8b 87       	std	Y+11, r24	; 0x0b
    2e6a:	9c 87       	std	Y+12, r25	; 0x0c
    2e6c:	ad 87       	std	Y+13, r26	; 0x0d
    2e6e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2e70:	6b 85       	ldd	r22, Y+11	; 0x0b
    2e72:	7c 85       	ldd	r23, Y+12	; 0x0c
    2e74:	8d 85       	ldd	r24, Y+13	; 0x0d
    2e76:	9e 85       	ldd	r25, Y+14	; 0x0e
    2e78:	20 e0       	ldi	r18, 0x00	; 0
    2e7a:	30 e0       	ldi	r19, 0x00	; 0
    2e7c:	4a ef       	ldi	r20, 0xFA	; 250
    2e7e:	54 e4       	ldi	r21, 0x44	; 68
    2e80:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e84:	dc 01       	movw	r26, r24
    2e86:	cb 01       	movw	r24, r22
    2e88:	8f 83       	std	Y+7, r24	; 0x07
    2e8a:	98 87       	std	Y+8, r25	; 0x08
    2e8c:	a9 87       	std	Y+9, r26	; 0x09
    2e8e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2e90:	6f 81       	ldd	r22, Y+7	; 0x07
    2e92:	78 85       	ldd	r23, Y+8	; 0x08
    2e94:	89 85       	ldd	r24, Y+9	; 0x09
    2e96:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e98:	20 e0       	ldi	r18, 0x00	; 0
    2e9a:	30 e0       	ldi	r19, 0x00	; 0
    2e9c:	40 e8       	ldi	r20, 0x80	; 128
    2e9e:	5f e3       	ldi	r21, 0x3F	; 63
    2ea0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2ea4:	88 23       	and	r24, r24
    2ea6:	2c f4       	brge	.+10     	; 0x2eb2 <HLCD8_voidClearDisplay+0x6c>
		__ticks = 1;
    2ea8:	81 e0       	ldi	r24, 0x01	; 1
    2eaa:	90 e0       	ldi	r25, 0x00	; 0
    2eac:	9e 83       	std	Y+6, r25	; 0x06
    2eae:	8d 83       	std	Y+5, r24	; 0x05
    2eb0:	3f c0       	rjmp	.+126    	; 0x2f30 <HLCD8_voidClearDisplay+0xea>
	else if (__tmp > 65535)
    2eb2:	6f 81       	ldd	r22, Y+7	; 0x07
    2eb4:	78 85       	ldd	r23, Y+8	; 0x08
    2eb6:	89 85       	ldd	r24, Y+9	; 0x09
    2eb8:	9a 85       	ldd	r25, Y+10	; 0x0a
    2eba:	20 e0       	ldi	r18, 0x00	; 0
    2ebc:	3f ef       	ldi	r19, 0xFF	; 255
    2ebe:	4f e7       	ldi	r20, 0x7F	; 127
    2ec0:	57 e4       	ldi	r21, 0x47	; 71
    2ec2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2ec6:	18 16       	cp	r1, r24
    2ec8:	4c f5       	brge	.+82     	; 0x2f1c <HLCD8_voidClearDisplay+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2eca:	6b 85       	ldd	r22, Y+11	; 0x0b
    2ecc:	7c 85       	ldd	r23, Y+12	; 0x0c
    2ece:	8d 85       	ldd	r24, Y+13	; 0x0d
    2ed0:	9e 85       	ldd	r25, Y+14	; 0x0e
    2ed2:	20 e0       	ldi	r18, 0x00	; 0
    2ed4:	30 e0       	ldi	r19, 0x00	; 0
    2ed6:	40 e2       	ldi	r20, 0x20	; 32
    2ed8:	51 e4       	ldi	r21, 0x41	; 65
    2eda:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ede:	dc 01       	movw	r26, r24
    2ee0:	cb 01       	movw	r24, r22
    2ee2:	bc 01       	movw	r22, r24
    2ee4:	cd 01       	movw	r24, r26
    2ee6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2eea:	dc 01       	movw	r26, r24
    2eec:	cb 01       	movw	r24, r22
    2eee:	9e 83       	std	Y+6, r25	; 0x06
    2ef0:	8d 83       	std	Y+5, r24	; 0x05
    2ef2:	0f c0       	rjmp	.+30     	; 0x2f12 <HLCD8_voidClearDisplay+0xcc>
    2ef4:	88 ec       	ldi	r24, 0xC8	; 200
    2ef6:	90 e0       	ldi	r25, 0x00	; 0
    2ef8:	9c 83       	std	Y+4, r25	; 0x04
    2efa:	8b 83       	std	Y+3, r24	; 0x03
    2efc:	8b 81       	ldd	r24, Y+3	; 0x03
    2efe:	9c 81       	ldd	r25, Y+4	; 0x04
    2f00:	01 97       	sbiw	r24, 0x01	; 1
    2f02:	f1 f7       	brne	.-4      	; 0x2f00 <HLCD8_voidClearDisplay+0xba>
    2f04:	9c 83       	std	Y+4, r25	; 0x04
    2f06:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2f08:	8d 81       	ldd	r24, Y+5	; 0x05
    2f0a:	9e 81       	ldd	r25, Y+6	; 0x06
    2f0c:	01 97       	sbiw	r24, 0x01	; 1
    2f0e:	9e 83       	std	Y+6, r25	; 0x06
    2f10:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2f12:	8d 81       	ldd	r24, Y+5	; 0x05
    2f14:	9e 81       	ldd	r25, Y+6	; 0x06
    2f16:	00 97       	sbiw	r24, 0x00	; 0
    2f18:	69 f7       	brne	.-38     	; 0x2ef4 <HLCD8_voidClearDisplay+0xae>
    2f1a:	14 c0       	rjmp	.+40     	; 0x2f44 <HLCD8_voidClearDisplay+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2f1c:	6f 81       	ldd	r22, Y+7	; 0x07
    2f1e:	78 85       	ldd	r23, Y+8	; 0x08
    2f20:	89 85       	ldd	r24, Y+9	; 0x09
    2f22:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f24:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f28:	dc 01       	movw	r26, r24
    2f2a:	cb 01       	movw	r24, r22
    2f2c:	9e 83       	std	Y+6, r25	; 0x06
    2f2e:	8d 83       	std	Y+5, r24	; 0x05
    2f30:	8d 81       	ldd	r24, Y+5	; 0x05
    2f32:	9e 81       	ldd	r25, Y+6	; 0x06
    2f34:	9a 83       	std	Y+2, r25	; 0x02
    2f36:	89 83       	std	Y+1, r24	; 0x01
    2f38:	89 81       	ldd	r24, Y+1	; 0x01
    2f3a:	9a 81       	ldd	r25, Y+2	; 0x02
    2f3c:	01 97       	sbiw	r24, 0x01	; 1
    2f3e:	f1 f7       	brne	.-4      	; 0x2f3c <HLCD8_voidClearDisplay+0xf6>
    2f40:	9a 83       	std	Y+2, r25	; 0x02
    2f42:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(2);
}
    2f44:	2e 96       	adiw	r28, 0x0e	; 14
    2f46:	0f b6       	in	r0, 0x3f	; 63
    2f48:	f8 94       	cli
    2f4a:	de bf       	out	0x3e, r29	; 62
    2f4c:	0f be       	out	0x3f, r0	; 63
    2f4e:	cd bf       	out	0x3d, r28	; 61
    2f50:	cf 91       	pop	r28
    2f52:	df 91       	pop	r29
    2f54:	08 95       	ret

00002f56 <HLCD8_voidSendString>:


void HLCD8_voidSendString(u8 * A_Pu8String)
{
    2f56:	df 93       	push	r29
    2f58:	cf 93       	push	r28
    2f5a:	00 d0       	rcall	.+0      	; 0x2f5c <HLCD8_voidSendString+0x6>
    2f5c:	0f 92       	push	r0
    2f5e:	cd b7       	in	r28, 0x3d	; 61
    2f60:	de b7       	in	r29, 0x3e	; 62
    2f62:	9b 83       	std	Y+3, r25	; 0x03
    2f64:	8a 83       	std	Y+2, r24	; 0x02
    u8 local_u8Couter=0;
    2f66:	19 82       	std	Y+1, r1	; 0x01
    2f68:	0e c0       	rjmp	.+28     	; 0x2f86 <HLCD8_voidSendString+0x30>
    while (A_Pu8String[local_u8Couter]!='\0')
    {
        HLCD8_voidSendData(A_Pu8String[local_u8Couter]);
    2f6a:	89 81       	ldd	r24, Y+1	; 0x01
    2f6c:	28 2f       	mov	r18, r24
    2f6e:	30 e0       	ldi	r19, 0x00	; 0
    2f70:	8a 81       	ldd	r24, Y+2	; 0x02
    2f72:	9b 81       	ldd	r25, Y+3	; 0x03
    2f74:	fc 01       	movw	r30, r24
    2f76:	e2 0f       	add	r30, r18
    2f78:	f3 1f       	adc	r31, r19
    2f7a:	80 81       	ld	r24, Z
    2f7c:	0e 94 9e 14 	call	0x293c	; 0x293c <HLCD8_voidSendData>
        local_u8Couter++;
    2f80:	89 81       	ldd	r24, Y+1	; 0x01
    2f82:	8f 5f       	subi	r24, 0xFF	; 255
    2f84:	89 83       	std	Y+1, r24	; 0x01


void HLCD8_voidSendString(u8 * A_Pu8String)
{
    u8 local_u8Couter=0;
    while (A_Pu8String[local_u8Couter]!='\0')
    2f86:	89 81       	ldd	r24, Y+1	; 0x01
    2f88:	28 2f       	mov	r18, r24
    2f8a:	30 e0       	ldi	r19, 0x00	; 0
    2f8c:	8a 81       	ldd	r24, Y+2	; 0x02
    2f8e:	9b 81       	ldd	r25, Y+3	; 0x03
    2f90:	fc 01       	movw	r30, r24
    2f92:	e2 0f       	add	r30, r18
    2f94:	f3 1f       	adc	r31, r19
    2f96:	80 81       	ld	r24, Z
    2f98:	88 23       	and	r24, r24
    2f9a:	39 f7       	brne	.-50     	; 0x2f6a <HLCD8_voidSendString+0x14>
    {
        HLCD8_voidSendData(A_Pu8String[local_u8Couter]);
        local_u8Couter++;
    }
    
}
    2f9c:	0f 90       	pop	r0
    2f9e:	0f 90       	pop	r0
    2fa0:	0f 90       	pop	r0
    2fa2:	cf 91       	pop	r28
    2fa4:	df 91       	pop	r29
    2fa6:	08 95       	ret

00002fa8 <HLCD8_voidGoToPos>:

void HLCD8_voidGoToPos(u8 A_u8RowNum,u8 A_u8ColNum)
{
    2fa8:	df 93       	push	r29
    2faa:	cf 93       	push	r28
    2fac:	cd b7       	in	r28, 0x3d	; 61
    2fae:	de b7       	in	r29, 0x3e	; 62
    2fb0:	63 97       	sbiw	r28, 0x13	; 19
    2fb2:	0f b6       	in	r0, 0x3f	; 63
    2fb4:	f8 94       	cli
    2fb6:	de bf       	out	0x3e, r29	; 62
    2fb8:	0f be       	out	0x3f, r0	; 63
    2fba:	cd bf       	out	0x3d, r28	; 61
    2fbc:	88 8b       	std	Y+16, r24	; 0x10
    2fbe:	69 8b       	std	Y+17, r22	; 0x11
    // }
    // _delay_ms(1);
    /************************************************************/ 
    //Second method
	u8 local_u8Address;
    switch(A_u8RowNum)
    2fc0:	88 89       	ldd	r24, Y+16	; 0x10
    2fc2:	28 2f       	mov	r18, r24
    2fc4:	30 e0       	ldi	r19, 0x00	; 0
    2fc6:	3b 8b       	std	Y+19, r19	; 0x13
    2fc8:	2a 8b       	std	Y+18, r18	; 0x12
    2fca:	8a 89       	ldd	r24, Y+18	; 0x12
    2fcc:	9b 89       	ldd	r25, Y+19	; 0x13
    2fce:	81 30       	cpi	r24, 0x01	; 1
    2fd0:	91 05       	cpc	r25, r1
    2fd2:	31 f0       	breq	.+12     	; 0x2fe0 <HLCD8_voidGoToPos+0x38>
    2fd4:	2a 89       	ldd	r18, Y+18	; 0x12
    2fd6:	3b 89       	ldd	r19, Y+19	; 0x13
    2fd8:	22 30       	cpi	r18, 0x02	; 2
    2fda:	31 05       	cpc	r19, r1
    2fdc:	59 f0       	breq	.+22     	; 0x2ff4 <HLCD8_voidGoToPos+0x4c>
    2fde:	13 c0       	rjmp	.+38     	; 0x3006 <HLCD8_voidGoToPos+0x5e>
    {
        case LCD_ROW_ONE:
        local_u8Address=FIRST_ROW_ADDRESS + A_u8ColNum -1;
    2fe0:	89 89       	ldd	r24, Y+17	; 0x11
    2fe2:	81 50       	subi	r24, 0x01	; 1
    2fe4:	8f 87       	std	Y+15, r24	; 0x0f
        SET_BIT(local_u8Address,PIN7);
    2fe6:	8f 85       	ldd	r24, Y+15	; 0x0f
    2fe8:	80 68       	ori	r24, 0x80	; 128
    2fea:	8f 87       	std	Y+15, r24	; 0x0f
        HLCD8_voidSendCommand(local_u8Address);
    2fec:	8f 85       	ldd	r24, Y+15	; 0x0f
    2fee:	0e 94 00 14 	call	0x2800	; 0x2800 <HLCD8_voidSendCommand>
    2ff2:	09 c0       	rjmp	.+18     	; 0x3006 <HLCD8_voidGoToPos+0x5e>
        break;

        case LCD_ROW_TWO:
        local_u8Address=SECOND_ROW_ADDRESS + A_u8ColNum;
    2ff4:	89 89       	ldd	r24, Y+17	; 0x11
    2ff6:	81 5c       	subi	r24, 0xC1	; 193
    2ff8:	8f 87       	std	Y+15, r24	; 0x0f
        SET_BIT(local_u8Address,PIN7);
    2ffa:	8f 85       	ldd	r24, Y+15	; 0x0f
    2ffc:	80 68       	ori	r24, 0x80	; 128
    2ffe:	8f 87       	std	Y+15, r24	; 0x0f
        HLCD8_voidSendCommand(local_u8Address);
    3000:	8f 85       	ldd	r24, Y+15	; 0x0f
    3002:	0e 94 00 14 	call	0x2800	; 0x2800 <HLCD8_voidSendCommand>
    3006:	80 e0       	ldi	r24, 0x00	; 0
    3008:	90 e0       	ldi	r25, 0x00	; 0
    300a:	a0 e8       	ldi	r26, 0x80	; 128
    300c:	bf e3       	ldi	r27, 0x3F	; 63
    300e:	8b 87       	std	Y+11, r24	; 0x0b
    3010:	9c 87       	std	Y+12, r25	; 0x0c
    3012:	ad 87       	std	Y+13, r26	; 0x0d
    3014:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3016:	6b 85       	ldd	r22, Y+11	; 0x0b
    3018:	7c 85       	ldd	r23, Y+12	; 0x0c
    301a:	8d 85       	ldd	r24, Y+13	; 0x0d
    301c:	9e 85       	ldd	r25, Y+14	; 0x0e
    301e:	20 e0       	ldi	r18, 0x00	; 0
    3020:	30 e0       	ldi	r19, 0x00	; 0
    3022:	4a ef       	ldi	r20, 0xFA	; 250
    3024:	54 e4       	ldi	r21, 0x44	; 68
    3026:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    302a:	dc 01       	movw	r26, r24
    302c:	cb 01       	movw	r24, r22
    302e:	8f 83       	std	Y+7, r24	; 0x07
    3030:	98 87       	std	Y+8, r25	; 0x08
    3032:	a9 87       	std	Y+9, r26	; 0x09
    3034:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3036:	6f 81       	ldd	r22, Y+7	; 0x07
    3038:	78 85       	ldd	r23, Y+8	; 0x08
    303a:	89 85       	ldd	r24, Y+9	; 0x09
    303c:	9a 85       	ldd	r25, Y+10	; 0x0a
    303e:	20 e0       	ldi	r18, 0x00	; 0
    3040:	30 e0       	ldi	r19, 0x00	; 0
    3042:	40 e8       	ldi	r20, 0x80	; 128
    3044:	5f e3       	ldi	r21, 0x3F	; 63
    3046:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    304a:	88 23       	and	r24, r24
    304c:	2c f4       	brge	.+10     	; 0x3058 <HLCD8_voidGoToPos+0xb0>
		__ticks = 1;
    304e:	81 e0       	ldi	r24, 0x01	; 1
    3050:	90 e0       	ldi	r25, 0x00	; 0
    3052:	9e 83       	std	Y+6, r25	; 0x06
    3054:	8d 83       	std	Y+5, r24	; 0x05
    3056:	3f c0       	rjmp	.+126    	; 0x30d6 <HLCD8_voidGoToPos+0x12e>
	else if (__tmp > 65535)
    3058:	6f 81       	ldd	r22, Y+7	; 0x07
    305a:	78 85       	ldd	r23, Y+8	; 0x08
    305c:	89 85       	ldd	r24, Y+9	; 0x09
    305e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3060:	20 e0       	ldi	r18, 0x00	; 0
    3062:	3f ef       	ldi	r19, 0xFF	; 255
    3064:	4f e7       	ldi	r20, 0x7F	; 127
    3066:	57 e4       	ldi	r21, 0x47	; 71
    3068:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    306c:	18 16       	cp	r1, r24
    306e:	4c f5       	brge	.+82     	; 0x30c2 <HLCD8_voidGoToPos+0x11a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3070:	6b 85       	ldd	r22, Y+11	; 0x0b
    3072:	7c 85       	ldd	r23, Y+12	; 0x0c
    3074:	8d 85       	ldd	r24, Y+13	; 0x0d
    3076:	9e 85       	ldd	r25, Y+14	; 0x0e
    3078:	20 e0       	ldi	r18, 0x00	; 0
    307a:	30 e0       	ldi	r19, 0x00	; 0
    307c:	40 e2       	ldi	r20, 0x20	; 32
    307e:	51 e4       	ldi	r21, 0x41	; 65
    3080:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3084:	dc 01       	movw	r26, r24
    3086:	cb 01       	movw	r24, r22
    3088:	bc 01       	movw	r22, r24
    308a:	cd 01       	movw	r24, r26
    308c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3090:	dc 01       	movw	r26, r24
    3092:	cb 01       	movw	r24, r22
    3094:	9e 83       	std	Y+6, r25	; 0x06
    3096:	8d 83       	std	Y+5, r24	; 0x05
    3098:	0f c0       	rjmp	.+30     	; 0x30b8 <HLCD8_voidGoToPos+0x110>
    309a:	88 ec       	ldi	r24, 0xC8	; 200
    309c:	90 e0       	ldi	r25, 0x00	; 0
    309e:	9c 83       	std	Y+4, r25	; 0x04
    30a0:	8b 83       	std	Y+3, r24	; 0x03
    30a2:	8b 81       	ldd	r24, Y+3	; 0x03
    30a4:	9c 81       	ldd	r25, Y+4	; 0x04
    30a6:	01 97       	sbiw	r24, 0x01	; 1
    30a8:	f1 f7       	brne	.-4      	; 0x30a6 <HLCD8_voidGoToPos+0xfe>
    30aa:	9c 83       	std	Y+4, r25	; 0x04
    30ac:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    30ae:	8d 81       	ldd	r24, Y+5	; 0x05
    30b0:	9e 81       	ldd	r25, Y+6	; 0x06
    30b2:	01 97       	sbiw	r24, 0x01	; 1
    30b4:	9e 83       	std	Y+6, r25	; 0x06
    30b6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    30b8:	8d 81       	ldd	r24, Y+5	; 0x05
    30ba:	9e 81       	ldd	r25, Y+6	; 0x06
    30bc:	00 97       	sbiw	r24, 0x00	; 0
    30be:	69 f7       	brne	.-38     	; 0x309a <HLCD8_voidGoToPos+0xf2>
    30c0:	14 c0       	rjmp	.+40     	; 0x30ea <HLCD8_voidGoToPos+0x142>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    30c2:	6f 81       	ldd	r22, Y+7	; 0x07
    30c4:	78 85       	ldd	r23, Y+8	; 0x08
    30c6:	89 85       	ldd	r24, Y+9	; 0x09
    30c8:	9a 85       	ldd	r25, Y+10	; 0x0a
    30ca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    30ce:	dc 01       	movw	r26, r24
    30d0:	cb 01       	movw	r24, r22
    30d2:	9e 83       	std	Y+6, r25	; 0x06
    30d4:	8d 83       	std	Y+5, r24	; 0x05
    30d6:	8d 81       	ldd	r24, Y+5	; 0x05
    30d8:	9e 81       	ldd	r25, Y+6	; 0x06
    30da:	9a 83       	std	Y+2, r25	; 0x02
    30dc:	89 83       	std	Y+1, r24	; 0x01
    30de:	89 81       	ldd	r24, Y+1	; 0x01
    30e0:	9a 81       	ldd	r25, Y+2	; 0x02
    30e2:	01 97       	sbiw	r24, 0x01	; 1
    30e4:	f1 f7       	brne	.-4      	; 0x30e2 <HLCD8_voidGoToPos+0x13a>
    30e6:	9a 83       	std	Y+2, r25	; 0x02
    30e8:	89 83       	std	Y+1, r24	; 0x01
        break;

    }
    _delay_ms(1);

}
    30ea:	63 96       	adiw	r28, 0x13	; 19
    30ec:	0f b6       	in	r0, 0x3f	; 63
    30ee:	f8 94       	cli
    30f0:	de bf       	out	0x3e, r29	; 62
    30f2:	0f be       	out	0x3f, r0	; 63
    30f4:	cd bf       	out	0x3d, r28	; 61
    30f6:	cf 91       	pop	r28
    30f8:	df 91       	pop	r29
    30fa:	08 95       	ret

000030fc <HLCD8_voidDisplayNumber>:

void HLCD8_voidDisplayNumber(u32 A_u32Number)
{
    30fc:	df 93       	push	r29
    30fe:	cf 93       	push	r28
    3100:	00 d0       	rcall	.+0      	; 0x3102 <HLCD8_voidDisplayNumber+0x6>
    3102:	00 d0       	rcall	.+0      	; 0x3104 <HLCD8_voidDisplayNumber+0x8>
    3104:	cd b7       	in	r28, 0x3d	; 61
    3106:	de b7       	in	r29, 0x3e	; 62
    3108:	9c 83       	std	Y+4, r25	; 0x04
    310a:	8b 83       	std	Y+3, r24	; 0x03
    // u8 local_u8NumToStr[100];
    // itoa(A_u32Number,local_u8NumToStr,10);
    // HLCD8_voidSendString(local_u8NumToStr);
    //****************************************************//
    //third method: it will deal with zero unlike the first method so it's not problem here
    u32 local_u32Number=1;
    310c:	81 e0       	ldi	r24, 0x01	; 1
    310e:	90 e0       	ldi	r25, 0x00	; 0
    3110:	9a 83       	std	Y+2, r25	; 0x02
    3112:	89 83       	std	Y+1, r24	; 0x01
    if(A_u32Number==0)
    3114:	8b 81       	ldd	r24, Y+3	; 0x03
    3116:	9c 81       	ldd	r25, Y+4	; 0x04
    3118:	00 97       	sbiw	r24, 0x00	; 0
    311a:	31 f5       	brne	.+76     	; 0x3168 <HLCD8_voidDisplayNumber+0x6c>
    {
        HLCD8_voidSendData('0');
    311c:	80 e3       	ldi	r24, 0x30	; 48
    311e:	0e 94 9e 14 	call	0x293c	; 0x293c <HLCD8_voidSendData>
    3122:	22 c0       	rjmp	.+68     	; 0x3168 <HLCD8_voidDisplayNumber+0x6c>
    }   
    while(A_u32Number !=0)
    {
            local_u32Number=((local_u32Number * 10)+(A_u32Number%10));
    3124:	89 81       	ldd	r24, Y+1	; 0x01
    3126:	9a 81       	ldd	r25, Y+2	; 0x02
    3128:	9c 01       	movw	r18, r24
    312a:	22 0f       	add	r18, r18
    312c:	33 1f       	adc	r19, r19
    312e:	c9 01       	movw	r24, r18
    3130:	88 0f       	add	r24, r24
    3132:	99 1f       	adc	r25, r25
    3134:	88 0f       	add	r24, r24
    3136:	99 1f       	adc	r25, r25
    3138:	f9 01       	movw	r30, r18
    313a:	e8 0f       	add	r30, r24
    313c:	f9 1f       	adc	r31, r25
    313e:	8b 81       	ldd	r24, Y+3	; 0x03
    3140:	9c 81       	ldd	r25, Y+4	; 0x04
    3142:	2a e0       	ldi	r18, 0x0A	; 10
    3144:	30 e0       	ldi	r19, 0x00	; 0
    3146:	b9 01       	movw	r22, r18
    3148:	0e 94 a8 1c 	call	0x3950	; 0x3950 <__udivmodhi4>
    314c:	8e 0f       	add	r24, r30
    314e:	9f 1f       	adc	r25, r31
    3150:	9a 83       	std	Y+2, r25	; 0x02
    3152:	89 83       	std	Y+1, r24	; 0x01
            A_u32Number=A_u32Number/10;
    3154:	8b 81       	ldd	r24, Y+3	; 0x03
    3156:	9c 81       	ldd	r25, Y+4	; 0x04
    3158:	2a e0       	ldi	r18, 0x0A	; 10
    315a:	30 e0       	ldi	r19, 0x00	; 0
    315c:	b9 01       	movw	r22, r18
    315e:	0e 94 a8 1c 	call	0x3950	; 0x3950 <__udivmodhi4>
    3162:	cb 01       	movw	r24, r22
    3164:	9c 83       	std	Y+4, r25	; 0x04
    3166:	8b 83       	std	Y+3, r24	; 0x03
    u32 local_u32Number=1;
    if(A_u32Number==0)
    {
        HLCD8_voidSendData('0');
    }   
    while(A_u32Number !=0)
    3168:	8b 81       	ldd	r24, Y+3	; 0x03
    316a:	9c 81       	ldd	r25, Y+4	; 0x04
    316c:	00 97       	sbiw	r24, 0x00	; 0
    316e:	d1 f6       	brne	.-76     	; 0x3124 <HLCD8_voidDisplayNumber+0x28>
    3170:	14 c0       	rjmp	.+40     	; 0x319a <HLCD8_voidDisplayNumber+0x9e>
            A_u32Number=A_u32Number/10;

    }
    while (local_u32Number!=1)
    {
        HLCD8_voidSendData((local_u32Number%10)+48);
    3172:	89 81       	ldd	r24, Y+1	; 0x01
    3174:	9a 81       	ldd	r25, Y+2	; 0x02
    3176:	2a e0       	ldi	r18, 0x0A	; 10
    3178:	30 e0       	ldi	r19, 0x00	; 0
    317a:	b9 01       	movw	r22, r18
    317c:	0e 94 a8 1c 	call	0x3950	; 0x3950 <__udivmodhi4>
    3180:	80 5d       	subi	r24, 0xD0	; 208
    3182:	0e 94 9e 14 	call	0x293c	; 0x293c <HLCD8_voidSendData>
        local_u32Number=local_u32Number/10;
    3186:	89 81       	ldd	r24, Y+1	; 0x01
    3188:	9a 81       	ldd	r25, Y+2	; 0x02
    318a:	2a e0       	ldi	r18, 0x0A	; 10
    318c:	30 e0       	ldi	r19, 0x00	; 0
    318e:	b9 01       	movw	r22, r18
    3190:	0e 94 a8 1c 	call	0x3950	; 0x3950 <__udivmodhi4>
    3194:	cb 01       	movw	r24, r22
    3196:	9a 83       	std	Y+2, r25	; 0x02
    3198:	89 83       	std	Y+1, r24	; 0x01
    {
            local_u32Number=((local_u32Number * 10)+(A_u32Number%10));
            A_u32Number=A_u32Number/10;

    }
    while (local_u32Number!=1)
    319a:	89 81       	ldd	r24, Y+1	; 0x01
    319c:	9a 81       	ldd	r25, Y+2	; 0x02
    319e:	81 30       	cpi	r24, 0x01	; 1
    31a0:	91 05       	cpc	r25, r1
    31a2:	39 f7       	brne	.-50     	; 0x3172 <HLCD8_voidDisplayNumber+0x76>
    {
        HLCD8_voidSendData((local_u32Number%10)+48);
        local_u32Number=local_u32Number/10;
    }
}
    31a4:	0f 90       	pop	r0
    31a6:	0f 90       	pop	r0
    31a8:	0f 90       	pop	r0
    31aa:	0f 90       	pop	r0
    31ac:	cf 91       	pop	r28
    31ae:	df 91       	pop	r29
    31b0:	08 95       	ret

000031b2 <HLCD8_voidStoreCustomChar>:

void HLCD8_voidStoreCustomChar(u8 * A_u8Pattern,u8 A_u8CGRAMIndex)
{
    31b2:	df 93       	push	r29
    31b4:	cf 93       	push	r28
    31b6:	cd b7       	in	r28, 0x3d	; 61
    31b8:	de b7       	in	r29, 0x3e	; 62
    31ba:	ab 97       	sbiw	r28, 0x2b	; 43
    31bc:	0f b6       	in	r0, 0x3f	; 63
    31be:	f8 94       	cli
    31c0:	de bf       	out	0x3e, r29	; 62
    31c2:	0f be       	out	0x3f, r0	; 63
    31c4:	cd bf       	out	0x3d, r28	; 61
    31c6:	9a a7       	std	Y+42, r25	; 0x2a
    31c8:	89 a7       	std	Y+41, r24	; 0x29
    31ca:	6b a7       	std	Y+43, r22	; 0x2b
    u8 local_u8Address;
    if(A_u8CGRAMIndex<8)
    31cc:	8b a5       	ldd	r24, Y+43	; 0x2b
    31ce:	88 30       	cpi	r24, 0x08	; 8
    31d0:	08 f0       	brcs	.+2      	; 0x31d4 <HLCD8_voidStoreCustomChar+0x22>
    31d2:	e5 c0       	rjmp	.+458    	; 0x339e <HLCD8_voidStoreCustomChar+0x1ec>
    {
        A_u8CGRAMIndex=A_u8CGRAMIndex*8;
    31d4:	8b a5       	ldd	r24, Y+43	; 0x2b
    31d6:	88 2f       	mov	r24, r24
    31d8:	90 e0       	ldi	r25, 0x00	; 0
    31da:	88 0f       	add	r24, r24
    31dc:	99 1f       	adc	r25, r25
    31de:	88 0f       	add	r24, r24
    31e0:	99 1f       	adc	r25, r25
    31e2:	88 0f       	add	r24, r24
    31e4:	99 1f       	adc	r25, r25
    31e6:	8b a7       	std	Y+43, r24	; 0x2b
        SET_BIT(A_u8CGRAMIndex,PIN6);
    31e8:	8b a5       	ldd	r24, Y+43	; 0x2b
    31ea:	80 64       	ori	r24, 0x40	; 64
    31ec:	8b a7       	std	Y+43, r24	; 0x2b
        CLR_BIT(A_u8CGRAMIndex,PIN7);
    31ee:	8b a5       	ldd	r24, Y+43	; 0x2b
    31f0:	8f 77       	andi	r24, 0x7F	; 127
    31f2:	8b a7       	std	Y+43, r24	; 0x2b
        HLCD8_voidSendCommand(A_u8CGRAMIndex);
    31f4:	8b a5       	ldd	r24, Y+43	; 0x2b
    31f6:	0e 94 00 14 	call	0x2800	; 0x2800 <HLCD8_voidSendCommand>
        for(u8 i=0;i<8;i++)
    31fa:	1f a2       	std	Y+39, r1	; 0x27
    31fc:	cc c0       	rjmp	.+408    	; 0x3396 <HLCD8_voidStoreCustomChar+0x1e4>
        {
            HLCD8_voidSendData(A_u8Pattern[i]);
    31fe:	8f a1       	ldd	r24, Y+39	; 0x27
    3200:	28 2f       	mov	r18, r24
    3202:	30 e0       	ldi	r19, 0x00	; 0
    3204:	89 a5       	ldd	r24, Y+41	; 0x29
    3206:	9a a5       	ldd	r25, Y+42	; 0x2a
    3208:	fc 01       	movw	r30, r24
    320a:	e2 0f       	add	r30, r18
    320c:	f3 1f       	adc	r31, r19
    320e:	80 81       	ld	r24, Z
    3210:	0e 94 9e 14 	call	0x293c	; 0x293c <HLCD8_voidSendData>
    3214:	80 e0       	ldi	r24, 0x00	; 0
    3216:	90 e0       	ldi	r25, 0x00	; 0
    3218:	a0 e7       	ldi	r26, 0x70	; 112
    321a:	b2 e4       	ldi	r27, 0x42	; 66
    321c:	8b a3       	std	Y+35, r24	; 0x23
    321e:	9c a3       	std	Y+36, r25	; 0x24
    3220:	ad a3       	std	Y+37, r26	; 0x25
    3222:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    3224:	6b a1       	ldd	r22, Y+35	; 0x23
    3226:	7c a1       	ldd	r23, Y+36	; 0x24
    3228:	8d a1       	ldd	r24, Y+37	; 0x25
    322a:	9e a1       	ldd	r25, Y+38	; 0x26
    322c:	2b ea       	ldi	r18, 0xAB	; 171
    322e:	3a ea       	ldi	r19, 0xAA	; 170
    3230:	4a e2       	ldi	r20, 0x2A	; 42
    3232:	50 e4       	ldi	r21, 0x40	; 64
    3234:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3238:	dc 01       	movw	r26, r24
    323a:	cb 01       	movw	r24, r22
    323c:	8f 8f       	std	Y+31, r24	; 0x1f
    323e:	98 a3       	std	Y+32, r25	; 0x20
    3240:	a9 a3       	std	Y+33, r26	; 0x21
    3242:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    3244:	6f 8d       	ldd	r22, Y+31	; 0x1f
    3246:	78 a1       	ldd	r23, Y+32	; 0x20
    3248:	89 a1       	ldd	r24, Y+33	; 0x21
    324a:	9a a1       	ldd	r25, Y+34	; 0x22
    324c:	20 e0       	ldi	r18, 0x00	; 0
    324e:	30 e0       	ldi	r19, 0x00	; 0
    3250:	40 e8       	ldi	r20, 0x80	; 128
    3252:	5f e3       	ldi	r21, 0x3F	; 63
    3254:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3258:	88 23       	and	r24, r24
    325a:	1c f4       	brge	.+6      	; 0x3262 <HLCD8_voidStoreCustomChar+0xb0>
		__ticks = 1;
    325c:	81 e0       	ldi	r24, 0x01	; 1
    325e:	8e 8f       	std	Y+30, r24	; 0x1e
    3260:	91 c0       	rjmp	.+290    	; 0x3384 <HLCD8_voidStoreCustomChar+0x1d2>
	else if (__tmp > 255)
    3262:	6f 8d       	ldd	r22, Y+31	; 0x1f
    3264:	78 a1       	ldd	r23, Y+32	; 0x20
    3266:	89 a1       	ldd	r24, Y+33	; 0x21
    3268:	9a a1       	ldd	r25, Y+34	; 0x22
    326a:	20 e0       	ldi	r18, 0x00	; 0
    326c:	30 e0       	ldi	r19, 0x00	; 0
    326e:	4f e7       	ldi	r20, 0x7F	; 127
    3270:	53 e4       	ldi	r21, 0x43	; 67
    3272:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3276:	18 16       	cp	r1, r24
    3278:	0c f0       	brlt	.+2      	; 0x327c <HLCD8_voidStoreCustomChar+0xca>
    327a:	7b c0       	rjmp	.+246    	; 0x3372 <HLCD8_voidStoreCustomChar+0x1c0>
	{
		_delay_ms(__us / 1000.0);
    327c:	6b a1       	ldd	r22, Y+35	; 0x23
    327e:	7c a1       	ldd	r23, Y+36	; 0x24
    3280:	8d a1       	ldd	r24, Y+37	; 0x25
    3282:	9e a1       	ldd	r25, Y+38	; 0x26
    3284:	20 e0       	ldi	r18, 0x00	; 0
    3286:	30 e0       	ldi	r19, 0x00	; 0
    3288:	4a e7       	ldi	r20, 0x7A	; 122
    328a:	54 e4       	ldi	r21, 0x44	; 68
    328c:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    3290:	dc 01       	movw	r26, r24
    3292:	cb 01       	movw	r24, r22
    3294:	8a 8f       	std	Y+26, r24	; 0x1a
    3296:	9b 8f       	std	Y+27, r25	; 0x1b
    3298:	ac 8f       	std	Y+28, r26	; 0x1c
    329a:	bd 8f       	std	Y+29, r27	; 0x1d
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    329c:	6a 8d       	ldd	r22, Y+26	; 0x1a
    329e:	7b 8d       	ldd	r23, Y+27	; 0x1b
    32a0:	8c 8d       	ldd	r24, Y+28	; 0x1c
    32a2:	9d 8d       	ldd	r25, Y+29	; 0x1d
    32a4:	20 e0       	ldi	r18, 0x00	; 0
    32a6:	30 e0       	ldi	r19, 0x00	; 0
    32a8:	4a ef       	ldi	r20, 0xFA	; 250
    32aa:	54 e4       	ldi	r21, 0x44	; 68
    32ac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    32b0:	dc 01       	movw	r26, r24
    32b2:	cb 01       	movw	r24, r22
    32b4:	8e 8b       	std	Y+22, r24	; 0x16
    32b6:	9f 8b       	std	Y+23, r25	; 0x17
    32b8:	a8 8f       	std	Y+24, r26	; 0x18
    32ba:	b9 8f       	std	Y+25, r27	; 0x19
	if (__tmp < 1.0)
    32bc:	6e 89       	ldd	r22, Y+22	; 0x16
    32be:	7f 89       	ldd	r23, Y+23	; 0x17
    32c0:	88 8d       	ldd	r24, Y+24	; 0x18
    32c2:	99 8d       	ldd	r25, Y+25	; 0x19
    32c4:	20 e0       	ldi	r18, 0x00	; 0
    32c6:	30 e0       	ldi	r19, 0x00	; 0
    32c8:	40 e8       	ldi	r20, 0x80	; 128
    32ca:	5f e3       	ldi	r21, 0x3F	; 63
    32cc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    32d0:	88 23       	and	r24, r24
    32d2:	2c f4       	brge	.+10     	; 0x32de <HLCD8_voidStoreCustomChar+0x12c>
		__ticks = 1;
    32d4:	81 e0       	ldi	r24, 0x01	; 1
    32d6:	90 e0       	ldi	r25, 0x00	; 0
    32d8:	9d 8b       	std	Y+21, r25	; 0x15
    32da:	8c 8b       	std	Y+20, r24	; 0x14
    32dc:	3f c0       	rjmp	.+126    	; 0x335c <HLCD8_voidStoreCustomChar+0x1aa>
	else if (__tmp > 65535)
    32de:	6e 89       	ldd	r22, Y+22	; 0x16
    32e0:	7f 89       	ldd	r23, Y+23	; 0x17
    32e2:	88 8d       	ldd	r24, Y+24	; 0x18
    32e4:	99 8d       	ldd	r25, Y+25	; 0x19
    32e6:	20 e0       	ldi	r18, 0x00	; 0
    32e8:	3f ef       	ldi	r19, 0xFF	; 255
    32ea:	4f e7       	ldi	r20, 0x7F	; 127
    32ec:	57 e4       	ldi	r21, 0x47	; 71
    32ee:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    32f2:	18 16       	cp	r1, r24
    32f4:	4c f5       	brge	.+82     	; 0x3348 <HLCD8_voidStoreCustomChar+0x196>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    32f6:	6a 8d       	ldd	r22, Y+26	; 0x1a
    32f8:	7b 8d       	ldd	r23, Y+27	; 0x1b
    32fa:	8c 8d       	ldd	r24, Y+28	; 0x1c
    32fc:	9d 8d       	ldd	r25, Y+29	; 0x1d
    32fe:	20 e0       	ldi	r18, 0x00	; 0
    3300:	30 e0       	ldi	r19, 0x00	; 0
    3302:	40 e2       	ldi	r20, 0x20	; 32
    3304:	51 e4       	ldi	r21, 0x41	; 65
    3306:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    330a:	dc 01       	movw	r26, r24
    330c:	cb 01       	movw	r24, r22
    330e:	bc 01       	movw	r22, r24
    3310:	cd 01       	movw	r24, r26
    3312:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3316:	dc 01       	movw	r26, r24
    3318:	cb 01       	movw	r24, r22
    331a:	9d 8b       	std	Y+21, r25	; 0x15
    331c:	8c 8b       	std	Y+20, r24	; 0x14
    331e:	0f c0       	rjmp	.+30     	; 0x333e <HLCD8_voidStoreCustomChar+0x18c>
    3320:	88 ec       	ldi	r24, 0xC8	; 200
    3322:	90 e0       	ldi	r25, 0x00	; 0
    3324:	9b 8b       	std	Y+19, r25	; 0x13
    3326:	8a 8b       	std	Y+18, r24	; 0x12
    3328:	8a 89       	ldd	r24, Y+18	; 0x12
    332a:	9b 89       	ldd	r25, Y+19	; 0x13
    332c:	01 97       	sbiw	r24, 0x01	; 1
    332e:	f1 f7       	brne	.-4      	; 0x332c <HLCD8_voidStoreCustomChar+0x17a>
    3330:	9b 8b       	std	Y+19, r25	; 0x13
    3332:	8a 8b       	std	Y+18, r24	; 0x12
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3334:	8c 89       	ldd	r24, Y+20	; 0x14
    3336:	9d 89       	ldd	r25, Y+21	; 0x15
    3338:	01 97       	sbiw	r24, 0x01	; 1
    333a:	9d 8b       	std	Y+21, r25	; 0x15
    333c:	8c 8b       	std	Y+20, r24	; 0x14
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    333e:	8c 89       	ldd	r24, Y+20	; 0x14
    3340:	9d 89       	ldd	r25, Y+21	; 0x15
    3342:	00 97       	sbiw	r24, 0x00	; 0
    3344:	69 f7       	brne	.-38     	; 0x3320 <HLCD8_voidStoreCustomChar+0x16e>
    3346:	24 c0       	rjmp	.+72     	; 0x3390 <HLCD8_voidStoreCustomChar+0x1de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3348:	6e 89       	ldd	r22, Y+22	; 0x16
    334a:	7f 89       	ldd	r23, Y+23	; 0x17
    334c:	88 8d       	ldd	r24, Y+24	; 0x18
    334e:	99 8d       	ldd	r25, Y+25	; 0x19
    3350:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3354:	dc 01       	movw	r26, r24
    3356:	cb 01       	movw	r24, r22
    3358:	9d 8b       	std	Y+21, r25	; 0x15
    335a:	8c 8b       	std	Y+20, r24	; 0x14
    335c:	8c 89       	ldd	r24, Y+20	; 0x14
    335e:	9d 89       	ldd	r25, Y+21	; 0x15
    3360:	99 8b       	std	Y+17, r25	; 0x11
    3362:	88 8b       	std	Y+16, r24	; 0x10
    3364:	88 89       	ldd	r24, Y+16	; 0x10
    3366:	99 89       	ldd	r25, Y+17	; 0x11
    3368:	01 97       	sbiw	r24, 0x01	; 1
    336a:	f1 f7       	brne	.-4      	; 0x3368 <HLCD8_voidStoreCustomChar+0x1b6>
    336c:	99 8b       	std	Y+17, r25	; 0x11
    336e:	88 8b       	std	Y+16, r24	; 0x10
    3370:	0f c0       	rjmp	.+30     	; 0x3390 <HLCD8_voidStoreCustomChar+0x1de>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    3372:	6f 8d       	ldd	r22, Y+31	; 0x1f
    3374:	78 a1       	ldd	r23, Y+32	; 0x20
    3376:	89 a1       	ldd	r24, Y+33	; 0x21
    3378:	9a a1       	ldd	r25, Y+34	; 0x22
    337a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    337e:	dc 01       	movw	r26, r24
    3380:	cb 01       	movw	r24, r22
    3382:	8e 8f       	std	Y+30, r24	; 0x1e
    3384:	8e 8d       	ldd	r24, Y+30	; 0x1e
    3386:	8f 87       	std	Y+15, r24	; 0x0f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    3388:	8f 85       	ldd	r24, Y+15	; 0x0f
    338a:	8a 95       	dec	r24
    338c:	f1 f7       	brne	.-4      	; 0x338a <HLCD8_voidStoreCustomChar+0x1d8>
    338e:	8f 87       	std	Y+15, r24	; 0x0f
    {
        A_u8CGRAMIndex=A_u8CGRAMIndex*8;
        SET_BIT(A_u8CGRAMIndex,PIN6);
        CLR_BIT(A_u8CGRAMIndex,PIN7);
        HLCD8_voidSendCommand(A_u8CGRAMIndex);
        for(u8 i=0;i<8;i++)
    3390:	8f a1       	ldd	r24, Y+39	; 0x27
    3392:	8f 5f       	subi	r24, 0xFF	; 255
    3394:	8f a3       	std	Y+39, r24	; 0x27
    3396:	8f a1       	ldd	r24, Y+39	; 0x27
    3398:	88 30       	cpi	r24, 0x08	; 8
    339a:	08 f4       	brcc	.+2      	; 0x339e <HLCD8_voidStoreCustomChar+0x1ec>
    339c:	30 cf       	rjmp	.-416    	; 0x31fe <HLCD8_voidStoreCustomChar+0x4c>
        {
            HLCD8_voidSendData(A_u8Pattern[i]);
            _delay_us(60);
        }
    }
    HLCD8_voidSendCommand(RETURN_HOME);
    339e:	82 e0       	ldi	r24, 0x02	; 2
    33a0:	0e 94 00 14 	call	0x2800	; 0x2800 <HLCD8_voidSendCommand>
    33a4:	80 e0       	ldi	r24, 0x00	; 0
    33a6:	90 e0       	ldi	r25, 0x00	; 0
    33a8:	a0 e0       	ldi	r26, 0x00	; 0
    33aa:	b0 e4       	ldi	r27, 0x40	; 64
    33ac:	8b 87       	std	Y+11, r24	; 0x0b
    33ae:	9c 87       	std	Y+12, r25	; 0x0c
    33b0:	ad 87       	std	Y+13, r26	; 0x0d
    33b2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    33b4:	6b 85       	ldd	r22, Y+11	; 0x0b
    33b6:	7c 85       	ldd	r23, Y+12	; 0x0c
    33b8:	8d 85       	ldd	r24, Y+13	; 0x0d
    33ba:	9e 85       	ldd	r25, Y+14	; 0x0e
    33bc:	20 e0       	ldi	r18, 0x00	; 0
    33be:	30 e0       	ldi	r19, 0x00	; 0
    33c0:	4a ef       	ldi	r20, 0xFA	; 250
    33c2:	54 e4       	ldi	r21, 0x44	; 68
    33c4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    33c8:	dc 01       	movw	r26, r24
    33ca:	cb 01       	movw	r24, r22
    33cc:	8f 83       	std	Y+7, r24	; 0x07
    33ce:	98 87       	std	Y+8, r25	; 0x08
    33d0:	a9 87       	std	Y+9, r26	; 0x09
    33d2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    33d4:	6f 81       	ldd	r22, Y+7	; 0x07
    33d6:	78 85       	ldd	r23, Y+8	; 0x08
    33d8:	89 85       	ldd	r24, Y+9	; 0x09
    33da:	9a 85       	ldd	r25, Y+10	; 0x0a
    33dc:	20 e0       	ldi	r18, 0x00	; 0
    33de:	30 e0       	ldi	r19, 0x00	; 0
    33e0:	40 e8       	ldi	r20, 0x80	; 128
    33e2:	5f e3       	ldi	r21, 0x3F	; 63
    33e4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    33e8:	88 23       	and	r24, r24
    33ea:	2c f4       	brge	.+10     	; 0x33f6 <HLCD8_voidStoreCustomChar+0x244>
		__ticks = 1;
    33ec:	81 e0       	ldi	r24, 0x01	; 1
    33ee:	90 e0       	ldi	r25, 0x00	; 0
    33f0:	9e 83       	std	Y+6, r25	; 0x06
    33f2:	8d 83       	std	Y+5, r24	; 0x05
    33f4:	3f c0       	rjmp	.+126    	; 0x3474 <HLCD8_voidStoreCustomChar+0x2c2>
	else if (__tmp > 65535)
    33f6:	6f 81       	ldd	r22, Y+7	; 0x07
    33f8:	78 85       	ldd	r23, Y+8	; 0x08
    33fa:	89 85       	ldd	r24, Y+9	; 0x09
    33fc:	9a 85       	ldd	r25, Y+10	; 0x0a
    33fe:	20 e0       	ldi	r18, 0x00	; 0
    3400:	3f ef       	ldi	r19, 0xFF	; 255
    3402:	4f e7       	ldi	r20, 0x7F	; 127
    3404:	57 e4       	ldi	r21, 0x47	; 71
    3406:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    340a:	18 16       	cp	r1, r24
    340c:	4c f5       	brge	.+82     	; 0x3460 <HLCD8_voidStoreCustomChar+0x2ae>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    340e:	6b 85       	ldd	r22, Y+11	; 0x0b
    3410:	7c 85       	ldd	r23, Y+12	; 0x0c
    3412:	8d 85       	ldd	r24, Y+13	; 0x0d
    3414:	9e 85       	ldd	r25, Y+14	; 0x0e
    3416:	20 e0       	ldi	r18, 0x00	; 0
    3418:	30 e0       	ldi	r19, 0x00	; 0
    341a:	40 e2       	ldi	r20, 0x20	; 32
    341c:	51 e4       	ldi	r21, 0x41	; 65
    341e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3422:	dc 01       	movw	r26, r24
    3424:	cb 01       	movw	r24, r22
    3426:	bc 01       	movw	r22, r24
    3428:	cd 01       	movw	r24, r26
    342a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    342e:	dc 01       	movw	r26, r24
    3430:	cb 01       	movw	r24, r22
    3432:	9e 83       	std	Y+6, r25	; 0x06
    3434:	8d 83       	std	Y+5, r24	; 0x05
    3436:	0f c0       	rjmp	.+30     	; 0x3456 <HLCD8_voidStoreCustomChar+0x2a4>
    3438:	88 ec       	ldi	r24, 0xC8	; 200
    343a:	90 e0       	ldi	r25, 0x00	; 0
    343c:	9c 83       	std	Y+4, r25	; 0x04
    343e:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3440:	8b 81       	ldd	r24, Y+3	; 0x03
    3442:	9c 81       	ldd	r25, Y+4	; 0x04
    3444:	01 97       	sbiw	r24, 0x01	; 1
    3446:	f1 f7       	brne	.-4      	; 0x3444 <HLCD8_voidStoreCustomChar+0x292>
    3448:	9c 83       	std	Y+4, r25	; 0x04
    344a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    344c:	8d 81       	ldd	r24, Y+5	; 0x05
    344e:	9e 81       	ldd	r25, Y+6	; 0x06
    3450:	01 97       	sbiw	r24, 0x01	; 1
    3452:	9e 83       	std	Y+6, r25	; 0x06
    3454:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3456:	8d 81       	ldd	r24, Y+5	; 0x05
    3458:	9e 81       	ldd	r25, Y+6	; 0x06
    345a:	00 97       	sbiw	r24, 0x00	; 0
    345c:	69 f7       	brne	.-38     	; 0x3438 <HLCD8_voidStoreCustomChar+0x286>
    345e:	14 c0       	rjmp	.+40     	; 0x3488 <HLCD8_voidStoreCustomChar+0x2d6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3460:	6f 81       	ldd	r22, Y+7	; 0x07
    3462:	78 85       	ldd	r23, Y+8	; 0x08
    3464:	89 85       	ldd	r24, Y+9	; 0x09
    3466:	9a 85       	ldd	r25, Y+10	; 0x0a
    3468:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    346c:	dc 01       	movw	r26, r24
    346e:	cb 01       	movw	r24, r22
    3470:	9e 83       	std	Y+6, r25	; 0x06
    3472:	8d 83       	std	Y+5, r24	; 0x05
    3474:	8d 81       	ldd	r24, Y+5	; 0x05
    3476:	9e 81       	ldd	r25, Y+6	; 0x06
    3478:	9a 83       	std	Y+2, r25	; 0x02
    347a:	89 83       	std	Y+1, r24	; 0x01
    347c:	89 81       	ldd	r24, Y+1	; 0x01
    347e:	9a 81       	ldd	r25, Y+2	; 0x02
    3480:	01 97       	sbiw	r24, 0x01	; 1
    3482:	f1 f7       	brne	.-4      	; 0x3480 <HLCD8_voidStoreCustomChar+0x2ce>
    3484:	9a 83       	std	Y+2, r25	; 0x02
    3486:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(2);

}
    3488:	ab 96       	adiw	r28, 0x2b	; 43
    348a:	0f b6       	in	r0, 0x3f	; 63
    348c:	f8 94       	cli
    348e:	de bf       	out	0x3e, r29	; 62
    3490:	0f be       	out	0x3f, r0	; 63
    3492:	cd bf       	out	0x3d, r28	; 61
    3494:	cf 91       	pop	r28
    3496:	df 91       	pop	r29
    3498:	08 95       	ret

0000349a <HLCD8_voidDisplayCustomChar>:

void HLCD8_voidDisplayCustomChar(u8 A_u8CGRAMIndex,u8 A_u8Row,u8 A_u8Col)
{
    349a:	df 93       	push	r29
    349c:	cf 93       	push	r28
    349e:	00 d0       	rcall	.+0      	; 0x34a0 <HLCD8_voidDisplayCustomChar+0x6>
    34a0:	0f 92       	push	r0
    34a2:	cd b7       	in	r28, 0x3d	; 61
    34a4:	de b7       	in	r29, 0x3e	; 62
    34a6:	89 83       	std	Y+1, r24	; 0x01
    34a8:	6a 83       	std	Y+2, r22	; 0x02
    34aa:	4b 83       	std	Y+3, r20	; 0x03
    HLCD8_voidGoToPos(A_u8Row,A_u8Col);
    34ac:	8a 81       	ldd	r24, Y+2	; 0x02
    34ae:	6b 81       	ldd	r22, Y+3	; 0x03
    34b0:	0e 94 d4 17 	call	0x2fa8	; 0x2fa8 <HLCD8_voidGoToPos>
    HLCD8_voidSendData(A_u8CGRAMIndex);
    34b4:	89 81       	ldd	r24, Y+1	; 0x01
    34b6:	0e 94 9e 14 	call	0x293c	; 0x293c <HLCD8_voidSendData>
    34ba:	0f 90       	pop	r0
    34bc:	0f 90       	pop	r0
    34be:	0f 90       	pop	r0
    34c0:	cf 91       	pop	r28
    34c2:	df 91       	pop	r29
    34c4:	08 95       	ret

000034c6 <HSSD_voidDisplay>:
#include "../Include/HAL/SSD/SSD_Private.h"
#include "../Include/HAL/SSD/SSD_Configuration.h"

#include <util/delay.h>
void HSSD_voidDisplay(u8 A_u8Number,u8 A_u8PortId)
{
    34c6:	df 93       	push	r29
    34c8:	cf 93       	push	r28
    34ca:	00 d0       	rcall	.+0      	; 0x34cc <HSSD_voidDisplay+0x6>
    34cc:	00 d0       	rcall	.+0      	; 0x34ce <HSSD_voidDisplay+0x8>
    34ce:	cd b7       	in	r28, 0x3d	; 61
    34d0:	de b7       	in	r29, 0x3e	; 62
    34d2:	89 83       	std	Y+1, r24	; 0x01
    34d4:	6a 83       	std	Y+2, r22	; 0x02
	switch(A_u8Number)
    34d6:	89 81       	ldd	r24, Y+1	; 0x01
    34d8:	28 2f       	mov	r18, r24
    34da:	30 e0       	ldi	r19, 0x00	; 0
    34dc:	3c 83       	std	Y+4, r19	; 0x04
    34de:	2b 83       	std	Y+3, r18	; 0x03
    34e0:	8b 81       	ldd	r24, Y+3	; 0x03
    34e2:	9c 81       	ldd	r25, Y+4	; 0x04
    34e4:	8b 35       	cpi	r24, 0x5B	; 91
    34e6:	91 05       	cpc	r25, r1
    34e8:	09 f4       	brne	.+2      	; 0x34ec <HSSD_voidDisplay+0x26>
    34ea:	4c c0       	rjmp	.+152    	; 0x3584 <HSSD_voidDisplay+0xbe>
    34ec:	2b 81       	ldd	r18, Y+3	; 0x03
    34ee:	3c 81       	ldd	r19, Y+4	; 0x04
    34f0:	2c 35       	cpi	r18, 0x5C	; 92
    34f2:	31 05       	cpc	r19, r1
    34f4:	e4 f4       	brge	.+56     	; 0x352e <HSSD_voidDisplay+0x68>
    34f6:	8b 81       	ldd	r24, Y+3	; 0x03
    34f8:	9c 81       	ldd	r25, Y+4	; 0x04
    34fa:	87 30       	cpi	r24, 0x07	; 7
    34fc:	91 05       	cpc	r25, r1
    34fe:	09 f4       	brne	.+2      	; 0x3502 <HSSD_voidDisplay+0x3c>
    3500:	5a c0       	rjmp	.+180    	; 0x35b6 <HSSD_voidDisplay+0xf0>
    3502:	2b 81       	ldd	r18, Y+3	; 0x03
    3504:	3c 81       	ldd	r19, Y+4	; 0x04
    3506:	28 30       	cpi	r18, 0x08	; 8
    3508:	31 05       	cpc	r19, r1
    350a:	34 f4       	brge	.+12     	; 0x3518 <HSSD_voidDisplay+0x52>
    350c:	8b 81       	ldd	r24, Y+3	; 0x03
    350e:	9c 81       	ldd	r25, Y+4	; 0x04
    3510:	86 30       	cpi	r24, 0x06	; 6
    3512:	91 05       	cpc	r25, r1
    3514:	91 f1       	breq	.+100    	; 0x357a <HSSD_voidDisplay+0xb4>
    3516:	5d c0       	rjmp	.+186    	; 0x35d2 <HSSD_voidDisplay+0x10c>
    3518:	2b 81       	ldd	r18, Y+3	; 0x03
    351a:	3c 81       	ldd	r19, Y+4	; 0x04
    351c:	2f 33       	cpi	r18, 0x3F	; 63
    351e:	31 05       	cpc	r19, r1
    3520:	39 f1       	breq	.+78     	; 0x3570 <HSSD_voidDisplay+0xaa>
    3522:	8b 81       	ldd	r24, Y+3	; 0x03
    3524:	9c 81       	ldd	r25, Y+4	; 0x04
    3526:	8f 34       	cpi	r24, 0x4F	; 79
    3528:	91 05       	cpc	r25, r1
    352a:	89 f1       	breq	.+98     	; 0x358e <HSSD_voidDisplay+0xc8>
    352c:	52 c0       	rjmp	.+164    	; 0x35d2 <HSSD_voidDisplay+0x10c>
    352e:	2b 81       	ldd	r18, Y+3	; 0x03
    3530:	3c 81       	ldd	r19, Y+4	; 0x04
    3532:	2f 36       	cpi	r18, 0x6F	; 111
    3534:	31 05       	cpc	r19, r1
    3536:	09 f4       	brne	.+2      	; 0x353a <HSSD_voidDisplay+0x74>
    3538:	48 c0       	rjmp	.+144    	; 0x35ca <HSSD_voidDisplay+0x104>
    353a:	8b 81       	ldd	r24, Y+3	; 0x03
    353c:	9c 81       	ldd	r25, Y+4	; 0x04
    353e:	80 37       	cpi	r24, 0x70	; 112
    3540:	91 05       	cpc	r25, r1
    3542:	5c f4       	brge	.+22     	; 0x355a <HSSD_voidDisplay+0x94>
    3544:	2b 81       	ldd	r18, Y+3	; 0x03
    3546:	3c 81       	ldd	r19, Y+4	; 0x04
    3548:	26 36       	cpi	r18, 0x66	; 102
    354a:	31 05       	cpc	r19, r1
    354c:	29 f1       	breq	.+74     	; 0x3598 <HSSD_voidDisplay+0xd2>
    354e:	8b 81       	ldd	r24, Y+3	; 0x03
    3550:	9c 81       	ldd	r25, Y+4	; 0x04
    3552:	8d 36       	cpi	r24, 0x6D	; 109
    3554:	91 05       	cpc	r25, r1
    3556:	29 f1       	breq	.+74     	; 0x35a2 <HSSD_voidDisplay+0xdc>
    3558:	3c c0       	rjmp	.+120    	; 0x35d2 <HSSD_voidDisplay+0x10c>
    355a:	2b 81       	ldd	r18, Y+3	; 0x03
    355c:	3c 81       	ldd	r19, Y+4	; 0x04
    355e:	2d 37       	cpi	r18, 0x7D	; 125
    3560:	31 05       	cpc	r19, r1
    3562:	21 f1       	breq	.+72     	; 0x35ac <HSSD_voidDisplay+0xe6>
    3564:	8b 81       	ldd	r24, Y+3	; 0x03
    3566:	9c 81       	ldd	r25, Y+4	; 0x04
    3568:	8f 37       	cpi	r24, 0x7F	; 127
    356a:	91 05       	cpc	r25, r1
    356c:	49 f1       	breq	.+82     	; 0x35c0 <HSSD_voidDisplay+0xfa>
    356e:	31 c0       	rjmp	.+98     	; 0x35d2 <HSSD_voidDisplay+0x10c>
	{
	case ZERO:
		MDIO_voidSetPortValue(A_u8PortId,ZERO);
    3570:	8a 81       	ldd	r24, Y+2	; 0x02
    3572:	6f e3       	ldi	r22, 0x3F	; 63
    3574:	0e 94 53 09 	call	0x12a6	; 0x12a6 <MDIO_voidSetPortValue>
    3578:	2c c0       	rjmp	.+88     	; 0x35d2 <HSSD_voidDisplay+0x10c>
		break;
	case ONE:
		MDIO_voidSetPortValue(A_u8PortId,ONE);
    357a:	8a 81       	ldd	r24, Y+2	; 0x02
    357c:	66 e0       	ldi	r22, 0x06	; 6
    357e:	0e 94 53 09 	call	0x12a6	; 0x12a6 <MDIO_voidSetPortValue>
    3582:	27 c0       	rjmp	.+78     	; 0x35d2 <HSSD_voidDisplay+0x10c>
		break;
	case TWO:
		MDIO_voidSetPortValue(A_u8PortId,TWO);
    3584:	8a 81       	ldd	r24, Y+2	; 0x02
    3586:	6b e5       	ldi	r22, 0x5B	; 91
    3588:	0e 94 53 09 	call	0x12a6	; 0x12a6 <MDIO_voidSetPortValue>
    358c:	22 c0       	rjmp	.+68     	; 0x35d2 <HSSD_voidDisplay+0x10c>
		break;
	case THREE:
		MDIO_voidSetPortValue(A_u8PortId,THREE);
    358e:	8a 81       	ldd	r24, Y+2	; 0x02
    3590:	6f e4       	ldi	r22, 0x4F	; 79
    3592:	0e 94 53 09 	call	0x12a6	; 0x12a6 <MDIO_voidSetPortValue>
    3596:	1d c0       	rjmp	.+58     	; 0x35d2 <HSSD_voidDisplay+0x10c>
		break;
	case FOUR:
		MDIO_voidSetPortValue(A_u8PortId,FOUR);
    3598:	8a 81       	ldd	r24, Y+2	; 0x02
    359a:	66 e6       	ldi	r22, 0x66	; 102
    359c:	0e 94 53 09 	call	0x12a6	; 0x12a6 <MDIO_voidSetPortValue>
    35a0:	18 c0       	rjmp	.+48     	; 0x35d2 <HSSD_voidDisplay+0x10c>
		break;
	case FIVE:
		MDIO_voidSetPortValue(A_u8PortId,FIVE);
    35a2:	8a 81       	ldd	r24, Y+2	; 0x02
    35a4:	6d e6       	ldi	r22, 0x6D	; 109
    35a6:	0e 94 53 09 	call	0x12a6	; 0x12a6 <MDIO_voidSetPortValue>
    35aa:	13 c0       	rjmp	.+38     	; 0x35d2 <HSSD_voidDisplay+0x10c>
		break;
	case SIX:
		MDIO_voidSetPortValue(A_u8PortId,SIX);
    35ac:	8a 81       	ldd	r24, Y+2	; 0x02
    35ae:	6d e7       	ldi	r22, 0x7D	; 125
    35b0:	0e 94 53 09 	call	0x12a6	; 0x12a6 <MDIO_voidSetPortValue>
    35b4:	0e c0       	rjmp	.+28     	; 0x35d2 <HSSD_voidDisplay+0x10c>
		break;
	case SEVEN:
		MDIO_voidSetPortValue(A_u8PortId,SEVEN);
    35b6:	8a 81       	ldd	r24, Y+2	; 0x02
    35b8:	67 e0       	ldi	r22, 0x07	; 7
    35ba:	0e 94 53 09 	call	0x12a6	; 0x12a6 <MDIO_voidSetPortValue>
    35be:	09 c0       	rjmp	.+18     	; 0x35d2 <HSSD_voidDisplay+0x10c>
		break;
	case EIGHT:
		MDIO_voidSetPortValue(A_u8PortId,EIGHT);
    35c0:	8a 81       	ldd	r24, Y+2	; 0x02
    35c2:	6f e7       	ldi	r22, 0x7F	; 127
    35c4:	0e 94 53 09 	call	0x12a6	; 0x12a6 <MDIO_voidSetPortValue>
    35c8:	04 c0       	rjmp	.+8      	; 0x35d2 <HSSD_voidDisplay+0x10c>
		break;
	case NINE:
		MDIO_voidSetPortValue(A_u8PortId,NINE);
    35ca:	8a 81       	ldd	r24, Y+2	; 0x02
    35cc:	6f e6       	ldi	r22, 0x6F	; 111
    35ce:	0e 94 53 09 	call	0x12a6	; 0x12a6 <MDIO_voidSetPortValue>
		break;
	}
}
    35d2:	0f 90       	pop	r0
    35d4:	0f 90       	pop	r0
    35d6:	0f 90       	pop	r0
    35d8:	0f 90       	pop	r0
    35da:	cf 91       	pop	r28
    35dc:	df 91       	pop	r29
    35de:	08 95       	ret

000035e0 <HSSD_voidDisplayAscending>:

void HSSD_voidDisplayAscending(u8 A_u8PortId)
{
    35e0:	df 93       	push	r29
    35e2:	cf 93       	push	r28
    35e4:	cd b7       	in	r28, 0x3d	; 61
    35e6:	de b7       	in	r29, 0x3e	; 62
    35e8:	6f 97       	sbiw	r28, 0x1f	; 31
    35ea:	0f b6       	in	r0, 0x3f	; 63
    35ec:	f8 94       	cli
    35ee:	de bf       	out	0x3e, r29	; 62
    35f0:	0f be       	out	0x3f, r0	; 63
    35f2:	cd bf       	out	0x3d, r28	; 61
    35f4:	8a 8f       	std	Y+26, r24	; 0x1a
u8 arr[]={ZERO,ONE,TWO,THREE,FOUR,FIVE,SIX,SEVEN,EIGHT,NINE};
    35f6:	ce 01       	movw	r24, r28
    35f8:	40 96       	adiw	r24, 0x10	; 16
    35fa:	9c 8f       	std	Y+28, r25	; 0x1c
    35fc:	8b 8f       	std	Y+27, r24	; 0x1b
    35fe:	e6 e8       	ldi	r30, 0x86	; 134
    3600:	f0 e0       	ldi	r31, 0x00	; 0
    3602:	fe 8f       	std	Y+30, r31	; 0x1e
    3604:	ed 8f       	std	Y+29, r30	; 0x1d
    3606:	fa e0       	ldi	r31, 0x0A	; 10
    3608:	ff 8f       	std	Y+31, r31	; 0x1f
    360a:	ed 8d       	ldd	r30, Y+29	; 0x1d
    360c:	fe 8d       	ldd	r31, Y+30	; 0x1e
    360e:	00 80       	ld	r0, Z
    3610:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3612:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3614:	01 96       	adiw	r24, 0x01	; 1
    3616:	9e 8f       	std	Y+30, r25	; 0x1e
    3618:	8d 8f       	std	Y+29, r24	; 0x1d
    361a:	eb 8d       	ldd	r30, Y+27	; 0x1b
    361c:	fc 8d       	ldd	r31, Y+28	; 0x1c
    361e:	00 82       	st	Z, r0
    3620:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3622:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3624:	01 96       	adiw	r24, 0x01	; 1
    3626:	9c 8f       	std	Y+28, r25	; 0x1c
    3628:	8b 8f       	std	Y+27, r24	; 0x1b
    362a:	9f 8d       	ldd	r25, Y+31	; 0x1f
    362c:	91 50       	subi	r25, 0x01	; 1
    362e:	9f 8f       	std	Y+31, r25	; 0x1f
    3630:	ef 8d       	ldd	r30, Y+31	; 0x1f
    3632:	ee 23       	and	r30, r30
    3634:	51 f7       	brne	.-44     	; 0x360a <HSSD_voidDisplayAscending+0x2a>
	for(u8 i=0;i<10;i++)
    3636:	1f 86       	std	Y+15, r1	; 0x0f
    3638:	81 c0       	rjmp	.+258    	; 0x373c <HSSD_voidDisplayAscending+0x15c>
	{
		HSSD_voidDisplay(arr[i],A_u8PortId);
    363a:	8f 85       	ldd	r24, Y+15	; 0x0f
    363c:	28 2f       	mov	r18, r24
    363e:	30 e0       	ldi	r19, 0x00	; 0
    3640:	ce 01       	movw	r24, r28
    3642:	40 96       	adiw	r24, 0x10	; 16
    3644:	fc 01       	movw	r30, r24
    3646:	e2 0f       	add	r30, r18
    3648:	f3 1f       	adc	r31, r19
    364a:	80 81       	ld	r24, Z
    364c:	6a 8d       	ldd	r22, Y+26	; 0x1a
    364e:	0e 94 63 1a 	call	0x34c6	; 0x34c6 <HSSD_voidDisplay>
    3652:	80 e0       	ldi	r24, 0x00	; 0
    3654:	90 e0       	ldi	r25, 0x00	; 0
    3656:	aa e7       	ldi	r26, 0x7A	; 122
    3658:	b4 e4       	ldi	r27, 0x44	; 68
    365a:	8b 87       	std	Y+11, r24	; 0x0b
    365c:	9c 87       	std	Y+12, r25	; 0x0c
    365e:	ad 87       	std	Y+13, r26	; 0x0d
    3660:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3662:	6b 85       	ldd	r22, Y+11	; 0x0b
    3664:	7c 85       	ldd	r23, Y+12	; 0x0c
    3666:	8d 85       	ldd	r24, Y+13	; 0x0d
    3668:	9e 85       	ldd	r25, Y+14	; 0x0e
    366a:	20 e0       	ldi	r18, 0x00	; 0
    366c:	30 e0       	ldi	r19, 0x00	; 0
    366e:	4a ef       	ldi	r20, 0xFA	; 250
    3670:	54 e4       	ldi	r21, 0x44	; 68
    3672:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3676:	dc 01       	movw	r26, r24
    3678:	cb 01       	movw	r24, r22
    367a:	8f 83       	std	Y+7, r24	; 0x07
    367c:	98 87       	std	Y+8, r25	; 0x08
    367e:	a9 87       	std	Y+9, r26	; 0x09
    3680:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3682:	6f 81       	ldd	r22, Y+7	; 0x07
    3684:	78 85       	ldd	r23, Y+8	; 0x08
    3686:	89 85       	ldd	r24, Y+9	; 0x09
    3688:	9a 85       	ldd	r25, Y+10	; 0x0a
    368a:	20 e0       	ldi	r18, 0x00	; 0
    368c:	30 e0       	ldi	r19, 0x00	; 0
    368e:	40 e8       	ldi	r20, 0x80	; 128
    3690:	5f e3       	ldi	r21, 0x3F	; 63
    3692:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3696:	88 23       	and	r24, r24
    3698:	2c f4       	brge	.+10     	; 0x36a4 <HSSD_voidDisplayAscending+0xc4>
		__ticks = 1;
    369a:	81 e0       	ldi	r24, 0x01	; 1
    369c:	90 e0       	ldi	r25, 0x00	; 0
    369e:	9e 83       	std	Y+6, r25	; 0x06
    36a0:	8d 83       	std	Y+5, r24	; 0x05
    36a2:	3f c0       	rjmp	.+126    	; 0x3722 <HSSD_voidDisplayAscending+0x142>
	else if (__tmp > 65535)
    36a4:	6f 81       	ldd	r22, Y+7	; 0x07
    36a6:	78 85       	ldd	r23, Y+8	; 0x08
    36a8:	89 85       	ldd	r24, Y+9	; 0x09
    36aa:	9a 85       	ldd	r25, Y+10	; 0x0a
    36ac:	20 e0       	ldi	r18, 0x00	; 0
    36ae:	3f ef       	ldi	r19, 0xFF	; 255
    36b0:	4f e7       	ldi	r20, 0x7F	; 127
    36b2:	57 e4       	ldi	r21, 0x47	; 71
    36b4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    36b8:	18 16       	cp	r1, r24
    36ba:	4c f5       	brge	.+82     	; 0x370e <HSSD_voidDisplayAscending+0x12e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    36bc:	6b 85       	ldd	r22, Y+11	; 0x0b
    36be:	7c 85       	ldd	r23, Y+12	; 0x0c
    36c0:	8d 85       	ldd	r24, Y+13	; 0x0d
    36c2:	9e 85       	ldd	r25, Y+14	; 0x0e
    36c4:	20 e0       	ldi	r18, 0x00	; 0
    36c6:	30 e0       	ldi	r19, 0x00	; 0
    36c8:	40 e2       	ldi	r20, 0x20	; 32
    36ca:	51 e4       	ldi	r21, 0x41	; 65
    36cc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    36d0:	dc 01       	movw	r26, r24
    36d2:	cb 01       	movw	r24, r22
    36d4:	bc 01       	movw	r22, r24
    36d6:	cd 01       	movw	r24, r26
    36d8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    36dc:	dc 01       	movw	r26, r24
    36de:	cb 01       	movw	r24, r22
    36e0:	9e 83       	std	Y+6, r25	; 0x06
    36e2:	8d 83       	std	Y+5, r24	; 0x05
    36e4:	0f c0       	rjmp	.+30     	; 0x3704 <HSSD_voidDisplayAscending+0x124>
    36e6:	88 ec       	ldi	r24, 0xC8	; 200
    36e8:	90 e0       	ldi	r25, 0x00	; 0
    36ea:	9c 83       	std	Y+4, r25	; 0x04
    36ec:	8b 83       	std	Y+3, r24	; 0x03
    36ee:	8b 81       	ldd	r24, Y+3	; 0x03
    36f0:	9c 81       	ldd	r25, Y+4	; 0x04
    36f2:	01 97       	sbiw	r24, 0x01	; 1
    36f4:	f1 f7       	brne	.-4      	; 0x36f2 <HSSD_voidDisplayAscending+0x112>
    36f6:	9c 83       	std	Y+4, r25	; 0x04
    36f8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    36fa:	8d 81       	ldd	r24, Y+5	; 0x05
    36fc:	9e 81       	ldd	r25, Y+6	; 0x06
    36fe:	01 97       	sbiw	r24, 0x01	; 1
    3700:	9e 83       	std	Y+6, r25	; 0x06
    3702:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3704:	8d 81       	ldd	r24, Y+5	; 0x05
    3706:	9e 81       	ldd	r25, Y+6	; 0x06
    3708:	00 97       	sbiw	r24, 0x00	; 0
    370a:	69 f7       	brne	.-38     	; 0x36e6 <HSSD_voidDisplayAscending+0x106>
    370c:	14 c0       	rjmp	.+40     	; 0x3736 <HSSD_voidDisplayAscending+0x156>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    370e:	6f 81       	ldd	r22, Y+7	; 0x07
    3710:	78 85       	ldd	r23, Y+8	; 0x08
    3712:	89 85       	ldd	r24, Y+9	; 0x09
    3714:	9a 85       	ldd	r25, Y+10	; 0x0a
    3716:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    371a:	dc 01       	movw	r26, r24
    371c:	cb 01       	movw	r24, r22
    371e:	9e 83       	std	Y+6, r25	; 0x06
    3720:	8d 83       	std	Y+5, r24	; 0x05
    3722:	8d 81       	ldd	r24, Y+5	; 0x05
    3724:	9e 81       	ldd	r25, Y+6	; 0x06
    3726:	9a 83       	std	Y+2, r25	; 0x02
    3728:	89 83       	std	Y+1, r24	; 0x01
    372a:	89 81       	ldd	r24, Y+1	; 0x01
    372c:	9a 81       	ldd	r25, Y+2	; 0x02
    372e:	01 97       	sbiw	r24, 0x01	; 1
    3730:	f1 f7       	brne	.-4      	; 0x372e <HSSD_voidDisplayAscending+0x14e>
    3732:	9a 83       	std	Y+2, r25	; 0x02
    3734:	89 83       	std	Y+1, r24	; 0x01
}

void HSSD_voidDisplayAscending(u8 A_u8PortId)
{
u8 arr[]={ZERO,ONE,TWO,THREE,FOUR,FIVE,SIX,SEVEN,EIGHT,NINE};
	for(u8 i=0;i<10;i++)
    3736:	8f 85       	ldd	r24, Y+15	; 0x0f
    3738:	8f 5f       	subi	r24, 0xFF	; 255
    373a:	8f 87       	std	Y+15, r24	; 0x0f
    373c:	8f 85       	ldd	r24, Y+15	; 0x0f
    373e:	8a 30       	cpi	r24, 0x0A	; 10
    3740:	08 f4       	brcc	.+2      	; 0x3744 <HSSD_voidDisplayAscending+0x164>
    3742:	7b cf       	rjmp	.-266    	; 0x363a <HSSD_voidDisplayAscending+0x5a>
	{
		HSSD_voidDisplay(arr[i],A_u8PortId);
		_delay_ms(SSD_DELAY);
	}
}
    3744:	6f 96       	adiw	r28, 0x1f	; 31
    3746:	0f b6       	in	r0, 0x3f	; 63
    3748:	f8 94       	cli
    374a:	de bf       	out	0x3e, r29	; 62
    374c:	0f be       	out	0x3f, r0	; 63
    374e:	cd bf       	out	0x3d, r28	; 61
    3750:	cf 91       	pop	r28
    3752:	df 91       	pop	r29
    3754:	08 95       	ret

00003756 <HSSD_voidDisplayDescending>:

void HSSD_voidDisplayDescending(u8 A_u8PortId)
{
    3756:	df 93       	push	r29
    3758:	cf 93       	push	r28
    375a:	cd b7       	in	r28, 0x3d	; 61
    375c:	de b7       	in	r29, 0x3e	; 62
    375e:	6f 97       	sbiw	r28, 0x1f	; 31
    3760:	0f b6       	in	r0, 0x3f	; 63
    3762:	f8 94       	cli
    3764:	de bf       	out	0x3e, r29	; 62
    3766:	0f be       	out	0x3f, r0	; 63
    3768:	cd bf       	out	0x3d, r28	; 61
    376a:	8a 8f       	std	Y+26, r24	; 0x1a
u8 arr[]={ZERO,ONE,TWO,THREE,FOUR,FIVE,SIX,SEVEN,EIGHT,NINE};
    376c:	ce 01       	movw	r24, r28
    376e:	40 96       	adiw	r24, 0x10	; 16
    3770:	9c 8f       	std	Y+28, r25	; 0x1c
    3772:	8b 8f       	std	Y+27, r24	; 0x1b
    3774:	e0 e9       	ldi	r30, 0x90	; 144
    3776:	f0 e0       	ldi	r31, 0x00	; 0
    3778:	fe 8f       	std	Y+30, r31	; 0x1e
    377a:	ed 8f       	std	Y+29, r30	; 0x1d
    377c:	fa e0       	ldi	r31, 0x0A	; 10
    377e:	ff 8f       	std	Y+31, r31	; 0x1f
    3780:	ed 8d       	ldd	r30, Y+29	; 0x1d
    3782:	fe 8d       	ldd	r31, Y+30	; 0x1e
    3784:	00 80       	ld	r0, Z
    3786:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3788:	9e 8d       	ldd	r25, Y+30	; 0x1e
    378a:	01 96       	adiw	r24, 0x01	; 1
    378c:	9e 8f       	std	Y+30, r25	; 0x1e
    378e:	8d 8f       	std	Y+29, r24	; 0x1d
    3790:	eb 8d       	ldd	r30, Y+27	; 0x1b
    3792:	fc 8d       	ldd	r31, Y+28	; 0x1c
    3794:	00 82       	st	Z, r0
    3796:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3798:	9c 8d       	ldd	r25, Y+28	; 0x1c
    379a:	01 96       	adiw	r24, 0x01	; 1
    379c:	9c 8f       	std	Y+28, r25	; 0x1c
    379e:	8b 8f       	std	Y+27, r24	; 0x1b
    37a0:	9f 8d       	ldd	r25, Y+31	; 0x1f
    37a2:	91 50       	subi	r25, 0x01	; 1
    37a4:	9f 8f       	std	Y+31, r25	; 0x1f
    37a6:	ef 8d       	ldd	r30, Y+31	; 0x1f
    37a8:	ee 23       	and	r30, r30
    37aa:	51 f7       	brne	.-44     	; 0x3780 <HSSD_voidDisplayDescending+0x2a>
	for(u8 j=9;j>=0;j--)
    37ac:	89 e0       	ldi	r24, 0x09	; 9
    37ae:	8f 87       	std	Y+15, r24	; 0x0f
	{
		HSSD_voidDisplay(arr[j],A_u8PortId);
    37b0:	8f 85       	ldd	r24, Y+15	; 0x0f
    37b2:	28 2f       	mov	r18, r24
    37b4:	30 e0       	ldi	r19, 0x00	; 0
    37b6:	ce 01       	movw	r24, r28
    37b8:	40 96       	adiw	r24, 0x10	; 16
    37ba:	fc 01       	movw	r30, r24
    37bc:	e2 0f       	add	r30, r18
    37be:	f3 1f       	adc	r31, r19
    37c0:	80 81       	ld	r24, Z
    37c2:	6a 8d       	ldd	r22, Y+26	; 0x1a
    37c4:	0e 94 63 1a 	call	0x34c6	; 0x34c6 <HSSD_voidDisplay>
    37c8:	80 e0       	ldi	r24, 0x00	; 0
    37ca:	90 e0       	ldi	r25, 0x00	; 0
    37cc:	aa e7       	ldi	r26, 0x7A	; 122
    37ce:	b4 e4       	ldi	r27, 0x44	; 68
    37d0:	8b 87       	std	Y+11, r24	; 0x0b
    37d2:	9c 87       	std	Y+12, r25	; 0x0c
    37d4:	ad 87       	std	Y+13, r26	; 0x0d
    37d6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    37d8:	6b 85       	ldd	r22, Y+11	; 0x0b
    37da:	7c 85       	ldd	r23, Y+12	; 0x0c
    37dc:	8d 85       	ldd	r24, Y+13	; 0x0d
    37de:	9e 85       	ldd	r25, Y+14	; 0x0e
    37e0:	20 e0       	ldi	r18, 0x00	; 0
    37e2:	30 e0       	ldi	r19, 0x00	; 0
    37e4:	4a ef       	ldi	r20, 0xFA	; 250
    37e6:	54 e4       	ldi	r21, 0x44	; 68
    37e8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    37ec:	dc 01       	movw	r26, r24
    37ee:	cb 01       	movw	r24, r22
    37f0:	8f 83       	std	Y+7, r24	; 0x07
    37f2:	98 87       	std	Y+8, r25	; 0x08
    37f4:	a9 87       	std	Y+9, r26	; 0x09
    37f6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    37f8:	6f 81       	ldd	r22, Y+7	; 0x07
    37fa:	78 85       	ldd	r23, Y+8	; 0x08
    37fc:	89 85       	ldd	r24, Y+9	; 0x09
    37fe:	9a 85       	ldd	r25, Y+10	; 0x0a
    3800:	20 e0       	ldi	r18, 0x00	; 0
    3802:	30 e0       	ldi	r19, 0x00	; 0
    3804:	40 e8       	ldi	r20, 0x80	; 128
    3806:	5f e3       	ldi	r21, 0x3F	; 63
    3808:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    380c:	88 23       	and	r24, r24
    380e:	2c f4       	brge	.+10     	; 0x381a <HSSD_voidDisplayDescending+0xc4>
		__ticks = 1;
    3810:	81 e0       	ldi	r24, 0x01	; 1
    3812:	90 e0       	ldi	r25, 0x00	; 0
    3814:	9e 83       	std	Y+6, r25	; 0x06
    3816:	8d 83       	std	Y+5, r24	; 0x05
    3818:	3f c0       	rjmp	.+126    	; 0x3898 <HSSD_voidDisplayDescending+0x142>
	else if (__tmp > 65535)
    381a:	6f 81       	ldd	r22, Y+7	; 0x07
    381c:	78 85       	ldd	r23, Y+8	; 0x08
    381e:	89 85       	ldd	r24, Y+9	; 0x09
    3820:	9a 85       	ldd	r25, Y+10	; 0x0a
    3822:	20 e0       	ldi	r18, 0x00	; 0
    3824:	3f ef       	ldi	r19, 0xFF	; 255
    3826:	4f e7       	ldi	r20, 0x7F	; 127
    3828:	57 e4       	ldi	r21, 0x47	; 71
    382a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    382e:	18 16       	cp	r1, r24
    3830:	4c f5       	brge	.+82     	; 0x3884 <HSSD_voidDisplayDescending+0x12e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3832:	6b 85       	ldd	r22, Y+11	; 0x0b
    3834:	7c 85       	ldd	r23, Y+12	; 0x0c
    3836:	8d 85       	ldd	r24, Y+13	; 0x0d
    3838:	9e 85       	ldd	r25, Y+14	; 0x0e
    383a:	20 e0       	ldi	r18, 0x00	; 0
    383c:	30 e0       	ldi	r19, 0x00	; 0
    383e:	40 e2       	ldi	r20, 0x20	; 32
    3840:	51 e4       	ldi	r21, 0x41	; 65
    3842:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3846:	dc 01       	movw	r26, r24
    3848:	cb 01       	movw	r24, r22
    384a:	bc 01       	movw	r22, r24
    384c:	cd 01       	movw	r24, r26
    384e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3852:	dc 01       	movw	r26, r24
    3854:	cb 01       	movw	r24, r22
    3856:	9e 83       	std	Y+6, r25	; 0x06
    3858:	8d 83       	std	Y+5, r24	; 0x05
    385a:	0f c0       	rjmp	.+30     	; 0x387a <HSSD_voidDisplayDescending+0x124>
    385c:	88 ec       	ldi	r24, 0xC8	; 200
    385e:	90 e0       	ldi	r25, 0x00	; 0
    3860:	9c 83       	std	Y+4, r25	; 0x04
    3862:	8b 83       	std	Y+3, r24	; 0x03
    3864:	8b 81       	ldd	r24, Y+3	; 0x03
    3866:	9c 81       	ldd	r25, Y+4	; 0x04
    3868:	01 97       	sbiw	r24, 0x01	; 1
    386a:	f1 f7       	brne	.-4      	; 0x3868 <HSSD_voidDisplayDescending+0x112>
    386c:	9c 83       	std	Y+4, r25	; 0x04
    386e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3870:	8d 81       	ldd	r24, Y+5	; 0x05
    3872:	9e 81       	ldd	r25, Y+6	; 0x06
    3874:	01 97       	sbiw	r24, 0x01	; 1
    3876:	9e 83       	std	Y+6, r25	; 0x06
    3878:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    387a:	8d 81       	ldd	r24, Y+5	; 0x05
    387c:	9e 81       	ldd	r25, Y+6	; 0x06
    387e:	00 97       	sbiw	r24, 0x00	; 0
    3880:	69 f7       	brne	.-38     	; 0x385c <HSSD_voidDisplayDescending+0x106>
    3882:	14 c0       	rjmp	.+40     	; 0x38ac <HSSD_voidDisplayDescending+0x156>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3884:	6f 81       	ldd	r22, Y+7	; 0x07
    3886:	78 85       	ldd	r23, Y+8	; 0x08
    3888:	89 85       	ldd	r24, Y+9	; 0x09
    388a:	9a 85       	ldd	r25, Y+10	; 0x0a
    388c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3890:	dc 01       	movw	r26, r24
    3892:	cb 01       	movw	r24, r22
    3894:	9e 83       	std	Y+6, r25	; 0x06
    3896:	8d 83       	std	Y+5, r24	; 0x05
    3898:	8d 81       	ldd	r24, Y+5	; 0x05
    389a:	9e 81       	ldd	r25, Y+6	; 0x06
    389c:	9a 83       	std	Y+2, r25	; 0x02
    389e:	89 83       	std	Y+1, r24	; 0x01
    38a0:	89 81       	ldd	r24, Y+1	; 0x01
    38a2:	9a 81       	ldd	r25, Y+2	; 0x02
    38a4:	01 97       	sbiw	r24, 0x01	; 1
    38a6:	f1 f7       	brne	.-4      	; 0x38a4 <HSSD_voidDisplayDescending+0x14e>
    38a8:	9a 83       	std	Y+2, r25	; 0x02
    38aa:	89 83       	std	Y+1, r24	; 0x01
}

void HSSD_voidDisplayDescending(u8 A_u8PortId)
{
u8 arr[]={ZERO,ONE,TWO,THREE,FOUR,FIVE,SIX,SEVEN,EIGHT,NINE};
	for(u8 j=9;j>=0;j--)
    38ac:	8f 85       	ldd	r24, Y+15	; 0x0f
    38ae:	81 50       	subi	r24, 0x01	; 1
    38b0:	8f 87       	std	Y+15, r24	; 0x0f
    38b2:	7e cf       	rjmp	.-260    	; 0x37b0 <HSSD_voidDisplayDescending+0x5a>

000038b4 <main>:
#include "../Include/HAL/KEYPAD/KEYPAD_Interface.h"
#include "../Include/HAL/KEYPAD/KEYPAD_Configuration.h"


void main(void)
{
    38b4:	df 93       	push	r29
    38b6:	cf 93       	push	r28
    38b8:	cd b7       	in	r28, 0x3d	; 61
    38ba:	de b7       	in	r29, 0x3e	; 62
    38bc:	2e 97       	sbiw	r28, 0x0e	; 14
    38be:	0f b6       	in	r0, 0x3f	; 63
    38c0:	f8 94       	cli
    38c2:	de bf       	out	0x3e, r29	; 62
    38c4:	0f be       	out	0x3f, r0	; 63
    38c6:	cd bf       	out	0x3d, r28	; 61
    u8 local_u8PressedKey;
    MDIO_voidInit();
    38c8:	0e 94 4f 06 	call	0xc9e	; 0xc9e <MDIO_voidInit>
    HLCD4_voidInit();
    38cc:	0e 94 e8 0d 	call	0x1bd0	; 0x1bd0 <HLCD4_voidInit>
    //LCD
     HLCD4_voidGoToPos(1,1);
    38d0:	81 e0       	ldi	r24, 0x01	; 1
    38d2:	61 e0       	ldi	r22, 0x01	; 1
    38d4:	0e 94 71 11 	call	0x22e2	; 0x22e2 <HLCD4_voidGoToPos>
     HLCD4_voidSendString("Ahmed");
    38d8:	80 e6       	ldi	r24, 0x60	; 96
    38da:	90 e0       	ldi	r25, 0x00	; 0
    38dc:	0e 94 48 11 	call	0x2290	; 0x2290 <HLCD4_voidSendString>
     u8 calmChar[] = {0b01110,0b01010,0b01110,0b00100,0b01110,0b10101,0b00100,0b11111};
    38e0:	ce 01       	movw	r24, r28
    38e2:	02 96       	adiw	r24, 0x02	; 2
    38e4:	9b 87       	std	Y+11, r25	; 0x0b
    38e6:	8a 87       	std	Y+10, r24	; 0x0a
    38e8:	ea e9       	ldi	r30, 0x9A	; 154
    38ea:	f0 e0       	ldi	r31, 0x00	; 0
    38ec:	fd 87       	std	Y+13, r31	; 0x0d
    38ee:	ec 87       	std	Y+12, r30	; 0x0c
    38f0:	f8 e0       	ldi	r31, 0x08	; 8
    38f2:	fe 87       	std	Y+14, r31	; 0x0e
    38f4:	ec 85       	ldd	r30, Y+12	; 0x0c
    38f6:	fd 85       	ldd	r31, Y+13	; 0x0d
    38f8:	00 80       	ld	r0, Z
    38fa:	8c 85       	ldd	r24, Y+12	; 0x0c
    38fc:	9d 85       	ldd	r25, Y+13	; 0x0d
    38fe:	01 96       	adiw	r24, 0x01	; 1
    3900:	9d 87       	std	Y+13, r25	; 0x0d
    3902:	8c 87       	std	Y+12, r24	; 0x0c
    3904:	ea 85       	ldd	r30, Y+10	; 0x0a
    3906:	fb 85       	ldd	r31, Y+11	; 0x0b
    3908:	00 82       	st	Z, r0
    390a:	8a 85       	ldd	r24, Y+10	; 0x0a
    390c:	9b 85       	ldd	r25, Y+11	; 0x0b
    390e:	01 96       	adiw	r24, 0x01	; 1
    3910:	9b 87       	std	Y+11, r25	; 0x0b
    3912:	8a 87       	std	Y+10, r24	; 0x0a
    3914:	9e 85       	ldd	r25, Y+14	; 0x0e
    3916:	91 50       	subi	r25, 0x01	; 1
    3918:	9e 87       	std	Y+14, r25	; 0x0e
    391a:	ee 85       	ldd	r30, Y+14	; 0x0e
    391c:	ee 23       	and	r30, r30
    391e:	51 f7       	brne	.-44     	; 0x38f4 <main+0x40>
     HLCD4_voidStoreCustomChar(calmChar,0);
    3920:	ce 01       	movw	r24, r28
    3922:	02 96       	adiw	r24, 0x02	; 2
    3924:	60 e0       	ldi	r22, 0x00	; 0
    3926:	0e 94 76 12 	call	0x24ec	; 0x24ec <HLCD4_voidStoreCustomChar>
     HLCD4_voidDisplayCustomChar(0,1,6);
    392a:	80 e0       	ldi	r24, 0x00	; 0
    392c:	61 e0       	ldi	r22, 0x01	; 1
    392e:	46 e0       	ldi	r20, 0x06	; 6
    3930:	0e 94 ea 13 	call	0x27d4	; 0x27d4 <HLCD4_voidDisplayCustomChar>
     HLCD4_voidGoToPos(2,1);
    3934:	82 e0       	ldi	r24, 0x02	; 2
    3936:	61 e0       	ldi	r22, 0x01	; 1
    3938:	0e 94 71 11 	call	0x22e2	; 0x22e2 <HLCD4_voidGoToPos>
    while(1)
    {
        local_u8PressedKey=HKEYPAD_u8GetPressedKey();
    393c:	0e 94 d5 09 	call	0x13aa	; 0x13aa <HKEYPAD_u8GetPressedKey>
    3940:	89 83       	std	Y+1, r24	; 0x01
        if(local_u8PressedKey!=KEY_NOT_PRESSED)
    3942:	89 81       	ldd	r24, Y+1	; 0x01
    3944:	8f 3f       	cpi	r24, 0xFF	; 255
    3946:	d1 f3       	breq	.-12     	; 0x393c <main+0x88>
        {
            HLCD4_voidSendData(local_u8PressedKey);
    3948:	89 81       	ldd	r24, Y+1	; 0x01
    394a:	0e 94 54 0c 	call	0x18a8	; 0x18a8 <HLCD4_voidSendData>
    394e:	f6 cf       	rjmp	.-20     	; 0x393c <main+0x88>

00003950 <__udivmodhi4>:
    3950:	aa 1b       	sub	r26, r26
    3952:	bb 1b       	sub	r27, r27
    3954:	51 e1       	ldi	r21, 0x11	; 17
    3956:	07 c0       	rjmp	.+14     	; 0x3966 <__udivmodhi4_ep>

00003958 <__udivmodhi4_loop>:
    3958:	aa 1f       	adc	r26, r26
    395a:	bb 1f       	adc	r27, r27
    395c:	a6 17       	cp	r26, r22
    395e:	b7 07       	cpc	r27, r23
    3960:	10 f0       	brcs	.+4      	; 0x3966 <__udivmodhi4_ep>
    3962:	a6 1b       	sub	r26, r22
    3964:	b7 0b       	sbc	r27, r23

00003966 <__udivmodhi4_ep>:
    3966:	88 1f       	adc	r24, r24
    3968:	99 1f       	adc	r25, r25
    396a:	5a 95       	dec	r21
    396c:	a9 f7       	brne	.-22     	; 0x3958 <__udivmodhi4_loop>
    396e:	80 95       	com	r24
    3970:	90 95       	com	r25
    3972:	bc 01       	movw	r22, r24
    3974:	cd 01       	movw	r24, r26
    3976:	08 95       	ret

00003978 <__prologue_saves__>:
    3978:	2f 92       	push	r2
    397a:	3f 92       	push	r3
    397c:	4f 92       	push	r4
    397e:	5f 92       	push	r5
    3980:	6f 92       	push	r6
    3982:	7f 92       	push	r7
    3984:	8f 92       	push	r8
    3986:	9f 92       	push	r9
    3988:	af 92       	push	r10
    398a:	bf 92       	push	r11
    398c:	cf 92       	push	r12
    398e:	df 92       	push	r13
    3990:	ef 92       	push	r14
    3992:	ff 92       	push	r15
    3994:	0f 93       	push	r16
    3996:	1f 93       	push	r17
    3998:	cf 93       	push	r28
    399a:	df 93       	push	r29
    399c:	cd b7       	in	r28, 0x3d	; 61
    399e:	de b7       	in	r29, 0x3e	; 62
    39a0:	ca 1b       	sub	r28, r26
    39a2:	db 0b       	sbc	r29, r27
    39a4:	0f b6       	in	r0, 0x3f	; 63
    39a6:	f8 94       	cli
    39a8:	de bf       	out	0x3e, r29	; 62
    39aa:	0f be       	out	0x3f, r0	; 63
    39ac:	cd bf       	out	0x3d, r28	; 61
    39ae:	09 94       	ijmp

000039b0 <__epilogue_restores__>:
    39b0:	2a 88       	ldd	r2, Y+18	; 0x12
    39b2:	39 88       	ldd	r3, Y+17	; 0x11
    39b4:	48 88       	ldd	r4, Y+16	; 0x10
    39b6:	5f 84       	ldd	r5, Y+15	; 0x0f
    39b8:	6e 84       	ldd	r6, Y+14	; 0x0e
    39ba:	7d 84       	ldd	r7, Y+13	; 0x0d
    39bc:	8c 84       	ldd	r8, Y+12	; 0x0c
    39be:	9b 84       	ldd	r9, Y+11	; 0x0b
    39c0:	aa 84       	ldd	r10, Y+10	; 0x0a
    39c2:	b9 84       	ldd	r11, Y+9	; 0x09
    39c4:	c8 84       	ldd	r12, Y+8	; 0x08
    39c6:	df 80       	ldd	r13, Y+7	; 0x07
    39c8:	ee 80       	ldd	r14, Y+6	; 0x06
    39ca:	fd 80       	ldd	r15, Y+5	; 0x05
    39cc:	0c 81       	ldd	r16, Y+4	; 0x04
    39ce:	1b 81       	ldd	r17, Y+3	; 0x03
    39d0:	aa 81       	ldd	r26, Y+2	; 0x02
    39d2:	b9 81       	ldd	r27, Y+1	; 0x01
    39d4:	ce 0f       	add	r28, r30
    39d6:	d1 1d       	adc	r29, r1
    39d8:	0f b6       	in	r0, 0x3f	; 63
    39da:	f8 94       	cli
    39dc:	de bf       	out	0x3e, r29	; 62
    39de:	0f be       	out	0x3f, r0	; 63
    39e0:	cd bf       	out	0x3d, r28	; 61
    39e2:	ed 01       	movw	r28, r26
    39e4:	08 95       	ret

000039e6 <_exit>:
    39e6:	f8 94       	cli

000039e8 <__stop_program>:
    39e8:	ff cf       	rjmp	.-2      	; 0x39e8 <__stop_program>
