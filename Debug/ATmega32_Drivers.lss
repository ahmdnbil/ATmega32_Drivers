
ATmega32_Drivers.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003812  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000002a  00800060  00003812  000038a6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  0080008a  0080008a  000038d0  2**0
                  ALLOC
  3 .stab         00002c04  00000000  00000000  000038d0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000e2b  00000000  00000000  000064d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000160  00000000  00000000  000072ff  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000018f  00000000  00000000  0000745f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002045  00000000  00000000  000075ee  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001101  00000000  00000000  00009633  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000f82  00000000  00000000  0000a734  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000180  00000000  00000000  0000b6b8  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002c2  00000000  00000000  0000b838  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000088e  00000000  00000000  0000bafa  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000c388  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e2 e1       	ldi	r30, 0x12	; 18
      68:	f8 e3       	ldi	r31, 0x38	; 56
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	aa 38       	cpi	r26, 0x8A	; 138
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	aa e8       	ldi	r26, 0x8A	; 138
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ab 38       	cpi	r26, 0x8B	; 139
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 73 1b 	call	0x36e6	; 0x36e6 <main>
      8a:	0c 94 07 1c 	jmp	0x380e	; 0x380e <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 d0 1b 	jmp	0x37a0	; 0x37a0 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a6 e6       	ldi	r26, 0x66	; 102
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 ec 1b 	jmp	0x37d8	; 0x37d8 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 dc 1b 	jmp	0x37b8	; 0x37b8 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 f8 1b 	jmp	0x37f0	; 0x37f0 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 dc 1b 	jmp	0x37b8	; 0x37b8 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 f8 1b 	jmp	0x37f0	; 0x37f0 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 d0 1b 	jmp	0x37a0	; 0x37a0 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	86 e6       	ldi	r24, 0x66	; 102
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 ec 1b 	jmp	0x37d8	; 0x37d8 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 d8 1b 	jmp	0x37b0	; 0x37b0 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	66 e6       	ldi	r22, 0x66	; 102
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 f4 1b 	jmp	0x37e8	; 0x37e8 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 dc 1b 	jmp	0x37b8	; 0x37b8 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 f8 1b 	jmp	0x37f0	; 0x37f0 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 dc 1b 	jmp	0x37b8	; 0x37b8 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 f8 1b 	jmp	0x37f0	; 0x37f0 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 dc 1b 	jmp	0x37b8	; 0x37b8 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 f8 1b 	jmp	0x37f0	; 0x37f0 <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 e0 1b 	jmp	0x37c0	; 0x37c0 <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 fc 1b 	jmp	0x37f8	; 0x37f8 <__epilogue_restores__+0x20>

00000952 <__pack_f>:
     952:	df 92       	push	r13
     954:	ef 92       	push	r14
     956:	ff 92       	push	r15
     958:	0f 93       	push	r16
     95a:	1f 93       	push	r17
     95c:	fc 01       	movw	r30, r24
     95e:	e4 80       	ldd	r14, Z+4	; 0x04
     960:	f5 80       	ldd	r15, Z+5	; 0x05
     962:	06 81       	ldd	r16, Z+6	; 0x06
     964:	17 81       	ldd	r17, Z+7	; 0x07
     966:	d1 80       	ldd	r13, Z+1	; 0x01
     968:	80 81       	ld	r24, Z
     96a:	82 30       	cpi	r24, 0x02	; 2
     96c:	48 f4       	brcc	.+18     	; 0x980 <__pack_f+0x2e>
     96e:	80 e0       	ldi	r24, 0x00	; 0
     970:	90 e0       	ldi	r25, 0x00	; 0
     972:	a0 e1       	ldi	r26, 0x10	; 16
     974:	b0 e0       	ldi	r27, 0x00	; 0
     976:	e8 2a       	or	r14, r24
     978:	f9 2a       	or	r15, r25
     97a:	0a 2b       	or	r16, r26
     97c:	1b 2b       	or	r17, r27
     97e:	a5 c0       	rjmp	.+330    	; 0xaca <__pack_f+0x178>
     980:	84 30       	cpi	r24, 0x04	; 4
     982:	09 f4       	brne	.+2      	; 0x986 <__pack_f+0x34>
     984:	9f c0       	rjmp	.+318    	; 0xac4 <__pack_f+0x172>
     986:	82 30       	cpi	r24, 0x02	; 2
     988:	21 f4       	brne	.+8      	; 0x992 <__pack_f+0x40>
     98a:	ee 24       	eor	r14, r14
     98c:	ff 24       	eor	r15, r15
     98e:	87 01       	movw	r16, r14
     990:	05 c0       	rjmp	.+10     	; 0x99c <__pack_f+0x4a>
     992:	e1 14       	cp	r14, r1
     994:	f1 04       	cpc	r15, r1
     996:	01 05       	cpc	r16, r1
     998:	11 05       	cpc	r17, r1
     99a:	19 f4       	brne	.+6      	; 0x9a2 <__pack_f+0x50>
     99c:	e0 e0       	ldi	r30, 0x00	; 0
     99e:	f0 e0       	ldi	r31, 0x00	; 0
     9a0:	96 c0       	rjmp	.+300    	; 0xace <__pack_f+0x17c>
     9a2:	62 81       	ldd	r22, Z+2	; 0x02
     9a4:	73 81       	ldd	r23, Z+3	; 0x03
     9a6:	9f ef       	ldi	r25, 0xFF	; 255
     9a8:	62 38       	cpi	r22, 0x82	; 130
     9aa:	79 07       	cpc	r23, r25
     9ac:	0c f0       	brlt	.+2      	; 0x9b0 <__pack_f+0x5e>
     9ae:	5b c0       	rjmp	.+182    	; 0xa66 <__pack_f+0x114>
     9b0:	22 e8       	ldi	r18, 0x82	; 130
     9b2:	3f ef       	ldi	r19, 0xFF	; 255
     9b4:	26 1b       	sub	r18, r22
     9b6:	37 0b       	sbc	r19, r23
     9b8:	2a 31       	cpi	r18, 0x1A	; 26
     9ba:	31 05       	cpc	r19, r1
     9bc:	2c f0       	brlt	.+10     	; 0x9c8 <__pack_f+0x76>
     9be:	20 e0       	ldi	r18, 0x00	; 0
     9c0:	30 e0       	ldi	r19, 0x00	; 0
     9c2:	40 e0       	ldi	r20, 0x00	; 0
     9c4:	50 e0       	ldi	r21, 0x00	; 0
     9c6:	2a c0       	rjmp	.+84     	; 0xa1c <__pack_f+0xca>
     9c8:	b8 01       	movw	r22, r16
     9ca:	a7 01       	movw	r20, r14
     9cc:	02 2e       	mov	r0, r18
     9ce:	04 c0       	rjmp	.+8      	; 0x9d8 <__pack_f+0x86>
     9d0:	76 95       	lsr	r23
     9d2:	67 95       	ror	r22
     9d4:	57 95       	ror	r21
     9d6:	47 95       	ror	r20
     9d8:	0a 94       	dec	r0
     9da:	d2 f7       	brpl	.-12     	; 0x9d0 <__pack_f+0x7e>
     9dc:	81 e0       	ldi	r24, 0x01	; 1
     9de:	90 e0       	ldi	r25, 0x00	; 0
     9e0:	a0 e0       	ldi	r26, 0x00	; 0
     9e2:	b0 e0       	ldi	r27, 0x00	; 0
     9e4:	04 c0       	rjmp	.+8      	; 0x9ee <__pack_f+0x9c>
     9e6:	88 0f       	add	r24, r24
     9e8:	99 1f       	adc	r25, r25
     9ea:	aa 1f       	adc	r26, r26
     9ec:	bb 1f       	adc	r27, r27
     9ee:	2a 95       	dec	r18
     9f0:	d2 f7       	brpl	.-12     	; 0x9e6 <__pack_f+0x94>
     9f2:	01 97       	sbiw	r24, 0x01	; 1
     9f4:	a1 09       	sbc	r26, r1
     9f6:	b1 09       	sbc	r27, r1
     9f8:	8e 21       	and	r24, r14
     9fa:	9f 21       	and	r25, r15
     9fc:	a0 23       	and	r26, r16
     9fe:	b1 23       	and	r27, r17
     a00:	00 97       	sbiw	r24, 0x00	; 0
     a02:	a1 05       	cpc	r26, r1
     a04:	b1 05       	cpc	r27, r1
     a06:	21 f0       	breq	.+8      	; 0xa10 <__pack_f+0xbe>
     a08:	81 e0       	ldi	r24, 0x01	; 1
     a0a:	90 e0       	ldi	r25, 0x00	; 0
     a0c:	a0 e0       	ldi	r26, 0x00	; 0
     a0e:	b0 e0       	ldi	r27, 0x00	; 0
     a10:	9a 01       	movw	r18, r20
     a12:	ab 01       	movw	r20, r22
     a14:	28 2b       	or	r18, r24
     a16:	39 2b       	or	r19, r25
     a18:	4a 2b       	or	r20, r26
     a1a:	5b 2b       	or	r21, r27
     a1c:	da 01       	movw	r26, r20
     a1e:	c9 01       	movw	r24, r18
     a20:	8f 77       	andi	r24, 0x7F	; 127
     a22:	90 70       	andi	r25, 0x00	; 0
     a24:	a0 70       	andi	r26, 0x00	; 0
     a26:	b0 70       	andi	r27, 0x00	; 0
     a28:	80 34       	cpi	r24, 0x40	; 64
     a2a:	91 05       	cpc	r25, r1
     a2c:	a1 05       	cpc	r26, r1
     a2e:	b1 05       	cpc	r27, r1
     a30:	39 f4       	brne	.+14     	; 0xa40 <__pack_f+0xee>
     a32:	27 ff       	sbrs	r18, 7
     a34:	09 c0       	rjmp	.+18     	; 0xa48 <__pack_f+0xf6>
     a36:	20 5c       	subi	r18, 0xC0	; 192
     a38:	3f 4f       	sbci	r19, 0xFF	; 255
     a3a:	4f 4f       	sbci	r20, 0xFF	; 255
     a3c:	5f 4f       	sbci	r21, 0xFF	; 255
     a3e:	04 c0       	rjmp	.+8      	; 0xa48 <__pack_f+0xf6>
     a40:	21 5c       	subi	r18, 0xC1	; 193
     a42:	3f 4f       	sbci	r19, 0xFF	; 255
     a44:	4f 4f       	sbci	r20, 0xFF	; 255
     a46:	5f 4f       	sbci	r21, 0xFF	; 255
     a48:	e0 e0       	ldi	r30, 0x00	; 0
     a4a:	f0 e0       	ldi	r31, 0x00	; 0
     a4c:	20 30       	cpi	r18, 0x00	; 0
     a4e:	a0 e0       	ldi	r26, 0x00	; 0
     a50:	3a 07       	cpc	r19, r26
     a52:	a0 e0       	ldi	r26, 0x00	; 0
     a54:	4a 07       	cpc	r20, r26
     a56:	a0 e4       	ldi	r26, 0x40	; 64
     a58:	5a 07       	cpc	r21, r26
     a5a:	10 f0       	brcs	.+4      	; 0xa60 <__pack_f+0x10e>
     a5c:	e1 e0       	ldi	r30, 0x01	; 1
     a5e:	f0 e0       	ldi	r31, 0x00	; 0
     a60:	79 01       	movw	r14, r18
     a62:	8a 01       	movw	r16, r20
     a64:	27 c0       	rjmp	.+78     	; 0xab4 <__pack_f+0x162>
     a66:	60 38       	cpi	r22, 0x80	; 128
     a68:	71 05       	cpc	r23, r1
     a6a:	64 f5       	brge	.+88     	; 0xac4 <__pack_f+0x172>
     a6c:	fb 01       	movw	r30, r22
     a6e:	e1 58       	subi	r30, 0x81	; 129
     a70:	ff 4f       	sbci	r31, 0xFF	; 255
     a72:	d8 01       	movw	r26, r16
     a74:	c7 01       	movw	r24, r14
     a76:	8f 77       	andi	r24, 0x7F	; 127
     a78:	90 70       	andi	r25, 0x00	; 0
     a7a:	a0 70       	andi	r26, 0x00	; 0
     a7c:	b0 70       	andi	r27, 0x00	; 0
     a7e:	80 34       	cpi	r24, 0x40	; 64
     a80:	91 05       	cpc	r25, r1
     a82:	a1 05       	cpc	r26, r1
     a84:	b1 05       	cpc	r27, r1
     a86:	39 f4       	brne	.+14     	; 0xa96 <__pack_f+0x144>
     a88:	e7 fe       	sbrs	r14, 7
     a8a:	0d c0       	rjmp	.+26     	; 0xaa6 <__pack_f+0x154>
     a8c:	80 e4       	ldi	r24, 0x40	; 64
     a8e:	90 e0       	ldi	r25, 0x00	; 0
     a90:	a0 e0       	ldi	r26, 0x00	; 0
     a92:	b0 e0       	ldi	r27, 0x00	; 0
     a94:	04 c0       	rjmp	.+8      	; 0xa9e <__pack_f+0x14c>
     a96:	8f e3       	ldi	r24, 0x3F	; 63
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	e8 0e       	add	r14, r24
     aa0:	f9 1e       	adc	r15, r25
     aa2:	0a 1f       	adc	r16, r26
     aa4:	1b 1f       	adc	r17, r27
     aa6:	17 ff       	sbrs	r17, 7
     aa8:	05 c0       	rjmp	.+10     	; 0xab4 <__pack_f+0x162>
     aaa:	16 95       	lsr	r17
     aac:	07 95       	ror	r16
     aae:	f7 94       	ror	r15
     ab0:	e7 94       	ror	r14
     ab2:	31 96       	adiw	r30, 0x01	; 1
     ab4:	87 e0       	ldi	r24, 0x07	; 7
     ab6:	16 95       	lsr	r17
     ab8:	07 95       	ror	r16
     aba:	f7 94       	ror	r15
     abc:	e7 94       	ror	r14
     abe:	8a 95       	dec	r24
     ac0:	d1 f7       	brne	.-12     	; 0xab6 <__pack_f+0x164>
     ac2:	05 c0       	rjmp	.+10     	; 0xace <__pack_f+0x17c>
     ac4:	ee 24       	eor	r14, r14
     ac6:	ff 24       	eor	r15, r15
     ac8:	87 01       	movw	r16, r14
     aca:	ef ef       	ldi	r30, 0xFF	; 255
     acc:	f0 e0       	ldi	r31, 0x00	; 0
     ace:	6e 2f       	mov	r22, r30
     ad0:	67 95       	ror	r22
     ad2:	66 27       	eor	r22, r22
     ad4:	67 95       	ror	r22
     ad6:	90 2f       	mov	r25, r16
     ad8:	9f 77       	andi	r25, 0x7F	; 127
     ada:	d7 94       	ror	r13
     adc:	dd 24       	eor	r13, r13
     ade:	d7 94       	ror	r13
     ae0:	8e 2f       	mov	r24, r30
     ae2:	86 95       	lsr	r24
     ae4:	49 2f       	mov	r20, r25
     ae6:	46 2b       	or	r20, r22
     ae8:	58 2f       	mov	r21, r24
     aea:	5d 29       	or	r21, r13
     aec:	b7 01       	movw	r22, r14
     aee:	ca 01       	movw	r24, r20
     af0:	1f 91       	pop	r17
     af2:	0f 91       	pop	r16
     af4:	ff 90       	pop	r15
     af6:	ef 90       	pop	r14
     af8:	df 90       	pop	r13
     afa:	08 95       	ret

00000afc <__unpack_f>:
     afc:	fc 01       	movw	r30, r24
     afe:	db 01       	movw	r26, r22
     b00:	40 81       	ld	r20, Z
     b02:	51 81       	ldd	r21, Z+1	; 0x01
     b04:	22 81       	ldd	r18, Z+2	; 0x02
     b06:	62 2f       	mov	r22, r18
     b08:	6f 77       	andi	r22, 0x7F	; 127
     b0a:	70 e0       	ldi	r23, 0x00	; 0
     b0c:	22 1f       	adc	r18, r18
     b0e:	22 27       	eor	r18, r18
     b10:	22 1f       	adc	r18, r18
     b12:	93 81       	ldd	r25, Z+3	; 0x03
     b14:	89 2f       	mov	r24, r25
     b16:	88 0f       	add	r24, r24
     b18:	82 2b       	or	r24, r18
     b1a:	28 2f       	mov	r18, r24
     b1c:	30 e0       	ldi	r19, 0x00	; 0
     b1e:	99 1f       	adc	r25, r25
     b20:	99 27       	eor	r25, r25
     b22:	99 1f       	adc	r25, r25
     b24:	11 96       	adiw	r26, 0x01	; 1
     b26:	9c 93       	st	X, r25
     b28:	11 97       	sbiw	r26, 0x01	; 1
     b2a:	21 15       	cp	r18, r1
     b2c:	31 05       	cpc	r19, r1
     b2e:	a9 f5       	brne	.+106    	; 0xb9a <__unpack_f+0x9e>
     b30:	41 15       	cp	r20, r1
     b32:	51 05       	cpc	r21, r1
     b34:	61 05       	cpc	r22, r1
     b36:	71 05       	cpc	r23, r1
     b38:	11 f4       	brne	.+4      	; 0xb3e <__unpack_f+0x42>
     b3a:	82 e0       	ldi	r24, 0x02	; 2
     b3c:	37 c0       	rjmp	.+110    	; 0xbac <__unpack_f+0xb0>
     b3e:	82 e8       	ldi	r24, 0x82	; 130
     b40:	9f ef       	ldi	r25, 0xFF	; 255
     b42:	13 96       	adiw	r26, 0x03	; 3
     b44:	9c 93       	st	X, r25
     b46:	8e 93       	st	-X, r24
     b48:	12 97       	sbiw	r26, 0x02	; 2
     b4a:	9a 01       	movw	r18, r20
     b4c:	ab 01       	movw	r20, r22
     b4e:	67 e0       	ldi	r22, 0x07	; 7
     b50:	22 0f       	add	r18, r18
     b52:	33 1f       	adc	r19, r19
     b54:	44 1f       	adc	r20, r20
     b56:	55 1f       	adc	r21, r21
     b58:	6a 95       	dec	r22
     b5a:	d1 f7       	brne	.-12     	; 0xb50 <__unpack_f+0x54>
     b5c:	83 e0       	ldi	r24, 0x03	; 3
     b5e:	8c 93       	st	X, r24
     b60:	0d c0       	rjmp	.+26     	; 0xb7c <__unpack_f+0x80>
     b62:	22 0f       	add	r18, r18
     b64:	33 1f       	adc	r19, r19
     b66:	44 1f       	adc	r20, r20
     b68:	55 1f       	adc	r21, r21
     b6a:	12 96       	adiw	r26, 0x02	; 2
     b6c:	8d 91       	ld	r24, X+
     b6e:	9c 91       	ld	r25, X
     b70:	13 97       	sbiw	r26, 0x03	; 3
     b72:	01 97       	sbiw	r24, 0x01	; 1
     b74:	13 96       	adiw	r26, 0x03	; 3
     b76:	9c 93       	st	X, r25
     b78:	8e 93       	st	-X, r24
     b7a:	12 97       	sbiw	r26, 0x02	; 2
     b7c:	20 30       	cpi	r18, 0x00	; 0
     b7e:	80 e0       	ldi	r24, 0x00	; 0
     b80:	38 07       	cpc	r19, r24
     b82:	80 e0       	ldi	r24, 0x00	; 0
     b84:	48 07       	cpc	r20, r24
     b86:	80 e4       	ldi	r24, 0x40	; 64
     b88:	58 07       	cpc	r21, r24
     b8a:	58 f3       	brcs	.-42     	; 0xb62 <__unpack_f+0x66>
     b8c:	14 96       	adiw	r26, 0x04	; 4
     b8e:	2d 93       	st	X+, r18
     b90:	3d 93       	st	X+, r19
     b92:	4d 93       	st	X+, r20
     b94:	5c 93       	st	X, r21
     b96:	17 97       	sbiw	r26, 0x07	; 7
     b98:	08 95       	ret
     b9a:	2f 3f       	cpi	r18, 0xFF	; 255
     b9c:	31 05       	cpc	r19, r1
     b9e:	79 f4       	brne	.+30     	; 0xbbe <__unpack_f+0xc2>
     ba0:	41 15       	cp	r20, r1
     ba2:	51 05       	cpc	r21, r1
     ba4:	61 05       	cpc	r22, r1
     ba6:	71 05       	cpc	r23, r1
     ba8:	19 f4       	brne	.+6      	; 0xbb0 <__unpack_f+0xb4>
     baa:	84 e0       	ldi	r24, 0x04	; 4
     bac:	8c 93       	st	X, r24
     bae:	08 95       	ret
     bb0:	64 ff       	sbrs	r22, 4
     bb2:	03 c0       	rjmp	.+6      	; 0xbba <__unpack_f+0xbe>
     bb4:	81 e0       	ldi	r24, 0x01	; 1
     bb6:	8c 93       	st	X, r24
     bb8:	12 c0       	rjmp	.+36     	; 0xbde <__unpack_f+0xe2>
     bba:	1c 92       	st	X, r1
     bbc:	10 c0       	rjmp	.+32     	; 0xbde <__unpack_f+0xe2>
     bbe:	2f 57       	subi	r18, 0x7F	; 127
     bc0:	30 40       	sbci	r19, 0x00	; 0
     bc2:	13 96       	adiw	r26, 0x03	; 3
     bc4:	3c 93       	st	X, r19
     bc6:	2e 93       	st	-X, r18
     bc8:	12 97       	sbiw	r26, 0x02	; 2
     bca:	83 e0       	ldi	r24, 0x03	; 3
     bcc:	8c 93       	st	X, r24
     bce:	87 e0       	ldi	r24, 0x07	; 7
     bd0:	44 0f       	add	r20, r20
     bd2:	55 1f       	adc	r21, r21
     bd4:	66 1f       	adc	r22, r22
     bd6:	77 1f       	adc	r23, r23
     bd8:	8a 95       	dec	r24
     bda:	d1 f7       	brne	.-12     	; 0xbd0 <__unpack_f+0xd4>
     bdc:	70 64       	ori	r23, 0x40	; 64
     bde:	14 96       	adiw	r26, 0x04	; 4
     be0:	4d 93       	st	X+, r20
     be2:	5d 93       	st	X+, r21
     be4:	6d 93       	st	X+, r22
     be6:	7c 93       	st	X, r23
     be8:	17 97       	sbiw	r26, 0x07	; 7
     bea:	08 95       	ret

00000bec <__fpcmp_parts_f>:
     bec:	1f 93       	push	r17
     bee:	dc 01       	movw	r26, r24
     bf0:	fb 01       	movw	r30, r22
     bf2:	9c 91       	ld	r25, X
     bf4:	92 30       	cpi	r25, 0x02	; 2
     bf6:	08 f4       	brcc	.+2      	; 0xbfa <__fpcmp_parts_f+0xe>
     bf8:	47 c0       	rjmp	.+142    	; 0xc88 <__fpcmp_parts_f+0x9c>
     bfa:	80 81       	ld	r24, Z
     bfc:	82 30       	cpi	r24, 0x02	; 2
     bfe:	08 f4       	brcc	.+2      	; 0xc02 <__fpcmp_parts_f+0x16>
     c00:	43 c0       	rjmp	.+134    	; 0xc88 <__fpcmp_parts_f+0x9c>
     c02:	94 30       	cpi	r25, 0x04	; 4
     c04:	51 f4       	brne	.+20     	; 0xc1a <__fpcmp_parts_f+0x2e>
     c06:	11 96       	adiw	r26, 0x01	; 1
     c08:	1c 91       	ld	r17, X
     c0a:	84 30       	cpi	r24, 0x04	; 4
     c0c:	99 f5       	brne	.+102    	; 0xc74 <__fpcmp_parts_f+0x88>
     c0e:	81 81       	ldd	r24, Z+1	; 0x01
     c10:	68 2f       	mov	r22, r24
     c12:	70 e0       	ldi	r23, 0x00	; 0
     c14:	61 1b       	sub	r22, r17
     c16:	71 09       	sbc	r23, r1
     c18:	3f c0       	rjmp	.+126    	; 0xc98 <__fpcmp_parts_f+0xac>
     c1a:	84 30       	cpi	r24, 0x04	; 4
     c1c:	21 f0       	breq	.+8      	; 0xc26 <__fpcmp_parts_f+0x3a>
     c1e:	92 30       	cpi	r25, 0x02	; 2
     c20:	31 f4       	brne	.+12     	; 0xc2e <__fpcmp_parts_f+0x42>
     c22:	82 30       	cpi	r24, 0x02	; 2
     c24:	b9 f1       	breq	.+110    	; 0xc94 <__fpcmp_parts_f+0xa8>
     c26:	81 81       	ldd	r24, Z+1	; 0x01
     c28:	88 23       	and	r24, r24
     c2a:	89 f1       	breq	.+98     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c2c:	2d c0       	rjmp	.+90     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c2e:	11 96       	adiw	r26, 0x01	; 1
     c30:	1c 91       	ld	r17, X
     c32:	11 97       	sbiw	r26, 0x01	; 1
     c34:	82 30       	cpi	r24, 0x02	; 2
     c36:	f1 f0       	breq	.+60     	; 0xc74 <__fpcmp_parts_f+0x88>
     c38:	81 81       	ldd	r24, Z+1	; 0x01
     c3a:	18 17       	cp	r17, r24
     c3c:	d9 f4       	brne	.+54     	; 0xc74 <__fpcmp_parts_f+0x88>
     c3e:	12 96       	adiw	r26, 0x02	; 2
     c40:	2d 91       	ld	r18, X+
     c42:	3c 91       	ld	r19, X
     c44:	13 97       	sbiw	r26, 0x03	; 3
     c46:	82 81       	ldd	r24, Z+2	; 0x02
     c48:	93 81       	ldd	r25, Z+3	; 0x03
     c4a:	82 17       	cp	r24, r18
     c4c:	93 07       	cpc	r25, r19
     c4e:	94 f0       	brlt	.+36     	; 0xc74 <__fpcmp_parts_f+0x88>
     c50:	28 17       	cp	r18, r24
     c52:	39 07       	cpc	r19, r25
     c54:	bc f0       	brlt	.+46     	; 0xc84 <__fpcmp_parts_f+0x98>
     c56:	14 96       	adiw	r26, 0x04	; 4
     c58:	8d 91       	ld	r24, X+
     c5a:	9d 91       	ld	r25, X+
     c5c:	0d 90       	ld	r0, X+
     c5e:	bc 91       	ld	r27, X
     c60:	a0 2d       	mov	r26, r0
     c62:	24 81       	ldd	r18, Z+4	; 0x04
     c64:	35 81       	ldd	r19, Z+5	; 0x05
     c66:	46 81       	ldd	r20, Z+6	; 0x06
     c68:	57 81       	ldd	r21, Z+7	; 0x07
     c6a:	28 17       	cp	r18, r24
     c6c:	39 07       	cpc	r19, r25
     c6e:	4a 07       	cpc	r20, r26
     c70:	5b 07       	cpc	r21, r27
     c72:	18 f4       	brcc	.+6      	; 0xc7a <__fpcmp_parts_f+0x8e>
     c74:	11 23       	and	r17, r17
     c76:	41 f0       	breq	.+16     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c78:	0a c0       	rjmp	.+20     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c7a:	82 17       	cp	r24, r18
     c7c:	93 07       	cpc	r25, r19
     c7e:	a4 07       	cpc	r26, r20
     c80:	b5 07       	cpc	r27, r21
     c82:	40 f4       	brcc	.+16     	; 0xc94 <__fpcmp_parts_f+0xa8>
     c84:	11 23       	and	r17, r17
     c86:	19 f0       	breq	.+6      	; 0xc8e <__fpcmp_parts_f+0xa2>
     c88:	61 e0       	ldi	r22, 0x01	; 1
     c8a:	70 e0       	ldi	r23, 0x00	; 0
     c8c:	05 c0       	rjmp	.+10     	; 0xc98 <__fpcmp_parts_f+0xac>
     c8e:	6f ef       	ldi	r22, 0xFF	; 255
     c90:	7f ef       	ldi	r23, 0xFF	; 255
     c92:	02 c0       	rjmp	.+4      	; 0xc98 <__fpcmp_parts_f+0xac>
     c94:	60 e0       	ldi	r22, 0x00	; 0
     c96:	70 e0       	ldi	r23, 0x00	; 0
     c98:	cb 01       	movw	r24, r22
     c9a:	1f 91       	pop	r17
     c9c:	08 95       	ret

00000c9e <MDIO_voidInit>:
#include "../Include/MCAL/DIO/DIO_Private.h"
#include "../Include/MCAL/DIO/DIO_Configuration.h"
#include "../Include/MCAL/DIO/DIO_Interface.h"

void MDIO_voidInit()
{
     c9e:	df 93       	push	r29
     ca0:	cf 93       	push	r28
     ca2:	cd b7       	in	r28, 0x3d	; 61
     ca4:	de b7       	in	r29, 0x3e	; 62
    PORTA_REG=CONC_BIT(PORTA_PIN7_VALUE,PORTA_PIN6_VALUE,PORTA_PIN5_VALUE,PORTA_PIN4_VALUE,PORTA_PIN3_VALUE,PORTA_PIN2_VALUE,PORTA_PIN1_VALUE,PORTA_PIN0_VALUE);
     ca6:	eb e3       	ldi	r30, 0x3B	; 59
     ca8:	f0 e0       	ldi	r31, 0x00	; 0
     caa:	10 82       	st	Z, r1
    PORTB_REG=CONC_BIT(PORTB_PIN7_VALUE,PORTB_PIN6_VALUE,PORTB_PIN5_VALUE,PORTB_PIN4_VALUE,PORTB_PIN3_VALUE,PORTB_PIN2_VALUE,PORTB_PIN1_VALUE,PORTB_PIN0_VALUE);
     cac:	e8 e3       	ldi	r30, 0x38	; 56
     cae:	f0 e0       	ldi	r31, 0x00	; 0
     cb0:	10 82       	st	Z, r1
    PORTC_REG=CONC_BIT(PORTC_PIN7_VALUE,PORTC_PIN6_VALUE,PORTC_PIN5_VALUE,PORTC_PIN4_VALUE,PORTC_PIN3_VALUE,PORTC_PIN2_VALUE,PORTC_PIN1_VALUE,PORTC_PIN0_VALUE);
     cb2:	e5 e3       	ldi	r30, 0x35	; 53
     cb4:	f0 e0       	ldi	r31, 0x00	; 0
     cb6:	10 82       	st	Z, r1
    PORTD_REG=CONC_BIT(PORTD_PIN7_VALUE,PORTD_PIN6_VALUE,PORTD_PIN5_VALUE,PORTD_PIN4_VALUE,PORTD_PIN3_VALUE,PORTD_PIN2_VALUE,PORTD_PIN1_VALUE,PORTD_PIN0_VALUE);
     cb8:	e2 e3       	ldi	r30, 0x32	; 50
     cba:	f0 e0       	ldi	r31, 0x00	; 0
     cbc:	10 82       	st	Z, r1
    
    DDRA_REG=CONC_BIT(DDRA_PIN7_DIRECTION,DDRA_PIN6_DIRECTION,DDRA_PIN5_DIRECTION,DDRA_PIN4_DIRECTION,DDRA_PIN3_DIRECTION,DDRA_PIN2_DIRECTION,DDRA_PIN1_DIRECTION,DDRA_PIN0_DIRECTION);
     cbe:	ea e3       	ldi	r30, 0x3A	; 58
     cc0:	f0 e0       	ldi	r31, 0x00	; 0
     cc2:	8f ef       	ldi	r24, 0xFF	; 255
     cc4:	80 83       	st	Z, r24
    DDRB_REG=CONC_BIT(DDRB_PIN7_DIRECTION,DDRB_PIN6_DIRECTION,DDRB_PIN5_DIRECTION,DDRB_PIN4_DIRECTION,DDRB_PIN3_DIRECTION,DDRB_PIN2_DIRECTION,DDRB_PIN1_DIRECTION,DDRB_PIN0_DIRECTION);
     cc6:	e7 e3       	ldi	r30, 0x37	; 55
     cc8:	f0 e0       	ldi	r31, 0x00	; 0
     cca:	8f ef       	ldi	r24, 0xFF	; 255
     ccc:	80 83       	st	Z, r24
    DDRC_REG=CONC_BIT(DDRC_PIN7_DIRECTION,DDRC_PIN6_DIRECTION,DDRC_PIN5_DIRECTION,DDRC_PIN4_DIRECTION,DDRC_PIN3_DIRECTION,DDRC_PIN2_DIRECTION,DDRC_PIN1_DIRECTION,DDRC_PIN0_DIRECTION);
     cce:	e4 e3       	ldi	r30, 0x34	; 52
     cd0:	f0 e0       	ldi	r31, 0x00	; 0
     cd2:	8f ef       	ldi	r24, 0xFF	; 255
     cd4:	80 83       	st	Z, r24
    DDRD_REG=CONC_BIT(DDRD_PIN7_DIRECTION,DDRD_PIN6_DIRECTION,DDRD_PIN5_DIRECTION,DDRD_PIN4_DIRECTION,DDRD_PIN3_DIRECTION,DDRD_PIN2_DIRECTION,DDRD_PIN1_DIRECTION,DDRD_PIN0_DIRECTION);
     cd6:	e1 e3       	ldi	r30, 0x31	; 49
     cd8:	f0 e0       	ldi	r31, 0x00	; 0
     cda:	8f ef       	ldi	r24, 0xFF	; 255
     cdc:	80 83       	st	Z, r24

}
     cde:	cf 91       	pop	r28
     ce0:	df 91       	pop	r29
     ce2:	08 95       	ret

00000ce4 <MDIO_u8GetPinValue>:

u8 MDIO_u8GetPinValue(u8 A_u8Port,u8 A_u8Pin)
{
     ce4:	df 93       	push	r29
     ce6:	cf 93       	push	r28
     ce8:	00 d0       	rcall	.+0      	; 0xcea <MDIO_u8GetPinValue+0x6>
     cea:	00 d0       	rcall	.+0      	; 0xcec <MDIO_u8GetPinValue+0x8>
     cec:	0f 92       	push	r0
     cee:	cd b7       	in	r28, 0x3d	; 61
     cf0:	de b7       	in	r29, 0x3e	; 62
     cf2:	8a 83       	std	Y+2, r24	; 0x02
     cf4:	6b 83       	std	Y+3, r22	; 0x03
    u8 local_u8Value;
    switch(A_u8Port)
     cf6:	8a 81       	ldd	r24, Y+2	; 0x02
     cf8:	28 2f       	mov	r18, r24
     cfa:	30 e0       	ldi	r19, 0x00	; 0
     cfc:	3d 83       	std	Y+5, r19	; 0x05
     cfe:	2c 83       	std	Y+4, r18	; 0x04
     d00:	8c 81       	ldd	r24, Y+4	; 0x04
     d02:	9d 81       	ldd	r25, Y+5	; 0x05
     d04:	81 30       	cpi	r24, 0x01	; 1
     d06:	91 05       	cpc	r25, r1
     d08:	c1 f1       	breq	.+112    	; 0xd7a <MDIO_u8GetPinValue+0x96>
     d0a:	2c 81       	ldd	r18, Y+4	; 0x04
     d0c:	3d 81       	ldd	r19, Y+5	; 0x05
     d0e:	22 30       	cpi	r18, 0x02	; 2
     d10:	31 05       	cpc	r19, r1
     d12:	2c f4       	brge	.+10     	; 0xd1e <MDIO_u8GetPinValue+0x3a>
     d14:	8c 81       	ldd	r24, Y+4	; 0x04
     d16:	9d 81       	ldd	r25, Y+5	; 0x05
     d18:	00 97       	sbiw	r24, 0x00	; 0
     d1a:	71 f0       	breq	.+28     	; 0xd38 <MDIO_u8GetPinValue+0x54>
     d1c:	8e c0       	rjmp	.+284    	; 0xe3a <MDIO_u8GetPinValue+0x156>
     d1e:	2c 81       	ldd	r18, Y+4	; 0x04
     d20:	3d 81       	ldd	r19, Y+5	; 0x05
     d22:	22 30       	cpi	r18, 0x02	; 2
     d24:	31 05       	cpc	r19, r1
     d26:	09 f4       	brne	.+2      	; 0xd2a <MDIO_u8GetPinValue+0x46>
     d28:	49 c0       	rjmp	.+146    	; 0xdbc <MDIO_u8GetPinValue+0xd8>
     d2a:	8c 81       	ldd	r24, Y+4	; 0x04
     d2c:	9d 81       	ldd	r25, Y+5	; 0x05
     d2e:	83 30       	cpi	r24, 0x03	; 3
     d30:	91 05       	cpc	r25, r1
     d32:	09 f4       	brne	.+2      	; 0xd36 <MDIO_u8GetPinValue+0x52>
     d34:	63 c0       	rjmp	.+198    	; 0xdfc <MDIO_u8GetPinValue+0x118>
     d36:	81 c0       	rjmp	.+258    	; 0xe3a <MDIO_u8GetPinValue+0x156>
    {
        case PORTA: local_u8Value=GET_BIT(PINA_REG,A_u8Pin);
     d38:	e9 e3       	ldi	r30, 0x39	; 57
     d3a:	f0 e0       	ldi	r31, 0x00	; 0
     d3c:	80 81       	ld	r24, Z
     d3e:	48 2f       	mov	r20, r24
     d40:	50 e0       	ldi	r21, 0x00	; 0
     d42:	8b 81       	ldd	r24, Y+3	; 0x03
     d44:	28 2f       	mov	r18, r24
     d46:	30 e0       	ldi	r19, 0x00	; 0
     d48:	81 e0       	ldi	r24, 0x01	; 1
     d4a:	90 e0       	ldi	r25, 0x00	; 0
     d4c:	02 c0       	rjmp	.+4      	; 0xd52 <MDIO_u8GetPinValue+0x6e>
     d4e:	88 0f       	add	r24, r24
     d50:	99 1f       	adc	r25, r25
     d52:	2a 95       	dec	r18
     d54:	e2 f7       	brpl	.-8      	; 0xd4e <MDIO_u8GetPinValue+0x6a>
     d56:	80 95       	com	r24
     d58:	90 95       	com	r25
     d5a:	9a 01       	movw	r18, r20
     d5c:	28 23       	and	r18, r24
     d5e:	39 23       	and	r19, r25
     d60:	e9 e3       	ldi	r30, 0x39	; 57
     d62:	f0 e0       	ldi	r31, 0x00	; 0
     d64:	80 81       	ld	r24, Z
     d66:	88 2f       	mov	r24, r24
     d68:	90 e0       	ldi	r25, 0x00	; 0
     d6a:	19 82       	std	Y+1, r1	; 0x01
     d6c:	28 17       	cp	r18, r24
     d6e:	39 07       	cpc	r19, r25
     d70:	09 f4       	brne	.+2      	; 0xd74 <MDIO_u8GetPinValue+0x90>
     d72:	63 c0       	rjmp	.+198    	; 0xe3a <MDIO_u8GetPinValue+0x156>
     d74:	81 e0       	ldi	r24, 0x01	; 1
     d76:	89 83       	std	Y+1, r24	; 0x01
     d78:	60 c0       	rjmp	.+192    	; 0xe3a <MDIO_u8GetPinValue+0x156>
        break;
        case PORTB: local_u8Value=GET_BIT(PINB_REG,A_u8Pin);
     d7a:	e6 e3       	ldi	r30, 0x36	; 54
     d7c:	f0 e0       	ldi	r31, 0x00	; 0
     d7e:	80 81       	ld	r24, Z
     d80:	48 2f       	mov	r20, r24
     d82:	50 e0       	ldi	r21, 0x00	; 0
     d84:	8b 81       	ldd	r24, Y+3	; 0x03
     d86:	28 2f       	mov	r18, r24
     d88:	30 e0       	ldi	r19, 0x00	; 0
     d8a:	81 e0       	ldi	r24, 0x01	; 1
     d8c:	90 e0       	ldi	r25, 0x00	; 0
     d8e:	02 c0       	rjmp	.+4      	; 0xd94 <MDIO_u8GetPinValue+0xb0>
     d90:	88 0f       	add	r24, r24
     d92:	99 1f       	adc	r25, r25
     d94:	2a 95       	dec	r18
     d96:	e2 f7       	brpl	.-8      	; 0xd90 <MDIO_u8GetPinValue+0xac>
     d98:	80 95       	com	r24
     d9a:	90 95       	com	r25
     d9c:	9a 01       	movw	r18, r20
     d9e:	28 23       	and	r18, r24
     da0:	39 23       	and	r19, r25
     da2:	e6 e3       	ldi	r30, 0x36	; 54
     da4:	f0 e0       	ldi	r31, 0x00	; 0
     da6:	80 81       	ld	r24, Z
     da8:	88 2f       	mov	r24, r24
     daa:	90 e0       	ldi	r25, 0x00	; 0
     dac:	19 82       	std	Y+1, r1	; 0x01
     dae:	28 17       	cp	r18, r24
     db0:	39 07       	cpc	r19, r25
     db2:	09 f4       	brne	.+2      	; 0xdb6 <MDIO_u8GetPinValue+0xd2>
     db4:	42 c0       	rjmp	.+132    	; 0xe3a <MDIO_u8GetPinValue+0x156>
     db6:	81 e0       	ldi	r24, 0x01	; 1
     db8:	89 83       	std	Y+1, r24	; 0x01
     dba:	3f c0       	rjmp	.+126    	; 0xe3a <MDIO_u8GetPinValue+0x156>
        break;
        case PORTC: local_u8Value=GET_BIT(PINC_REG,A_u8Pin);
     dbc:	e3 e3       	ldi	r30, 0x33	; 51
     dbe:	f0 e0       	ldi	r31, 0x00	; 0
     dc0:	80 81       	ld	r24, Z
     dc2:	48 2f       	mov	r20, r24
     dc4:	50 e0       	ldi	r21, 0x00	; 0
     dc6:	8b 81       	ldd	r24, Y+3	; 0x03
     dc8:	28 2f       	mov	r18, r24
     dca:	30 e0       	ldi	r19, 0x00	; 0
     dcc:	81 e0       	ldi	r24, 0x01	; 1
     dce:	90 e0       	ldi	r25, 0x00	; 0
     dd0:	02 c0       	rjmp	.+4      	; 0xdd6 <MDIO_u8GetPinValue+0xf2>
     dd2:	88 0f       	add	r24, r24
     dd4:	99 1f       	adc	r25, r25
     dd6:	2a 95       	dec	r18
     dd8:	e2 f7       	brpl	.-8      	; 0xdd2 <MDIO_u8GetPinValue+0xee>
     dda:	80 95       	com	r24
     ddc:	90 95       	com	r25
     dde:	9a 01       	movw	r18, r20
     de0:	28 23       	and	r18, r24
     de2:	39 23       	and	r19, r25
     de4:	e3 e3       	ldi	r30, 0x33	; 51
     de6:	f0 e0       	ldi	r31, 0x00	; 0
     de8:	80 81       	ld	r24, Z
     dea:	88 2f       	mov	r24, r24
     dec:	90 e0       	ldi	r25, 0x00	; 0
     dee:	19 82       	std	Y+1, r1	; 0x01
     df0:	28 17       	cp	r18, r24
     df2:	39 07       	cpc	r19, r25
     df4:	11 f1       	breq	.+68     	; 0xe3a <MDIO_u8GetPinValue+0x156>
     df6:	81 e0       	ldi	r24, 0x01	; 1
     df8:	89 83       	std	Y+1, r24	; 0x01
     dfa:	1f c0       	rjmp	.+62     	; 0xe3a <MDIO_u8GetPinValue+0x156>
        break;
        case PORTD: local_u8Value=GET_BIT(PIND_REG,A_u8Pin);
     dfc:	e0 e3       	ldi	r30, 0x30	; 48
     dfe:	f0 e0       	ldi	r31, 0x00	; 0
     e00:	80 81       	ld	r24, Z
     e02:	48 2f       	mov	r20, r24
     e04:	50 e0       	ldi	r21, 0x00	; 0
     e06:	8b 81       	ldd	r24, Y+3	; 0x03
     e08:	28 2f       	mov	r18, r24
     e0a:	30 e0       	ldi	r19, 0x00	; 0
     e0c:	81 e0       	ldi	r24, 0x01	; 1
     e0e:	90 e0       	ldi	r25, 0x00	; 0
     e10:	02 c0       	rjmp	.+4      	; 0xe16 <MDIO_u8GetPinValue+0x132>
     e12:	88 0f       	add	r24, r24
     e14:	99 1f       	adc	r25, r25
     e16:	2a 95       	dec	r18
     e18:	e2 f7       	brpl	.-8      	; 0xe12 <MDIO_u8GetPinValue+0x12e>
     e1a:	80 95       	com	r24
     e1c:	90 95       	com	r25
     e1e:	9a 01       	movw	r18, r20
     e20:	28 23       	and	r18, r24
     e22:	39 23       	and	r19, r25
     e24:	e0 e3       	ldi	r30, 0x30	; 48
     e26:	f0 e0       	ldi	r31, 0x00	; 0
     e28:	80 81       	ld	r24, Z
     e2a:	88 2f       	mov	r24, r24
     e2c:	90 e0       	ldi	r25, 0x00	; 0
     e2e:	19 82       	std	Y+1, r1	; 0x01
     e30:	28 17       	cp	r18, r24
     e32:	39 07       	cpc	r19, r25
     e34:	11 f0       	breq	.+4      	; 0xe3a <MDIO_u8GetPinValue+0x156>
     e36:	81 e0       	ldi	r24, 0x01	; 1
     e38:	89 83       	std	Y+1, r24	; 0x01
        break;
    }
    return local_u8Value;
     e3a:	89 81       	ldd	r24, Y+1	; 0x01
}
     e3c:	0f 90       	pop	r0
     e3e:	0f 90       	pop	r0
     e40:	0f 90       	pop	r0
     e42:	0f 90       	pop	r0
     e44:	0f 90       	pop	r0
     e46:	cf 91       	pop	r28
     e48:	df 91       	pop	r29
     e4a:	08 95       	ret

00000e4c <MDIO_voidSetPinValue>:

void MDIO_voidSetPinValue(u8 A_u8Port,u8 A_u8Pin, u8 A_u8Value)
{
     e4c:	df 93       	push	r29
     e4e:	cf 93       	push	r28
     e50:	cd b7       	in	r28, 0x3d	; 61
     e52:	de b7       	in	r29, 0x3e	; 62
     e54:	2d 97       	sbiw	r28, 0x0d	; 13
     e56:	0f b6       	in	r0, 0x3f	; 63
     e58:	f8 94       	cli
     e5a:	de bf       	out	0x3e, r29	; 62
     e5c:	0f be       	out	0x3f, r0	; 63
     e5e:	cd bf       	out	0x3d, r28	; 61
     e60:	89 83       	std	Y+1, r24	; 0x01
     e62:	6a 83       	std	Y+2, r22	; 0x02
     e64:	4b 83       	std	Y+3, r20	; 0x03
    switch(A_u8Port)
     e66:	89 81       	ldd	r24, Y+1	; 0x01
     e68:	28 2f       	mov	r18, r24
     e6a:	30 e0       	ldi	r19, 0x00	; 0
     e6c:	3d 87       	std	Y+13, r19	; 0x0d
     e6e:	2c 87       	std	Y+12, r18	; 0x0c
     e70:	8c 85       	ldd	r24, Y+12	; 0x0c
     e72:	9d 85       	ldd	r25, Y+13	; 0x0d
     e74:	81 30       	cpi	r24, 0x01	; 1
     e76:	91 05       	cpc	r25, r1
     e78:	09 f4       	brne	.+2      	; 0xe7c <MDIO_voidSetPinValue+0x30>
     e7a:	4f c0       	rjmp	.+158    	; 0xf1a <MDIO_voidSetPinValue+0xce>
     e7c:	2c 85       	ldd	r18, Y+12	; 0x0c
     e7e:	3d 85       	ldd	r19, Y+13	; 0x0d
     e80:	22 30       	cpi	r18, 0x02	; 2
     e82:	31 05       	cpc	r19, r1
     e84:	2c f4       	brge	.+10     	; 0xe90 <MDIO_voidSetPinValue+0x44>
     e86:	8c 85       	ldd	r24, Y+12	; 0x0c
     e88:	9d 85       	ldd	r25, Y+13	; 0x0d
     e8a:	00 97       	sbiw	r24, 0x00	; 0
     e8c:	71 f0       	breq	.+28     	; 0xeaa <MDIO_voidSetPinValue+0x5e>
     e8e:	eb c0       	rjmp	.+470    	; 0x1066 <MDIO_voidSetPinValue+0x21a>
     e90:	2c 85       	ldd	r18, Y+12	; 0x0c
     e92:	3d 85       	ldd	r19, Y+13	; 0x0d
     e94:	22 30       	cpi	r18, 0x02	; 2
     e96:	31 05       	cpc	r19, r1
     e98:	09 f4       	brne	.+2      	; 0xe9c <MDIO_voidSetPinValue+0x50>
     e9a:	77 c0       	rjmp	.+238    	; 0xf8a <MDIO_voidSetPinValue+0x13e>
     e9c:	8c 85       	ldd	r24, Y+12	; 0x0c
     e9e:	9d 85       	ldd	r25, Y+13	; 0x0d
     ea0:	83 30       	cpi	r24, 0x03	; 3
     ea2:	91 05       	cpc	r25, r1
     ea4:	09 f4       	brne	.+2      	; 0xea8 <MDIO_voidSetPinValue+0x5c>
     ea6:	a9 c0       	rjmp	.+338    	; 0xffa <MDIO_voidSetPinValue+0x1ae>
     ea8:	de c0       	rjmp	.+444    	; 0x1066 <MDIO_voidSetPinValue+0x21a>
    {
        case PORTA:
        switch (A_u8Value)
     eaa:	8b 81       	ldd	r24, Y+3	; 0x03
     eac:	28 2f       	mov	r18, r24
     eae:	30 e0       	ldi	r19, 0x00	; 0
     eb0:	3b 87       	std	Y+11, r19	; 0x0b
     eb2:	2a 87       	std	Y+10, r18	; 0x0a
     eb4:	8a 85       	ldd	r24, Y+10	; 0x0a
     eb6:	9b 85       	ldd	r25, Y+11	; 0x0b
     eb8:	00 97       	sbiw	r24, 0x00	; 0
     eba:	d1 f0       	breq	.+52     	; 0xef0 <MDIO_voidSetPinValue+0xa4>
     ebc:	2a 85       	ldd	r18, Y+10	; 0x0a
     ebe:	3b 85       	ldd	r19, Y+11	; 0x0b
     ec0:	21 30       	cpi	r18, 0x01	; 1
     ec2:	31 05       	cpc	r19, r1
     ec4:	09 f0       	breq	.+2      	; 0xec8 <MDIO_voidSetPinValue+0x7c>
     ec6:	cf c0       	rjmp	.+414    	; 0x1066 <MDIO_voidSetPinValue+0x21a>
        {
            case PIN_HIGH: SET_BIT(PORTA_REG,A_u8Pin);
     ec8:	ab e3       	ldi	r26, 0x3B	; 59
     eca:	b0 e0       	ldi	r27, 0x00	; 0
     ecc:	eb e3       	ldi	r30, 0x3B	; 59
     ece:	f0 e0       	ldi	r31, 0x00	; 0
     ed0:	80 81       	ld	r24, Z
     ed2:	48 2f       	mov	r20, r24
     ed4:	8a 81       	ldd	r24, Y+2	; 0x02
     ed6:	28 2f       	mov	r18, r24
     ed8:	30 e0       	ldi	r19, 0x00	; 0
     eda:	81 e0       	ldi	r24, 0x01	; 1
     edc:	90 e0       	ldi	r25, 0x00	; 0
     ede:	02 2e       	mov	r0, r18
     ee0:	02 c0       	rjmp	.+4      	; 0xee6 <MDIO_voidSetPinValue+0x9a>
     ee2:	88 0f       	add	r24, r24
     ee4:	99 1f       	adc	r25, r25
     ee6:	0a 94       	dec	r0
     ee8:	e2 f7       	brpl	.-8      	; 0xee2 <MDIO_voidSetPinValue+0x96>
     eea:	84 2b       	or	r24, r20
     eec:	8c 93       	st	X, r24
     eee:	bb c0       	rjmp	.+374    	; 0x1066 <MDIO_voidSetPinValue+0x21a>
            break;

            case PIN_LOW: CLR_BIT(PORTA_REG,A_u8Pin);
     ef0:	ab e3       	ldi	r26, 0x3B	; 59
     ef2:	b0 e0       	ldi	r27, 0x00	; 0
     ef4:	eb e3       	ldi	r30, 0x3B	; 59
     ef6:	f0 e0       	ldi	r31, 0x00	; 0
     ef8:	80 81       	ld	r24, Z
     efa:	48 2f       	mov	r20, r24
     efc:	8a 81       	ldd	r24, Y+2	; 0x02
     efe:	28 2f       	mov	r18, r24
     f00:	30 e0       	ldi	r19, 0x00	; 0
     f02:	81 e0       	ldi	r24, 0x01	; 1
     f04:	90 e0       	ldi	r25, 0x00	; 0
     f06:	02 2e       	mov	r0, r18
     f08:	02 c0       	rjmp	.+4      	; 0xf0e <MDIO_voidSetPinValue+0xc2>
     f0a:	88 0f       	add	r24, r24
     f0c:	99 1f       	adc	r25, r25
     f0e:	0a 94       	dec	r0
     f10:	e2 f7       	brpl	.-8      	; 0xf0a <MDIO_voidSetPinValue+0xbe>
     f12:	80 95       	com	r24
     f14:	84 23       	and	r24, r20
     f16:	8c 93       	st	X, r24
     f18:	a6 c0       	rjmp	.+332    	; 0x1066 <MDIO_voidSetPinValue+0x21a>
            break;
        };
        break;

        case PORTB:
        switch (A_u8Value)
     f1a:	8b 81       	ldd	r24, Y+3	; 0x03
     f1c:	28 2f       	mov	r18, r24
     f1e:	30 e0       	ldi	r19, 0x00	; 0
     f20:	39 87       	std	Y+9, r19	; 0x09
     f22:	28 87       	std	Y+8, r18	; 0x08
     f24:	88 85       	ldd	r24, Y+8	; 0x08
     f26:	99 85       	ldd	r25, Y+9	; 0x09
     f28:	00 97       	sbiw	r24, 0x00	; 0
     f2a:	d1 f0       	breq	.+52     	; 0xf60 <MDIO_voidSetPinValue+0x114>
     f2c:	28 85       	ldd	r18, Y+8	; 0x08
     f2e:	39 85       	ldd	r19, Y+9	; 0x09
     f30:	21 30       	cpi	r18, 0x01	; 1
     f32:	31 05       	cpc	r19, r1
     f34:	09 f0       	breq	.+2      	; 0xf38 <MDIO_voidSetPinValue+0xec>
     f36:	97 c0       	rjmp	.+302    	; 0x1066 <MDIO_voidSetPinValue+0x21a>
        {
            case PIN_HIGH: SET_BIT(PORTB_REG,A_u8Pin);
     f38:	a8 e3       	ldi	r26, 0x38	; 56
     f3a:	b0 e0       	ldi	r27, 0x00	; 0
     f3c:	e8 e3       	ldi	r30, 0x38	; 56
     f3e:	f0 e0       	ldi	r31, 0x00	; 0
     f40:	80 81       	ld	r24, Z
     f42:	48 2f       	mov	r20, r24
     f44:	8a 81       	ldd	r24, Y+2	; 0x02
     f46:	28 2f       	mov	r18, r24
     f48:	30 e0       	ldi	r19, 0x00	; 0
     f4a:	81 e0       	ldi	r24, 0x01	; 1
     f4c:	90 e0       	ldi	r25, 0x00	; 0
     f4e:	02 2e       	mov	r0, r18
     f50:	02 c0       	rjmp	.+4      	; 0xf56 <MDIO_voidSetPinValue+0x10a>
     f52:	88 0f       	add	r24, r24
     f54:	99 1f       	adc	r25, r25
     f56:	0a 94       	dec	r0
     f58:	e2 f7       	brpl	.-8      	; 0xf52 <MDIO_voidSetPinValue+0x106>
     f5a:	84 2b       	or	r24, r20
     f5c:	8c 93       	st	X, r24
     f5e:	83 c0       	rjmp	.+262    	; 0x1066 <MDIO_voidSetPinValue+0x21a>
            break;

            case PIN_LOW: CLR_BIT(PORTB_REG,A_u8Pin);
     f60:	a8 e3       	ldi	r26, 0x38	; 56
     f62:	b0 e0       	ldi	r27, 0x00	; 0
     f64:	e8 e3       	ldi	r30, 0x38	; 56
     f66:	f0 e0       	ldi	r31, 0x00	; 0
     f68:	80 81       	ld	r24, Z
     f6a:	48 2f       	mov	r20, r24
     f6c:	8a 81       	ldd	r24, Y+2	; 0x02
     f6e:	28 2f       	mov	r18, r24
     f70:	30 e0       	ldi	r19, 0x00	; 0
     f72:	81 e0       	ldi	r24, 0x01	; 1
     f74:	90 e0       	ldi	r25, 0x00	; 0
     f76:	02 2e       	mov	r0, r18
     f78:	02 c0       	rjmp	.+4      	; 0xf7e <MDIO_voidSetPinValue+0x132>
     f7a:	88 0f       	add	r24, r24
     f7c:	99 1f       	adc	r25, r25
     f7e:	0a 94       	dec	r0
     f80:	e2 f7       	brpl	.-8      	; 0xf7a <MDIO_voidSetPinValue+0x12e>
     f82:	80 95       	com	r24
     f84:	84 23       	and	r24, r20
     f86:	8c 93       	st	X, r24
     f88:	6e c0       	rjmp	.+220    	; 0x1066 <MDIO_voidSetPinValue+0x21a>
            break;
        };
        break;

        case PORTC:
        switch (A_u8Value)
     f8a:	8b 81       	ldd	r24, Y+3	; 0x03
     f8c:	28 2f       	mov	r18, r24
     f8e:	30 e0       	ldi	r19, 0x00	; 0
     f90:	3f 83       	std	Y+7, r19	; 0x07
     f92:	2e 83       	std	Y+6, r18	; 0x06
     f94:	8e 81       	ldd	r24, Y+6	; 0x06
     f96:	9f 81       	ldd	r25, Y+7	; 0x07
     f98:	00 97       	sbiw	r24, 0x00	; 0
     f9a:	d1 f0       	breq	.+52     	; 0xfd0 <MDIO_voidSetPinValue+0x184>
     f9c:	2e 81       	ldd	r18, Y+6	; 0x06
     f9e:	3f 81       	ldd	r19, Y+7	; 0x07
     fa0:	21 30       	cpi	r18, 0x01	; 1
     fa2:	31 05       	cpc	r19, r1
     fa4:	09 f0       	breq	.+2      	; 0xfa8 <MDIO_voidSetPinValue+0x15c>
     fa6:	5f c0       	rjmp	.+190    	; 0x1066 <MDIO_voidSetPinValue+0x21a>
        {
            case PIN_HIGH: SET_BIT(PORTC_REG,A_u8Pin);
     fa8:	a5 e3       	ldi	r26, 0x35	; 53
     faa:	b0 e0       	ldi	r27, 0x00	; 0
     fac:	e5 e3       	ldi	r30, 0x35	; 53
     fae:	f0 e0       	ldi	r31, 0x00	; 0
     fb0:	80 81       	ld	r24, Z
     fb2:	48 2f       	mov	r20, r24
     fb4:	8a 81       	ldd	r24, Y+2	; 0x02
     fb6:	28 2f       	mov	r18, r24
     fb8:	30 e0       	ldi	r19, 0x00	; 0
     fba:	81 e0       	ldi	r24, 0x01	; 1
     fbc:	90 e0       	ldi	r25, 0x00	; 0
     fbe:	02 2e       	mov	r0, r18
     fc0:	02 c0       	rjmp	.+4      	; 0xfc6 <MDIO_voidSetPinValue+0x17a>
     fc2:	88 0f       	add	r24, r24
     fc4:	99 1f       	adc	r25, r25
     fc6:	0a 94       	dec	r0
     fc8:	e2 f7       	brpl	.-8      	; 0xfc2 <MDIO_voidSetPinValue+0x176>
     fca:	84 2b       	or	r24, r20
     fcc:	8c 93       	st	X, r24
     fce:	4b c0       	rjmp	.+150    	; 0x1066 <MDIO_voidSetPinValue+0x21a>
            break;

            case PIN_LOW: CLR_BIT(PORTC_REG,A_u8Pin);
     fd0:	a5 e3       	ldi	r26, 0x35	; 53
     fd2:	b0 e0       	ldi	r27, 0x00	; 0
     fd4:	e5 e3       	ldi	r30, 0x35	; 53
     fd6:	f0 e0       	ldi	r31, 0x00	; 0
     fd8:	80 81       	ld	r24, Z
     fda:	48 2f       	mov	r20, r24
     fdc:	8a 81       	ldd	r24, Y+2	; 0x02
     fde:	28 2f       	mov	r18, r24
     fe0:	30 e0       	ldi	r19, 0x00	; 0
     fe2:	81 e0       	ldi	r24, 0x01	; 1
     fe4:	90 e0       	ldi	r25, 0x00	; 0
     fe6:	02 2e       	mov	r0, r18
     fe8:	02 c0       	rjmp	.+4      	; 0xfee <MDIO_voidSetPinValue+0x1a2>
     fea:	88 0f       	add	r24, r24
     fec:	99 1f       	adc	r25, r25
     fee:	0a 94       	dec	r0
     ff0:	e2 f7       	brpl	.-8      	; 0xfea <MDIO_voidSetPinValue+0x19e>
     ff2:	80 95       	com	r24
     ff4:	84 23       	and	r24, r20
     ff6:	8c 93       	st	X, r24
     ff8:	36 c0       	rjmp	.+108    	; 0x1066 <MDIO_voidSetPinValue+0x21a>
            break;
        };
        break;

        case PORTD:
        switch (A_u8Value)
     ffa:	8b 81       	ldd	r24, Y+3	; 0x03
     ffc:	28 2f       	mov	r18, r24
     ffe:	30 e0       	ldi	r19, 0x00	; 0
    1000:	3d 83       	std	Y+5, r19	; 0x05
    1002:	2c 83       	std	Y+4, r18	; 0x04
    1004:	8c 81       	ldd	r24, Y+4	; 0x04
    1006:	9d 81       	ldd	r25, Y+5	; 0x05
    1008:	00 97       	sbiw	r24, 0x00	; 0
    100a:	c9 f0       	breq	.+50     	; 0x103e <MDIO_voidSetPinValue+0x1f2>
    100c:	2c 81       	ldd	r18, Y+4	; 0x04
    100e:	3d 81       	ldd	r19, Y+5	; 0x05
    1010:	21 30       	cpi	r18, 0x01	; 1
    1012:	31 05       	cpc	r19, r1
    1014:	41 f5       	brne	.+80     	; 0x1066 <MDIO_voidSetPinValue+0x21a>
        {
            case PIN_HIGH: SET_BIT(PORTD_REG,A_u8Pin);
    1016:	a2 e3       	ldi	r26, 0x32	; 50
    1018:	b0 e0       	ldi	r27, 0x00	; 0
    101a:	e2 e3       	ldi	r30, 0x32	; 50
    101c:	f0 e0       	ldi	r31, 0x00	; 0
    101e:	80 81       	ld	r24, Z
    1020:	48 2f       	mov	r20, r24
    1022:	8a 81       	ldd	r24, Y+2	; 0x02
    1024:	28 2f       	mov	r18, r24
    1026:	30 e0       	ldi	r19, 0x00	; 0
    1028:	81 e0       	ldi	r24, 0x01	; 1
    102a:	90 e0       	ldi	r25, 0x00	; 0
    102c:	02 2e       	mov	r0, r18
    102e:	02 c0       	rjmp	.+4      	; 0x1034 <MDIO_voidSetPinValue+0x1e8>
    1030:	88 0f       	add	r24, r24
    1032:	99 1f       	adc	r25, r25
    1034:	0a 94       	dec	r0
    1036:	e2 f7       	brpl	.-8      	; 0x1030 <MDIO_voidSetPinValue+0x1e4>
    1038:	84 2b       	or	r24, r20
    103a:	8c 93       	st	X, r24
    103c:	14 c0       	rjmp	.+40     	; 0x1066 <MDIO_voidSetPinValue+0x21a>
            break;

            case PIN_LOW: CLR_BIT(PORTD_REG,A_u8Pin);
    103e:	a2 e3       	ldi	r26, 0x32	; 50
    1040:	b0 e0       	ldi	r27, 0x00	; 0
    1042:	e2 e3       	ldi	r30, 0x32	; 50
    1044:	f0 e0       	ldi	r31, 0x00	; 0
    1046:	80 81       	ld	r24, Z
    1048:	48 2f       	mov	r20, r24
    104a:	8a 81       	ldd	r24, Y+2	; 0x02
    104c:	28 2f       	mov	r18, r24
    104e:	30 e0       	ldi	r19, 0x00	; 0
    1050:	81 e0       	ldi	r24, 0x01	; 1
    1052:	90 e0       	ldi	r25, 0x00	; 0
    1054:	02 2e       	mov	r0, r18
    1056:	02 c0       	rjmp	.+4      	; 0x105c <MDIO_voidSetPinValue+0x210>
    1058:	88 0f       	add	r24, r24
    105a:	99 1f       	adc	r25, r25
    105c:	0a 94       	dec	r0
    105e:	e2 f7       	brpl	.-8      	; 0x1058 <MDIO_voidSetPinValue+0x20c>
    1060:	80 95       	com	r24
    1062:	84 23       	and	r24, r20
    1064:	8c 93       	st	X, r24
            break;
        };
        break;
    }
}
    1066:	2d 96       	adiw	r28, 0x0d	; 13
    1068:	0f b6       	in	r0, 0x3f	; 63
    106a:	f8 94       	cli
    106c:	de bf       	out	0x3e, r29	; 62
    106e:	0f be       	out	0x3f, r0	; 63
    1070:	cd bf       	out	0x3d, r28	; 61
    1072:	cf 91       	pop	r28
    1074:	df 91       	pop	r29
    1076:	08 95       	ret

00001078 <MDIO_voidSetPinDirection>:

void MDIO_voidSetPinDirection(u8 A_u8Port,u8 A_u8Pin, u8 A_u8Value)
{
    1078:	df 93       	push	r29
    107a:	cf 93       	push	r28
    107c:	cd b7       	in	r28, 0x3d	; 61
    107e:	de b7       	in	r29, 0x3e	; 62
    1080:	2d 97       	sbiw	r28, 0x0d	; 13
    1082:	0f b6       	in	r0, 0x3f	; 63
    1084:	f8 94       	cli
    1086:	de bf       	out	0x3e, r29	; 62
    1088:	0f be       	out	0x3f, r0	; 63
    108a:	cd bf       	out	0x3d, r28	; 61
    108c:	89 83       	std	Y+1, r24	; 0x01
    108e:	6a 83       	std	Y+2, r22	; 0x02
    1090:	4b 83       	std	Y+3, r20	; 0x03
    switch(A_u8Port)
    1092:	89 81       	ldd	r24, Y+1	; 0x01
    1094:	28 2f       	mov	r18, r24
    1096:	30 e0       	ldi	r19, 0x00	; 0
    1098:	3d 87       	std	Y+13, r19	; 0x0d
    109a:	2c 87       	std	Y+12, r18	; 0x0c
    109c:	8c 85       	ldd	r24, Y+12	; 0x0c
    109e:	9d 85       	ldd	r25, Y+13	; 0x0d
    10a0:	81 30       	cpi	r24, 0x01	; 1
    10a2:	91 05       	cpc	r25, r1
    10a4:	09 f4       	brne	.+2      	; 0x10a8 <MDIO_voidSetPinDirection+0x30>
    10a6:	4f c0       	rjmp	.+158    	; 0x1146 <MDIO_voidSetPinDirection+0xce>
    10a8:	2c 85       	ldd	r18, Y+12	; 0x0c
    10aa:	3d 85       	ldd	r19, Y+13	; 0x0d
    10ac:	22 30       	cpi	r18, 0x02	; 2
    10ae:	31 05       	cpc	r19, r1
    10b0:	2c f4       	brge	.+10     	; 0x10bc <MDIO_voidSetPinDirection+0x44>
    10b2:	8c 85       	ldd	r24, Y+12	; 0x0c
    10b4:	9d 85       	ldd	r25, Y+13	; 0x0d
    10b6:	00 97       	sbiw	r24, 0x00	; 0
    10b8:	71 f0       	breq	.+28     	; 0x10d6 <MDIO_voidSetPinDirection+0x5e>
    10ba:	eb c0       	rjmp	.+470    	; 0x1292 <MDIO_voidSetPinDirection+0x21a>
    10bc:	2c 85       	ldd	r18, Y+12	; 0x0c
    10be:	3d 85       	ldd	r19, Y+13	; 0x0d
    10c0:	22 30       	cpi	r18, 0x02	; 2
    10c2:	31 05       	cpc	r19, r1
    10c4:	09 f4       	brne	.+2      	; 0x10c8 <MDIO_voidSetPinDirection+0x50>
    10c6:	77 c0       	rjmp	.+238    	; 0x11b6 <MDIO_voidSetPinDirection+0x13e>
    10c8:	8c 85       	ldd	r24, Y+12	; 0x0c
    10ca:	9d 85       	ldd	r25, Y+13	; 0x0d
    10cc:	83 30       	cpi	r24, 0x03	; 3
    10ce:	91 05       	cpc	r25, r1
    10d0:	09 f4       	brne	.+2      	; 0x10d4 <MDIO_voidSetPinDirection+0x5c>
    10d2:	a9 c0       	rjmp	.+338    	; 0x1226 <MDIO_voidSetPinDirection+0x1ae>
    10d4:	de c0       	rjmp	.+444    	; 0x1292 <MDIO_voidSetPinDirection+0x21a>
    {
        case PORTA:
        switch (A_u8Value)
    10d6:	8b 81       	ldd	r24, Y+3	; 0x03
    10d8:	28 2f       	mov	r18, r24
    10da:	30 e0       	ldi	r19, 0x00	; 0
    10dc:	3b 87       	std	Y+11, r19	; 0x0b
    10de:	2a 87       	std	Y+10, r18	; 0x0a
    10e0:	8a 85       	ldd	r24, Y+10	; 0x0a
    10e2:	9b 85       	ldd	r25, Y+11	; 0x0b
    10e4:	00 97       	sbiw	r24, 0x00	; 0
    10e6:	d1 f0       	breq	.+52     	; 0x111c <MDIO_voidSetPinDirection+0xa4>
    10e8:	2a 85       	ldd	r18, Y+10	; 0x0a
    10ea:	3b 85       	ldd	r19, Y+11	; 0x0b
    10ec:	21 30       	cpi	r18, 0x01	; 1
    10ee:	31 05       	cpc	r19, r1
    10f0:	09 f0       	breq	.+2      	; 0x10f4 <MDIO_voidSetPinDirection+0x7c>
    10f2:	cf c0       	rjmp	.+414    	; 0x1292 <MDIO_voidSetPinDirection+0x21a>
        {
            case PIN_OUTPUT: SET_BIT(DDRA_REG,A_u8Pin);
    10f4:	aa e3       	ldi	r26, 0x3A	; 58
    10f6:	b0 e0       	ldi	r27, 0x00	; 0
    10f8:	ea e3       	ldi	r30, 0x3A	; 58
    10fa:	f0 e0       	ldi	r31, 0x00	; 0
    10fc:	80 81       	ld	r24, Z
    10fe:	48 2f       	mov	r20, r24
    1100:	8a 81       	ldd	r24, Y+2	; 0x02
    1102:	28 2f       	mov	r18, r24
    1104:	30 e0       	ldi	r19, 0x00	; 0
    1106:	81 e0       	ldi	r24, 0x01	; 1
    1108:	90 e0       	ldi	r25, 0x00	; 0
    110a:	02 2e       	mov	r0, r18
    110c:	02 c0       	rjmp	.+4      	; 0x1112 <MDIO_voidSetPinDirection+0x9a>
    110e:	88 0f       	add	r24, r24
    1110:	99 1f       	adc	r25, r25
    1112:	0a 94       	dec	r0
    1114:	e2 f7       	brpl	.-8      	; 0x110e <MDIO_voidSetPinDirection+0x96>
    1116:	84 2b       	or	r24, r20
    1118:	8c 93       	st	X, r24
    111a:	bb c0       	rjmp	.+374    	; 0x1292 <MDIO_voidSetPinDirection+0x21a>
            break;

            case PIN_INPUT: CLR_BIT(DDRA_REG,A_u8Pin);
    111c:	aa e3       	ldi	r26, 0x3A	; 58
    111e:	b0 e0       	ldi	r27, 0x00	; 0
    1120:	ea e3       	ldi	r30, 0x3A	; 58
    1122:	f0 e0       	ldi	r31, 0x00	; 0
    1124:	80 81       	ld	r24, Z
    1126:	48 2f       	mov	r20, r24
    1128:	8a 81       	ldd	r24, Y+2	; 0x02
    112a:	28 2f       	mov	r18, r24
    112c:	30 e0       	ldi	r19, 0x00	; 0
    112e:	81 e0       	ldi	r24, 0x01	; 1
    1130:	90 e0       	ldi	r25, 0x00	; 0
    1132:	02 2e       	mov	r0, r18
    1134:	02 c0       	rjmp	.+4      	; 0x113a <MDIO_voidSetPinDirection+0xc2>
    1136:	88 0f       	add	r24, r24
    1138:	99 1f       	adc	r25, r25
    113a:	0a 94       	dec	r0
    113c:	e2 f7       	brpl	.-8      	; 0x1136 <MDIO_voidSetPinDirection+0xbe>
    113e:	80 95       	com	r24
    1140:	84 23       	and	r24, r20
    1142:	8c 93       	st	X, r24
    1144:	a6 c0       	rjmp	.+332    	; 0x1292 <MDIO_voidSetPinDirection+0x21a>
            break;
        };
        break;

        case PORTB:
        switch (A_u8Value)
    1146:	8b 81       	ldd	r24, Y+3	; 0x03
    1148:	28 2f       	mov	r18, r24
    114a:	30 e0       	ldi	r19, 0x00	; 0
    114c:	39 87       	std	Y+9, r19	; 0x09
    114e:	28 87       	std	Y+8, r18	; 0x08
    1150:	88 85       	ldd	r24, Y+8	; 0x08
    1152:	99 85       	ldd	r25, Y+9	; 0x09
    1154:	00 97       	sbiw	r24, 0x00	; 0
    1156:	d1 f0       	breq	.+52     	; 0x118c <MDIO_voidSetPinDirection+0x114>
    1158:	28 85       	ldd	r18, Y+8	; 0x08
    115a:	39 85       	ldd	r19, Y+9	; 0x09
    115c:	21 30       	cpi	r18, 0x01	; 1
    115e:	31 05       	cpc	r19, r1
    1160:	09 f0       	breq	.+2      	; 0x1164 <MDIO_voidSetPinDirection+0xec>
    1162:	97 c0       	rjmp	.+302    	; 0x1292 <MDIO_voidSetPinDirection+0x21a>
        {
            case PIN_OUTPUT: SET_BIT(DDRB_REG,A_u8Pin);
    1164:	a7 e3       	ldi	r26, 0x37	; 55
    1166:	b0 e0       	ldi	r27, 0x00	; 0
    1168:	e7 e3       	ldi	r30, 0x37	; 55
    116a:	f0 e0       	ldi	r31, 0x00	; 0
    116c:	80 81       	ld	r24, Z
    116e:	48 2f       	mov	r20, r24
    1170:	8a 81       	ldd	r24, Y+2	; 0x02
    1172:	28 2f       	mov	r18, r24
    1174:	30 e0       	ldi	r19, 0x00	; 0
    1176:	81 e0       	ldi	r24, 0x01	; 1
    1178:	90 e0       	ldi	r25, 0x00	; 0
    117a:	02 2e       	mov	r0, r18
    117c:	02 c0       	rjmp	.+4      	; 0x1182 <MDIO_voidSetPinDirection+0x10a>
    117e:	88 0f       	add	r24, r24
    1180:	99 1f       	adc	r25, r25
    1182:	0a 94       	dec	r0
    1184:	e2 f7       	brpl	.-8      	; 0x117e <MDIO_voidSetPinDirection+0x106>
    1186:	84 2b       	or	r24, r20
    1188:	8c 93       	st	X, r24
    118a:	83 c0       	rjmp	.+262    	; 0x1292 <MDIO_voidSetPinDirection+0x21a>
            break;

            case PIN_INPUT: CLR_BIT(DDRB_REG,A_u8Pin);
    118c:	a7 e3       	ldi	r26, 0x37	; 55
    118e:	b0 e0       	ldi	r27, 0x00	; 0
    1190:	e7 e3       	ldi	r30, 0x37	; 55
    1192:	f0 e0       	ldi	r31, 0x00	; 0
    1194:	80 81       	ld	r24, Z
    1196:	48 2f       	mov	r20, r24
    1198:	8a 81       	ldd	r24, Y+2	; 0x02
    119a:	28 2f       	mov	r18, r24
    119c:	30 e0       	ldi	r19, 0x00	; 0
    119e:	81 e0       	ldi	r24, 0x01	; 1
    11a0:	90 e0       	ldi	r25, 0x00	; 0
    11a2:	02 2e       	mov	r0, r18
    11a4:	02 c0       	rjmp	.+4      	; 0x11aa <MDIO_voidSetPinDirection+0x132>
    11a6:	88 0f       	add	r24, r24
    11a8:	99 1f       	adc	r25, r25
    11aa:	0a 94       	dec	r0
    11ac:	e2 f7       	brpl	.-8      	; 0x11a6 <MDIO_voidSetPinDirection+0x12e>
    11ae:	80 95       	com	r24
    11b0:	84 23       	and	r24, r20
    11b2:	8c 93       	st	X, r24
    11b4:	6e c0       	rjmp	.+220    	; 0x1292 <MDIO_voidSetPinDirection+0x21a>
            break;
        };
        break;

        case PORTC:
        switch (A_u8Value)
    11b6:	8b 81       	ldd	r24, Y+3	; 0x03
    11b8:	28 2f       	mov	r18, r24
    11ba:	30 e0       	ldi	r19, 0x00	; 0
    11bc:	3f 83       	std	Y+7, r19	; 0x07
    11be:	2e 83       	std	Y+6, r18	; 0x06
    11c0:	8e 81       	ldd	r24, Y+6	; 0x06
    11c2:	9f 81       	ldd	r25, Y+7	; 0x07
    11c4:	00 97       	sbiw	r24, 0x00	; 0
    11c6:	d1 f0       	breq	.+52     	; 0x11fc <MDIO_voidSetPinDirection+0x184>
    11c8:	2e 81       	ldd	r18, Y+6	; 0x06
    11ca:	3f 81       	ldd	r19, Y+7	; 0x07
    11cc:	21 30       	cpi	r18, 0x01	; 1
    11ce:	31 05       	cpc	r19, r1
    11d0:	09 f0       	breq	.+2      	; 0x11d4 <MDIO_voidSetPinDirection+0x15c>
    11d2:	5f c0       	rjmp	.+190    	; 0x1292 <MDIO_voidSetPinDirection+0x21a>
        {
            case PIN_OUTPUT: SET_BIT(DDRC_REG,A_u8Pin);
    11d4:	a4 e3       	ldi	r26, 0x34	; 52
    11d6:	b0 e0       	ldi	r27, 0x00	; 0
    11d8:	e4 e3       	ldi	r30, 0x34	; 52
    11da:	f0 e0       	ldi	r31, 0x00	; 0
    11dc:	80 81       	ld	r24, Z
    11de:	48 2f       	mov	r20, r24
    11e0:	8a 81       	ldd	r24, Y+2	; 0x02
    11e2:	28 2f       	mov	r18, r24
    11e4:	30 e0       	ldi	r19, 0x00	; 0
    11e6:	81 e0       	ldi	r24, 0x01	; 1
    11e8:	90 e0       	ldi	r25, 0x00	; 0
    11ea:	02 2e       	mov	r0, r18
    11ec:	02 c0       	rjmp	.+4      	; 0x11f2 <MDIO_voidSetPinDirection+0x17a>
    11ee:	88 0f       	add	r24, r24
    11f0:	99 1f       	adc	r25, r25
    11f2:	0a 94       	dec	r0
    11f4:	e2 f7       	brpl	.-8      	; 0x11ee <MDIO_voidSetPinDirection+0x176>
    11f6:	84 2b       	or	r24, r20
    11f8:	8c 93       	st	X, r24
    11fa:	4b c0       	rjmp	.+150    	; 0x1292 <MDIO_voidSetPinDirection+0x21a>
            break;

            case PIN_INPUT: CLR_BIT(DDRC_REG,A_u8Pin);
    11fc:	a4 e3       	ldi	r26, 0x34	; 52
    11fe:	b0 e0       	ldi	r27, 0x00	; 0
    1200:	e4 e3       	ldi	r30, 0x34	; 52
    1202:	f0 e0       	ldi	r31, 0x00	; 0
    1204:	80 81       	ld	r24, Z
    1206:	48 2f       	mov	r20, r24
    1208:	8a 81       	ldd	r24, Y+2	; 0x02
    120a:	28 2f       	mov	r18, r24
    120c:	30 e0       	ldi	r19, 0x00	; 0
    120e:	81 e0       	ldi	r24, 0x01	; 1
    1210:	90 e0       	ldi	r25, 0x00	; 0
    1212:	02 2e       	mov	r0, r18
    1214:	02 c0       	rjmp	.+4      	; 0x121a <MDIO_voidSetPinDirection+0x1a2>
    1216:	88 0f       	add	r24, r24
    1218:	99 1f       	adc	r25, r25
    121a:	0a 94       	dec	r0
    121c:	e2 f7       	brpl	.-8      	; 0x1216 <MDIO_voidSetPinDirection+0x19e>
    121e:	80 95       	com	r24
    1220:	84 23       	and	r24, r20
    1222:	8c 93       	st	X, r24
    1224:	36 c0       	rjmp	.+108    	; 0x1292 <MDIO_voidSetPinDirection+0x21a>
            break;
        };
        break;

        case PORTD:
        switch (A_u8Value)
    1226:	8b 81       	ldd	r24, Y+3	; 0x03
    1228:	28 2f       	mov	r18, r24
    122a:	30 e0       	ldi	r19, 0x00	; 0
    122c:	3d 83       	std	Y+5, r19	; 0x05
    122e:	2c 83       	std	Y+4, r18	; 0x04
    1230:	8c 81       	ldd	r24, Y+4	; 0x04
    1232:	9d 81       	ldd	r25, Y+5	; 0x05
    1234:	00 97       	sbiw	r24, 0x00	; 0
    1236:	c9 f0       	breq	.+50     	; 0x126a <MDIO_voidSetPinDirection+0x1f2>
    1238:	2c 81       	ldd	r18, Y+4	; 0x04
    123a:	3d 81       	ldd	r19, Y+5	; 0x05
    123c:	21 30       	cpi	r18, 0x01	; 1
    123e:	31 05       	cpc	r19, r1
    1240:	41 f5       	brne	.+80     	; 0x1292 <MDIO_voidSetPinDirection+0x21a>
        {
            case PIN_OUTPUT: SET_BIT(DDRD_REG,A_u8Pin);
    1242:	a1 e3       	ldi	r26, 0x31	; 49
    1244:	b0 e0       	ldi	r27, 0x00	; 0
    1246:	e1 e3       	ldi	r30, 0x31	; 49
    1248:	f0 e0       	ldi	r31, 0x00	; 0
    124a:	80 81       	ld	r24, Z
    124c:	48 2f       	mov	r20, r24
    124e:	8a 81       	ldd	r24, Y+2	; 0x02
    1250:	28 2f       	mov	r18, r24
    1252:	30 e0       	ldi	r19, 0x00	; 0
    1254:	81 e0       	ldi	r24, 0x01	; 1
    1256:	90 e0       	ldi	r25, 0x00	; 0
    1258:	02 2e       	mov	r0, r18
    125a:	02 c0       	rjmp	.+4      	; 0x1260 <MDIO_voidSetPinDirection+0x1e8>
    125c:	88 0f       	add	r24, r24
    125e:	99 1f       	adc	r25, r25
    1260:	0a 94       	dec	r0
    1262:	e2 f7       	brpl	.-8      	; 0x125c <MDIO_voidSetPinDirection+0x1e4>
    1264:	84 2b       	or	r24, r20
    1266:	8c 93       	st	X, r24
    1268:	14 c0       	rjmp	.+40     	; 0x1292 <MDIO_voidSetPinDirection+0x21a>
            break;

            case PIN_INPUT: CLR_BIT(DDRD_REG,A_u8Pin);
    126a:	a1 e3       	ldi	r26, 0x31	; 49
    126c:	b0 e0       	ldi	r27, 0x00	; 0
    126e:	e1 e3       	ldi	r30, 0x31	; 49
    1270:	f0 e0       	ldi	r31, 0x00	; 0
    1272:	80 81       	ld	r24, Z
    1274:	48 2f       	mov	r20, r24
    1276:	8a 81       	ldd	r24, Y+2	; 0x02
    1278:	28 2f       	mov	r18, r24
    127a:	30 e0       	ldi	r19, 0x00	; 0
    127c:	81 e0       	ldi	r24, 0x01	; 1
    127e:	90 e0       	ldi	r25, 0x00	; 0
    1280:	02 2e       	mov	r0, r18
    1282:	02 c0       	rjmp	.+4      	; 0x1288 <MDIO_voidSetPinDirection+0x210>
    1284:	88 0f       	add	r24, r24
    1286:	99 1f       	adc	r25, r25
    1288:	0a 94       	dec	r0
    128a:	e2 f7       	brpl	.-8      	; 0x1284 <MDIO_voidSetPinDirection+0x20c>
    128c:	80 95       	com	r24
    128e:	84 23       	and	r24, r20
    1290:	8c 93       	st	X, r24
            break;
        };
        break;
    }
}
    1292:	2d 96       	adiw	r28, 0x0d	; 13
    1294:	0f b6       	in	r0, 0x3f	; 63
    1296:	f8 94       	cli
    1298:	de bf       	out	0x3e, r29	; 62
    129a:	0f be       	out	0x3f, r0	; 63
    129c:	cd bf       	out	0x3d, r28	; 61
    129e:	cf 91       	pop	r28
    12a0:	df 91       	pop	r29
    12a2:	08 95       	ret

000012a4 <MDIO_voidSetPortValue>:


void MDIO_voidSetPortValue(u8 A_u8Port,u8 A_u8Value)
{
    12a4:	df 93       	push	r29
    12a6:	cf 93       	push	r28
    12a8:	00 d0       	rcall	.+0      	; 0x12aa <MDIO_voidSetPortValue+0x6>
    12aa:	00 d0       	rcall	.+0      	; 0x12ac <MDIO_voidSetPortValue+0x8>
    12ac:	cd b7       	in	r28, 0x3d	; 61
    12ae:	de b7       	in	r29, 0x3e	; 62
    12b0:	89 83       	std	Y+1, r24	; 0x01
    12b2:	6a 83       	std	Y+2, r22	; 0x02
    switch(A_u8Port)
    12b4:	89 81       	ldd	r24, Y+1	; 0x01
    12b6:	28 2f       	mov	r18, r24
    12b8:	30 e0       	ldi	r19, 0x00	; 0
    12ba:	3c 83       	std	Y+4, r19	; 0x04
    12bc:	2b 83       	std	Y+3, r18	; 0x03
    12be:	8b 81       	ldd	r24, Y+3	; 0x03
    12c0:	9c 81       	ldd	r25, Y+4	; 0x04
    12c2:	81 30       	cpi	r24, 0x01	; 1
    12c4:	91 05       	cpc	r25, r1
    12c6:	d1 f0       	breq	.+52     	; 0x12fc <MDIO_voidSetPortValue+0x58>
    12c8:	2b 81       	ldd	r18, Y+3	; 0x03
    12ca:	3c 81       	ldd	r19, Y+4	; 0x04
    12cc:	22 30       	cpi	r18, 0x02	; 2
    12ce:	31 05       	cpc	r19, r1
    12d0:	2c f4       	brge	.+10     	; 0x12dc <MDIO_voidSetPortValue+0x38>
    12d2:	8b 81       	ldd	r24, Y+3	; 0x03
    12d4:	9c 81       	ldd	r25, Y+4	; 0x04
    12d6:	00 97       	sbiw	r24, 0x00	; 0
    12d8:	61 f0       	breq	.+24     	; 0x12f2 <MDIO_voidSetPortValue+0x4e>
    12da:	1e c0       	rjmp	.+60     	; 0x1318 <MDIO_voidSetPortValue+0x74>
    12dc:	2b 81       	ldd	r18, Y+3	; 0x03
    12de:	3c 81       	ldd	r19, Y+4	; 0x04
    12e0:	22 30       	cpi	r18, 0x02	; 2
    12e2:	31 05       	cpc	r19, r1
    12e4:	81 f0       	breq	.+32     	; 0x1306 <MDIO_voidSetPortValue+0x62>
    12e6:	8b 81       	ldd	r24, Y+3	; 0x03
    12e8:	9c 81       	ldd	r25, Y+4	; 0x04
    12ea:	83 30       	cpi	r24, 0x03	; 3
    12ec:	91 05       	cpc	r25, r1
    12ee:	81 f0       	breq	.+32     	; 0x1310 <MDIO_voidSetPortValue+0x6c>
    12f0:	13 c0       	rjmp	.+38     	; 0x1318 <MDIO_voidSetPortValue+0x74>
    {
        case PORTA:PORTA_REG=A_u8Value;
    12f2:	eb e3       	ldi	r30, 0x3B	; 59
    12f4:	f0 e0       	ldi	r31, 0x00	; 0
    12f6:	8a 81       	ldd	r24, Y+2	; 0x02
    12f8:	80 83       	st	Z, r24
    12fa:	0e c0       	rjmp	.+28     	; 0x1318 <MDIO_voidSetPortValue+0x74>
        break;
        case PORTB:PORTB_REG=A_u8Value;
    12fc:	e8 e3       	ldi	r30, 0x38	; 56
    12fe:	f0 e0       	ldi	r31, 0x00	; 0
    1300:	8a 81       	ldd	r24, Y+2	; 0x02
    1302:	80 83       	st	Z, r24
    1304:	09 c0       	rjmp	.+18     	; 0x1318 <MDIO_voidSetPortValue+0x74>
        break;
        case PORTC:PORTC_REG=A_u8Value;
    1306:	e5 e3       	ldi	r30, 0x35	; 53
    1308:	f0 e0       	ldi	r31, 0x00	; 0
    130a:	8a 81       	ldd	r24, Y+2	; 0x02
    130c:	80 83       	st	Z, r24
    130e:	04 c0       	rjmp	.+8      	; 0x1318 <MDIO_voidSetPortValue+0x74>
        break;
        case PORTD:PORTD_REG=A_u8Value;
    1310:	e2 e3       	ldi	r30, 0x32	; 50
    1312:	f0 e0       	ldi	r31, 0x00	; 0
    1314:	8a 81       	ldd	r24, Y+2	; 0x02
    1316:	80 83       	st	Z, r24
        break;
    }
}
    1318:	0f 90       	pop	r0
    131a:	0f 90       	pop	r0
    131c:	0f 90       	pop	r0
    131e:	0f 90       	pop	r0
    1320:	cf 91       	pop	r28
    1322:	df 91       	pop	r29
    1324:	08 95       	ret

00001326 <MDIO_voidSetPortDirection>:

void MDIO_voidSetPortDirection(u8 A_u8Port,u8 A_u8Value)
{
    1326:	df 93       	push	r29
    1328:	cf 93       	push	r28
    132a:	00 d0       	rcall	.+0      	; 0x132c <MDIO_voidSetPortDirection+0x6>
    132c:	00 d0       	rcall	.+0      	; 0x132e <MDIO_voidSetPortDirection+0x8>
    132e:	cd b7       	in	r28, 0x3d	; 61
    1330:	de b7       	in	r29, 0x3e	; 62
    1332:	89 83       	std	Y+1, r24	; 0x01
    1334:	6a 83       	std	Y+2, r22	; 0x02
    switch(A_u8Port)
    1336:	89 81       	ldd	r24, Y+1	; 0x01
    1338:	28 2f       	mov	r18, r24
    133a:	30 e0       	ldi	r19, 0x00	; 0
    133c:	3c 83       	std	Y+4, r19	; 0x04
    133e:	2b 83       	std	Y+3, r18	; 0x03
    1340:	8b 81       	ldd	r24, Y+3	; 0x03
    1342:	9c 81       	ldd	r25, Y+4	; 0x04
    1344:	81 30       	cpi	r24, 0x01	; 1
    1346:	91 05       	cpc	r25, r1
    1348:	d1 f0       	breq	.+52     	; 0x137e <MDIO_voidSetPortDirection+0x58>
    134a:	2b 81       	ldd	r18, Y+3	; 0x03
    134c:	3c 81       	ldd	r19, Y+4	; 0x04
    134e:	22 30       	cpi	r18, 0x02	; 2
    1350:	31 05       	cpc	r19, r1
    1352:	2c f4       	brge	.+10     	; 0x135e <MDIO_voidSetPortDirection+0x38>
    1354:	8b 81       	ldd	r24, Y+3	; 0x03
    1356:	9c 81       	ldd	r25, Y+4	; 0x04
    1358:	00 97       	sbiw	r24, 0x00	; 0
    135a:	61 f0       	breq	.+24     	; 0x1374 <MDIO_voidSetPortDirection+0x4e>
    135c:	1e c0       	rjmp	.+60     	; 0x139a <MDIO_voidSetPortDirection+0x74>
    135e:	2b 81       	ldd	r18, Y+3	; 0x03
    1360:	3c 81       	ldd	r19, Y+4	; 0x04
    1362:	22 30       	cpi	r18, 0x02	; 2
    1364:	31 05       	cpc	r19, r1
    1366:	81 f0       	breq	.+32     	; 0x1388 <MDIO_voidSetPortDirection+0x62>
    1368:	8b 81       	ldd	r24, Y+3	; 0x03
    136a:	9c 81       	ldd	r25, Y+4	; 0x04
    136c:	83 30       	cpi	r24, 0x03	; 3
    136e:	91 05       	cpc	r25, r1
    1370:	81 f0       	breq	.+32     	; 0x1392 <MDIO_voidSetPortDirection+0x6c>
    1372:	13 c0       	rjmp	.+38     	; 0x139a <MDIO_voidSetPortDirection+0x74>
    {
        case PORTA:DDRA_REG=A_u8Value;
    1374:	ea e3       	ldi	r30, 0x3A	; 58
    1376:	f0 e0       	ldi	r31, 0x00	; 0
    1378:	8a 81       	ldd	r24, Y+2	; 0x02
    137a:	80 83       	st	Z, r24
    137c:	0e c0       	rjmp	.+28     	; 0x139a <MDIO_voidSetPortDirection+0x74>
        break;
        case PORTB:DDRB_REG=A_u8Value;
    137e:	e7 e3       	ldi	r30, 0x37	; 55
    1380:	f0 e0       	ldi	r31, 0x00	; 0
    1382:	8a 81       	ldd	r24, Y+2	; 0x02
    1384:	80 83       	st	Z, r24
    1386:	09 c0       	rjmp	.+18     	; 0x139a <MDIO_voidSetPortDirection+0x74>
        break;
        case PORTC:DDRC_REG=A_u8Value;
    1388:	e4 e3       	ldi	r30, 0x34	; 52
    138a:	f0 e0       	ldi	r31, 0x00	; 0
    138c:	8a 81       	ldd	r24, Y+2	; 0x02
    138e:	80 83       	st	Z, r24
    1390:	04 c0       	rjmp	.+8      	; 0x139a <MDIO_voidSetPortDirection+0x74>
        break;
        case PORTD:DDRD_REG=A_u8Value;
    1392:	e1 e3       	ldi	r30, 0x31	; 49
    1394:	f0 e0       	ldi	r31, 0x00	; 0
    1396:	8a 81       	ldd	r24, Y+2	; 0x02
    1398:	80 83       	st	Z, r24
        break;
    }
    139a:	0f 90       	pop	r0
    139c:	0f 90       	pop	r0
    139e:	0f 90       	pop	r0
    13a0:	0f 90       	pop	r0
    13a2:	cf 91       	pop	r28
    13a4:	df 91       	pop	r29
    13a6:	08 95       	ret

000013a8 <HLCD4_voidSendCommand>:


static u8 global_u8Init=0;

void HLCD4_voidSendCommand(u8 A_u8Command)
{
    13a8:	df 93       	push	r29
    13aa:	cf 93       	push	r28
    13ac:	cd b7       	in	r28, 0x3d	; 61
    13ae:	de b7       	in	r29, 0x3e	; 62
    13b0:	ab 97       	sbiw	r28, 0x2b	; 43
    13b2:	0f b6       	in	r0, 0x3f	; 63
    13b4:	f8 94       	cli
    13b6:	de bf       	out	0x3e, r29	; 62
    13b8:	0f be       	out	0x3f, r0	; 63
    13ba:	cd bf       	out	0x3d, r28	; 61
    13bc:	8b a7       	std	Y+43, r24	; 0x2b
    //RS=0 RW=0
    MDIO_voidSetPinValue(LCD_CONTROL_PORT,RS_PIN,PIN_LOW);
    13be:	82 e0       	ldi	r24, 0x02	; 2
    13c0:	60 e0       	ldi	r22, 0x00	; 0
    13c2:	40 e0       	ldi	r20, 0x00	; 0
    13c4:	0e 94 26 07 	call	0xe4c	; 0xe4c <MDIO_voidSetPinValue>
    MDIO_voidSetPinValue(LCD_CONTROL_PORT,RW_PIN,PIN_LOW);
    13c8:	82 e0       	ldi	r24, 0x02	; 2
    13ca:	61 e0       	ldi	r22, 0x01	; 1
    13cc:	40 e0       	ldi	r20, 0x00	; 0
    13ce:	0e 94 26 07 	call	0xe4c	; 0xe4c <MDIO_voidSetPinValue>

    //send UPPER Bits (B7 to B4)
    MDIO_voidSetPortValue(LCD_DATA_PORT,A_u8Command);
    13d2:	83 e0       	ldi	r24, 0x03	; 3
    13d4:	6b a5       	ldd	r22, Y+43	; 0x2b
    13d6:	0e 94 52 09 	call	0x12a4	; 0x12a4 <MDIO_voidSetPortValue>


    //pulse HIGH to LOW to ENABLE PIN
    MDIO_voidSetPinValue(LCD_CONTROL_PORT,E_PIN,PIN_HIGH);
    13da:	82 e0       	ldi	r24, 0x02	; 2
    13dc:	62 e0       	ldi	r22, 0x02	; 2
    13de:	41 e0       	ldi	r20, 0x01	; 1
    13e0:	0e 94 26 07 	call	0xe4c	; 0xe4c <MDIO_voidSetPinValue>
    13e4:	80 e0       	ldi	r24, 0x00	; 0
    13e6:	90 e0       	ldi	r25, 0x00	; 0
    13e8:	a0 e8       	ldi	r26, 0x80	; 128
    13ea:	bf e3       	ldi	r27, 0x3F	; 63
    13ec:	8f a3       	std	Y+39, r24	; 0x27
    13ee:	98 a7       	std	Y+40, r25	; 0x28
    13f0:	a9 a7       	std	Y+41, r26	; 0x29
    13f2:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    13f4:	6f a1       	ldd	r22, Y+39	; 0x27
    13f6:	78 a5       	ldd	r23, Y+40	; 0x28
    13f8:	89 a5       	ldd	r24, Y+41	; 0x29
    13fa:	9a a5       	ldd	r25, Y+42	; 0x2a
    13fc:	20 e0       	ldi	r18, 0x00	; 0
    13fe:	30 e0       	ldi	r19, 0x00	; 0
    1400:	4a ef       	ldi	r20, 0xFA	; 250
    1402:	54 e4       	ldi	r21, 0x44	; 68
    1404:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1408:	dc 01       	movw	r26, r24
    140a:	cb 01       	movw	r24, r22
    140c:	8b a3       	std	Y+35, r24	; 0x23
    140e:	9c a3       	std	Y+36, r25	; 0x24
    1410:	ad a3       	std	Y+37, r26	; 0x25
    1412:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1414:	6b a1       	ldd	r22, Y+35	; 0x23
    1416:	7c a1       	ldd	r23, Y+36	; 0x24
    1418:	8d a1       	ldd	r24, Y+37	; 0x25
    141a:	9e a1       	ldd	r25, Y+38	; 0x26
    141c:	20 e0       	ldi	r18, 0x00	; 0
    141e:	30 e0       	ldi	r19, 0x00	; 0
    1420:	40 e8       	ldi	r20, 0x80	; 128
    1422:	5f e3       	ldi	r21, 0x3F	; 63
    1424:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1428:	88 23       	and	r24, r24
    142a:	2c f4       	brge	.+10     	; 0x1436 <HLCD4_voidSendCommand+0x8e>
		__ticks = 1;
    142c:	81 e0       	ldi	r24, 0x01	; 1
    142e:	90 e0       	ldi	r25, 0x00	; 0
    1430:	9a a3       	std	Y+34, r25	; 0x22
    1432:	89 a3       	std	Y+33, r24	; 0x21
    1434:	3f c0       	rjmp	.+126    	; 0x14b4 <HLCD4_voidSendCommand+0x10c>
	else if (__tmp > 65535)
    1436:	6b a1       	ldd	r22, Y+35	; 0x23
    1438:	7c a1       	ldd	r23, Y+36	; 0x24
    143a:	8d a1       	ldd	r24, Y+37	; 0x25
    143c:	9e a1       	ldd	r25, Y+38	; 0x26
    143e:	20 e0       	ldi	r18, 0x00	; 0
    1440:	3f ef       	ldi	r19, 0xFF	; 255
    1442:	4f e7       	ldi	r20, 0x7F	; 127
    1444:	57 e4       	ldi	r21, 0x47	; 71
    1446:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    144a:	18 16       	cp	r1, r24
    144c:	4c f5       	brge	.+82     	; 0x14a0 <HLCD4_voidSendCommand+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    144e:	6f a1       	ldd	r22, Y+39	; 0x27
    1450:	78 a5       	ldd	r23, Y+40	; 0x28
    1452:	89 a5       	ldd	r24, Y+41	; 0x29
    1454:	9a a5       	ldd	r25, Y+42	; 0x2a
    1456:	20 e0       	ldi	r18, 0x00	; 0
    1458:	30 e0       	ldi	r19, 0x00	; 0
    145a:	40 e2       	ldi	r20, 0x20	; 32
    145c:	51 e4       	ldi	r21, 0x41	; 65
    145e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1462:	dc 01       	movw	r26, r24
    1464:	cb 01       	movw	r24, r22
    1466:	bc 01       	movw	r22, r24
    1468:	cd 01       	movw	r24, r26
    146a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    146e:	dc 01       	movw	r26, r24
    1470:	cb 01       	movw	r24, r22
    1472:	9a a3       	std	Y+34, r25	; 0x22
    1474:	89 a3       	std	Y+33, r24	; 0x21
    1476:	0f c0       	rjmp	.+30     	; 0x1496 <HLCD4_voidSendCommand+0xee>
    1478:	88 ec       	ldi	r24, 0xC8	; 200
    147a:	90 e0       	ldi	r25, 0x00	; 0
    147c:	98 a3       	std	Y+32, r25	; 0x20
    147e:	8f 8f       	std	Y+31, r24	; 0x1f
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1480:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1482:	98 a1       	ldd	r25, Y+32	; 0x20
    1484:	01 97       	sbiw	r24, 0x01	; 1
    1486:	f1 f7       	brne	.-4      	; 0x1484 <HLCD4_voidSendCommand+0xdc>
    1488:	98 a3       	std	Y+32, r25	; 0x20
    148a:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    148c:	89 a1       	ldd	r24, Y+33	; 0x21
    148e:	9a a1       	ldd	r25, Y+34	; 0x22
    1490:	01 97       	sbiw	r24, 0x01	; 1
    1492:	9a a3       	std	Y+34, r25	; 0x22
    1494:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1496:	89 a1       	ldd	r24, Y+33	; 0x21
    1498:	9a a1       	ldd	r25, Y+34	; 0x22
    149a:	00 97       	sbiw	r24, 0x00	; 0
    149c:	69 f7       	brne	.-38     	; 0x1478 <HLCD4_voidSendCommand+0xd0>
    149e:	14 c0       	rjmp	.+40     	; 0x14c8 <HLCD4_voidSendCommand+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    14a0:	6b a1       	ldd	r22, Y+35	; 0x23
    14a2:	7c a1       	ldd	r23, Y+36	; 0x24
    14a4:	8d a1       	ldd	r24, Y+37	; 0x25
    14a6:	9e a1       	ldd	r25, Y+38	; 0x26
    14a8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    14ac:	dc 01       	movw	r26, r24
    14ae:	cb 01       	movw	r24, r22
    14b0:	9a a3       	std	Y+34, r25	; 0x22
    14b2:	89 a3       	std	Y+33, r24	; 0x21
    14b4:	89 a1       	ldd	r24, Y+33	; 0x21
    14b6:	9a a1       	ldd	r25, Y+34	; 0x22
    14b8:	9e 8f       	std	Y+30, r25	; 0x1e
    14ba:	8d 8f       	std	Y+29, r24	; 0x1d
    14bc:	8d 8d       	ldd	r24, Y+29	; 0x1d
    14be:	9e 8d       	ldd	r25, Y+30	; 0x1e
    14c0:	01 97       	sbiw	r24, 0x01	; 1
    14c2:	f1 f7       	brne	.-4      	; 0x14c0 <HLCD4_voidSendCommand+0x118>
    14c4:	9e 8f       	std	Y+30, r25	; 0x1e
    14c6:	8d 8f       	std	Y+29, r24	; 0x1d
    _delay_ms(1);
    MDIO_voidSetPinValue(LCD_CONTROL_PORT,E_PIN,PIN_LOW);
    14c8:	82 e0       	ldi	r24, 0x02	; 2
    14ca:	62 e0       	ldi	r22, 0x02	; 2
    14cc:	40 e0       	ldi	r20, 0x00	; 0
    14ce:	0e 94 26 07 	call	0xe4c	; 0xe4c <MDIO_voidSetPinValue>

    if(global_u8Init)
    14d2:	80 91 8a 00 	lds	r24, 0x008A
    14d6:	88 23       	and	r24, r24
    14d8:	09 f4       	brne	.+2      	; 0x14dc <HLCD4_voidSendCommand+0x134>
    14da:	84 c0       	rjmp	.+264    	; 0x15e4 <HLCD4_voidSendCommand+0x23c>
    {

        //send LOWR Bits (B3 to B0)
        MDIO_voidSetPortValue(LCD_DATA_PORT,A_u8Command<<4);
    14dc:	8b a5       	ldd	r24, Y+43	; 0x2b
    14de:	98 2f       	mov	r25, r24
    14e0:	92 95       	swap	r25
    14e2:	90 7f       	andi	r25, 0xF0	; 240
    14e4:	83 e0       	ldi	r24, 0x03	; 3
    14e6:	69 2f       	mov	r22, r25
    14e8:	0e 94 52 09 	call	0x12a4	; 0x12a4 <MDIO_voidSetPortValue>

        //pulse HIGH to LOW to ENABLE PIN
        MDIO_voidSetPinValue(LCD_CONTROL_PORT,E_PIN,PIN_HIGH);
    14ec:	82 e0       	ldi	r24, 0x02	; 2
    14ee:	62 e0       	ldi	r22, 0x02	; 2
    14f0:	41 e0       	ldi	r20, 0x01	; 1
    14f2:	0e 94 26 07 	call	0xe4c	; 0xe4c <MDIO_voidSetPinValue>
    14f6:	80 e0       	ldi	r24, 0x00	; 0
    14f8:	90 e0       	ldi	r25, 0x00	; 0
    14fa:	a0 e8       	ldi	r26, 0x80	; 128
    14fc:	bf e3       	ldi	r27, 0x3F	; 63
    14fe:	89 8f       	std	Y+25, r24	; 0x19
    1500:	9a 8f       	std	Y+26, r25	; 0x1a
    1502:	ab 8f       	std	Y+27, r26	; 0x1b
    1504:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1506:	69 8d       	ldd	r22, Y+25	; 0x19
    1508:	7a 8d       	ldd	r23, Y+26	; 0x1a
    150a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    150c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    150e:	20 e0       	ldi	r18, 0x00	; 0
    1510:	30 e0       	ldi	r19, 0x00	; 0
    1512:	4a ef       	ldi	r20, 0xFA	; 250
    1514:	54 e4       	ldi	r21, 0x44	; 68
    1516:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    151a:	dc 01       	movw	r26, r24
    151c:	cb 01       	movw	r24, r22
    151e:	8d 8b       	std	Y+21, r24	; 0x15
    1520:	9e 8b       	std	Y+22, r25	; 0x16
    1522:	af 8b       	std	Y+23, r26	; 0x17
    1524:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1526:	6d 89       	ldd	r22, Y+21	; 0x15
    1528:	7e 89       	ldd	r23, Y+22	; 0x16
    152a:	8f 89       	ldd	r24, Y+23	; 0x17
    152c:	98 8d       	ldd	r25, Y+24	; 0x18
    152e:	20 e0       	ldi	r18, 0x00	; 0
    1530:	30 e0       	ldi	r19, 0x00	; 0
    1532:	40 e8       	ldi	r20, 0x80	; 128
    1534:	5f e3       	ldi	r21, 0x3F	; 63
    1536:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    153a:	88 23       	and	r24, r24
    153c:	2c f4       	brge	.+10     	; 0x1548 <HLCD4_voidSendCommand+0x1a0>
		__ticks = 1;
    153e:	81 e0       	ldi	r24, 0x01	; 1
    1540:	90 e0       	ldi	r25, 0x00	; 0
    1542:	9c 8b       	std	Y+20, r25	; 0x14
    1544:	8b 8b       	std	Y+19, r24	; 0x13
    1546:	3f c0       	rjmp	.+126    	; 0x15c6 <HLCD4_voidSendCommand+0x21e>
	else if (__tmp > 65535)
    1548:	6d 89       	ldd	r22, Y+21	; 0x15
    154a:	7e 89       	ldd	r23, Y+22	; 0x16
    154c:	8f 89       	ldd	r24, Y+23	; 0x17
    154e:	98 8d       	ldd	r25, Y+24	; 0x18
    1550:	20 e0       	ldi	r18, 0x00	; 0
    1552:	3f ef       	ldi	r19, 0xFF	; 255
    1554:	4f e7       	ldi	r20, 0x7F	; 127
    1556:	57 e4       	ldi	r21, 0x47	; 71
    1558:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    155c:	18 16       	cp	r1, r24
    155e:	4c f5       	brge	.+82     	; 0x15b2 <HLCD4_voidSendCommand+0x20a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1560:	69 8d       	ldd	r22, Y+25	; 0x19
    1562:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1564:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1566:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1568:	20 e0       	ldi	r18, 0x00	; 0
    156a:	30 e0       	ldi	r19, 0x00	; 0
    156c:	40 e2       	ldi	r20, 0x20	; 32
    156e:	51 e4       	ldi	r21, 0x41	; 65
    1570:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1574:	dc 01       	movw	r26, r24
    1576:	cb 01       	movw	r24, r22
    1578:	bc 01       	movw	r22, r24
    157a:	cd 01       	movw	r24, r26
    157c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1580:	dc 01       	movw	r26, r24
    1582:	cb 01       	movw	r24, r22
    1584:	9c 8b       	std	Y+20, r25	; 0x14
    1586:	8b 8b       	std	Y+19, r24	; 0x13
    1588:	0f c0       	rjmp	.+30     	; 0x15a8 <HLCD4_voidSendCommand+0x200>
    158a:	88 ec       	ldi	r24, 0xC8	; 200
    158c:	90 e0       	ldi	r25, 0x00	; 0
    158e:	9a 8b       	std	Y+18, r25	; 0x12
    1590:	89 8b       	std	Y+17, r24	; 0x11
    1592:	89 89       	ldd	r24, Y+17	; 0x11
    1594:	9a 89       	ldd	r25, Y+18	; 0x12
    1596:	01 97       	sbiw	r24, 0x01	; 1
    1598:	f1 f7       	brne	.-4      	; 0x1596 <HLCD4_voidSendCommand+0x1ee>
    159a:	9a 8b       	std	Y+18, r25	; 0x12
    159c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    159e:	8b 89       	ldd	r24, Y+19	; 0x13
    15a0:	9c 89       	ldd	r25, Y+20	; 0x14
    15a2:	01 97       	sbiw	r24, 0x01	; 1
    15a4:	9c 8b       	std	Y+20, r25	; 0x14
    15a6:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    15a8:	8b 89       	ldd	r24, Y+19	; 0x13
    15aa:	9c 89       	ldd	r25, Y+20	; 0x14
    15ac:	00 97       	sbiw	r24, 0x00	; 0
    15ae:	69 f7       	brne	.-38     	; 0x158a <HLCD4_voidSendCommand+0x1e2>
    15b0:	14 c0       	rjmp	.+40     	; 0x15da <HLCD4_voidSendCommand+0x232>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    15b2:	6d 89       	ldd	r22, Y+21	; 0x15
    15b4:	7e 89       	ldd	r23, Y+22	; 0x16
    15b6:	8f 89       	ldd	r24, Y+23	; 0x17
    15b8:	98 8d       	ldd	r25, Y+24	; 0x18
    15ba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    15be:	dc 01       	movw	r26, r24
    15c0:	cb 01       	movw	r24, r22
    15c2:	9c 8b       	std	Y+20, r25	; 0x14
    15c4:	8b 8b       	std	Y+19, r24	; 0x13
    15c6:	8b 89       	ldd	r24, Y+19	; 0x13
    15c8:	9c 89       	ldd	r25, Y+20	; 0x14
    15ca:	98 8b       	std	Y+16, r25	; 0x10
    15cc:	8f 87       	std	Y+15, r24	; 0x0f
    15ce:	8f 85       	ldd	r24, Y+15	; 0x0f
    15d0:	98 89       	ldd	r25, Y+16	; 0x10
    15d2:	01 97       	sbiw	r24, 0x01	; 1
    15d4:	f1 f7       	brne	.-4      	; 0x15d2 <HLCD4_voidSendCommand+0x22a>
    15d6:	98 8b       	std	Y+16, r25	; 0x10
    15d8:	8f 87       	std	Y+15, r24	; 0x0f
        _delay_ms(1);
        MDIO_voidSetPinValue(LCD_CONTROL_PORT,E_PIN,PIN_LOW);
    15da:	82 e0       	ldi	r24, 0x02	; 2
    15dc:	62 e0       	ldi	r22, 0x02	; 2
    15de:	40 e0       	ldi	r20, 0x00	; 0
    15e0:	0e 94 26 07 	call	0xe4c	; 0xe4c <MDIO_voidSetPinValue>
    15e4:	80 e0       	ldi	r24, 0x00	; 0
    15e6:	90 e0       	ldi	r25, 0x00	; 0
    15e8:	a0 e0       	ldi	r26, 0x00	; 0
    15ea:	b0 e4       	ldi	r27, 0x40	; 64
    15ec:	8b 87       	std	Y+11, r24	; 0x0b
    15ee:	9c 87       	std	Y+12, r25	; 0x0c
    15f0:	ad 87       	std	Y+13, r26	; 0x0d
    15f2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    15f4:	6b 85       	ldd	r22, Y+11	; 0x0b
    15f6:	7c 85       	ldd	r23, Y+12	; 0x0c
    15f8:	8d 85       	ldd	r24, Y+13	; 0x0d
    15fa:	9e 85       	ldd	r25, Y+14	; 0x0e
    15fc:	20 e0       	ldi	r18, 0x00	; 0
    15fe:	30 e0       	ldi	r19, 0x00	; 0
    1600:	4a ef       	ldi	r20, 0xFA	; 250
    1602:	54 e4       	ldi	r21, 0x44	; 68
    1604:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1608:	dc 01       	movw	r26, r24
    160a:	cb 01       	movw	r24, r22
    160c:	8f 83       	std	Y+7, r24	; 0x07
    160e:	98 87       	std	Y+8, r25	; 0x08
    1610:	a9 87       	std	Y+9, r26	; 0x09
    1612:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1614:	6f 81       	ldd	r22, Y+7	; 0x07
    1616:	78 85       	ldd	r23, Y+8	; 0x08
    1618:	89 85       	ldd	r24, Y+9	; 0x09
    161a:	9a 85       	ldd	r25, Y+10	; 0x0a
    161c:	20 e0       	ldi	r18, 0x00	; 0
    161e:	30 e0       	ldi	r19, 0x00	; 0
    1620:	40 e8       	ldi	r20, 0x80	; 128
    1622:	5f e3       	ldi	r21, 0x3F	; 63
    1624:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1628:	88 23       	and	r24, r24
    162a:	2c f4       	brge	.+10     	; 0x1636 <HLCD4_voidSendCommand+0x28e>
		__ticks = 1;
    162c:	81 e0       	ldi	r24, 0x01	; 1
    162e:	90 e0       	ldi	r25, 0x00	; 0
    1630:	9e 83       	std	Y+6, r25	; 0x06
    1632:	8d 83       	std	Y+5, r24	; 0x05
    1634:	3f c0       	rjmp	.+126    	; 0x16b4 <HLCD4_voidSendCommand+0x30c>
	else if (__tmp > 65535)
    1636:	6f 81       	ldd	r22, Y+7	; 0x07
    1638:	78 85       	ldd	r23, Y+8	; 0x08
    163a:	89 85       	ldd	r24, Y+9	; 0x09
    163c:	9a 85       	ldd	r25, Y+10	; 0x0a
    163e:	20 e0       	ldi	r18, 0x00	; 0
    1640:	3f ef       	ldi	r19, 0xFF	; 255
    1642:	4f e7       	ldi	r20, 0x7F	; 127
    1644:	57 e4       	ldi	r21, 0x47	; 71
    1646:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    164a:	18 16       	cp	r1, r24
    164c:	4c f5       	brge	.+82     	; 0x16a0 <HLCD4_voidSendCommand+0x2f8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    164e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1650:	7c 85       	ldd	r23, Y+12	; 0x0c
    1652:	8d 85       	ldd	r24, Y+13	; 0x0d
    1654:	9e 85       	ldd	r25, Y+14	; 0x0e
    1656:	20 e0       	ldi	r18, 0x00	; 0
    1658:	30 e0       	ldi	r19, 0x00	; 0
    165a:	40 e2       	ldi	r20, 0x20	; 32
    165c:	51 e4       	ldi	r21, 0x41	; 65
    165e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1662:	dc 01       	movw	r26, r24
    1664:	cb 01       	movw	r24, r22
    1666:	bc 01       	movw	r22, r24
    1668:	cd 01       	movw	r24, r26
    166a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    166e:	dc 01       	movw	r26, r24
    1670:	cb 01       	movw	r24, r22
    1672:	9e 83       	std	Y+6, r25	; 0x06
    1674:	8d 83       	std	Y+5, r24	; 0x05
    1676:	0f c0       	rjmp	.+30     	; 0x1696 <HLCD4_voidSendCommand+0x2ee>
    1678:	88 ec       	ldi	r24, 0xC8	; 200
    167a:	90 e0       	ldi	r25, 0x00	; 0
    167c:	9c 83       	std	Y+4, r25	; 0x04
    167e:	8b 83       	std	Y+3, r24	; 0x03
    1680:	8b 81       	ldd	r24, Y+3	; 0x03
    1682:	9c 81       	ldd	r25, Y+4	; 0x04
    1684:	01 97       	sbiw	r24, 0x01	; 1
    1686:	f1 f7       	brne	.-4      	; 0x1684 <HLCD4_voidSendCommand+0x2dc>
    1688:	9c 83       	std	Y+4, r25	; 0x04
    168a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    168c:	8d 81       	ldd	r24, Y+5	; 0x05
    168e:	9e 81       	ldd	r25, Y+6	; 0x06
    1690:	01 97       	sbiw	r24, 0x01	; 1
    1692:	9e 83       	std	Y+6, r25	; 0x06
    1694:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1696:	8d 81       	ldd	r24, Y+5	; 0x05
    1698:	9e 81       	ldd	r25, Y+6	; 0x06
    169a:	00 97       	sbiw	r24, 0x00	; 0
    169c:	69 f7       	brne	.-38     	; 0x1678 <HLCD4_voidSendCommand+0x2d0>
    169e:	14 c0       	rjmp	.+40     	; 0x16c8 <HLCD4_voidSendCommand+0x320>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    16a0:	6f 81       	ldd	r22, Y+7	; 0x07
    16a2:	78 85       	ldd	r23, Y+8	; 0x08
    16a4:	89 85       	ldd	r24, Y+9	; 0x09
    16a6:	9a 85       	ldd	r25, Y+10	; 0x0a
    16a8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16ac:	dc 01       	movw	r26, r24
    16ae:	cb 01       	movw	r24, r22
    16b0:	9e 83       	std	Y+6, r25	; 0x06
    16b2:	8d 83       	std	Y+5, r24	; 0x05
    16b4:	8d 81       	ldd	r24, Y+5	; 0x05
    16b6:	9e 81       	ldd	r25, Y+6	; 0x06
    16b8:	9a 83       	std	Y+2, r25	; 0x02
    16ba:	89 83       	std	Y+1, r24	; 0x01
    16bc:	89 81       	ldd	r24, Y+1	; 0x01
    16be:	9a 81       	ldd	r25, Y+2	; 0x02
    16c0:	01 97       	sbiw	r24, 0x01	; 1
    16c2:	f1 f7       	brne	.-4      	; 0x16c0 <HLCD4_voidSendCommand+0x318>
    16c4:	9a 83       	std	Y+2, r25	; 0x02
    16c6:	89 83       	std	Y+1, r24	; 0x01
    }
    _delay_ms(2);
}
    16c8:	ab 96       	adiw	r28, 0x2b	; 43
    16ca:	0f b6       	in	r0, 0x3f	; 63
    16cc:	f8 94       	cli
    16ce:	de bf       	out	0x3e, r29	; 62
    16d0:	0f be       	out	0x3f, r0	; 63
    16d2:	cd bf       	out	0x3d, r28	; 61
    16d4:	cf 91       	pop	r28
    16d6:	df 91       	pop	r29
    16d8:	08 95       	ret

000016da <HLCD4_voidSendData>:


void HLCD4_voidSendData(u8 A_u8Data)
{
    16da:	df 93       	push	r29
    16dc:	cf 93       	push	r28
    16de:	cd b7       	in	r28, 0x3d	; 61
    16e0:	de b7       	in	r29, 0x3e	; 62
    16e2:	ab 97       	sbiw	r28, 0x2b	; 43
    16e4:	0f b6       	in	r0, 0x3f	; 63
    16e6:	f8 94       	cli
    16e8:	de bf       	out	0x3e, r29	; 62
    16ea:	0f be       	out	0x3f, r0	; 63
    16ec:	cd bf       	out	0x3d, r28	; 61
    16ee:	8b a7       	std	Y+43, r24	; 0x2b
    //RS=1 RW=0
    MDIO_voidSetPinValue(LCD_CONTROL_PORT,RS_PIN,PIN_HIGH);
    16f0:	82 e0       	ldi	r24, 0x02	; 2
    16f2:	60 e0       	ldi	r22, 0x00	; 0
    16f4:	41 e0       	ldi	r20, 0x01	; 1
    16f6:	0e 94 26 07 	call	0xe4c	; 0xe4c <MDIO_voidSetPinValue>
    MDIO_voidSetPinValue(LCD_CONTROL_PORT,RW_PIN,PIN_LOW);
    16fa:	82 e0       	ldi	r24, 0x02	; 2
    16fc:	61 e0       	ldi	r22, 0x01	; 1
    16fe:	40 e0       	ldi	r20, 0x00	; 0
    1700:	0e 94 26 07 	call	0xe4c	; 0xe4c <MDIO_voidSetPinValue>

	MDIO_voidSetPortValue(LCD_DATA_PORT,A_u8Data);
    1704:	83 e0       	ldi	r24, 0x03	; 3
    1706:	6b a5       	ldd	r22, Y+43	; 0x2b
    1708:	0e 94 52 09 	call	0x12a4	; 0x12a4 <MDIO_voidSetPortValue>


    MDIO_voidSetPinValue(LCD_CONTROL_PORT,E_PIN,PIN_HIGH);
    170c:	82 e0       	ldi	r24, 0x02	; 2
    170e:	62 e0       	ldi	r22, 0x02	; 2
    1710:	41 e0       	ldi	r20, 0x01	; 1
    1712:	0e 94 26 07 	call	0xe4c	; 0xe4c <MDIO_voidSetPinValue>
    1716:	80 e0       	ldi	r24, 0x00	; 0
    1718:	90 e0       	ldi	r25, 0x00	; 0
    171a:	a0 e8       	ldi	r26, 0x80	; 128
    171c:	bf e3       	ldi	r27, 0x3F	; 63
    171e:	8f a3       	std	Y+39, r24	; 0x27
    1720:	98 a7       	std	Y+40, r25	; 0x28
    1722:	a9 a7       	std	Y+41, r26	; 0x29
    1724:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1726:	6f a1       	ldd	r22, Y+39	; 0x27
    1728:	78 a5       	ldd	r23, Y+40	; 0x28
    172a:	89 a5       	ldd	r24, Y+41	; 0x29
    172c:	9a a5       	ldd	r25, Y+42	; 0x2a
    172e:	20 e0       	ldi	r18, 0x00	; 0
    1730:	30 e0       	ldi	r19, 0x00	; 0
    1732:	4a ef       	ldi	r20, 0xFA	; 250
    1734:	54 e4       	ldi	r21, 0x44	; 68
    1736:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    173a:	dc 01       	movw	r26, r24
    173c:	cb 01       	movw	r24, r22
    173e:	8b a3       	std	Y+35, r24	; 0x23
    1740:	9c a3       	std	Y+36, r25	; 0x24
    1742:	ad a3       	std	Y+37, r26	; 0x25
    1744:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1746:	6b a1       	ldd	r22, Y+35	; 0x23
    1748:	7c a1       	ldd	r23, Y+36	; 0x24
    174a:	8d a1       	ldd	r24, Y+37	; 0x25
    174c:	9e a1       	ldd	r25, Y+38	; 0x26
    174e:	20 e0       	ldi	r18, 0x00	; 0
    1750:	30 e0       	ldi	r19, 0x00	; 0
    1752:	40 e8       	ldi	r20, 0x80	; 128
    1754:	5f e3       	ldi	r21, 0x3F	; 63
    1756:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    175a:	88 23       	and	r24, r24
    175c:	2c f4       	brge	.+10     	; 0x1768 <HLCD4_voidSendData+0x8e>
		__ticks = 1;
    175e:	81 e0       	ldi	r24, 0x01	; 1
    1760:	90 e0       	ldi	r25, 0x00	; 0
    1762:	9a a3       	std	Y+34, r25	; 0x22
    1764:	89 a3       	std	Y+33, r24	; 0x21
    1766:	3f c0       	rjmp	.+126    	; 0x17e6 <HLCD4_voidSendData+0x10c>
	else if (__tmp > 65535)
    1768:	6b a1       	ldd	r22, Y+35	; 0x23
    176a:	7c a1       	ldd	r23, Y+36	; 0x24
    176c:	8d a1       	ldd	r24, Y+37	; 0x25
    176e:	9e a1       	ldd	r25, Y+38	; 0x26
    1770:	20 e0       	ldi	r18, 0x00	; 0
    1772:	3f ef       	ldi	r19, 0xFF	; 255
    1774:	4f e7       	ldi	r20, 0x7F	; 127
    1776:	57 e4       	ldi	r21, 0x47	; 71
    1778:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    177c:	18 16       	cp	r1, r24
    177e:	4c f5       	brge	.+82     	; 0x17d2 <HLCD4_voidSendData+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1780:	6f a1       	ldd	r22, Y+39	; 0x27
    1782:	78 a5       	ldd	r23, Y+40	; 0x28
    1784:	89 a5       	ldd	r24, Y+41	; 0x29
    1786:	9a a5       	ldd	r25, Y+42	; 0x2a
    1788:	20 e0       	ldi	r18, 0x00	; 0
    178a:	30 e0       	ldi	r19, 0x00	; 0
    178c:	40 e2       	ldi	r20, 0x20	; 32
    178e:	51 e4       	ldi	r21, 0x41	; 65
    1790:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1794:	dc 01       	movw	r26, r24
    1796:	cb 01       	movw	r24, r22
    1798:	bc 01       	movw	r22, r24
    179a:	cd 01       	movw	r24, r26
    179c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17a0:	dc 01       	movw	r26, r24
    17a2:	cb 01       	movw	r24, r22
    17a4:	9a a3       	std	Y+34, r25	; 0x22
    17a6:	89 a3       	std	Y+33, r24	; 0x21
    17a8:	0f c0       	rjmp	.+30     	; 0x17c8 <HLCD4_voidSendData+0xee>
    17aa:	88 ec       	ldi	r24, 0xC8	; 200
    17ac:	90 e0       	ldi	r25, 0x00	; 0
    17ae:	98 a3       	std	Y+32, r25	; 0x20
    17b0:	8f 8f       	std	Y+31, r24	; 0x1f
    17b2:	8f 8d       	ldd	r24, Y+31	; 0x1f
    17b4:	98 a1       	ldd	r25, Y+32	; 0x20
    17b6:	01 97       	sbiw	r24, 0x01	; 1
    17b8:	f1 f7       	brne	.-4      	; 0x17b6 <HLCD4_voidSendData+0xdc>
    17ba:	98 a3       	std	Y+32, r25	; 0x20
    17bc:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    17be:	89 a1       	ldd	r24, Y+33	; 0x21
    17c0:	9a a1       	ldd	r25, Y+34	; 0x22
    17c2:	01 97       	sbiw	r24, 0x01	; 1
    17c4:	9a a3       	std	Y+34, r25	; 0x22
    17c6:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    17c8:	89 a1       	ldd	r24, Y+33	; 0x21
    17ca:	9a a1       	ldd	r25, Y+34	; 0x22
    17cc:	00 97       	sbiw	r24, 0x00	; 0
    17ce:	69 f7       	brne	.-38     	; 0x17aa <HLCD4_voidSendData+0xd0>
    17d0:	14 c0       	rjmp	.+40     	; 0x17fa <HLCD4_voidSendData+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    17d2:	6b a1       	ldd	r22, Y+35	; 0x23
    17d4:	7c a1       	ldd	r23, Y+36	; 0x24
    17d6:	8d a1       	ldd	r24, Y+37	; 0x25
    17d8:	9e a1       	ldd	r25, Y+38	; 0x26
    17da:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17de:	dc 01       	movw	r26, r24
    17e0:	cb 01       	movw	r24, r22
    17e2:	9a a3       	std	Y+34, r25	; 0x22
    17e4:	89 a3       	std	Y+33, r24	; 0x21
    17e6:	89 a1       	ldd	r24, Y+33	; 0x21
    17e8:	9a a1       	ldd	r25, Y+34	; 0x22
    17ea:	9e 8f       	std	Y+30, r25	; 0x1e
    17ec:	8d 8f       	std	Y+29, r24	; 0x1d
    17ee:	8d 8d       	ldd	r24, Y+29	; 0x1d
    17f0:	9e 8d       	ldd	r25, Y+30	; 0x1e
    17f2:	01 97       	sbiw	r24, 0x01	; 1
    17f4:	f1 f7       	brne	.-4      	; 0x17f2 <HLCD4_voidSendData+0x118>
    17f6:	9e 8f       	std	Y+30, r25	; 0x1e
    17f8:	8d 8f       	std	Y+29, r24	; 0x1d
    _delay_ms(1);
    MDIO_voidSetPinValue(LCD_CONTROL_PORT,E_PIN,PIN_LOW);
    17fa:	82 e0       	ldi	r24, 0x02	; 2
    17fc:	62 e0       	ldi	r22, 0x02	; 2
    17fe:	40 e0       	ldi	r20, 0x00	; 0
    1800:	0e 94 26 07 	call	0xe4c	; 0xe4c <MDIO_voidSetPinValue>

    MDIO_voidSetPortValue(LCD_DATA_PORT,A_u8Data<<4);
    1804:	8b a5       	ldd	r24, Y+43	; 0x2b
    1806:	98 2f       	mov	r25, r24
    1808:	92 95       	swap	r25
    180a:	90 7f       	andi	r25, 0xF0	; 240
    180c:	83 e0       	ldi	r24, 0x03	; 3
    180e:	69 2f       	mov	r22, r25
    1810:	0e 94 52 09 	call	0x12a4	; 0x12a4 <MDIO_voidSetPortValue>


    MDIO_voidSetPinValue(LCD_CONTROL_PORT,E_PIN,PIN_HIGH);
    1814:	82 e0       	ldi	r24, 0x02	; 2
    1816:	62 e0       	ldi	r22, 0x02	; 2
    1818:	41 e0       	ldi	r20, 0x01	; 1
    181a:	0e 94 26 07 	call	0xe4c	; 0xe4c <MDIO_voidSetPinValue>
    181e:	80 e0       	ldi	r24, 0x00	; 0
    1820:	90 e0       	ldi	r25, 0x00	; 0
    1822:	a0 e8       	ldi	r26, 0x80	; 128
    1824:	bf e3       	ldi	r27, 0x3F	; 63
    1826:	89 8f       	std	Y+25, r24	; 0x19
    1828:	9a 8f       	std	Y+26, r25	; 0x1a
    182a:	ab 8f       	std	Y+27, r26	; 0x1b
    182c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    182e:	69 8d       	ldd	r22, Y+25	; 0x19
    1830:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1832:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1834:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1836:	20 e0       	ldi	r18, 0x00	; 0
    1838:	30 e0       	ldi	r19, 0x00	; 0
    183a:	4a ef       	ldi	r20, 0xFA	; 250
    183c:	54 e4       	ldi	r21, 0x44	; 68
    183e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1842:	dc 01       	movw	r26, r24
    1844:	cb 01       	movw	r24, r22
    1846:	8d 8b       	std	Y+21, r24	; 0x15
    1848:	9e 8b       	std	Y+22, r25	; 0x16
    184a:	af 8b       	std	Y+23, r26	; 0x17
    184c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    184e:	6d 89       	ldd	r22, Y+21	; 0x15
    1850:	7e 89       	ldd	r23, Y+22	; 0x16
    1852:	8f 89       	ldd	r24, Y+23	; 0x17
    1854:	98 8d       	ldd	r25, Y+24	; 0x18
    1856:	20 e0       	ldi	r18, 0x00	; 0
    1858:	30 e0       	ldi	r19, 0x00	; 0
    185a:	40 e8       	ldi	r20, 0x80	; 128
    185c:	5f e3       	ldi	r21, 0x3F	; 63
    185e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1862:	88 23       	and	r24, r24
    1864:	2c f4       	brge	.+10     	; 0x1870 <HLCD4_voidSendData+0x196>
		__ticks = 1;
    1866:	81 e0       	ldi	r24, 0x01	; 1
    1868:	90 e0       	ldi	r25, 0x00	; 0
    186a:	9c 8b       	std	Y+20, r25	; 0x14
    186c:	8b 8b       	std	Y+19, r24	; 0x13
    186e:	3f c0       	rjmp	.+126    	; 0x18ee <HLCD4_voidSendData+0x214>
	else if (__tmp > 65535)
    1870:	6d 89       	ldd	r22, Y+21	; 0x15
    1872:	7e 89       	ldd	r23, Y+22	; 0x16
    1874:	8f 89       	ldd	r24, Y+23	; 0x17
    1876:	98 8d       	ldd	r25, Y+24	; 0x18
    1878:	20 e0       	ldi	r18, 0x00	; 0
    187a:	3f ef       	ldi	r19, 0xFF	; 255
    187c:	4f e7       	ldi	r20, 0x7F	; 127
    187e:	57 e4       	ldi	r21, 0x47	; 71
    1880:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1884:	18 16       	cp	r1, r24
    1886:	4c f5       	brge	.+82     	; 0x18da <HLCD4_voidSendData+0x200>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1888:	69 8d       	ldd	r22, Y+25	; 0x19
    188a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    188c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    188e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1890:	20 e0       	ldi	r18, 0x00	; 0
    1892:	30 e0       	ldi	r19, 0x00	; 0
    1894:	40 e2       	ldi	r20, 0x20	; 32
    1896:	51 e4       	ldi	r21, 0x41	; 65
    1898:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    189c:	dc 01       	movw	r26, r24
    189e:	cb 01       	movw	r24, r22
    18a0:	bc 01       	movw	r22, r24
    18a2:	cd 01       	movw	r24, r26
    18a4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18a8:	dc 01       	movw	r26, r24
    18aa:	cb 01       	movw	r24, r22
    18ac:	9c 8b       	std	Y+20, r25	; 0x14
    18ae:	8b 8b       	std	Y+19, r24	; 0x13
    18b0:	0f c0       	rjmp	.+30     	; 0x18d0 <HLCD4_voidSendData+0x1f6>
    18b2:	88 ec       	ldi	r24, 0xC8	; 200
    18b4:	90 e0       	ldi	r25, 0x00	; 0
    18b6:	9a 8b       	std	Y+18, r25	; 0x12
    18b8:	89 8b       	std	Y+17, r24	; 0x11
    18ba:	89 89       	ldd	r24, Y+17	; 0x11
    18bc:	9a 89       	ldd	r25, Y+18	; 0x12
    18be:	01 97       	sbiw	r24, 0x01	; 1
    18c0:	f1 f7       	brne	.-4      	; 0x18be <HLCD4_voidSendData+0x1e4>
    18c2:	9a 8b       	std	Y+18, r25	; 0x12
    18c4:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    18c6:	8b 89       	ldd	r24, Y+19	; 0x13
    18c8:	9c 89       	ldd	r25, Y+20	; 0x14
    18ca:	01 97       	sbiw	r24, 0x01	; 1
    18cc:	9c 8b       	std	Y+20, r25	; 0x14
    18ce:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    18d0:	8b 89       	ldd	r24, Y+19	; 0x13
    18d2:	9c 89       	ldd	r25, Y+20	; 0x14
    18d4:	00 97       	sbiw	r24, 0x00	; 0
    18d6:	69 f7       	brne	.-38     	; 0x18b2 <HLCD4_voidSendData+0x1d8>
    18d8:	14 c0       	rjmp	.+40     	; 0x1902 <HLCD4_voidSendData+0x228>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    18da:	6d 89       	ldd	r22, Y+21	; 0x15
    18dc:	7e 89       	ldd	r23, Y+22	; 0x16
    18de:	8f 89       	ldd	r24, Y+23	; 0x17
    18e0:	98 8d       	ldd	r25, Y+24	; 0x18
    18e2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18e6:	dc 01       	movw	r26, r24
    18e8:	cb 01       	movw	r24, r22
    18ea:	9c 8b       	std	Y+20, r25	; 0x14
    18ec:	8b 8b       	std	Y+19, r24	; 0x13
    18ee:	8b 89       	ldd	r24, Y+19	; 0x13
    18f0:	9c 89       	ldd	r25, Y+20	; 0x14
    18f2:	98 8b       	std	Y+16, r25	; 0x10
    18f4:	8f 87       	std	Y+15, r24	; 0x0f
    18f6:	8f 85       	ldd	r24, Y+15	; 0x0f
    18f8:	98 89       	ldd	r25, Y+16	; 0x10
    18fa:	01 97       	sbiw	r24, 0x01	; 1
    18fc:	f1 f7       	brne	.-4      	; 0x18fa <HLCD4_voidSendData+0x220>
    18fe:	98 8b       	std	Y+16, r25	; 0x10
    1900:	8f 87       	std	Y+15, r24	; 0x0f
    _delay_ms(1);
    MDIO_voidSetPinValue(LCD_CONTROL_PORT,E_PIN,PIN_LOW);
    1902:	82 e0       	ldi	r24, 0x02	; 2
    1904:	62 e0       	ldi	r22, 0x02	; 2
    1906:	40 e0       	ldi	r20, 0x00	; 0
    1908:	0e 94 26 07 	call	0xe4c	; 0xe4c <MDIO_voidSetPinValue>
    190c:	80 e0       	ldi	r24, 0x00	; 0
    190e:	90 e0       	ldi	r25, 0x00	; 0
    1910:	a0 e0       	ldi	r26, 0x00	; 0
    1912:	b0 e4       	ldi	r27, 0x40	; 64
    1914:	8b 87       	std	Y+11, r24	; 0x0b
    1916:	9c 87       	std	Y+12, r25	; 0x0c
    1918:	ad 87       	std	Y+13, r26	; 0x0d
    191a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    191c:	6b 85       	ldd	r22, Y+11	; 0x0b
    191e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1920:	8d 85       	ldd	r24, Y+13	; 0x0d
    1922:	9e 85       	ldd	r25, Y+14	; 0x0e
    1924:	20 e0       	ldi	r18, 0x00	; 0
    1926:	30 e0       	ldi	r19, 0x00	; 0
    1928:	4a ef       	ldi	r20, 0xFA	; 250
    192a:	54 e4       	ldi	r21, 0x44	; 68
    192c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1930:	dc 01       	movw	r26, r24
    1932:	cb 01       	movw	r24, r22
    1934:	8f 83       	std	Y+7, r24	; 0x07
    1936:	98 87       	std	Y+8, r25	; 0x08
    1938:	a9 87       	std	Y+9, r26	; 0x09
    193a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    193c:	6f 81       	ldd	r22, Y+7	; 0x07
    193e:	78 85       	ldd	r23, Y+8	; 0x08
    1940:	89 85       	ldd	r24, Y+9	; 0x09
    1942:	9a 85       	ldd	r25, Y+10	; 0x0a
    1944:	20 e0       	ldi	r18, 0x00	; 0
    1946:	30 e0       	ldi	r19, 0x00	; 0
    1948:	40 e8       	ldi	r20, 0x80	; 128
    194a:	5f e3       	ldi	r21, 0x3F	; 63
    194c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1950:	88 23       	and	r24, r24
    1952:	2c f4       	brge	.+10     	; 0x195e <HLCD4_voidSendData+0x284>
		__ticks = 1;
    1954:	81 e0       	ldi	r24, 0x01	; 1
    1956:	90 e0       	ldi	r25, 0x00	; 0
    1958:	9e 83       	std	Y+6, r25	; 0x06
    195a:	8d 83       	std	Y+5, r24	; 0x05
    195c:	3f c0       	rjmp	.+126    	; 0x19dc <HLCD4_voidSendData+0x302>
	else if (__tmp > 65535)
    195e:	6f 81       	ldd	r22, Y+7	; 0x07
    1960:	78 85       	ldd	r23, Y+8	; 0x08
    1962:	89 85       	ldd	r24, Y+9	; 0x09
    1964:	9a 85       	ldd	r25, Y+10	; 0x0a
    1966:	20 e0       	ldi	r18, 0x00	; 0
    1968:	3f ef       	ldi	r19, 0xFF	; 255
    196a:	4f e7       	ldi	r20, 0x7F	; 127
    196c:	57 e4       	ldi	r21, 0x47	; 71
    196e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1972:	18 16       	cp	r1, r24
    1974:	4c f5       	brge	.+82     	; 0x19c8 <HLCD4_voidSendData+0x2ee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1976:	6b 85       	ldd	r22, Y+11	; 0x0b
    1978:	7c 85       	ldd	r23, Y+12	; 0x0c
    197a:	8d 85       	ldd	r24, Y+13	; 0x0d
    197c:	9e 85       	ldd	r25, Y+14	; 0x0e
    197e:	20 e0       	ldi	r18, 0x00	; 0
    1980:	30 e0       	ldi	r19, 0x00	; 0
    1982:	40 e2       	ldi	r20, 0x20	; 32
    1984:	51 e4       	ldi	r21, 0x41	; 65
    1986:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    198a:	dc 01       	movw	r26, r24
    198c:	cb 01       	movw	r24, r22
    198e:	bc 01       	movw	r22, r24
    1990:	cd 01       	movw	r24, r26
    1992:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1996:	dc 01       	movw	r26, r24
    1998:	cb 01       	movw	r24, r22
    199a:	9e 83       	std	Y+6, r25	; 0x06
    199c:	8d 83       	std	Y+5, r24	; 0x05
    199e:	0f c0       	rjmp	.+30     	; 0x19be <HLCD4_voidSendData+0x2e4>
    19a0:	88 ec       	ldi	r24, 0xC8	; 200
    19a2:	90 e0       	ldi	r25, 0x00	; 0
    19a4:	9c 83       	std	Y+4, r25	; 0x04
    19a6:	8b 83       	std	Y+3, r24	; 0x03
    19a8:	8b 81       	ldd	r24, Y+3	; 0x03
    19aa:	9c 81       	ldd	r25, Y+4	; 0x04
    19ac:	01 97       	sbiw	r24, 0x01	; 1
    19ae:	f1 f7       	brne	.-4      	; 0x19ac <HLCD4_voidSendData+0x2d2>
    19b0:	9c 83       	std	Y+4, r25	; 0x04
    19b2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    19b4:	8d 81       	ldd	r24, Y+5	; 0x05
    19b6:	9e 81       	ldd	r25, Y+6	; 0x06
    19b8:	01 97       	sbiw	r24, 0x01	; 1
    19ba:	9e 83       	std	Y+6, r25	; 0x06
    19bc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    19be:	8d 81       	ldd	r24, Y+5	; 0x05
    19c0:	9e 81       	ldd	r25, Y+6	; 0x06
    19c2:	00 97       	sbiw	r24, 0x00	; 0
    19c4:	69 f7       	brne	.-38     	; 0x19a0 <HLCD4_voidSendData+0x2c6>
    19c6:	14 c0       	rjmp	.+40     	; 0x19f0 <HLCD4_voidSendData+0x316>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    19c8:	6f 81       	ldd	r22, Y+7	; 0x07
    19ca:	78 85       	ldd	r23, Y+8	; 0x08
    19cc:	89 85       	ldd	r24, Y+9	; 0x09
    19ce:	9a 85       	ldd	r25, Y+10	; 0x0a
    19d0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19d4:	dc 01       	movw	r26, r24
    19d6:	cb 01       	movw	r24, r22
    19d8:	9e 83       	std	Y+6, r25	; 0x06
    19da:	8d 83       	std	Y+5, r24	; 0x05
    19dc:	8d 81       	ldd	r24, Y+5	; 0x05
    19de:	9e 81       	ldd	r25, Y+6	; 0x06
    19e0:	9a 83       	std	Y+2, r25	; 0x02
    19e2:	89 83       	std	Y+1, r24	; 0x01
    19e4:	89 81       	ldd	r24, Y+1	; 0x01
    19e6:	9a 81       	ldd	r25, Y+2	; 0x02
    19e8:	01 97       	sbiw	r24, 0x01	; 1
    19ea:	f1 f7       	brne	.-4      	; 0x19e8 <HLCD4_voidSendData+0x30e>
    19ec:	9a 83       	std	Y+2, r25	; 0x02
    19ee:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(2);
}
    19f0:	ab 96       	adiw	r28, 0x2b	; 43
    19f2:	0f b6       	in	r0, 0x3f	; 63
    19f4:	f8 94       	cli
    19f6:	de bf       	out	0x3e, r29	; 62
    19f8:	0f be       	out	0x3f, r0	; 63
    19fa:	cd bf       	out	0x3d, r28	; 61
    19fc:	cf 91       	pop	r28
    19fe:	df 91       	pop	r29
    1a00:	08 95       	ret

00001a02 <HLCD4_voidInit>:



void HLCD4_voidInit()
{
    1a02:	0f 93       	push	r16
    1a04:	1f 93       	push	r17
    1a06:	df 93       	push	r29
    1a08:	cf 93       	push	r28
    1a0a:	cd b7       	in	r28, 0x3d	; 61
    1a0c:	de b7       	in	r29, 0x3e	; 62
    1a0e:	cc 54       	subi	r28, 0x4C	; 76
    1a10:	d0 40       	sbci	r29, 0x00	; 0
    1a12:	0f b6       	in	r0, 0x3f	; 63
    1a14:	f8 94       	cli
    1a16:	de bf       	out	0x3e, r29	; 62
    1a18:	0f be       	out	0x3f, r0	; 63
    1a1a:	cd bf       	out	0x3d, r28	; 61
    1a1c:	fe 01       	movw	r30, r28
    1a1e:	e7 5b       	subi	r30, 0xB7	; 183
    1a20:	ff 4f       	sbci	r31, 0xFF	; 255
    1a22:	80 e0       	ldi	r24, 0x00	; 0
    1a24:	90 e0       	ldi	r25, 0x00	; 0
    1a26:	a0 ef       	ldi	r26, 0xF0	; 240
    1a28:	b1 e4       	ldi	r27, 0x41	; 65
    1a2a:	80 83       	st	Z, r24
    1a2c:	91 83       	std	Z+1, r25	; 0x01
    1a2e:	a2 83       	std	Z+2, r26	; 0x02
    1a30:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a32:	8e 01       	movw	r16, r28
    1a34:	0b 5b       	subi	r16, 0xBB	; 187
    1a36:	1f 4f       	sbci	r17, 0xFF	; 255
    1a38:	fe 01       	movw	r30, r28
    1a3a:	e7 5b       	subi	r30, 0xB7	; 183
    1a3c:	ff 4f       	sbci	r31, 0xFF	; 255
    1a3e:	60 81       	ld	r22, Z
    1a40:	71 81       	ldd	r23, Z+1	; 0x01
    1a42:	82 81       	ldd	r24, Z+2	; 0x02
    1a44:	93 81       	ldd	r25, Z+3	; 0x03
    1a46:	20 e0       	ldi	r18, 0x00	; 0
    1a48:	30 e0       	ldi	r19, 0x00	; 0
    1a4a:	4a ef       	ldi	r20, 0xFA	; 250
    1a4c:	54 e4       	ldi	r21, 0x44	; 68
    1a4e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a52:	dc 01       	movw	r26, r24
    1a54:	cb 01       	movw	r24, r22
    1a56:	f8 01       	movw	r30, r16
    1a58:	80 83       	st	Z, r24
    1a5a:	91 83       	std	Z+1, r25	; 0x01
    1a5c:	a2 83       	std	Z+2, r26	; 0x02
    1a5e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1a60:	fe 01       	movw	r30, r28
    1a62:	eb 5b       	subi	r30, 0xBB	; 187
    1a64:	ff 4f       	sbci	r31, 0xFF	; 255
    1a66:	60 81       	ld	r22, Z
    1a68:	71 81       	ldd	r23, Z+1	; 0x01
    1a6a:	82 81       	ldd	r24, Z+2	; 0x02
    1a6c:	93 81       	ldd	r25, Z+3	; 0x03
    1a6e:	20 e0       	ldi	r18, 0x00	; 0
    1a70:	30 e0       	ldi	r19, 0x00	; 0
    1a72:	40 e8       	ldi	r20, 0x80	; 128
    1a74:	5f e3       	ldi	r21, 0x3F	; 63
    1a76:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1a7a:	88 23       	and	r24, r24
    1a7c:	44 f4       	brge	.+16     	; 0x1a8e <HLCD4_voidInit+0x8c>
		__ticks = 1;
    1a7e:	fe 01       	movw	r30, r28
    1a80:	ed 5b       	subi	r30, 0xBD	; 189
    1a82:	ff 4f       	sbci	r31, 0xFF	; 255
    1a84:	81 e0       	ldi	r24, 0x01	; 1
    1a86:	90 e0       	ldi	r25, 0x00	; 0
    1a88:	91 83       	std	Z+1, r25	; 0x01
    1a8a:	80 83       	st	Z, r24
    1a8c:	64 c0       	rjmp	.+200    	; 0x1b56 <HLCD4_voidInit+0x154>
	else if (__tmp > 65535)
    1a8e:	fe 01       	movw	r30, r28
    1a90:	eb 5b       	subi	r30, 0xBB	; 187
    1a92:	ff 4f       	sbci	r31, 0xFF	; 255
    1a94:	60 81       	ld	r22, Z
    1a96:	71 81       	ldd	r23, Z+1	; 0x01
    1a98:	82 81       	ldd	r24, Z+2	; 0x02
    1a9a:	93 81       	ldd	r25, Z+3	; 0x03
    1a9c:	20 e0       	ldi	r18, 0x00	; 0
    1a9e:	3f ef       	ldi	r19, 0xFF	; 255
    1aa0:	4f e7       	ldi	r20, 0x7F	; 127
    1aa2:	57 e4       	ldi	r21, 0x47	; 71
    1aa4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1aa8:	18 16       	cp	r1, r24
    1aaa:	0c f0       	brlt	.+2      	; 0x1aae <HLCD4_voidInit+0xac>
    1aac:	43 c0       	rjmp	.+134    	; 0x1b34 <HLCD4_voidInit+0x132>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1aae:	fe 01       	movw	r30, r28
    1ab0:	e7 5b       	subi	r30, 0xB7	; 183
    1ab2:	ff 4f       	sbci	r31, 0xFF	; 255
    1ab4:	60 81       	ld	r22, Z
    1ab6:	71 81       	ldd	r23, Z+1	; 0x01
    1ab8:	82 81       	ldd	r24, Z+2	; 0x02
    1aba:	93 81       	ldd	r25, Z+3	; 0x03
    1abc:	20 e0       	ldi	r18, 0x00	; 0
    1abe:	30 e0       	ldi	r19, 0x00	; 0
    1ac0:	40 e2       	ldi	r20, 0x20	; 32
    1ac2:	51 e4       	ldi	r21, 0x41	; 65
    1ac4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ac8:	dc 01       	movw	r26, r24
    1aca:	cb 01       	movw	r24, r22
    1acc:	8e 01       	movw	r16, r28
    1ace:	0d 5b       	subi	r16, 0xBD	; 189
    1ad0:	1f 4f       	sbci	r17, 0xFF	; 255
    1ad2:	bc 01       	movw	r22, r24
    1ad4:	cd 01       	movw	r24, r26
    1ad6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ada:	dc 01       	movw	r26, r24
    1adc:	cb 01       	movw	r24, r22
    1ade:	f8 01       	movw	r30, r16
    1ae0:	91 83       	std	Z+1, r25	; 0x01
    1ae2:	80 83       	st	Z, r24
    1ae4:	1f c0       	rjmp	.+62     	; 0x1b24 <HLCD4_voidInit+0x122>
    1ae6:	fe 01       	movw	r30, r28
    1ae8:	ef 5b       	subi	r30, 0xBF	; 191
    1aea:	ff 4f       	sbci	r31, 0xFF	; 255
    1aec:	88 ec       	ldi	r24, 0xC8	; 200
    1aee:	90 e0       	ldi	r25, 0x00	; 0
    1af0:	91 83       	std	Z+1, r25	; 0x01
    1af2:	80 83       	st	Z, r24
    1af4:	fe 01       	movw	r30, r28
    1af6:	ef 5b       	subi	r30, 0xBF	; 191
    1af8:	ff 4f       	sbci	r31, 0xFF	; 255
    1afa:	80 81       	ld	r24, Z
    1afc:	91 81       	ldd	r25, Z+1	; 0x01
    1afe:	01 97       	sbiw	r24, 0x01	; 1
    1b00:	f1 f7       	brne	.-4      	; 0x1afe <HLCD4_voidInit+0xfc>
    1b02:	fe 01       	movw	r30, r28
    1b04:	ef 5b       	subi	r30, 0xBF	; 191
    1b06:	ff 4f       	sbci	r31, 0xFF	; 255
    1b08:	91 83       	std	Z+1, r25	; 0x01
    1b0a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b0c:	de 01       	movw	r26, r28
    1b0e:	ad 5b       	subi	r26, 0xBD	; 189
    1b10:	bf 4f       	sbci	r27, 0xFF	; 255
    1b12:	fe 01       	movw	r30, r28
    1b14:	ed 5b       	subi	r30, 0xBD	; 189
    1b16:	ff 4f       	sbci	r31, 0xFF	; 255
    1b18:	80 81       	ld	r24, Z
    1b1a:	91 81       	ldd	r25, Z+1	; 0x01
    1b1c:	01 97       	sbiw	r24, 0x01	; 1
    1b1e:	11 96       	adiw	r26, 0x01	; 1
    1b20:	9c 93       	st	X, r25
    1b22:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b24:	fe 01       	movw	r30, r28
    1b26:	ed 5b       	subi	r30, 0xBD	; 189
    1b28:	ff 4f       	sbci	r31, 0xFF	; 255
    1b2a:	80 81       	ld	r24, Z
    1b2c:	91 81       	ldd	r25, Z+1	; 0x01
    1b2e:	00 97       	sbiw	r24, 0x00	; 0
    1b30:	d1 f6       	brne	.-76     	; 0x1ae6 <HLCD4_voidInit+0xe4>
    1b32:	24 c0       	rjmp	.+72     	; 0x1b7c <HLCD4_voidInit+0x17a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b34:	8e 01       	movw	r16, r28
    1b36:	0d 5b       	subi	r16, 0xBD	; 189
    1b38:	1f 4f       	sbci	r17, 0xFF	; 255
    1b3a:	fe 01       	movw	r30, r28
    1b3c:	eb 5b       	subi	r30, 0xBB	; 187
    1b3e:	ff 4f       	sbci	r31, 0xFF	; 255
    1b40:	60 81       	ld	r22, Z
    1b42:	71 81       	ldd	r23, Z+1	; 0x01
    1b44:	82 81       	ldd	r24, Z+2	; 0x02
    1b46:	93 81       	ldd	r25, Z+3	; 0x03
    1b48:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b4c:	dc 01       	movw	r26, r24
    1b4e:	cb 01       	movw	r24, r22
    1b50:	f8 01       	movw	r30, r16
    1b52:	91 83       	std	Z+1, r25	; 0x01
    1b54:	80 83       	st	Z, r24
    1b56:	fe 01       	movw	r30, r28
    1b58:	ed 5b       	subi	r30, 0xBD	; 189
    1b5a:	ff 4f       	sbci	r31, 0xFF	; 255
    1b5c:	80 81       	ld	r24, Z
    1b5e:	91 81       	ldd	r25, Z+1	; 0x01
    1b60:	fe 01       	movw	r30, r28
    1b62:	ff 96       	adiw	r30, 0x3f	; 63
    1b64:	91 83       	std	Z+1, r25	; 0x01
    1b66:	80 83       	st	Z, r24
    1b68:	fe 01       	movw	r30, r28
    1b6a:	ff 96       	adiw	r30, 0x3f	; 63
    1b6c:	80 81       	ld	r24, Z
    1b6e:	91 81       	ldd	r25, Z+1	; 0x01
    1b70:	01 97       	sbiw	r24, 0x01	; 1
    1b72:	f1 f7       	brne	.-4      	; 0x1b70 <HLCD4_voidInit+0x16e>
    1b74:	fe 01       	movw	r30, r28
    1b76:	ff 96       	adiw	r30, 0x3f	; 63
    1b78:	91 83       	std	Z+1, r25	; 0x01
    1b7a:	80 83       	st	Z, r24
    _delay_ms(30);
    HLCD4_voidSendCommand(FUNCTION_SET1);
    1b7c:	80 e2       	ldi	r24, 0x20	; 32
    1b7e:	0e 94 d4 09 	call	0x13a8	; 0x13a8 <HLCD4_voidSendCommand>
    HLCD4_voidSendCommand(FUNCTION_SET2);
    1b82:	80 e2       	ldi	r24, 0x20	; 32
    1b84:	0e 94 d4 09 	call	0x13a8	; 0x13a8 <HLCD4_voidSendCommand>
    HLCD4_voidSendCommand(FUNCTION_SET3);
    1b88:	80 e8       	ldi	r24, 0x80	; 128
    1b8a:	0e 94 d4 09 	call	0x13a8	; 0x13a8 <HLCD4_voidSendCommand>
    1b8e:	80 e0       	ldi	r24, 0x00	; 0
    1b90:	90 e0       	ldi	r25, 0x00	; 0
    1b92:	a0 e2       	ldi	r26, 0x20	; 32
    1b94:	b2 e4       	ldi	r27, 0x42	; 66
    1b96:	8b af       	std	Y+59, r24	; 0x3b
    1b98:	9c af       	std	Y+60, r25	; 0x3c
    1b9a:	ad af       	std	Y+61, r26	; 0x3d
    1b9c:	be af       	std	Y+62, r27	; 0x3e
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1b9e:	6b ad       	ldd	r22, Y+59	; 0x3b
    1ba0:	7c ad       	ldd	r23, Y+60	; 0x3c
    1ba2:	8d ad       	ldd	r24, Y+61	; 0x3d
    1ba4:	9e ad       	ldd	r25, Y+62	; 0x3e
    1ba6:	2b ea       	ldi	r18, 0xAB	; 171
    1ba8:	3a ea       	ldi	r19, 0xAA	; 170
    1baa:	4a e2       	ldi	r20, 0x2A	; 42
    1bac:	50 e4       	ldi	r21, 0x40	; 64
    1bae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bb2:	dc 01       	movw	r26, r24
    1bb4:	cb 01       	movw	r24, r22
    1bb6:	8f ab       	std	Y+55, r24	; 0x37
    1bb8:	98 af       	std	Y+56, r25	; 0x38
    1bba:	a9 af       	std	Y+57, r26	; 0x39
    1bbc:	ba af       	std	Y+58, r27	; 0x3a
	if (__tmp < 1.0)
    1bbe:	6f a9       	ldd	r22, Y+55	; 0x37
    1bc0:	78 ad       	ldd	r23, Y+56	; 0x38
    1bc2:	89 ad       	ldd	r24, Y+57	; 0x39
    1bc4:	9a ad       	ldd	r25, Y+58	; 0x3a
    1bc6:	20 e0       	ldi	r18, 0x00	; 0
    1bc8:	30 e0       	ldi	r19, 0x00	; 0
    1bca:	40 e8       	ldi	r20, 0x80	; 128
    1bcc:	5f e3       	ldi	r21, 0x3F	; 63
    1bce:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1bd2:	88 23       	and	r24, r24
    1bd4:	1c f4       	brge	.+6      	; 0x1bdc <HLCD4_voidInit+0x1da>
		__ticks = 1;
    1bd6:	81 e0       	ldi	r24, 0x01	; 1
    1bd8:	8e ab       	std	Y+54, r24	; 0x36
    1bda:	91 c0       	rjmp	.+290    	; 0x1cfe <HLCD4_voidInit+0x2fc>
	else if (__tmp > 255)
    1bdc:	6f a9       	ldd	r22, Y+55	; 0x37
    1bde:	78 ad       	ldd	r23, Y+56	; 0x38
    1be0:	89 ad       	ldd	r24, Y+57	; 0x39
    1be2:	9a ad       	ldd	r25, Y+58	; 0x3a
    1be4:	20 e0       	ldi	r18, 0x00	; 0
    1be6:	30 e0       	ldi	r19, 0x00	; 0
    1be8:	4f e7       	ldi	r20, 0x7F	; 127
    1bea:	53 e4       	ldi	r21, 0x43	; 67
    1bec:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1bf0:	18 16       	cp	r1, r24
    1bf2:	0c f0       	brlt	.+2      	; 0x1bf6 <HLCD4_voidInit+0x1f4>
    1bf4:	7b c0       	rjmp	.+246    	; 0x1cec <HLCD4_voidInit+0x2ea>
	{
		_delay_ms(__us / 1000.0);
    1bf6:	6b ad       	ldd	r22, Y+59	; 0x3b
    1bf8:	7c ad       	ldd	r23, Y+60	; 0x3c
    1bfa:	8d ad       	ldd	r24, Y+61	; 0x3d
    1bfc:	9e ad       	ldd	r25, Y+62	; 0x3e
    1bfe:	20 e0       	ldi	r18, 0x00	; 0
    1c00:	30 e0       	ldi	r19, 0x00	; 0
    1c02:	4a e7       	ldi	r20, 0x7A	; 122
    1c04:	54 e4       	ldi	r21, 0x44	; 68
    1c06:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1c0a:	dc 01       	movw	r26, r24
    1c0c:	cb 01       	movw	r24, r22
    1c0e:	8a ab       	std	Y+50, r24	; 0x32
    1c10:	9b ab       	std	Y+51, r25	; 0x33
    1c12:	ac ab       	std	Y+52, r26	; 0x34
    1c14:	bd ab       	std	Y+53, r27	; 0x35
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c16:	6a a9       	ldd	r22, Y+50	; 0x32
    1c18:	7b a9       	ldd	r23, Y+51	; 0x33
    1c1a:	8c a9       	ldd	r24, Y+52	; 0x34
    1c1c:	9d a9       	ldd	r25, Y+53	; 0x35
    1c1e:	20 e0       	ldi	r18, 0x00	; 0
    1c20:	30 e0       	ldi	r19, 0x00	; 0
    1c22:	4a ef       	ldi	r20, 0xFA	; 250
    1c24:	54 e4       	ldi	r21, 0x44	; 68
    1c26:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c2a:	dc 01       	movw	r26, r24
    1c2c:	cb 01       	movw	r24, r22
    1c2e:	8e a7       	std	Y+46, r24	; 0x2e
    1c30:	9f a7       	std	Y+47, r25	; 0x2f
    1c32:	a8 ab       	std	Y+48, r26	; 0x30
    1c34:	b9 ab       	std	Y+49, r27	; 0x31
	if (__tmp < 1.0)
    1c36:	6e a5       	ldd	r22, Y+46	; 0x2e
    1c38:	7f a5       	ldd	r23, Y+47	; 0x2f
    1c3a:	88 a9       	ldd	r24, Y+48	; 0x30
    1c3c:	99 a9       	ldd	r25, Y+49	; 0x31
    1c3e:	20 e0       	ldi	r18, 0x00	; 0
    1c40:	30 e0       	ldi	r19, 0x00	; 0
    1c42:	40 e8       	ldi	r20, 0x80	; 128
    1c44:	5f e3       	ldi	r21, 0x3F	; 63
    1c46:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1c4a:	88 23       	and	r24, r24
    1c4c:	2c f4       	brge	.+10     	; 0x1c58 <HLCD4_voidInit+0x256>
		__ticks = 1;
    1c4e:	81 e0       	ldi	r24, 0x01	; 1
    1c50:	90 e0       	ldi	r25, 0x00	; 0
    1c52:	9d a7       	std	Y+45, r25	; 0x2d
    1c54:	8c a7       	std	Y+44, r24	; 0x2c
    1c56:	3f c0       	rjmp	.+126    	; 0x1cd6 <HLCD4_voidInit+0x2d4>
	else if (__tmp > 65535)
    1c58:	6e a5       	ldd	r22, Y+46	; 0x2e
    1c5a:	7f a5       	ldd	r23, Y+47	; 0x2f
    1c5c:	88 a9       	ldd	r24, Y+48	; 0x30
    1c5e:	99 a9       	ldd	r25, Y+49	; 0x31
    1c60:	20 e0       	ldi	r18, 0x00	; 0
    1c62:	3f ef       	ldi	r19, 0xFF	; 255
    1c64:	4f e7       	ldi	r20, 0x7F	; 127
    1c66:	57 e4       	ldi	r21, 0x47	; 71
    1c68:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1c6c:	18 16       	cp	r1, r24
    1c6e:	4c f5       	brge	.+82     	; 0x1cc2 <HLCD4_voidInit+0x2c0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c70:	6a a9       	ldd	r22, Y+50	; 0x32
    1c72:	7b a9       	ldd	r23, Y+51	; 0x33
    1c74:	8c a9       	ldd	r24, Y+52	; 0x34
    1c76:	9d a9       	ldd	r25, Y+53	; 0x35
    1c78:	20 e0       	ldi	r18, 0x00	; 0
    1c7a:	30 e0       	ldi	r19, 0x00	; 0
    1c7c:	40 e2       	ldi	r20, 0x20	; 32
    1c7e:	51 e4       	ldi	r21, 0x41	; 65
    1c80:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c84:	dc 01       	movw	r26, r24
    1c86:	cb 01       	movw	r24, r22
    1c88:	bc 01       	movw	r22, r24
    1c8a:	cd 01       	movw	r24, r26
    1c8c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c90:	dc 01       	movw	r26, r24
    1c92:	cb 01       	movw	r24, r22
    1c94:	9d a7       	std	Y+45, r25	; 0x2d
    1c96:	8c a7       	std	Y+44, r24	; 0x2c
    1c98:	0f c0       	rjmp	.+30     	; 0x1cb8 <HLCD4_voidInit+0x2b6>
    1c9a:	88 ec       	ldi	r24, 0xC8	; 200
    1c9c:	90 e0       	ldi	r25, 0x00	; 0
    1c9e:	9b a7       	std	Y+43, r25	; 0x2b
    1ca0:	8a a7       	std	Y+42, r24	; 0x2a
    1ca2:	8a a5       	ldd	r24, Y+42	; 0x2a
    1ca4:	9b a5       	ldd	r25, Y+43	; 0x2b
    1ca6:	01 97       	sbiw	r24, 0x01	; 1
    1ca8:	f1 f7       	brne	.-4      	; 0x1ca6 <HLCD4_voidInit+0x2a4>
    1caa:	9b a7       	std	Y+43, r25	; 0x2b
    1cac:	8a a7       	std	Y+42, r24	; 0x2a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1cae:	8c a5       	ldd	r24, Y+44	; 0x2c
    1cb0:	9d a5       	ldd	r25, Y+45	; 0x2d
    1cb2:	01 97       	sbiw	r24, 0x01	; 1
    1cb4:	9d a7       	std	Y+45, r25	; 0x2d
    1cb6:	8c a7       	std	Y+44, r24	; 0x2c
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1cb8:	8c a5       	ldd	r24, Y+44	; 0x2c
    1cba:	9d a5       	ldd	r25, Y+45	; 0x2d
    1cbc:	00 97       	sbiw	r24, 0x00	; 0
    1cbe:	69 f7       	brne	.-38     	; 0x1c9a <HLCD4_voidInit+0x298>
    1cc0:	24 c0       	rjmp	.+72     	; 0x1d0a <HLCD4_voidInit+0x308>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1cc2:	6e a5       	ldd	r22, Y+46	; 0x2e
    1cc4:	7f a5       	ldd	r23, Y+47	; 0x2f
    1cc6:	88 a9       	ldd	r24, Y+48	; 0x30
    1cc8:	99 a9       	ldd	r25, Y+49	; 0x31
    1cca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1cce:	dc 01       	movw	r26, r24
    1cd0:	cb 01       	movw	r24, r22
    1cd2:	9d a7       	std	Y+45, r25	; 0x2d
    1cd4:	8c a7       	std	Y+44, r24	; 0x2c
    1cd6:	8c a5       	ldd	r24, Y+44	; 0x2c
    1cd8:	9d a5       	ldd	r25, Y+45	; 0x2d
    1cda:	99 a7       	std	Y+41, r25	; 0x29
    1cdc:	88 a7       	std	Y+40, r24	; 0x28
    1cde:	88 a5       	ldd	r24, Y+40	; 0x28
    1ce0:	99 a5       	ldd	r25, Y+41	; 0x29
    1ce2:	01 97       	sbiw	r24, 0x01	; 1
    1ce4:	f1 f7       	brne	.-4      	; 0x1ce2 <HLCD4_voidInit+0x2e0>
    1ce6:	99 a7       	std	Y+41, r25	; 0x29
    1ce8:	88 a7       	std	Y+40, r24	; 0x28
    1cea:	0f c0       	rjmp	.+30     	; 0x1d0a <HLCD4_voidInit+0x308>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1cec:	6f a9       	ldd	r22, Y+55	; 0x37
    1cee:	78 ad       	ldd	r23, Y+56	; 0x38
    1cf0:	89 ad       	ldd	r24, Y+57	; 0x39
    1cf2:	9a ad       	ldd	r25, Y+58	; 0x3a
    1cf4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1cf8:	dc 01       	movw	r26, r24
    1cfa:	cb 01       	movw	r24, r22
    1cfc:	8e ab       	std	Y+54, r24	; 0x36
    1cfe:	8e a9       	ldd	r24, Y+54	; 0x36
    1d00:	8f a3       	std	Y+39, r24	; 0x27
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1d02:	8f a1       	ldd	r24, Y+39	; 0x27
    1d04:	8a 95       	dec	r24
    1d06:	f1 f7       	brne	.-4      	; 0x1d04 <HLCD4_voidInit+0x302>
    1d08:	8f a3       	std	Y+39, r24	; 0x27
    _delay_us(40);
    HLCD4_voidSendCommand(ON_OFF_CONTROL1);
    1d0a:	80 e0       	ldi	r24, 0x00	; 0
    1d0c:	0e 94 d4 09 	call	0x13a8	; 0x13a8 <HLCD4_voidSendCommand>
    HLCD4_voidSendCommand(ON_OFF_CONTROL2);
    1d10:	80 ef       	ldi	r24, 0xF0	; 240
    1d12:	0e 94 d4 09 	call	0x13a8	; 0x13a8 <HLCD4_voidSendCommand>
    1d16:	80 e0       	ldi	r24, 0x00	; 0
    1d18:	90 e0       	ldi	r25, 0x00	; 0
    1d1a:	a0 e2       	ldi	r26, 0x20	; 32
    1d1c:	b2 e4       	ldi	r27, 0x42	; 66
    1d1e:	8b a3       	std	Y+35, r24	; 0x23
    1d20:	9c a3       	std	Y+36, r25	; 0x24
    1d22:	ad a3       	std	Y+37, r26	; 0x25
    1d24:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1d26:	6b a1       	ldd	r22, Y+35	; 0x23
    1d28:	7c a1       	ldd	r23, Y+36	; 0x24
    1d2a:	8d a1       	ldd	r24, Y+37	; 0x25
    1d2c:	9e a1       	ldd	r25, Y+38	; 0x26
    1d2e:	2b ea       	ldi	r18, 0xAB	; 171
    1d30:	3a ea       	ldi	r19, 0xAA	; 170
    1d32:	4a e2       	ldi	r20, 0x2A	; 42
    1d34:	50 e4       	ldi	r21, 0x40	; 64
    1d36:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d3a:	dc 01       	movw	r26, r24
    1d3c:	cb 01       	movw	r24, r22
    1d3e:	8f 8f       	std	Y+31, r24	; 0x1f
    1d40:	98 a3       	std	Y+32, r25	; 0x20
    1d42:	a9 a3       	std	Y+33, r26	; 0x21
    1d44:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    1d46:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1d48:	78 a1       	ldd	r23, Y+32	; 0x20
    1d4a:	89 a1       	ldd	r24, Y+33	; 0x21
    1d4c:	9a a1       	ldd	r25, Y+34	; 0x22
    1d4e:	20 e0       	ldi	r18, 0x00	; 0
    1d50:	30 e0       	ldi	r19, 0x00	; 0
    1d52:	40 e8       	ldi	r20, 0x80	; 128
    1d54:	5f e3       	ldi	r21, 0x3F	; 63
    1d56:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1d5a:	88 23       	and	r24, r24
    1d5c:	1c f4       	brge	.+6      	; 0x1d64 <HLCD4_voidInit+0x362>
		__ticks = 1;
    1d5e:	81 e0       	ldi	r24, 0x01	; 1
    1d60:	8e 8f       	std	Y+30, r24	; 0x1e
    1d62:	91 c0       	rjmp	.+290    	; 0x1e86 <HLCD4_voidInit+0x484>
	else if (__tmp > 255)
    1d64:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1d66:	78 a1       	ldd	r23, Y+32	; 0x20
    1d68:	89 a1       	ldd	r24, Y+33	; 0x21
    1d6a:	9a a1       	ldd	r25, Y+34	; 0x22
    1d6c:	20 e0       	ldi	r18, 0x00	; 0
    1d6e:	30 e0       	ldi	r19, 0x00	; 0
    1d70:	4f e7       	ldi	r20, 0x7F	; 127
    1d72:	53 e4       	ldi	r21, 0x43	; 67
    1d74:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1d78:	18 16       	cp	r1, r24
    1d7a:	0c f0       	brlt	.+2      	; 0x1d7e <HLCD4_voidInit+0x37c>
    1d7c:	7b c0       	rjmp	.+246    	; 0x1e74 <HLCD4_voidInit+0x472>
	{
		_delay_ms(__us / 1000.0);
    1d7e:	6b a1       	ldd	r22, Y+35	; 0x23
    1d80:	7c a1       	ldd	r23, Y+36	; 0x24
    1d82:	8d a1       	ldd	r24, Y+37	; 0x25
    1d84:	9e a1       	ldd	r25, Y+38	; 0x26
    1d86:	20 e0       	ldi	r18, 0x00	; 0
    1d88:	30 e0       	ldi	r19, 0x00	; 0
    1d8a:	4a e7       	ldi	r20, 0x7A	; 122
    1d8c:	54 e4       	ldi	r21, 0x44	; 68
    1d8e:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1d92:	dc 01       	movw	r26, r24
    1d94:	cb 01       	movw	r24, r22
    1d96:	8a 8f       	std	Y+26, r24	; 0x1a
    1d98:	9b 8f       	std	Y+27, r25	; 0x1b
    1d9a:	ac 8f       	std	Y+28, r26	; 0x1c
    1d9c:	bd 8f       	std	Y+29, r27	; 0x1d
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d9e:	6a 8d       	ldd	r22, Y+26	; 0x1a
    1da0:	7b 8d       	ldd	r23, Y+27	; 0x1b
    1da2:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1da4:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1da6:	20 e0       	ldi	r18, 0x00	; 0
    1da8:	30 e0       	ldi	r19, 0x00	; 0
    1daa:	4a ef       	ldi	r20, 0xFA	; 250
    1dac:	54 e4       	ldi	r21, 0x44	; 68
    1dae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1db2:	dc 01       	movw	r26, r24
    1db4:	cb 01       	movw	r24, r22
    1db6:	8e 8b       	std	Y+22, r24	; 0x16
    1db8:	9f 8b       	std	Y+23, r25	; 0x17
    1dba:	a8 8f       	std	Y+24, r26	; 0x18
    1dbc:	b9 8f       	std	Y+25, r27	; 0x19
	if (__tmp < 1.0)
    1dbe:	6e 89       	ldd	r22, Y+22	; 0x16
    1dc0:	7f 89       	ldd	r23, Y+23	; 0x17
    1dc2:	88 8d       	ldd	r24, Y+24	; 0x18
    1dc4:	99 8d       	ldd	r25, Y+25	; 0x19
    1dc6:	20 e0       	ldi	r18, 0x00	; 0
    1dc8:	30 e0       	ldi	r19, 0x00	; 0
    1dca:	40 e8       	ldi	r20, 0x80	; 128
    1dcc:	5f e3       	ldi	r21, 0x3F	; 63
    1dce:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1dd2:	88 23       	and	r24, r24
    1dd4:	2c f4       	brge	.+10     	; 0x1de0 <HLCD4_voidInit+0x3de>
		__ticks = 1;
    1dd6:	81 e0       	ldi	r24, 0x01	; 1
    1dd8:	90 e0       	ldi	r25, 0x00	; 0
    1dda:	9d 8b       	std	Y+21, r25	; 0x15
    1ddc:	8c 8b       	std	Y+20, r24	; 0x14
    1dde:	3f c0       	rjmp	.+126    	; 0x1e5e <HLCD4_voidInit+0x45c>
	else if (__tmp > 65535)
    1de0:	6e 89       	ldd	r22, Y+22	; 0x16
    1de2:	7f 89       	ldd	r23, Y+23	; 0x17
    1de4:	88 8d       	ldd	r24, Y+24	; 0x18
    1de6:	99 8d       	ldd	r25, Y+25	; 0x19
    1de8:	20 e0       	ldi	r18, 0x00	; 0
    1dea:	3f ef       	ldi	r19, 0xFF	; 255
    1dec:	4f e7       	ldi	r20, 0x7F	; 127
    1dee:	57 e4       	ldi	r21, 0x47	; 71
    1df0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1df4:	18 16       	cp	r1, r24
    1df6:	4c f5       	brge	.+82     	; 0x1e4a <HLCD4_voidInit+0x448>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1df8:	6a 8d       	ldd	r22, Y+26	; 0x1a
    1dfa:	7b 8d       	ldd	r23, Y+27	; 0x1b
    1dfc:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1dfe:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1e00:	20 e0       	ldi	r18, 0x00	; 0
    1e02:	30 e0       	ldi	r19, 0x00	; 0
    1e04:	40 e2       	ldi	r20, 0x20	; 32
    1e06:	51 e4       	ldi	r21, 0x41	; 65
    1e08:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e0c:	dc 01       	movw	r26, r24
    1e0e:	cb 01       	movw	r24, r22
    1e10:	bc 01       	movw	r22, r24
    1e12:	cd 01       	movw	r24, r26
    1e14:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e18:	dc 01       	movw	r26, r24
    1e1a:	cb 01       	movw	r24, r22
    1e1c:	9d 8b       	std	Y+21, r25	; 0x15
    1e1e:	8c 8b       	std	Y+20, r24	; 0x14
    1e20:	0f c0       	rjmp	.+30     	; 0x1e40 <HLCD4_voidInit+0x43e>
    1e22:	88 ec       	ldi	r24, 0xC8	; 200
    1e24:	90 e0       	ldi	r25, 0x00	; 0
    1e26:	9b 8b       	std	Y+19, r25	; 0x13
    1e28:	8a 8b       	std	Y+18, r24	; 0x12
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1e2a:	8a 89       	ldd	r24, Y+18	; 0x12
    1e2c:	9b 89       	ldd	r25, Y+19	; 0x13
    1e2e:	01 97       	sbiw	r24, 0x01	; 1
    1e30:	f1 f7       	brne	.-4      	; 0x1e2e <HLCD4_voidInit+0x42c>
    1e32:	9b 8b       	std	Y+19, r25	; 0x13
    1e34:	8a 8b       	std	Y+18, r24	; 0x12
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e36:	8c 89       	ldd	r24, Y+20	; 0x14
    1e38:	9d 89       	ldd	r25, Y+21	; 0x15
    1e3a:	01 97       	sbiw	r24, 0x01	; 1
    1e3c:	9d 8b       	std	Y+21, r25	; 0x15
    1e3e:	8c 8b       	std	Y+20, r24	; 0x14
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e40:	8c 89       	ldd	r24, Y+20	; 0x14
    1e42:	9d 89       	ldd	r25, Y+21	; 0x15
    1e44:	00 97       	sbiw	r24, 0x00	; 0
    1e46:	69 f7       	brne	.-38     	; 0x1e22 <HLCD4_voidInit+0x420>
    1e48:	24 c0       	rjmp	.+72     	; 0x1e92 <HLCD4_voidInit+0x490>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e4a:	6e 89       	ldd	r22, Y+22	; 0x16
    1e4c:	7f 89       	ldd	r23, Y+23	; 0x17
    1e4e:	88 8d       	ldd	r24, Y+24	; 0x18
    1e50:	99 8d       	ldd	r25, Y+25	; 0x19
    1e52:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e56:	dc 01       	movw	r26, r24
    1e58:	cb 01       	movw	r24, r22
    1e5a:	9d 8b       	std	Y+21, r25	; 0x15
    1e5c:	8c 8b       	std	Y+20, r24	; 0x14
    1e5e:	8c 89       	ldd	r24, Y+20	; 0x14
    1e60:	9d 89       	ldd	r25, Y+21	; 0x15
    1e62:	99 8b       	std	Y+17, r25	; 0x11
    1e64:	88 8b       	std	Y+16, r24	; 0x10
    1e66:	88 89       	ldd	r24, Y+16	; 0x10
    1e68:	99 89       	ldd	r25, Y+17	; 0x11
    1e6a:	01 97       	sbiw	r24, 0x01	; 1
    1e6c:	f1 f7       	brne	.-4      	; 0x1e6a <HLCD4_voidInit+0x468>
    1e6e:	99 8b       	std	Y+17, r25	; 0x11
    1e70:	88 8b       	std	Y+16, r24	; 0x10
    1e72:	0f c0       	rjmp	.+30     	; 0x1e92 <HLCD4_voidInit+0x490>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1e74:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1e76:	78 a1       	ldd	r23, Y+32	; 0x20
    1e78:	89 a1       	ldd	r24, Y+33	; 0x21
    1e7a:	9a a1       	ldd	r25, Y+34	; 0x22
    1e7c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e80:	dc 01       	movw	r26, r24
    1e82:	cb 01       	movw	r24, r22
    1e84:	8e 8f       	std	Y+30, r24	; 0x1e
    1e86:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1e88:	8f 87       	std	Y+15, r24	; 0x0f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1e8a:	8f 85       	ldd	r24, Y+15	; 0x0f
    1e8c:	8a 95       	dec	r24
    1e8e:	f1 f7       	brne	.-4      	; 0x1e8c <HLCD4_voidInit+0x48a>
    1e90:	8f 87       	std	Y+15, r24	; 0x0f
    _delay_us(40);
    HLCD4_voidSendCommand(DISPLAY_CLEAR1);
    1e92:	80 e0       	ldi	r24, 0x00	; 0
    1e94:	0e 94 d4 09 	call	0x13a8	; 0x13a8 <HLCD4_voidSendCommand>
    HLCD4_voidSendCommand(DISPLAY_CLEAR2);
    1e98:	80 e1       	ldi	r24, 0x10	; 16
    1e9a:	0e 94 d4 09 	call	0x13a8	; 0x13a8 <HLCD4_voidSendCommand>
    1e9e:	80 e0       	ldi	r24, 0x00	; 0
    1ea0:	90 e0       	ldi	r25, 0x00	; 0
    1ea2:	a0 e0       	ldi	r26, 0x00	; 0
    1ea4:	b0 e4       	ldi	r27, 0x40	; 64
    1ea6:	8b 87       	std	Y+11, r24	; 0x0b
    1ea8:	9c 87       	std	Y+12, r25	; 0x0c
    1eaa:	ad 87       	std	Y+13, r26	; 0x0d
    1eac:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1eae:	6b 85       	ldd	r22, Y+11	; 0x0b
    1eb0:	7c 85       	ldd	r23, Y+12	; 0x0c
    1eb2:	8d 85       	ldd	r24, Y+13	; 0x0d
    1eb4:	9e 85       	ldd	r25, Y+14	; 0x0e
    1eb6:	20 e0       	ldi	r18, 0x00	; 0
    1eb8:	30 e0       	ldi	r19, 0x00	; 0
    1eba:	4a ef       	ldi	r20, 0xFA	; 250
    1ebc:	54 e4       	ldi	r21, 0x44	; 68
    1ebe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ec2:	dc 01       	movw	r26, r24
    1ec4:	cb 01       	movw	r24, r22
    1ec6:	8f 83       	std	Y+7, r24	; 0x07
    1ec8:	98 87       	std	Y+8, r25	; 0x08
    1eca:	a9 87       	std	Y+9, r26	; 0x09
    1ecc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1ece:	6f 81       	ldd	r22, Y+7	; 0x07
    1ed0:	78 85       	ldd	r23, Y+8	; 0x08
    1ed2:	89 85       	ldd	r24, Y+9	; 0x09
    1ed4:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ed6:	20 e0       	ldi	r18, 0x00	; 0
    1ed8:	30 e0       	ldi	r19, 0x00	; 0
    1eda:	40 e8       	ldi	r20, 0x80	; 128
    1edc:	5f e3       	ldi	r21, 0x3F	; 63
    1ede:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1ee2:	88 23       	and	r24, r24
    1ee4:	2c f4       	brge	.+10     	; 0x1ef0 <HLCD4_voidInit+0x4ee>
		__ticks = 1;
    1ee6:	81 e0       	ldi	r24, 0x01	; 1
    1ee8:	90 e0       	ldi	r25, 0x00	; 0
    1eea:	9e 83       	std	Y+6, r25	; 0x06
    1eec:	8d 83       	std	Y+5, r24	; 0x05
    1eee:	3f c0       	rjmp	.+126    	; 0x1f6e <HLCD4_voidInit+0x56c>
	else if (__tmp > 65535)
    1ef0:	6f 81       	ldd	r22, Y+7	; 0x07
    1ef2:	78 85       	ldd	r23, Y+8	; 0x08
    1ef4:	89 85       	ldd	r24, Y+9	; 0x09
    1ef6:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ef8:	20 e0       	ldi	r18, 0x00	; 0
    1efa:	3f ef       	ldi	r19, 0xFF	; 255
    1efc:	4f e7       	ldi	r20, 0x7F	; 127
    1efe:	57 e4       	ldi	r21, 0x47	; 71
    1f00:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1f04:	18 16       	cp	r1, r24
    1f06:	4c f5       	brge	.+82     	; 0x1f5a <HLCD4_voidInit+0x558>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f08:	6b 85       	ldd	r22, Y+11	; 0x0b
    1f0a:	7c 85       	ldd	r23, Y+12	; 0x0c
    1f0c:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f0e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f10:	20 e0       	ldi	r18, 0x00	; 0
    1f12:	30 e0       	ldi	r19, 0x00	; 0
    1f14:	40 e2       	ldi	r20, 0x20	; 32
    1f16:	51 e4       	ldi	r21, 0x41	; 65
    1f18:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f1c:	dc 01       	movw	r26, r24
    1f1e:	cb 01       	movw	r24, r22
    1f20:	bc 01       	movw	r22, r24
    1f22:	cd 01       	movw	r24, r26
    1f24:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f28:	dc 01       	movw	r26, r24
    1f2a:	cb 01       	movw	r24, r22
    1f2c:	9e 83       	std	Y+6, r25	; 0x06
    1f2e:	8d 83       	std	Y+5, r24	; 0x05
    1f30:	0f c0       	rjmp	.+30     	; 0x1f50 <HLCD4_voidInit+0x54e>
    1f32:	88 ec       	ldi	r24, 0xC8	; 200
    1f34:	90 e0       	ldi	r25, 0x00	; 0
    1f36:	9c 83       	std	Y+4, r25	; 0x04
    1f38:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1f3a:	8b 81       	ldd	r24, Y+3	; 0x03
    1f3c:	9c 81       	ldd	r25, Y+4	; 0x04
    1f3e:	01 97       	sbiw	r24, 0x01	; 1
    1f40:	f1 f7       	brne	.-4      	; 0x1f3e <HLCD4_voidInit+0x53c>
    1f42:	9c 83       	std	Y+4, r25	; 0x04
    1f44:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f46:	8d 81       	ldd	r24, Y+5	; 0x05
    1f48:	9e 81       	ldd	r25, Y+6	; 0x06
    1f4a:	01 97       	sbiw	r24, 0x01	; 1
    1f4c:	9e 83       	std	Y+6, r25	; 0x06
    1f4e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f50:	8d 81       	ldd	r24, Y+5	; 0x05
    1f52:	9e 81       	ldd	r25, Y+6	; 0x06
    1f54:	00 97       	sbiw	r24, 0x00	; 0
    1f56:	69 f7       	brne	.-38     	; 0x1f32 <HLCD4_voidInit+0x530>
    1f58:	14 c0       	rjmp	.+40     	; 0x1f82 <HLCD4_voidInit+0x580>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f5a:	6f 81       	ldd	r22, Y+7	; 0x07
    1f5c:	78 85       	ldd	r23, Y+8	; 0x08
    1f5e:	89 85       	ldd	r24, Y+9	; 0x09
    1f60:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f62:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f66:	dc 01       	movw	r26, r24
    1f68:	cb 01       	movw	r24, r22
    1f6a:	9e 83       	std	Y+6, r25	; 0x06
    1f6c:	8d 83       	std	Y+5, r24	; 0x05
    1f6e:	8d 81       	ldd	r24, Y+5	; 0x05
    1f70:	9e 81       	ldd	r25, Y+6	; 0x06
    1f72:	9a 83       	std	Y+2, r25	; 0x02
    1f74:	89 83       	std	Y+1, r24	; 0x01
    1f76:	89 81       	ldd	r24, Y+1	; 0x01
    1f78:	9a 81       	ldd	r25, Y+2	; 0x02
    1f7a:	01 97       	sbiw	r24, 0x01	; 1
    1f7c:	f1 f7       	brne	.-4      	; 0x1f7a <HLCD4_voidInit+0x578>
    1f7e:	9a 83       	std	Y+2, r25	; 0x02
    1f80:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(2);
    HLCD4_voidSendCommand(ENTRY_MODE_SET1);
    1f82:	80 e0       	ldi	r24, 0x00	; 0
    1f84:	0e 94 d4 09 	call	0x13a8	; 0x13a8 <HLCD4_voidSendCommand>
    HLCD4_voidSendCommand(ENTRY_MODE_SET2);
    1f88:	80 e6       	ldi	r24, 0x60	; 96
    1f8a:	0e 94 d4 09 	call	0x13a8	; 0x13a8 <HLCD4_voidSendCommand>
    global_u8Init=1;
    1f8e:	81 e0       	ldi	r24, 0x01	; 1
    1f90:	80 93 8a 00 	sts	0x008A, r24
} 
    1f94:	c4 5b       	subi	r28, 0xB4	; 180
    1f96:	df 4f       	sbci	r29, 0xFF	; 255
    1f98:	0f b6       	in	r0, 0x3f	; 63
    1f9a:	f8 94       	cli
    1f9c:	de bf       	out	0x3e, r29	; 62
    1f9e:	0f be       	out	0x3f, r0	; 63
    1fa0:	cd bf       	out	0x3d, r28	; 61
    1fa2:	cf 91       	pop	r28
    1fa4:	df 91       	pop	r29
    1fa6:	1f 91       	pop	r17
    1fa8:	0f 91       	pop	r16
    1faa:	08 95       	ret

00001fac <HLCD4_voidClearDisplay>:

void HLCD4_voidClearDisplay(void)
{
    1fac:	df 93       	push	r29
    1fae:	cf 93       	push	r28
    1fb0:	cd b7       	in	r28, 0x3d	; 61
    1fb2:	de b7       	in	r29, 0x3e	; 62
    1fb4:	2e 97       	sbiw	r28, 0x0e	; 14
    1fb6:	0f b6       	in	r0, 0x3f	; 63
    1fb8:	f8 94       	cli
    1fba:	de bf       	out	0x3e, r29	; 62
    1fbc:	0f be       	out	0x3f, r0	; 63
    1fbe:	cd bf       	out	0x3d, r28	; 61
    HLCD4_voidSendCommand(DISPLAY_CLEAR1);
    1fc0:	80 e0       	ldi	r24, 0x00	; 0
    1fc2:	0e 94 d4 09 	call	0x13a8	; 0x13a8 <HLCD4_voidSendCommand>
    HLCD4_voidSendCommand(DISPLAY_CLEAR2);
    1fc6:	80 e1       	ldi	r24, 0x10	; 16
    1fc8:	0e 94 d4 09 	call	0x13a8	; 0x13a8 <HLCD4_voidSendCommand>
    1fcc:	80 e0       	ldi	r24, 0x00	; 0
    1fce:	90 e0       	ldi	r25, 0x00	; 0
    1fd0:	a0 e0       	ldi	r26, 0x00	; 0
    1fd2:	b0 e4       	ldi	r27, 0x40	; 64
    1fd4:	8b 87       	std	Y+11, r24	; 0x0b
    1fd6:	9c 87       	std	Y+12, r25	; 0x0c
    1fd8:	ad 87       	std	Y+13, r26	; 0x0d
    1fda:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1fdc:	6b 85       	ldd	r22, Y+11	; 0x0b
    1fde:	7c 85       	ldd	r23, Y+12	; 0x0c
    1fe0:	8d 85       	ldd	r24, Y+13	; 0x0d
    1fe2:	9e 85       	ldd	r25, Y+14	; 0x0e
    1fe4:	20 e0       	ldi	r18, 0x00	; 0
    1fe6:	30 e0       	ldi	r19, 0x00	; 0
    1fe8:	4a ef       	ldi	r20, 0xFA	; 250
    1fea:	54 e4       	ldi	r21, 0x44	; 68
    1fec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ff0:	dc 01       	movw	r26, r24
    1ff2:	cb 01       	movw	r24, r22
    1ff4:	8f 83       	std	Y+7, r24	; 0x07
    1ff6:	98 87       	std	Y+8, r25	; 0x08
    1ff8:	a9 87       	std	Y+9, r26	; 0x09
    1ffa:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1ffc:	6f 81       	ldd	r22, Y+7	; 0x07
    1ffe:	78 85       	ldd	r23, Y+8	; 0x08
    2000:	89 85       	ldd	r24, Y+9	; 0x09
    2002:	9a 85       	ldd	r25, Y+10	; 0x0a
    2004:	20 e0       	ldi	r18, 0x00	; 0
    2006:	30 e0       	ldi	r19, 0x00	; 0
    2008:	40 e8       	ldi	r20, 0x80	; 128
    200a:	5f e3       	ldi	r21, 0x3F	; 63
    200c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2010:	88 23       	and	r24, r24
    2012:	2c f4       	brge	.+10     	; 0x201e <HLCD4_voidClearDisplay+0x72>
		__ticks = 1;
    2014:	81 e0       	ldi	r24, 0x01	; 1
    2016:	90 e0       	ldi	r25, 0x00	; 0
    2018:	9e 83       	std	Y+6, r25	; 0x06
    201a:	8d 83       	std	Y+5, r24	; 0x05
    201c:	3f c0       	rjmp	.+126    	; 0x209c <HLCD4_voidClearDisplay+0xf0>
	else if (__tmp > 65535)
    201e:	6f 81       	ldd	r22, Y+7	; 0x07
    2020:	78 85       	ldd	r23, Y+8	; 0x08
    2022:	89 85       	ldd	r24, Y+9	; 0x09
    2024:	9a 85       	ldd	r25, Y+10	; 0x0a
    2026:	20 e0       	ldi	r18, 0x00	; 0
    2028:	3f ef       	ldi	r19, 0xFF	; 255
    202a:	4f e7       	ldi	r20, 0x7F	; 127
    202c:	57 e4       	ldi	r21, 0x47	; 71
    202e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2032:	18 16       	cp	r1, r24
    2034:	4c f5       	brge	.+82     	; 0x2088 <HLCD4_voidClearDisplay+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2036:	6b 85       	ldd	r22, Y+11	; 0x0b
    2038:	7c 85       	ldd	r23, Y+12	; 0x0c
    203a:	8d 85       	ldd	r24, Y+13	; 0x0d
    203c:	9e 85       	ldd	r25, Y+14	; 0x0e
    203e:	20 e0       	ldi	r18, 0x00	; 0
    2040:	30 e0       	ldi	r19, 0x00	; 0
    2042:	40 e2       	ldi	r20, 0x20	; 32
    2044:	51 e4       	ldi	r21, 0x41	; 65
    2046:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    204a:	dc 01       	movw	r26, r24
    204c:	cb 01       	movw	r24, r22
    204e:	bc 01       	movw	r22, r24
    2050:	cd 01       	movw	r24, r26
    2052:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2056:	dc 01       	movw	r26, r24
    2058:	cb 01       	movw	r24, r22
    205a:	9e 83       	std	Y+6, r25	; 0x06
    205c:	8d 83       	std	Y+5, r24	; 0x05
    205e:	0f c0       	rjmp	.+30     	; 0x207e <HLCD4_voidClearDisplay+0xd2>
    2060:	88 ec       	ldi	r24, 0xC8	; 200
    2062:	90 e0       	ldi	r25, 0x00	; 0
    2064:	9c 83       	std	Y+4, r25	; 0x04
    2066:	8b 83       	std	Y+3, r24	; 0x03
    2068:	8b 81       	ldd	r24, Y+3	; 0x03
    206a:	9c 81       	ldd	r25, Y+4	; 0x04
    206c:	01 97       	sbiw	r24, 0x01	; 1
    206e:	f1 f7       	brne	.-4      	; 0x206c <HLCD4_voidClearDisplay+0xc0>
    2070:	9c 83       	std	Y+4, r25	; 0x04
    2072:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2074:	8d 81       	ldd	r24, Y+5	; 0x05
    2076:	9e 81       	ldd	r25, Y+6	; 0x06
    2078:	01 97       	sbiw	r24, 0x01	; 1
    207a:	9e 83       	std	Y+6, r25	; 0x06
    207c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    207e:	8d 81       	ldd	r24, Y+5	; 0x05
    2080:	9e 81       	ldd	r25, Y+6	; 0x06
    2082:	00 97       	sbiw	r24, 0x00	; 0
    2084:	69 f7       	brne	.-38     	; 0x2060 <HLCD4_voidClearDisplay+0xb4>
    2086:	14 c0       	rjmp	.+40     	; 0x20b0 <HLCD4_voidClearDisplay+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2088:	6f 81       	ldd	r22, Y+7	; 0x07
    208a:	78 85       	ldd	r23, Y+8	; 0x08
    208c:	89 85       	ldd	r24, Y+9	; 0x09
    208e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2090:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2094:	dc 01       	movw	r26, r24
    2096:	cb 01       	movw	r24, r22
    2098:	9e 83       	std	Y+6, r25	; 0x06
    209a:	8d 83       	std	Y+5, r24	; 0x05
    209c:	8d 81       	ldd	r24, Y+5	; 0x05
    209e:	9e 81       	ldd	r25, Y+6	; 0x06
    20a0:	9a 83       	std	Y+2, r25	; 0x02
    20a2:	89 83       	std	Y+1, r24	; 0x01
    20a4:	89 81       	ldd	r24, Y+1	; 0x01
    20a6:	9a 81       	ldd	r25, Y+2	; 0x02
    20a8:	01 97       	sbiw	r24, 0x01	; 1
    20aa:	f1 f7       	brne	.-4      	; 0x20a8 <HLCD4_voidClearDisplay+0xfc>
    20ac:	9a 83       	std	Y+2, r25	; 0x02
    20ae:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(2);
}
    20b0:	2e 96       	adiw	r28, 0x0e	; 14
    20b2:	0f b6       	in	r0, 0x3f	; 63
    20b4:	f8 94       	cli
    20b6:	de bf       	out	0x3e, r29	; 62
    20b8:	0f be       	out	0x3f, r0	; 63
    20ba:	cd bf       	out	0x3d, r28	; 61
    20bc:	cf 91       	pop	r28
    20be:	df 91       	pop	r29
    20c0:	08 95       	ret

000020c2 <HLCD4_voidSendString>:

void HLCD4_voidSendString(u8 * A_Pu8String)
{
    20c2:	df 93       	push	r29
    20c4:	cf 93       	push	r28
    20c6:	00 d0       	rcall	.+0      	; 0x20c8 <HLCD4_voidSendString+0x6>
    20c8:	0f 92       	push	r0
    20ca:	cd b7       	in	r28, 0x3d	; 61
    20cc:	de b7       	in	r29, 0x3e	; 62
    20ce:	9b 83       	std	Y+3, r25	; 0x03
    20d0:	8a 83       	std	Y+2, r24	; 0x02
    u8 local_u8Couter=0;
    20d2:	19 82       	std	Y+1, r1	; 0x01
    20d4:	0e c0       	rjmp	.+28     	; 0x20f2 <HLCD4_voidSendString+0x30>
    while (A_Pu8String[local_u8Couter]!='\0')
    {
        HLCD4_voidSendData(A_Pu8String[local_u8Couter]);
    20d6:	89 81       	ldd	r24, Y+1	; 0x01
    20d8:	28 2f       	mov	r18, r24
    20da:	30 e0       	ldi	r19, 0x00	; 0
    20dc:	8a 81       	ldd	r24, Y+2	; 0x02
    20de:	9b 81       	ldd	r25, Y+3	; 0x03
    20e0:	fc 01       	movw	r30, r24
    20e2:	e2 0f       	add	r30, r18
    20e4:	f3 1f       	adc	r31, r19
    20e6:	80 81       	ld	r24, Z
    20e8:	0e 94 6d 0b 	call	0x16da	; 0x16da <HLCD4_voidSendData>
        local_u8Couter++;
    20ec:	89 81       	ldd	r24, Y+1	; 0x01
    20ee:	8f 5f       	subi	r24, 0xFF	; 255
    20f0:	89 83       	std	Y+1, r24	; 0x01
}

void HLCD4_voidSendString(u8 * A_Pu8String)
{
    u8 local_u8Couter=0;
    while (A_Pu8String[local_u8Couter]!='\0')
    20f2:	89 81       	ldd	r24, Y+1	; 0x01
    20f4:	28 2f       	mov	r18, r24
    20f6:	30 e0       	ldi	r19, 0x00	; 0
    20f8:	8a 81       	ldd	r24, Y+2	; 0x02
    20fa:	9b 81       	ldd	r25, Y+3	; 0x03
    20fc:	fc 01       	movw	r30, r24
    20fe:	e2 0f       	add	r30, r18
    2100:	f3 1f       	adc	r31, r19
    2102:	80 81       	ld	r24, Z
    2104:	88 23       	and	r24, r24
    2106:	39 f7       	brne	.-50     	; 0x20d6 <HLCD4_voidSendString+0x14>
    {
        HLCD4_voidSendData(A_Pu8String[local_u8Couter]);
        local_u8Couter++;
    }
    
}
    2108:	0f 90       	pop	r0
    210a:	0f 90       	pop	r0
    210c:	0f 90       	pop	r0
    210e:	cf 91       	pop	r28
    2110:	df 91       	pop	r29
    2112:	08 95       	ret

00002114 <HLCD4_voidGoToPos>:

void HLCD4_voidGoToPos(u8 A_u8RowNum,u8 A_u8ColNum)
{
    2114:	df 93       	push	r29
    2116:	cf 93       	push	r28
    2118:	cd b7       	in	r28, 0x3d	; 61
    211a:	de b7       	in	r29, 0x3e	; 62
    211c:	63 97       	sbiw	r28, 0x13	; 19
    211e:	0f b6       	in	r0, 0x3f	; 63
    2120:	f8 94       	cli
    2122:	de bf       	out	0x3e, r29	; 62
    2124:	0f be       	out	0x3f, r0	; 63
    2126:	cd bf       	out	0x3d, r28	; 61
    2128:	88 8b       	std	Y+16, r24	; 0x10
    212a:	69 8b       	std	Y+17, r22	; 0x11
    // _delay_ms(1);

    //*******************************//
    //Second method
	u8 local_u8Address;
    switch(A_u8RowNum)
    212c:	88 89       	ldd	r24, Y+16	; 0x10
    212e:	28 2f       	mov	r18, r24
    2130:	30 e0       	ldi	r19, 0x00	; 0
    2132:	3b 8b       	std	Y+19, r19	; 0x13
    2134:	2a 8b       	std	Y+18, r18	; 0x12
    2136:	8a 89       	ldd	r24, Y+18	; 0x12
    2138:	9b 89       	ldd	r25, Y+19	; 0x13
    213a:	81 30       	cpi	r24, 0x01	; 1
    213c:	91 05       	cpc	r25, r1
    213e:	31 f0       	breq	.+12     	; 0x214c <HLCD4_voidGoToPos+0x38>
    2140:	2a 89       	ldd	r18, Y+18	; 0x12
    2142:	3b 89       	ldd	r19, Y+19	; 0x13
    2144:	22 30       	cpi	r18, 0x02	; 2
    2146:	31 05       	cpc	r19, r1
    2148:	59 f0       	breq	.+22     	; 0x2160 <HLCD4_voidGoToPos+0x4c>
    214a:	13 c0       	rjmp	.+38     	; 0x2172 <HLCD4_voidGoToPos+0x5e>
    {
        case LCD_ROW_ONE:
        local_u8Address=FIRST_ROW_ADDRESS + A_u8ColNum -1;
    214c:	89 89       	ldd	r24, Y+17	; 0x11
    214e:	81 50       	subi	r24, 0x01	; 1
    2150:	8f 87       	std	Y+15, r24	; 0x0f
        SET_BIT(local_u8Address,PIN7);
    2152:	8f 85       	ldd	r24, Y+15	; 0x0f
    2154:	80 68       	ori	r24, 0x80	; 128
    2156:	8f 87       	std	Y+15, r24	; 0x0f
        HLCD4_voidSendCommand(local_u8Address);
    2158:	8f 85       	ldd	r24, Y+15	; 0x0f
    215a:	0e 94 d4 09 	call	0x13a8	; 0x13a8 <HLCD4_voidSendCommand>
    215e:	09 c0       	rjmp	.+18     	; 0x2172 <HLCD4_voidGoToPos+0x5e>
        break;

        case LCD_ROW_TWO:
        local_u8Address=SECOND_ROW_ADDRESS + A_u8ColNum;
    2160:	89 89       	ldd	r24, Y+17	; 0x11
    2162:	81 5c       	subi	r24, 0xC1	; 193
    2164:	8f 87       	std	Y+15, r24	; 0x0f
        SET_BIT(local_u8Address,PIN7);
    2166:	8f 85       	ldd	r24, Y+15	; 0x0f
    2168:	80 68       	ori	r24, 0x80	; 128
    216a:	8f 87       	std	Y+15, r24	; 0x0f
        HLCD4_voidSendCommand(local_u8Address);
    216c:	8f 85       	ldd	r24, Y+15	; 0x0f
    216e:	0e 94 d4 09 	call	0x13a8	; 0x13a8 <HLCD4_voidSendCommand>
    2172:	80 e0       	ldi	r24, 0x00	; 0
    2174:	90 e0       	ldi	r25, 0x00	; 0
    2176:	a0 e8       	ldi	r26, 0x80	; 128
    2178:	bf e3       	ldi	r27, 0x3F	; 63
    217a:	8b 87       	std	Y+11, r24	; 0x0b
    217c:	9c 87       	std	Y+12, r25	; 0x0c
    217e:	ad 87       	std	Y+13, r26	; 0x0d
    2180:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2182:	6b 85       	ldd	r22, Y+11	; 0x0b
    2184:	7c 85       	ldd	r23, Y+12	; 0x0c
    2186:	8d 85       	ldd	r24, Y+13	; 0x0d
    2188:	9e 85       	ldd	r25, Y+14	; 0x0e
    218a:	20 e0       	ldi	r18, 0x00	; 0
    218c:	30 e0       	ldi	r19, 0x00	; 0
    218e:	4a ef       	ldi	r20, 0xFA	; 250
    2190:	54 e4       	ldi	r21, 0x44	; 68
    2192:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2196:	dc 01       	movw	r26, r24
    2198:	cb 01       	movw	r24, r22
    219a:	8f 83       	std	Y+7, r24	; 0x07
    219c:	98 87       	std	Y+8, r25	; 0x08
    219e:	a9 87       	std	Y+9, r26	; 0x09
    21a0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    21a2:	6f 81       	ldd	r22, Y+7	; 0x07
    21a4:	78 85       	ldd	r23, Y+8	; 0x08
    21a6:	89 85       	ldd	r24, Y+9	; 0x09
    21a8:	9a 85       	ldd	r25, Y+10	; 0x0a
    21aa:	20 e0       	ldi	r18, 0x00	; 0
    21ac:	30 e0       	ldi	r19, 0x00	; 0
    21ae:	40 e8       	ldi	r20, 0x80	; 128
    21b0:	5f e3       	ldi	r21, 0x3F	; 63
    21b2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    21b6:	88 23       	and	r24, r24
    21b8:	2c f4       	brge	.+10     	; 0x21c4 <HLCD4_voidGoToPos+0xb0>
		__ticks = 1;
    21ba:	81 e0       	ldi	r24, 0x01	; 1
    21bc:	90 e0       	ldi	r25, 0x00	; 0
    21be:	9e 83       	std	Y+6, r25	; 0x06
    21c0:	8d 83       	std	Y+5, r24	; 0x05
    21c2:	3f c0       	rjmp	.+126    	; 0x2242 <HLCD4_voidGoToPos+0x12e>
	else if (__tmp > 65535)
    21c4:	6f 81       	ldd	r22, Y+7	; 0x07
    21c6:	78 85       	ldd	r23, Y+8	; 0x08
    21c8:	89 85       	ldd	r24, Y+9	; 0x09
    21ca:	9a 85       	ldd	r25, Y+10	; 0x0a
    21cc:	20 e0       	ldi	r18, 0x00	; 0
    21ce:	3f ef       	ldi	r19, 0xFF	; 255
    21d0:	4f e7       	ldi	r20, 0x7F	; 127
    21d2:	57 e4       	ldi	r21, 0x47	; 71
    21d4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    21d8:	18 16       	cp	r1, r24
    21da:	4c f5       	brge	.+82     	; 0x222e <HLCD4_voidGoToPos+0x11a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    21dc:	6b 85       	ldd	r22, Y+11	; 0x0b
    21de:	7c 85       	ldd	r23, Y+12	; 0x0c
    21e0:	8d 85       	ldd	r24, Y+13	; 0x0d
    21e2:	9e 85       	ldd	r25, Y+14	; 0x0e
    21e4:	20 e0       	ldi	r18, 0x00	; 0
    21e6:	30 e0       	ldi	r19, 0x00	; 0
    21e8:	40 e2       	ldi	r20, 0x20	; 32
    21ea:	51 e4       	ldi	r21, 0x41	; 65
    21ec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21f0:	dc 01       	movw	r26, r24
    21f2:	cb 01       	movw	r24, r22
    21f4:	bc 01       	movw	r22, r24
    21f6:	cd 01       	movw	r24, r26
    21f8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21fc:	dc 01       	movw	r26, r24
    21fe:	cb 01       	movw	r24, r22
    2200:	9e 83       	std	Y+6, r25	; 0x06
    2202:	8d 83       	std	Y+5, r24	; 0x05
    2204:	0f c0       	rjmp	.+30     	; 0x2224 <HLCD4_voidGoToPos+0x110>
    2206:	88 ec       	ldi	r24, 0xC8	; 200
    2208:	90 e0       	ldi	r25, 0x00	; 0
    220a:	9c 83       	std	Y+4, r25	; 0x04
    220c:	8b 83       	std	Y+3, r24	; 0x03
    220e:	8b 81       	ldd	r24, Y+3	; 0x03
    2210:	9c 81       	ldd	r25, Y+4	; 0x04
    2212:	01 97       	sbiw	r24, 0x01	; 1
    2214:	f1 f7       	brne	.-4      	; 0x2212 <HLCD4_voidGoToPos+0xfe>
    2216:	9c 83       	std	Y+4, r25	; 0x04
    2218:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    221a:	8d 81       	ldd	r24, Y+5	; 0x05
    221c:	9e 81       	ldd	r25, Y+6	; 0x06
    221e:	01 97       	sbiw	r24, 0x01	; 1
    2220:	9e 83       	std	Y+6, r25	; 0x06
    2222:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2224:	8d 81       	ldd	r24, Y+5	; 0x05
    2226:	9e 81       	ldd	r25, Y+6	; 0x06
    2228:	00 97       	sbiw	r24, 0x00	; 0
    222a:	69 f7       	brne	.-38     	; 0x2206 <HLCD4_voidGoToPos+0xf2>
    222c:	14 c0       	rjmp	.+40     	; 0x2256 <HLCD4_voidGoToPos+0x142>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    222e:	6f 81       	ldd	r22, Y+7	; 0x07
    2230:	78 85       	ldd	r23, Y+8	; 0x08
    2232:	89 85       	ldd	r24, Y+9	; 0x09
    2234:	9a 85       	ldd	r25, Y+10	; 0x0a
    2236:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    223a:	dc 01       	movw	r26, r24
    223c:	cb 01       	movw	r24, r22
    223e:	9e 83       	std	Y+6, r25	; 0x06
    2240:	8d 83       	std	Y+5, r24	; 0x05
    2242:	8d 81       	ldd	r24, Y+5	; 0x05
    2244:	9e 81       	ldd	r25, Y+6	; 0x06
    2246:	9a 83       	std	Y+2, r25	; 0x02
    2248:	89 83       	std	Y+1, r24	; 0x01
    224a:	89 81       	ldd	r24, Y+1	; 0x01
    224c:	9a 81       	ldd	r25, Y+2	; 0x02
    224e:	01 97       	sbiw	r24, 0x01	; 1
    2250:	f1 f7       	brne	.-4      	; 0x224e <HLCD4_voidGoToPos+0x13a>
    2252:	9a 83       	std	Y+2, r25	; 0x02
    2254:	89 83       	std	Y+1, r24	; 0x01
        break;

    }
    _delay_ms(1);

}
    2256:	63 96       	adiw	r28, 0x13	; 19
    2258:	0f b6       	in	r0, 0x3f	; 63
    225a:	f8 94       	cli
    225c:	de bf       	out	0x3e, r29	; 62
    225e:	0f be       	out	0x3f, r0	; 63
    2260:	cd bf       	out	0x3d, r28	; 61
    2262:	cf 91       	pop	r28
    2264:	df 91       	pop	r29
    2266:	08 95       	ret

00002268 <HLCD4_voidDisplayNumber>:

void HLCD4_voidDisplayNumber(u32 A_u32Number)
{
    2268:	df 93       	push	r29
    226a:	cf 93       	push	r28
    226c:	00 d0       	rcall	.+0      	; 0x226e <HLCD4_voidDisplayNumber+0x6>
    226e:	00 d0       	rcall	.+0      	; 0x2270 <HLCD4_voidDisplayNumber+0x8>
    2270:	cd b7       	in	r28, 0x3d	; 61
    2272:	de b7       	in	r29, 0x3e	; 62
    2274:	9c 83       	std	Y+4, r25	; 0x04
    2276:	8b 83       	std	Y+3, r24	; 0x03
    // u8 local_u8NumToStr[100];
    // itoa(A_u32Number,local_u8NumToStr,10);
    // HLCD4_voidSendString(local_u8NumToStr);
    //****************************************************//
    //third method: it will deal with zero unlike the first method so it's not problem here
    u32 local_u32Number=1;
    2278:	81 e0       	ldi	r24, 0x01	; 1
    227a:	90 e0       	ldi	r25, 0x00	; 0
    227c:	9a 83       	std	Y+2, r25	; 0x02
    227e:	89 83       	std	Y+1, r24	; 0x01
    if(A_u32Number==0)
    2280:	8b 81       	ldd	r24, Y+3	; 0x03
    2282:	9c 81       	ldd	r25, Y+4	; 0x04
    2284:	00 97       	sbiw	r24, 0x00	; 0
    2286:	31 f5       	brne	.+76     	; 0x22d4 <HLCD4_voidDisplayNumber+0x6c>
    {
        HLCD4_voidSendData('0');
    2288:	80 e3       	ldi	r24, 0x30	; 48
    228a:	0e 94 6d 0b 	call	0x16da	; 0x16da <HLCD4_voidSendData>
    228e:	22 c0       	rjmp	.+68     	; 0x22d4 <HLCD4_voidDisplayNumber+0x6c>
    }   
    while(A_u32Number !=0)
    {
            local_u32Number=((local_u32Number * 10)+(A_u32Number%10));
    2290:	89 81       	ldd	r24, Y+1	; 0x01
    2292:	9a 81       	ldd	r25, Y+2	; 0x02
    2294:	9c 01       	movw	r18, r24
    2296:	22 0f       	add	r18, r18
    2298:	33 1f       	adc	r19, r19
    229a:	c9 01       	movw	r24, r18
    229c:	88 0f       	add	r24, r24
    229e:	99 1f       	adc	r25, r25
    22a0:	88 0f       	add	r24, r24
    22a2:	99 1f       	adc	r25, r25
    22a4:	f9 01       	movw	r30, r18
    22a6:	e8 0f       	add	r30, r24
    22a8:	f9 1f       	adc	r31, r25
    22aa:	8b 81       	ldd	r24, Y+3	; 0x03
    22ac:	9c 81       	ldd	r25, Y+4	; 0x04
    22ae:	2a e0       	ldi	r18, 0x0A	; 10
    22b0:	30 e0       	ldi	r19, 0x00	; 0
    22b2:	b9 01       	movw	r22, r18
    22b4:	0e 94 bc 1b 	call	0x3778	; 0x3778 <__udivmodhi4>
    22b8:	8e 0f       	add	r24, r30
    22ba:	9f 1f       	adc	r25, r31
    22bc:	9a 83       	std	Y+2, r25	; 0x02
    22be:	89 83       	std	Y+1, r24	; 0x01
            A_u32Number=A_u32Number/10;
    22c0:	8b 81       	ldd	r24, Y+3	; 0x03
    22c2:	9c 81       	ldd	r25, Y+4	; 0x04
    22c4:	2a e0       	ldi	r18, 0x0A	; 10
    22c6:	30 e0       	ldi	r19, 0x00	; 0
    22c8:	b9 01       	movw	r22, r18
    22ca:	0e 94 bc 1b 	call	0x3778	; 0x3778 <__udivmodhi4>
    22ce:	cb 01       	movw	r24, r22
    22d0:	9c 83       	std	Y+4, r25	; 0x04
    22d2:	8b 83       	std	Y+3, r24	; 0x03
    u32 local_u32Number=1;
    if(A_u32Number==0)
    {
        HLCD4_voidSendData('0');
    }   
    while(A_u32Number !=0)
    22d4:	8b 81       	ldd	r24, Y+3	; 0x03
    22d6:	9c 81       	ldd	r25, Y+4	; 0x04
    22d8:	00 97       	sbiw	r24, 0x00	; 0
    22da:	d1 f6       	brne	.-76     	; 0x2290 <HLCD4_voidDisplayNumber+0x28>
    22dc:	14 c0       	rjmp	.+40     	; 0x2306 <HLCD4_voidDisplayNumber+0x9e>
            A_u32Number=A_u32Number/10;

    }
    while (local_u32Number!=1)
    {
        HLCD4_voidSendData((local_u32Number%10)+48);
    22de:	89 81       	ldd	r24, Y+1	; 0x01
    22e0:	9a 81       	ldd	r25, Y+2	; 0x02
    22e2:	2a e0       	ldi	r18, 0x0A	; 10
    22e4:	30 e0       	ldi	r19, 0x00	; 0
    22e6:	b9 01       	movw	r22, r18
    22e8:	0e 94 bc 1b 	call	0x3778	; 0x3778 <__udivmodhi4>
    22ec:	80 5d       	subi	r24, 0xD0	; 208
    22ee:	0e 94 6d 0b 	call	0x16da	; 0x16da <HLCD4_voidSendData>
        local_u32Number=local_u32Number/10;
    22f2:	89 81       	ldd	r24, Y+1	; 0x01
    22f4:	9a 81       	ldd	r25, Y+2	; 0x02
    22f6:	2a e0       	ldi	r18, 0x0A	; 10
    22f8:	30 e0       	ldi	r19, 0x00	; 0
    22fa:	b9 01       	movw	r22, r18
    22fc:	0e 94 bc 1b 	call	0x3778	; 0x3778 <__udivmodhi4>
    2300:	cb 01       	movw	r24, r22
    2302:	9a 83       	std	Y+2, r25	; 0x02
    2304:	89 83       	std	Y+1, r24	; 0x01
    {
            local_u32Number=((local_u32Number * 10)+(A_u32Number%10));
            A_u32Number=A_u32Number/10;

    }
    while (local_u32Number!=1)
    2306:	89 81       	ldd	r24, Y+1	; 0x01
    2308:	9a 81       	ldd	r25, Y+2	; 0x02
    230a:	81 30       	cpi	r24, 0x01	; 1
    230c:	91 05       	cpc	r25, r1
    230e:	39 f7       	brne	.-50     	; 0x22de <HLCD4_voidDisplayNumber+0x76>
    {
        HLCD4_voidSendData((local_u32Number%10)+48);
        local_u32Number=local_u32Number/10;
    }
}
    2310:	0f 90       	pop	r0
    2312:	0f 90       	pop	r0
    2314:	0f 90       	pop	r0
    2316:	0f 90       	pop	r0
    2318:	cf 91       	pop	r28
    231a:	df 91       	pop	r29
    231c:	08 95       	ret

0000231e <HLCD4_voidStoreCustomChar>:

void HLCD4_voidStoreCustomChar(u8 * A_u8Pattern,u8 A_u8CGRAMIndex)
{
    231e:	df 93       	push	r29
    2320:	cf 93       	push	r28
    2322:	cd b7       	in	r28, 0x3d	; 61
    2324:	de b7       	in	r29, 0x3e	; 62
    2326:	ab 97       	sbiw	r28, 0x2b	; 43
    2328:	0f b6       	in	r0, 0x3f	; 63
    232a:	f8 94       	cli
    232c:	de bf       	out	0x3e, r29	; 62
    232e:	0f be       	out	0x3f, r0	; 63
    2330:	cd bf       	out	0x3d, r28	; 61
    2332:	9a a7       	std	Y+42, r25	; 0x2a
    2334:	89 a7       	std	Y+41, r24	; 0x29
    2336:	6b a7       	std	Y+43, r22	; 0x2b
    u8 local_u8Address;
    if(A_u8CGRAMIndex<8)
    2338:	8b a5       	ldd	r24, Y+43	; 0x2b
    233a:	88 30       	cpi	r24, 0x08	; 8
    233c:	08 f0       	brcs	.+2      	; 0x2340 <HLCD4_voidStoreCustomChar+0x22>
    233e:	e5 c0       	rjmp	.+458    	; 0x250a <HLCD4_voidStoreCustomChar+0x1ec>
    {
        A_u8CGRAMIndex=A_u8CGRAMIndex*8;
    2340:	8b a5       	ldd	r24, Y+43	; 0x2b
    2342:	88 2f       	mov	r24, r24
    2344:	90 e0       	ldi	r25, 0x00	; 0
    2346:	88 0f       	add	r24, r24
    2348:	99 1f       	adc	r25, r25
    234a:	88 0f       	add	r24, r24
    234c:	99 1f       	adc	r25, r25
    234e:	88 0f       	add	r24, r24
    2350:	99 1f       	adc	r25, r25
    2352:	8b a7       	std	Y+43, r24	; 0x2b
        SET_BIT(A_u8CGRAMIndex,PIN6);
    2354:	8b a5       	ldd	r24, Y+43	; 0x2b
    2356:	80 64       	ori	r24, 0x40	; 64
    2358:	8b a7       	std	Y+43, r24	; 0x2b
        CLR_BIT(A_u8CGRAMIndex,PIN7);
    235a:	8b a5       	ldd	r24, Y+43	; 0x2b
    235c:	8f 77       	andi	r24, 0x7F	; 127
    235e:	8b a7       	std	Y+43, r24	; 0x2b
        HLCD4_voidSendCommand(A_u8CGRAMIndex);
    2360:	8b a5       	ldd	r24, Y+43	; 0x2b
    2362:	0e 94 d4 09 	call	0x13a8	; 0x13a8 <HLCD4_voidSendCommand>
        for(u8 i=0;i<8;i++)
    2366:	1f a2       	std	Y+39, r1	; 0x27
    2368:	cc c0       	rjmp	.+408    	; 0x2502 <HLCD4_voidStoreCustomChar+0x1e4>
        {
            HLCD4_voidSendData(A_u8Pattern[i]);
    236a:	8f a1       	ldd	r24, Y+39	; 0x27
    236c:	28 2f       	mov	r18, r24
    236e:	30 e0       	ldi	r19, 0x00	; 0
    2370:	89 a5       	ldd	r24, Y+41	; 0x29
    2372:	9a a5       	ldd	r25, Y+42	; 0x2a
    2374:	fc 01       	movw	r30, r24
    2376:	e2 0f       	add	r30, r18
    2378:	f3 1f       	adc	r31, r19
    237a:	80 81       	ld	r24, Z
    237c:	0e 94 6d 0b 	call	0x16da	; 0x16da <HLCD4_voidSendData>
    2380:	80 e0       	ldi	r24, 0x00	; 0
    2382:	90 e0       	ldi	r25, 0x00	; 0
    2384:	a0 e7       	ldi	r26, 0x70	; 112
    2386:	b2 e4       	ldi	r27, 0x42	; 66
    2388:	8b a3       	std	Y+35, r24	; 0x23
    238a:	9c a3       	std	Y+36, r25	; 0x24
    238c:	ad a3       	std	Y+37, r26	; 0x25
    238e:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2390:	6b a1       	ldd	r22, Y+35	; 0x23
    2392:	7c a1       	ldd	r23, Y+36	; 0x24
    2394:	8d a1       	ldd	r24, Y+37	; 0x25
    2396:	9e a1       	ldd	r25, Y+38	; 0x26
    2398:	2b ea       	ldi	r18, 0xAB	; 171
    239a:	3a ea       	ldi	r19, 0xAA	; 170
    239c:	4a e2       	ldi	r20, 0x2A	; 42
    239e:	50 e4       	ldi	r21, 0x40	; 64
    23a0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23a4:	dc 01       	movw	r26, r24
    23a6:	cb 01       	movw	r24, r22
    23a8:	8f 8f       	std	Y+31, r24	; 0x1f
    23aa:	98 a3       	std	Y+32, r25	; 0x20
    23ac:	a9 a3       	std	Y+33, r26	; 0x21
    23ae:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    23b0:	6f 8d       	ldd	r22, Y+31	; 0x1f
    23b2:	78 a1       	ldd	r23, Y+32	; 0x20
    23b4:	89 a1       	ldd	r24, Y+33	; 0x21
    23b6:	9a a1       	ldd	r25, Y+34	; 0x22
    23b8:	20 e0       	ldi	r18, 0x00	; 0
    23ba:	30 e0       	ldi	r19, 0x00	; 0
    23bc:	40 e8       	ldi	r20, 0x80	; 128
    23be:	5f e3       	ldi	r21, 0x3F	; 63
    23c0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    23c4:	88 23       	and	r24, r24
    23c6:	1c f4       	brge	.+6      	; 0x23ce <HLCD4_voidStoreCustomChar+0xb0>
		__ticks = 1;
    23c8:	81 e0       	ldi	r24, 0x01	; 1
    23ca:	8e 8f       	std	Y+30, r24	; 0x1e
    23cc:	91 c0       	rjmp	.+290    	; 0x24f0 <HLCD4_voidStoreCustomChar+0x1d2>
	else if (__tmp > 255)
    23ce:	6f 8d       	ldd	r22, Y+31	; 0x1f
    23d0:	78 a1       	ldd	r23, Y+32	; 0x20
    23d2:	89 a1       	ldd	r24, Y+33	; 0x21
    23d4:	9a a1       	ldd	r25, Y+34	; 0x22
    23d6:	20 e0       	ldi	r18, 0x00	; 0
    23d8:	30 e0       	ldi	r19, 0x00	; 0
    23da:	4f e7       	ldi	r20, 0x7F	; 127
    23dc:	53 e4       	ldi	r21, 0x43	; 67
    23de:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    23e2:	18 16       	cp	r1, r24
    23e4:	0c f0       	brlt	.+2      	; 0x23e8 <HLCD4_voidStoreCustomChar+0xca>
    23e6:	7b c0       	rjmp	.+246    	; 0x24de <HLCD4_voidStoreCustomChar+0x1c0>
	{
		_delay_ms(__us / 1000.0);
    23e8:	6b a1       	ldd	r22, Y+35	; 0x23
    23ea:	7c a1       	ldd	r23, Y+36	; 0x24
    23ec:	8d a1       	ldd	r24, Y+37	; 0x25
    23ee:	9e a1       	ldd	r25, Y+38	; 0x26
    23f0:	20 e0       	ldi	r18, 0x00	; 0
    23f2:	30 e0       	ldi	r19, 0x00	; 0
    23f4:	4a e7       	ldi	r20, 0x7A	; 122
    23f6:	54 e4       	ldi	r21, 0x44	; 68
    23f8:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    23fc:	dc 01       	movw	r26, r24
    23fe:	cb 01       	movw	r24, r22
    2400:	8a 8f       	std	Y+26, r24	; 0x1a
    2402:	9b 8f       	std	Y+27, r25	; 0x1b
    2404:	ac 8f       	std	Y+28, r26	; 0x1c
    2406:	bd 8f       	std	Y+29, r27	; 0x1d
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2408:	6a 8d       	ldd	r22, Y+26	; 0x1a
    240a:	7b 8d       	ldd	r23, Y+27	; 0x1b
    240c:	8c 8d       	ldd	r24, Y+28	; 0x1c
    240e:	9d 8d       	ldd	r25, Y+29	; 0x1d
    2410:	20 e0       	ldi	r18, 0x00	; 0
    2412:	30 e0       	ldi	r19, 0x00	; 0
    2414:	4a ef       	ldi	r20, 0xFA	; 250
    2416:	54 e4       	ldi	r21, 0x44	; 68
    2418:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    241c:	dc 01       	movw	r26, r24
    241e:	cb 01       	movw	r24, r22
    2420:	8e 8b       	std	Y+22, r24	; 0x16
    2422:	9f 8b       	std	Y+23, r25	; 0x17
    2424:	a8 8f       	std	Y+24, r26	; 0x18
    2426:	b9 8f       	std	Y+25, r27	; 0x19
	if (__tmp < 1.0)
    2428:	6e 89       	ldd	r22, Y+22	; 0x16
    242a:	7f 89       	ldd	r23, Y+23	; 0x17
    242c:	88 8d       	ldd	r24, Y+24	; 0x18
    242e:	99 8d       	ldd	r25, Y+25	; 0x19
    2430:	20 e0       	ldi	r18, 0x00	; 0
    2432:	30 e0       	ldi	r19, 0x00	; 0
    2434:	40 e8       	ldi	r20, 0x80	; 128
    2436:	5f e3       	ldi	r21, 0x3F	; 63
    2438:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    243c:	88 23       	and	r24, r24
    243e:	2c f4       	brge	.+10     	; 0x244a <HLCD4_voidStoreCustomChar+0x12c>
		__ticks = 1;
    2440:	81 e0       	ldi	r24, 0x01	; 1
    2442:	90 e0       	ldi	r25, 0x00	; 0
    2444:	9d 8b       	std	Y+21, r25	; 0x15
    2446:	8c 8b       	std	Y+20, r24	; 0x14
    2448:	3f c0       	rjmp	.+126    	; 0x24c8 <HLCD4_voidStoreCustomChar+0x1aa>
	else if (__tmp > 65535)
    244a:	6e 89       	ldd	r22, Y+22	; 0x16
    244c:	7f 89       	ldd	r23, Y+23	; 0x17
    244e:	88 8d       	ldd	r24, Y+24	; 0x18
    2450:	99 8d       	ldd	r25, Y+25	; 0x19
    2452:	20 e0       	ldi	r18, 0x00	; 0
    2454:	3f ef       	ldi	r19, 0xFF	; 255
    2456:	4f e7       	ldi	r20, 0x7F	; 127
    2458:	57 e4       	ldi	r21, 0x47	; 71
    245a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    245e:	18 16       	cp	r1, r24
    2460:	4c f5       	brge	.+82     	; 0x24b4 <HLCD4_voidStoreCustomChar+0x196>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2462:	6a 8d       	ldd	r22, Y+26	; 0x1a
    2464:	7b 8d       	ldd	r23, Y+27	; 0x1b
    2466:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2468:	9d 8d       	ldd	r25, Y+29	; 0x1d
    246a:	20 e0       	ldi	r18, 0x00	; 0
    246c:	30 e0       	ldi	r19, 0x00	; 0
    246e:	40 e2       	ldi	r20, 0x20	; 32
    2470:	51 e4       	ldi	r21, 0x41	; 65
    2472:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2476:	dc 01       	movw	r26, r24
    2478:	cb 01       	movw	r24, r22
    247a:	bc 01       	movw	r22, r24
    247c:	cd 01       	movw	r24, r26
    247e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2482:	dc 01       	movw	r26, r24
    2484:	cb 01       	movw	r24, r22
    2486:	9d 8b       	std	Y+21, r25	; 0x15
    2488:	8c 8b       	std	Y+20, r24	; 0x14
    248a:	0f c0       	rjmp	.+30     	; 0x24aa <HLCD4_voidStoreCustomChar+0x18c>
    248c:	88 ec       	ldi	r24, 0xC8	; 200
    248e:	90 e0       	ldi	r25, 0x00	; 0
    2490:	9b 8b       	std	Y+19, r25	; 0x13
    2492:	8a 8b       	std	Y+18, r24	; 0x12
    2494:	8a 89       	ldd	r24, Y+18	; 0x12
    2496:	9b 89       	ldd	r25, Y+19	; 0x13
    2498:	01 97       	sbiw	r24, 0x01	; 1
    249a:	f1 f7       	brne	.-4      	; 0x2498 <HLCD4_voidStoreCustomChar+0x17a>
    249c:	9b 8b       	std	Y+19, r25	; 0x13
    249e:	8a 8b       	std	Y+18, r24	; 0x12
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    24a0:	8c 89       	ldd	r24, Y+20	; 0x14
    24a2:	9d 89       	ldd	r25, Y+21	; 0x15
    24a4:	01 97       	sbiw	r24, 0x01	; 1
    24a6:	9d 8b       	std	Y+21, r25	; 0x15
    24a8:	8c 8b       	std	Y+20, r24	; 0x14
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    24aa:	8c 89       	ldd	r24, Y+20	; 0x14
    24ac:	9d 89       	ldd	r25, Y+21	; 0x15
    24ae:	00 97       	sbiw	r24, 0x00	; 0
    24b0:	69 f7       	brne	.-38     	; 0x248c <HLCD4_voidStoreCustomChar+0x16e>
    24b2:	24 c0       	rjmp	.+72     	; 0x24fc <HLCD4_voidStoreCustomChar+0x1de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    24b4:	6e 89       	ldd	r22, Y+22	; 0x16
    24b6:	7f 89       	ldd	r23, Y+23	; 0x17
    24b8:	88 8d       	ldd	r24, Y+24	; 0x18
    24ba:	99 8d       	ldd	r25, Y+25	; 0x19
    24bc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24c0:	dc 01       	movw	r26, r24
    24c2:	cb 01       	movw	r24, r22
    24c4:	9d 8b       	std	Y+21, r25	; 0x15
    24c6:	8c 8b       	std	Y+20, r24	; 0x14
    24c8:	8c 89       	ldd	r24, Y+20	; 0x14
    24ca:	9d 89       	ldd	r25, Y+21	; 0x15
    24cc:	99 8b       	std	Y+17, r25	; 0x11
    24ce:	88 8b       	std	Y+16, r24	; 0x10
    24d0:	88 89       	ldd	r24, Y+16	; 0x10
    24d2:	99 89       	ldd	r25, Y+17	; 0x11
    24d4:	01 97       	sbiw	r24, 0x01	; 1
    24d6:	f1 f7       	brne	.-4      	; 0x24d4 <HLCD4_voidStoreCustomChar+0x1b6>
    24d8:	99 8b       	std	Y+17, r25	; 0x11
    24da:	88 8b       	std	Y+16, r24	; 0x10
    24dc:	0f c0       	rjmp	.+30     	; 0x24fc <HLCD4_voidStoreCustomChar+0x1de>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    24de:	6f 8d       	ldd	r22, Y+31	; 0x1f
    24e0:	78 a1       	ldd	r23, Y+32	; 0x20
    24e2:	89 a1       	ldd	r24, Y+33	; 0x21
    24e4:	9a a1       	ldd	r25, Y+34	; 0x22
    24e6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24ea:	dc 01       	movw	r26, r24
    24ec:	cb 01       	movw	r24, r22
    24ee:	8e 8f       	std	Y+30, r24	; 0x1e
    24f0:	8e 8d       	ldd	r24, Y+30	; 0x1e
    24f2:	8f 87       	std	Y+15, r24	; 0x0f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    24f4:	8f 85       	ldd	r24, Y+15	; 0x0f
    24f6:	8a 95       	dec	r24
    24f8:	f1 f7       	brne	.-4      	; 0x24f6 <HLCD4_voidStoreCustomChar+0x1d8>
    24fa:	8f 87       	std	Y+15, r24	; 0x0f
    {
        A_u8CGRAMIndex=A_u8CGRAMIndex*8;
        SET_BIT(A_u8CGRAMIndex,PIN6);
        CLR_BIT(A_u8CGRAMIndex,PIN7);
        HLCD4_voidSendCommand(A_u8CGRAMIndex);
        for(u8 i=0;i<8;i++)
    24fc:	8f a1       	ldd	r24, Y+39	; 0x27
    24fe:	8f 5f       	subi	r24, 0xFF	; 255
    2500:	8f a3       	std	Y+39, r24	; 0x27
    2502:	8f a1       	ldd	r24, Y+39	; 0x27
    2504:	88 30       	cpi	r24, 0x08	; 8
    2506:	08 f4       	brcc	.+2      	; 0x250a <HLCD4_voidStoreCustomChar+0x1ec>
    2508:	30 cf       	rjmp	.-416    	; 0x236a <HLCD4_voidStoreCustomChar+0x4c>
        {
            HLCD4_voidSendData(A_u8Pattern[i]);
            _delay_us(60);
        }
    }
    HLCD4_voidSendCommand(RETURN_HOME);
    250a:	82 e0       	ldi	r24, 0x02	; 2
    250c:	0e 94 d4 09 	call	0x13a8	; 0x13a8 <HLCD4_voidSendCommand>
    2510:	80 e0       	ldi	r24, 0x00	; 0
    2512:	90 e0       	ldi	r25, 0x00	; 0
    2514:	a0 e0       	ldi	r26, 0x00	; 0
    2516:	b0 e4       	ldi	r27, 0x40	; 64
    2518:	8b 87       	std	Y+11, r24	; 0x0b
    251a:	9c 87       	std	Y+12, r25	; 0x0c
    251c:	ad 87       	std	Y+13, r26	; 0x0d
    251e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2520:	6b 85       	ldd	r22, Y+11	; 0x0b
    2522:	7c 85       	ldd	r23, Y+12	; 0x0c
    2524:	8d 85       	ldd	r24, Y+13	; 0x0d
    2526:	9e 85       	ldd	r25, Y+14	; 0x0e
    2528:	20 e0       	ldi	r18, 0x00	; 0
    252a:	30 e0       	ldi	r19, 0x00	; 0
    252c:	4a ef       	ldi	r20, 0xFA	; 250
    252e:	54 e4       	ldi	r21, 0x44	; 68
    2530:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2534:	dc 01       	movw	r26, r24
    2536:	cb 01       	movw	r24, r22
    2538:	8f 83       	std	Y+7, r24	; 0x07
    253a:	98 87       	std	Y+8, r25	; 0x08
    253c:	a9 87       	std	Y+9, r26	; 0x09
    253e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2540:	6f 81       	ldd	r22, Y+7	; 0x07
    2542:	78 85       	ldd	r23, Y+8	; 0x08
    2544:	89 85       	ldd	r24, Y+9	; 0x09
    2546:	9a 85       	ldd	r25, Y+10	; 0x0a
    2548:	20 e0       	ldi	r18, 0x00	; 0
    254a:	30 e0       	ldi	r19, 0x00	; 0
    254c:	40 e8       	ldi	r20, 0x80	; 128
    254e:	5f e3       	ldi	r21, 0x3F	; 63
    2550:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2554:	88 23       	and	r24, r24
    2556:	2c f4       	brge	.+10     	; 0x2562 <HLCD4_voidStoreCustomChar+0x244>
		__ticks = 1;
    2558:	81 e0       	ldi	r24, 0x01	; 1
    255a:	90 e0       	ldi	r25, 0x00	; 0
    255c:	9e 83       	std	Y+6, r25	; 0x06
    255e:	8d 83       	std	Y+5, r24	; 0x05
    2560:	3f c0       	rjmp	.+126    	; 0x25e0 <HLCD4_voidStoreCustomChar+0x2c2>
	else if (__tmp > 65535)
    2562:	6f 81       	ldd	r22, Y+7	; 0x07
    2564:	78 85       	ldd	r23, Y+8	; 0x08
    2566:	89 85       	ldd	r24, Y+9	; 0x09
    2568:	9a 85       	ldd	r25, Y+10	; 0x0a
    256a:	20 e0       	ldi	r18, 0x00	; 0
    256c:	3f ef       	ldi	r19, 0xFF	; 255
    256e:	4f e7       	ldi	r20, 0x7F	; 127
    2570:	57 e4       	ldi	r21, 0x47	; 71
    2572:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2576:	18 16       	cp	r1, r24
    2578:	4c f5       	brge	.+82     	; 0x25cc <HLCD4_voidStoreCustomChar+0x2ae>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    257a:	6b 85       	ldd	r22, Y+11	; 0x0b
    257c:	7c 85       	ldd	r23, Y+12	; 0x0c
    257e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2580:	9e 85       	ldd	r25, Y+14	; 0x0e
    2582:	20 e0       	ldi	r18, 0x00	; 0
    2584:	30 e0       	ldi	r19, 0x00	; 0
    2586:	40 e2       	ldi	r20, 0x20	; 32
    2588:	51 e4       	ldi	r21, 0x41	; 65
    258a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    258e:	dc 01       	movw	r26, r24
    2590:	cb 01       	movw	r24, r22
    2592:	bc 01       	movw	r22, r24
    2594:	cd 01       	movw	r24, r26
    2596:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    259a:	dc 01       	movw	r26, r24
    259c:	cb 01       	movw	r24, r22
    259e:	9e 83       	std	Y+6, r25	; 0x06
    25a0:	8d 83       	std	Y+5, r24	; 0x05
    25a2:	0f c0       	rjmp	.+30     	; 0x25c2 <HLCD4_voidStoreCustomChar+0x2a4>
    25a4:	88 ec       	ldi	r24, 0xC8	; 200
    25a6:	90 e0       	ldi	r25, 0x00	; 0
    25a8:	9c 83       	std	Y+4, r25	; 0x04
    25aa:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    25ac:	8b 81       	ldd	r24, Y+3	; 0x03
    25ae:	9c 81       	ldd	r25, Y+4	; 0x04
    25b0:	01 97       	sbiw	r24, 0x01	; 1
    25b2:	f1 f7       	brne	.-4      	; 0x25b0 <HLCD4_voidStoreCustomChar+0x292>
    25b4:	9c 83       	std	Y+4, r25	; 0x04
    25b6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    25b8:	8d 81       	ldd	r24, Y+5	; 0x05
    25ba:	9e 81       	ldd	r25, Y+6	; 0x06
    25bc:	01 97       	sbiw	r24, 0x01	; 1
    25be:	9e 83       	std	Y+6, r25	; 0x06
    25c0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    25c2:	8d 81       	ldd	r24, Y+5	; 0x05
    25c4:	9e 81       	ldd	r25, Y+6	; 0x06
    25c6:	00 97       	sbiw	r24, 0x00	; 0
    25c8:	69 f7       	brne	.-38     	; 0x25a4 <HLCD4_voidStoreCustomChar+0x286>
    25ca:	14 c0       	rjmp	.+40     	; 0x25f4 <HLCD4_voidStoreCustomChar+0x2d6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    25cc:	6f 81       	ldd	r22, Y+7	; 0x07
    25ce:	78 85       	ldd	r23, Y+8	; 0x08
    25d0:	89 85       	ldd	r24, Y+9	; 0x09
    25d2:	9a 85       	ldd	r25, Y+10	; 0x0a
    25d4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25d8:	dc 01       	movw	r26, r24
    25da:	cb 01       	movw	r24, r22
    25dc:	9e 83       	std	Y+6, r25	; 0x06
    25de:	8d 83       	std	Y+5, r24	; 0x05
    25e0:	8d 81       	ldd	r24, Y+5	; 0x05
    25e2:	9e 81       	ldd	r25, Y+6	; 0x06
    25e4:	9a 83       	std	Y+2, r25	; 0x02
    25e6:	89 83       	std	Y+1, r24	; 0x01
    25e8:	89 81       	ldd	r24, Y+1	; 0x01
    25ea:	9a 81       	ldd	r25, Y+2	; 0x02
    25ec:	01 97       	sbiw	r24, 0x01	; 1
    25ee:	f1 f7       	brne	.-4      	; 0x25ec <HLCD4_voidStoreCustomChar+0x2ce>
    25f0:	9a 83       	std	Y+2, r25	; 0x02
    25f2:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(2);

}
    25f4:	ab 96       	adiw	r28, 0x2b	; 43
    25f6:	0f b6       	in	r0, 0x3f	; 63
    25f8:	f8 94       	cli
    25fa:	de bf       	out	0x3e, r29	; 62
    25fc:	0f be       	out	0x3f, r0	; 63
    25fe:	cd bf       	out	0x3d, r28	; 61
    2600:	cf 91       	pop	r28
    2602:	df 91       	pop	r29
    2604:	08 95       	ret

00002606 <HLCD4_voidDisplayCustomChar>:

void HLCD4_voidDisplayCustomChar(u8 A_u8CGRAMIndex,u8 A_u8Row,u8 A_u8Col)
{
    2606:	df 93       	push	r29
    2608:	cf 93       	push	r28
    260a:	00 d0       	rcall	.+0      	; 0x260c <HLCD4_voidDisplayCustomChar+0x6>
    260c:	0f 92       	push	r0
    260e:	cd b7       	in	r28, 0x3d	; 61
    2610:	de b7       	in	r29, 0x3e	; 62
    2612:	89 83       	std	Y+1, r24	; 0x01
    2614:	6a 83       	std	Y+2, r22	; 0x02
    2616:	4b 83       	std	Y+3, r20	; 0x03
    HLCD4_voidGoToPos(A_u8Row,A_u8Col);
    2618:	8a 81       	ldd	r24, Y+2	; 0x02
    261a:	6b 81       	ldd	r22, Y+3	; 0x03
    261c:	0e 94 8a 10 	call	0x2114	; 0x2114 <HLCD4_voidGoToPos>
    HLCD4_voidSendData(A_u8CGRAMIndex);
    2620:	89 81       	ldd	r24, Y+1	; 0x01
    2622:	0e 94 6d 0b 	call	0x16da	; 0x16da <HLCD4_voidSendData>
    2626:	0f 90       	pop	r0
    2628:	0f 90       	pop	r0
    262a:	0f 90       	pop	r0
    262c:	cf 91       	pop	r28
    262e:	df 91       	pop	r29
    2630:	08 95       	ret

00002632 <HLCD8_voidSendCommand>:
#define F_CPU 8000000UL
#include <math.h>
#include <stdlib.h>

void HLCD8_voidSendCommand(u8 A_u8Command)
{
    2632:	df 93       	push	r29
    2634:	cf 93       	push	r28
    2636:	cd b7       	in	r28, 0x3d	; 61
    2638:	de b7       	in	r29, 0x3e	; 62
    263a:	2f 97       	sbiw	r28, 0x0f	; 15
    263c:	0f b6       	in	r0, 0x3f	; 63
    263e:	f8 94       	cli
    2640:	de bf       	out	0x3e, r29	; 62
    2642:	0f be       	out	0x3f, r0	; 63
    2644:	cd bf       	out	0x3d, r28	; 61
    2646:	8f 87       	std	Y+15, r24	; 0x0f
    //RS=0 RW=0
    MDIO_voidSetPinValue(LCD_CONTROL_PORT,RS_PIN,PIN_LOW);
    2648:	82 e0       	ldi	r24, 0x02	; 2
    264a:	60 e0       	ldi	r22, 0x00	; 0
    264c:	40 e0       	ldi	r20, 0x00	; 0
    264e:	0e 94 26 07 	call	0xe4c	; 0xe4c <MDIO_voidSetPinValue>
    MDIO_voidSetPinValue(LCD_CONTROL_PORT,RW_PIN,PIN_LOW);
    2652:	82 e0       	ldi	r24, 0x02	; 2
    2654:	61 e0       	ldi	r22, 0x01	; 1
    2656:	40 e0       	ldi	r20, 0x00	; 0
    2658:	0e 94 26 07 	call	0xe4c	; 0xe4c <MDIO_voidSetPinValue>

    MDIO_voidSetPortValue(LCD_DATA_PORT,A_u8Command);
    265c:	83 e0       	ldi	r24, 0x03	; 3
    265e:	6f 85       	ldd	r22, Y+15	; 0x0f
    2660:	0e 94 52 09 	call	0x12a4	; 0x12a4 <MDIO_voidSetPortValue>
    MDIO_voidSetPinValue(LCD_CONTROL_PORT,E_PIN,PIN_HIGH);
    2664:	82 e0       	ldi	r24, 0x02	; 2
    2666:	62 e0       	ldi	r22, 0x02	; 2
    2668:	41 e0       	ldi	r20, 0x01	; 1
    266a:	0e 94 26 07 	call	0xe4c	; 0xe4c <MDIO_voidSetPinValue>
    266e:	80 e0       	ldi	r24, 0x00	; 0
    2670:	90 e0       	ldi	r25, 0x00	; 0
    2672:	a0 e0       	ldi	r26, 0x00	; 0
    2674:	b0 e4       	ldi	r27, 0x40	; 64
    2676:	8b 87       	std	Y+11, r24	; 0x0b
    2678:	9c 87       	std	Y+12, r25	; 0x0c
    267a:	ad 87       	std	Y+13, r26	; 0x0d
    267c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    267e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2680:	7c 85       	ldd	r23, Y+12	; 0x0c
    2682:	8d 85       	ldd	r24, Y+13	; 0x0d
    2684:	9e 85       	ldd	r25, Y+14	; 0x0e
    2686:	20 e0       	ldi	r18, 0x00	; 0
    2688:	30 e0       	ldi	r19, 0x00	; 0
    268a:	4a ef       	ldi	r20, 0xFA	; 250
    268c:	54 e4       	ldi	r21, 0x44	; 68
    268e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2692:	dc 01       	movw	r26, r24
    2694:	cb 01       	movw	r24, r22
    2696:	8f 83       	std	Y+7, r24	; 0x07
    2698:	98 87       	std	Y+8, r25	; 0x08
    269a:	a9 87       	std	Y+9, r26	; 0x09
    269c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    269e:	6f 81       	ldd	r22, Y+7	; 0x07
    26a0:	78 85       	ldd	r23, Y+8	; 0x08
    26a2:	89 85       	ldd	r24, Y+9	; 0x09
    26a4:	9a 85       	ldd	r25, Y+10	; 0x0a
    26a6:	20 e0       	ldi	r18, 0x00	; 0
    26a8:	30 e0       	ldi	r19, 0x00	; 0
    26aa:	40 e8       	ldi	r20, 0x80	; 128
    26ac:	5f e3       	ldi	r21, 0x3F	; 63
    26ae:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    26b2:	88 23       	and	r24, r24
    26b4:	2c f4       	brge	.+10     	; 0x26c0 <HLCD8_voidSendCommand+0x8e>
		__ticks = 1;
    26b6:	81 e0       	ldi	r24, 0x01	; 1
    26b8:	90 e0       	ldi	r25, 0x00	; 0
    26ba:	9e 83       	std	Y+6, r25	; 0x06
    26bc:	8d 83       	std	Y+5, r24	; 0x05
    26be:	3f c0       	rjmp	.+126    	; 0x273e <HLCD8_voidSendCommand+0x10c>
	else if (__tmp > 65535)
    26c0:	6f 81       	ldd	r22, Y+7	; 0x07
    26c2:	78 85       	ldd	r23, Y+8	; 0x08
    26c4:	89 85       	ldd	r24, Y+9	; 0x09
    26c6:	9a 85       	ldd	r25, Y+10	; 0x0a
    26c8:	20 e0       	ldi	r18, 0x00	; 0
    26ca:	3f ef       	ldi	r19, 0xFF	; 255
    26cc:	4f e7       	ldi	r20, 0x7F	; 127
    26ce:	57 e4       	ldi	r21, 0x47	; 71
    26d0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    26d4:	18 16       	cp	r1, r24
    26d6:	4c f5       	brge	.+82     	; 0x272a <HLCD8_voidSendCommand+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    26d8:	6b 85       	ldd	r22, Y+11	; 0x0b
    26da:	7c 85       	ldd	r23, Y+12	; 0x0c
    26dc:	8d 85       	ldd	r24, Y+13	; 0x0d
    26de:	9e 85       	ldd	r25, Y+14	; 0x0e
    26e0:	20 e0       	ldi	r18, 0x00	; 0
    26e2:	30 e0       	ldi	r19, 0x00	; 0
    26e4:	40 e2       	ldi	r20, 0x20	; 32
    26e6:	51 e4       	ldi	r21, 0x41	; 65
    26e8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26ec:	dc 01       	movw	r26, r24
    26ee:	cb 01       	movw	r24, r22
    26f0:	bc 01       	movw	r22, r24
    26f2:	cd 01       	movw	r24, r26
    26f4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26f8:	dc 01       	movw	r26, r24
    26fa:	cb 01       	movw	r24, r22
    26fc:	9e 83       	std	Y+6, r25	; 0x06
    26fe:	8d 83       	std	Y+5, r24	; 0x05
    2700:	0f c0       	rjmp	.+30     	; 0x2720 <HLCD8_voidSendCommand+0xee>
    2702:	88 ec       	ldi	r24, 0xC8	; 200
    2704:	90 e0       	ldi	r25, 0x00	; 0
    2706:	9c 83       	std	Y+4, r25	; 0x04
    2708:	8b 83       	std	Y+3, r24	; 0x03
    270a:	8b 81       	ldd	r24, Y+3	; 0x03
    270c:	9c 81       	ldd	r25, Y+4	; 0x04
    270e:	01 97       	sbiw	r24, 0x01	; 1
    2710:	f1 f7       	brne	.-4      	; 0x270e <HLCD8_voidSendCommand+0xdc>
    2712:	9c 83       	std	Y+4, r25	; 0x04
    2714:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2716:	8d 81       	ldd	r24, Y+5	; 0x05
    2718:	9e 81       	ldd	r25, Y+6	; 0x06
    271a:	01 97       	sbiw	r24, 0x01	; 1
    271c:	9e 83       	std	Y+6, r25	; 0x06
    271e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2720:	8d 81       	ldd	r24, Y+5	; 0x05
    2722:	9e 81       	ldd	r25, Y+6	; 0x06
    2724:	00 97       	sbiw	r24, 0x00	; 0
    2726:	69 f7       	brne	.-38     	; 0x2702 <HLCD8_voidSendCommand+0xd0>
    2728:	14 c0       	rjmp	.+40     	; 0x2752 <HLCD8_voidSendCommand+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    272a:	6f 81       	ldd	r22, Y+7	; 0x07
    272c:	78 85       	ldd	r23, Y+8	; 0x08
    272e:	89 85       	ldd	r24, Y+9	; 0x09
    2730:	9a 85       	ldd	r25, Y+10	; 0x0a
    2732:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2736:	dc 01       	movw	r26, r24
    2738:	cb 01       	movw	r24, r22
    273a:	9e 83       	std	Y+6, r25	; 0x06
    273c:	8d 83       	std	Y+5, r24	; 0x05
    273e:	8d 81       	ldd	r24, Y+5	; 0x05
    2740:	9e 81       	ldd	r25, Y+6	; 0x06
    2742:	9a 83       	std	Y+2, r25	; 0x02
    2744:	89 83       	std	Y+1, r24	; 0x01
    2746:	89 81       	ldd	r24, Y+1	; 0x01
    2748:	9a 81       	ldd	r25, Y+2	; 0x02
    274a:	01 97       	sbiw	r24, 0x01	; 1
    274c:	f1 f7       	brne	.-4      	; 0x274a <HLCD8_voidSendCommand+0x118>
    274e:	9a 83       	std	Y+2, r25	; 0x02
    2750:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(2);
    MDIO_voidSetPinValue(LCD_CONTROL_PORT,E_PIN,PIN_LOW);
    2752:	82 e0       	ldi	r24, 0x02	; 2
    2754:	62 e0       	ldi	r22, 0x02	; 2
    2756:	40 e0       	ldi	r20, 0x00	; 0
    2758:	0e 94 26 07 	call	0xe4c	; 0xe4c <MDIO_voidSetPinValue>
}
    275c:	2f 96       	adiw	r28, 0x0f	; 15
    275e:	0f b6       	in	r0, 0x3f	; 63
    2760:	f8 94       	cli
    2762:	de bf       	out	0x3e, r29	; 62
    2764:	0f be       	out	0x3f, r0	; 63
    2766:	cd bf       	out	0x3d, r28	; 61
    2768:	cf 91       	pop	r28
    276a:	df 91       	pop	r29
    276c:	08 95       	ret

0000276e <HLCD8_voidSendData>:


void HLCD8_voidSendData(u8 A_u8Data)
{
    276e:	df 93       	push	r29
    2770:	cf 93       	push	r28
    2772:	cd b7       	in	r28, 0x3d	; 61
    2774:	de b7       	in	r29, 0x3e	; 62
    2776:	2f 97       	sbiw	r28, 0x0f	; 15
    2778:	0f b6       	in	r0, 0x3f	; 63
    277a:	f8 94       	cli
    277c:	de bf       	out	0x3e, r29	; 62
    277e:	0f be       	out	0x3f, r0	; 63
    2780:	cd bf       	out	0x3d, r28	; 61
    2782:	8f 87       	std	Y+15, r24	; 0x0f
    //RS=1 RW=0
    MDIO_voidSetPinValue(LCD_CONTROL_PORT,RS_PIN,PIN_HIGH);
    2784:	82 e0       	ldi	r24, 0x02	; 2
    2786:	60 e0       	ldi	r22, 0x00	; 0
    2788:	41 e0       	ldi	r20, 0x01	; 1
    278a:	0e 94 26 07 	call	0xe4c	; 0xe4c <MDIO_voidSetPinValue>
    MDIO_voidSetPinValue(LCD_CONTROL_PORT,RW_PIN,PIN_LOW);
    278e:	82 e0       	ldi	r24, 0x02	; 2
    2790:	61 e0       	ldi	r22, 0x01	; 1
    2792:	40 e0       	ldi	r20, 0x00	; 0
    2794:	0e 94 26 07 	call	0xe4c	; 0xe4c <MDIO_voidSetPinValue>

    MDIO_voidSetPortValue(LCD_DATA_PORT,A_u8Data);
    2798:	83 e0       	ldi	r24, 0x03	; 3
    279a:	6f 85       	ldd	r22, Y+15	; 0x0f
    279c:	0e 94 52 09 	call	0x12a4	; 0x12a4 <MDIO_voidSetPortValue>

    MDIO_voidSetPinValue(LCD_CONTROL_PORT,E_PIN,PIN_HIGH);
    27a0:	82 e0       	ldi	r24, 0x02	; 2
    27a2:	62 e0       	ldi	r22, 0x02	; 2
    27a4:	41 e0       	ldi	r20, 0x01	; 1
    27a6:	0e 94 26 07 	call	0xe4c	; 0xe4c <MDIO_voidSetPinValue>
    27aa:	80 e0       	ldi	r24, 0x00	; 0
    27ac:	90 e0       	ldi	r25, 0x00	; 0
    27ae:	a0 e0       	ldi	r26, 0x00	; 0
    27b0:	b0 e4       	ldi	r27, 0x40	; 64
    27b2:	8b 87       	std	Y+11, r24	; 0x0b
    27b4:	9c 87       	std	Y+12, r25	; 0x0c
    27b6:	ad 87       	std	Y+13, r26	; 0x0d
    27b8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    27ba:	6b 85       	ldd	r22, Y+11	; 0x0b
    27bc:	7c 85       	ldd	r23, Y+12	; 0x0c
    27be:	8d 85       	ldd	r24, Y+13	; 0x0d
    27c0:	9e 85       	ldd	r25, Y+14	; 0x0e
    27c2:	20 e0       	ldi	r18, 0x00	; 0
    27c4:	30 e0       	ldi	r19, 0x00	; 0
    27c6:	4a ef       	ldi	r20, 0xFA	; 250
    27c8:	54 e4       	ldi	r21, 0x44	; 68
    27ca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27ce:	dc 01       	movw	r26, r24
    27d0:	cb 01       	movw	r24, r22
    27d2:	8f 83       	std	Y+7, r24	; 0x07
    27d4:	98 87       	std	Y+8, r25	; 0x08
    27d6:	a9 87       	std	Y+9, r26	; 0x09
    27d8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    27da:	6f 81       	ldd	r22, Y+7	; 0x07
    27dc:	78 85       	ldd	r23, Y+8	; 0x08
    27de:	89 85       	ldd	r24, Y+9	; 0x09
    27e0:	9a 85       	ldd	r25, Y+10	; 0x0a
    27e2:	20 e0       	ldi	r18, 0x00	; 0
    27e4:	30 e0       	ldi	r19, 0x00	; 0
    27e6:	40 e8       	ldi	r20, 0x80	; 128
    27e8:	5f e3       	ldi	r21, 0x3F	; 63
    27ea:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    27ee:	88 23       	and	r24, r24
    27f0:	2c f4       	brge	.+10     	; 0x27fc <HLCD8_voidSendData+0x8e>
		__ticks = 1;
    27f2:	81 e0       	ldi	r24, 0x01	; 1
    27f4:	90 e0       	ldi	r25, 0x00	; 0
    27f6:	9e 83       	std	Y+6, r25	; 0x06
    27f8:	8d 83       	std	Y+5, r24	; 0x05
    27fa:	3f c0       	rjmp	.+126    	; 0x287a <HLCD8_voidSendData+0x10c>
	else if (__tmp > 65535)
    27fc:	6f 81       	ldd	r22, Y+7	; 0x07
    27fe:	78 85       	ldd	r23, Y+8	; 0x08
    2800:	89 85       	ldd	r24, Y+9	; 0x09
    2802:	9a 85       	ldd	r25, Y+10	; 0x0a
    2804:	20 e0       	ldi	r18, 0x00	; 0
    2806:	3f ef       	ldi	r19, 0xFF	; 255
    2808:	4f e7       	ldi	r20, 0x7F	; 127
    280a:	57 e4       	ldi	r21, 0x47	; 71
    280c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2810:	18 16       	cp	r1, r24
    2812:	4c f5       	brge	.+82     	; 0x2866 <HLCD8_voidSendData+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2814:	6b 85       	ldd	r22, Y+11	; 0x0b
    2816:	7c 85       	ldd	r23, Y+12	; 0x0c
    2818:	8d 85       	ldd	r24, Y+13	; 0x0d
    281a:	9e 85       	ldd	r25, Y+14	; 0x0e
    281c:	20 e0       	ldi	r18, 0x00	; 0
    281e:	30 e0       	ldi	r19, 0x00	; 0
    2820:	40 e2       	ldi	r20, 0x20	; 32
    2822:	51 e4       	ldi	r21, 0x41	; 65
    2824:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2828:	dc 01       	movw	r26, r24
    282a:	cb 01       	movw	r24, r22
    282c:	bc 01       	movw	r22, r24
    282e:	cd 01       	movw	r24, r26
    2830:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2834:	dc 01       	movw	r26, r24
    2836:	cb 01       	movw	r24, r22
    2838:	9e 83       	std	Y+6, r25	; 0x06
    283a:	8d 83       	std	Y+5, r24	; 0x05
    283c:	0f c0       	rjmp	.+30     	; 0x285c <HLCD8_voidSendData+0xee>
    283e:	88 ec       	ldi	r24, 0xC8	; 200
    2840:	90 e0       	ldi	r25, 0x00	; 0
    2842:	9c 83       	std	Y+4, r25	; 0x04
    2844:	8b 83       	std	Y+3, r24	; 0x03
    2846:	8b 81       	ldd	r24, Y+3	; 0x03
    2848:	9c 81       	ldd	r25, Y+4	; 0x04
    284a:	01 97       	sbiw	r24, 0x01	; 1
    284c:	f1 f7       	brne	.-4      	; 0x284a <HLCD8_voidSendData+0xdc>
    284e:	9c 83       	std	Y+4, r25	; 0x04
    2850:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2852:	8d 81       	ldd	r24, Y+5	; 0x05
    2854:	9e 81       	ldd	r25, Y+6	; 0x06
    2856:	01 97       	sbiw	r24, 0x01	; 1
    2858:	9e 83       	std	Y+6, r25	; 0x06
    285a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    285c:	8d 81       	ldd	r24, Y+5	; 0x05
    285e:	9e 81       	ldd	r25, Y+6	; 0x06
    2860:	00 97       	sbiw	r24, 0x00	; 0
    2862:	69 f7       	brne	.-38     	; 0x283e <HLCD8_voidSendData+0xd0>
    2864:	14 c0       	rjmp	.+40     	; 0x288e <HLCD8_voidSendData+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2866:	6f 81       	ldd	r22, Y+7	; 0x07
    2868:	78 85       	ldd	r23, Y+8	; 0x08
    286a:	89 85       	ldd	r24, Y+9	; 0x09
    286c:	9a 85       	ldd	r25, Y+10	; 0x0a
    286e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2872:	dc 01       	movw	r26, r24
    2874:	cb 01       	movw	r24, r22
    2876:	9e 83       	std	Y+6, r25	; 0x06
    2878:	8d 83       	std	Y+5, r24	; 0x05
    287a:	8d 81       	ldd	r24, Y+5	; 0x05
    287c:	9e 81       	ldd	r25, Y+6	; 0x06
    287e:	9a 83       	std	Y+2, r25	; 0x02
    2880:	89 83       	std	Y+1, r24	; 0x01
    2882:	89 81       	ldd	r24, Y+1	; 0x01
    2884:	9a 81       	ldd	r25, Y+2	; 0x02
    2886:	01 97       	sbiw	r24, 0x01	; 1
    2888:	f1 f7       	brne	.-4      	; 0x2886 <HLCD8_voidSendData+0x118>
    288a:	9a 83       	std	Y+2, r25	; 0x02
    288c:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(2);
    MDIO_voidSetPinValue(LCD_CONTROL_PORT,E_PIN,PIN_LOW);
    288e:	82 e0       	ldi	r24, 0x02	; 2
    2890:	62 e0       	ldi	r22, 0x02	; 2
    2892:	40 e0       	ldi	r20, 0x00	; 0
    2894:	0e 94 26 07 	call	0xe4c	; 0xe4c <MDIO_voidSetPinValue>
}
    2898:	2f 96       	adiw	r28, 0x0f	; 15
    289a:	0f b6       	in	r0, 0x3f	; 63
    289c:	f8 94       	cli
    289e:	de bf       	out	0x3e, r29	; 62
    28a0:	0f be       	out	0x3f, r0	; 63
    28a2:	cd bf       	out	0x3d, r28	; 61
    28a4:	cf 91       	pop	r28
    28a6:	df 91       	pop	r29
    28a8:	08 95       	ret

000028aa <HLCD8_voidInit>:


void HLCD8_voidInit()
{
    28aa:	df 93       	push	r29
    28ac:	cf 93       	push	r28
    28ae:	cd b7       	in	r28, 0x3d	; 61
    28b0:	de b7       	in	r29, 0x3e	; 62
    28b2:	e8 97       	sbiw	r28, 0x38	; 56
    28b4:	0f b6       	in	r0, 0x3f	; 63
    28b6:	f8 94       	cli
    28b8:	de bf       	out	0x3e, r29	; 62
    28ba:	0f be       	out	0x3f, r0	; 63
    28bc:	cd bf       	out	0x3d, r28	; 61
    28be:	80 e0       	ldi	r24, 0x00	; 0
    28c0:	90 e0       	ldi	r25, 0x00	; 0
    28c2:	a0 ef       	ldi	r26, 0xF0	; 240
    28c4:	b1 e4       	ldi	r27, 0x41	; 65
    28c6:	8d ab       	std	Y+53, r24	; 0x35
    28c8:	9e ab       	std	Y+54, r25	; 0x36
    28ca:	af ab       	std	Y+55, r26	; 0x37
    28cc:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    28ce:	6d a9       	ldd	r22, Y+53	; 0x35
    28d0:	7e a9       	ldd	r23, Y+54	; 0x36
    28d2:	8f a9       	ldd	r24, Y+55	; 0x37
    28d4:	98 ad       	ldd	r25, Y+56	; 0x38
    28d6:	20 e0       	ldi	r18, 0x00	; 0
    28d8:	30 e0       	ldi	r19, 0x00	; 0
    28da:	4a ef       	ldi	r20, 0xFA	; 250
    28dc:	54 e4       	ldi	r21, 0x44	; 68
    28de:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28e2:	dc 01       	movw	r26, r24
    28e4:	cb 01       	movw	r24, r22
    28e6:	89 ab       	std	Y+49, r24	; 0x31
    28e8:	9a ab       	std	Y+50, r25	; 0x32
    28ea:	ab ab       	std	Y+51, r26	; 0x33
    28ec:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    28ee:	69 a9       	ldd	r22, Y+49	; 0x31
    28f0:	7a a9       	ldd	r23, Y+50	; 0x32
    28f2:	8b a9       	ldd	r24, Y+51	; 0x33
    28f4:	9c a9       	ldd	r25, Y+52	; 0x34
    28f6:	20 e0       	ldi	r18, 0x00	; 0
    28f8:	30 e0       	ldi	r19, 0x00	; 0
    28fa:	40 e8       	ldi	r20, 0x80	; 128
    28fc:	5f e3       	ldi	r21, 0x3F	; 63
    28fe:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2902:	88 23       	and	r24, r24
    2904:	2c f4       	brge	.+10     	; 0x2910 <HLCD8_voidInit+0x66>
		__ticks = 1;
    2906:	81 e0       	ldi	r24, 0x01	; 1
    2908:	90 e0       	ldi	r25, 0x00	; 0
    290a:	98 ab       	std	Y+48, r25	; 0x30
    290c:	8f a7       	std	Y+47, r24	; 0x2f
    290e:	3f c0       	rjmp	.+126    	; 0x298e <HLCD8_voidInit+0xe4>
	else if (__tmp > 65535)
    2910:	69 a9       	ldd	r22, Y+49	; 0x31
    2912:	7a a9       	ldd	r23, Y+50	; 0x32
    2914:	8b a9       	ldd	r24, Y+51	; 0x33
    2916:	9c a9       	ldd	r25, Y+52	; 0x34
    2918:	20 e0       	ldi	r18, 0x00	; 0
    291a:	3f ef       	ldi	r19, 0xFF	; 255
    291c:	4f e7       	ldi	r20, 0x7F	; 127
    291e:	57 e4       	ldi	r21, 0x47	; 71
    2920:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2924:	18 16       	cp	r1, r24
    2926:	4c f5       	brge	.+82     	; 0x297a <HLCD8_voidInit+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2928:	6d a9       	ldd	r22, Y+53	; 0x35
    292a:	7e a9       	ldd	r23, Y+54	; 0x36
    292c:	8f a9       	ldd	r24, Y+55	; 0x37
    292e:	98 ad       	ldd	r25, Y+56	; 0x38
    2930:	20 e0       	ldi	r18, 0x00	; 0
    2932:	30 e0       	ldi	r19, 0x00	; 0
    2934:	40 e2       	ldi	r20, 0x20	; 32
    2936:	51 e4       	ldi	r21, 0x41	; 65
    2938:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    293c:	dc 01       	movw	r26, r24
    293e:	cb 01       	movw	r24, r22
    2940:	bc 01       	movw	r22, r24
    2942:	cd 01       	movw	r24, r26
    2944:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2948:	dc 01       	movw	r26, r24
    294a:	cb 01       	movw	r24, r22
    294c:	98 ab       	std	Y+48, r25	; 0x30
    294e:	8f a7       	std	Y+47, r24	; 0x2f
    2950:	0f c0       	rjmp	.+30     	; 0x2970 <HLCD8_voidInit+0xc6>
    2952:	88 ec       	ldi	r24, 0xC8	; 200
    2954:	90 e0       	ldi	r25, 0x00	; 0
    2956:	9e a7       	std	Y+46, r25	; 0x2e
    2958:	8d a7       	std	Y+45, r24	; 0x2d
    295a:	8d a5       	ldd	r24, Y+45	; 0x2d
    295c:	9e a5       	ldd	r25, Y+46	; 0x2e
    295e:	01 97       	sbiw	r24, 0x01	; 1
    2960:	f1 f7       	brne	.-4      	; 0x295e <HLCD8_voidInit+0xb4>
    2962:	9e a7       	std	Y+46, r25	; 0x2e
    2964:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2966:	8f a5       	ldd	r24, Y+47	; 0x2f
    2968:	98 a9       	ldd	r25, Y+48	; 0x30
    296a:	01 97       	sbiw	r24, 0x01	; 1
    296c:	98 ab       	std	Y+48, r25	; 0x30
    296e:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2970:	8f a5       	ldd	r24, Y+47	; 0x2f
    2972:	98 a9       	ldd	r25, Y+48	; 0x30
    2974:	00 97       	sbiw	r24, 0x00	; 0
    2976:	69 f7       	brne	.-38     	; 0x2952 <HLCD8_voidInit+0xa8>
    2978:	14 c0       	rjmp	.+40     	; 0x29a2 <HLCD8_voidInit+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    297a:	69 a9       	ldd	r22, Y+49	; 0x31
    297c:	7a a9       	ldd	r23, Y+50	; 0x32
    297e:	8b a9       	ldd	r24, Y+51	; 0x33
    2980:	9c a9       	ldd	r25, Y+52	; 0x34
    2982:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2986:	dc 01       	movw	r26, r24
    2988:	cb 01       	movw	r24, r22
    298a:	98 ab       	std	Y+48, r25	; 0x30
    298c:	8f a7       	std	Y+47, r24	; 0x2f
    298e:	8f a5       	ldd	r24, Y+47	; 0x2f
    2990:	98 a9       	ldd	r25, Y+48	; 0x30
    2992:	9c a7       	std	Y+44, r25	; 0x2c
    2994:	8b a7       	std	Y+43, r24	; 0x2b
    2996:	8b a5       	ldd	r24, Y+43	; 0x2b
    2998:	9c a5       	ldd	r25, Y+44	; 0x2c
    299a:	01 97       	sbiw	r24, 0x01	; 1
    299c:	f1 f7       	brne	.-4      	; 0x299a <HLCD8_voidInit+0xf0>
    299e:	9c a7       	std	Y+44, r25	; 0x2c
    29a0:	8b a7       	std	Y+43, r24	; 0x2b
    _delay_ms(30);
    HLCD8_voidSendCommand(FUNCTION_SET);
    29a2:	88 e3       	ldi	r24, 0x38	; 56
    29a4:	0e 94 19 13 	call	0x2632	; 0x2632 <HLCD8_voidSendCommand>
    29a8:	80 e0       	ldi	r24, 0x00	; 0
    29aa:	90 e0       	ldi	r25, 0x00	; 0
    29ac:	a0 e8       	ldi	r26, 0x80	; 128
    29ae:	bf e3       	ldi	r27, 0x3F	; 63
    29b0:	8f a3       	std	Y+39, r24	; 0x27
    29b2:	98 a7       	std	Y+40, r25	; 0x28
    29b4:	a9 a7       	std	Y+41, r26	; 0x29
    29b6:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    29b8:	6f a1       	ldd	r22, Y+39	; 0x27
    29ba:	78 a5       	ldd	r23, Y+40	; 0x28
    29bc:	89 a5       	ldd	r24, Y+41	; 0x29
    29be:	9a a5       	ldd	r25, Y+42	; 0x2a
    29c0:	20 e0       	ldi	r18, 0x00	; 0
    29c2:	30 e0       	ldi	r19, 0x00	; 0
    29c4:	4a ef       	ldi	r20, 0xFA	; 250
    29c6:	54 e4       	ldi	r21, 0x44	; 68
    29c8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29cc:	dc 01       	movw	r26, r24
    29ce:	cb 01       	movw	r24, r22
    29d0:	8b a3       	std	Y+35, r24	; 0x23
    29d2:	9c a3       	std	Y+36, r25	; 0x24
    29d4:	ad a3       	std	Y+37, r26	; 0x25
    29d6:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    29d8:	6b a1       	ldd	r22, Y+35	; 0x23
    29da:	7c a1       	ldd	r23, Y+36	; 0x24
    29dc:	8d a1       	ldd	r24, Y+37	; 0x25
    29de:	9e a1       	ldd	r25, Y+38	; 0x26
    29e0:	20 e0       	ldi	r18, 0x00	; 0
    29e2:	30 e0       	ldi	r19, 0x00	; 0
    29e4:	40 e8       	ldi	r20, 0x80	; 128
    29e6:	5f e3       	ldi	r21, 0x3F	; 63
    29e8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    29ec:	88 23       	and	r24, r24
    29ee:	2c f4       	brge	.+10     	; 0x29fa <HLCD8_voidInit+0x150>
		__ticks = 1;
    29f0:	81 e0       	ldi	r24, 0x01	; 1
    29f2:	90 e0       	ldi	r25, 0x00	; 0
    29f4:	9a a3       	std	Y+34, r25	; 0x22
    29f6:	89 a3       	std	Y+33, r24	; 0x21
    29f8:	3f c0       	rjmp	.+126    	; 0x2a78 <HLCD8_voidInit+0x1ce>
	else if (__tmp > 65535)
    29fa:	6b a1       	ldd	r22, Y+35	; 0x23
    29fc:	7c a1       	ldd	r23, Y+36	; 0x24
    29fe:	8d a1       	ldd	r24, Y+37	; 0x25
    2a00:	9e a1       	ldd	r25, Y+38	; 0x26
    2a02:	20 e0       	ldi	r18, 0x00	; 0
    2a04:	3f ef       	ldi	r19, 0xFF	; 255
    2a06:	4f e7       	ldi	r20, 0x7F	; 127
    2a08:	57 e4       	ldi	r21, 0x47	; 71
    2a0a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2a0e:	18 16       	cp	r1, r24
    2a10:	4c f5       	brge	.+82     	; 0x2a64 <HLCD8_voidInit+0x1ba>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a12:	6f a1       	ldd	r22, Y+39	; 0x27
    2a14:	78 a5       	ldd	r23, Y+40	; 0x28
    2a16:	89 a5       	ldd	r24, Y+41	; 0x29
    2a18:	9a a5       	ldd	r25, Y+42	; 0x2a
    2a1a:	20 e0       	ldi	r18, 0x00	; 0
    2a1c:	30 e0       	ldi	r19, 0x00	; 0
    2a1e:	40 e2       	ldi	r20, 0x20	; 32
    2a20:	51 e4       	ldi	r21, 0x41	; 65
    2a22:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a26:	dc 01       	movw	r26, r24
    2a28:	cb 01       	movw	r24, r22
    2a2a:	bc 01       	movw	r22, r24
    2a2c:	cd 01       	movw	r24, r26
    2a2e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a32:	dc 01       	movw	r26, r24
    2a34:	cb 01       	movw	r24, r22
    2a36:	9a a3       	std	Y+34, r25	; 0x22
    2a38:	89 a3       	std	Y+33, r24	; 0x21
    2a3a:	0f c0       	rjmp	.+30     	; 0x2a5a <HLCD8_voidInit+0x1b0>
    2a3c:	88 ec       	ldi	r24, 0xC8	; 200
    2a3e:	90 e0       	ldi	r25, 0x00	; 0
    2a40:	98 a3       	std	Y+32, r25	; 0x20
    2a42:	8f 8f       	std	Y+31, r24	; 0x1f
    2a44:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2a46:	98 a1       	ldd	r25, Y+32	; 0x20
    2a48:	01 97       	sbiw	r24, 0x01	; 1
    2a4a:	f1 f7       	brne	.-4      	; 0x2a48 <HLCD8_voidInit+0x19e>
    2a4c:	98 a3       	std	Y+32, r25	; 0x20
    2a4e:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a50:	89 a1       	ldd	r24, Y+33	; 0x21
    2a52:	9a a1       	ldd	r25, Y+34	; 0x22
    2a54:	01 97       	sbiw	r24, 0x01	; 1
    2a56:	9a a3       	std	Y+34, r25	; 0x22
    2a58:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a5a:	89 a1       	ldd	r24, Y+33	; 0x21
    2a5c:	9a a1       	ldd	r25, Y+34	; 0x22
    2a5e:	00 97       	sbiw	r24, 0x00	; 0
    2a60:	69 f7       	brne	.-38     	; 0x2a3c <HLCD8_voidInit+0x192>
    2a62:	14 c0       	rjmp	.+40     	; 0x2a8c <HLCD8_voidInit+0x1e2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a64:	6b a1       	ldd	r22, Y+35	; 0x23
    2a66:	7c a1       	ldd	r23, Y+36	; 0x24
    2a68:	8d a1       	ldd	r24, Y+37	; 0x25
    2a6a:	9e a1       	ldd	r25, Y+38	; 0x26
    2a6c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a70:	dc 01       	movw	r26, r24
    2a72:	cb 01       	movw	r24, r22
    2a74:	9a a3       	std	Y+34, r25	; 0x22
    2a76:	89 a3       	std	Y+33, r24	; 0x21
    2a78:	89 a1       	ldd	r24, Y+33	; 0x21
    2a7a:	9a a1       	ldd	r25, Y+34	; 0x22
    2a7c:	9e 8f       	std	Y+30, r25	; 0x1e
    2a7e:	8d 8f       	std	Y+29, r24	; 0x1d
    2a80:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2a82:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2a84:	01 97       	sbiw	r24, 0x01	; 1
    2a86:	f1 f7       	brne	.-4      	; 0x2a84 <HLCD8_voidInit+0x1da>
    2a88:	9e 8f       	std	Y+30, r25	; 0x1e
    2a8a:	8d 8f       	std	Y+29, r24	; 0x1d
    _delay_ms(1);
    HLCD8_voidSendCommand(ON_OFF_CONTROL);
    2a8c:	8c e0       	ldi	r24, 0x0C	; 12
    2a8e:	0e 94 19 13 	call	0x2632	; 0x2632 <HLCD8_voidSendCommand>
    2a92:	80 e0       	ldi	r24, 0x00	; 0
    2a94:	90 e0       	ldi	r25, 0x00	; 0
    2a96:	a0 e8       	ldi	r26, 0x80	; 128
    2a98:	bf e3       	ldi	r27, 0x3F	; 63
    2a9a:	89 8f       	std	Y+25, r24	; 0x19
    2a9c:	9a 8f       	std	Y+26, r25	; 0x1a
    2a9e:	ab 8f       	std	Y+27, r26	; 0x1b
    2aa0:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2aa2:	69 8d       	ldd	r22, Y+25	; 0x19
    2aa4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2aa6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2aa8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2aaa:	20 e0       	ldi	r18, 0x00	; 0
    2aac:	30 e0       	ldi	r19, 0x00	; 0
    2aae:	4a ef       	ldi	r20, 0xFA	; 250
    2ab0:	54 e4       	ldi	r21, 0x44	; 68
    2ab2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ab6:	dc 01       	movw	r26, r24
    2ab8:	cb 01       	movw	r24, r22
    2aba:	8d 8b       	std	Y+21, r24	; 0x15
    2abc:	9e 8b       	std	Y+22, r25	; 0x16
    2abe:	af 8b       	std	Y+23, r26	; 0x17
    2ac0:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2ac2:	6d 89       	ldd	r22, Y+21	; 0x15
    2ac4:	7e 89       	ldd	r23, Y+22	; 0x16
    2ac6:	8f 89       	ldd	r24, Y+23	; 0x17
    2ac8:	98 8d       	ldd	r25, Y+24	; 0x18
    2aca:	20 e0       	ldi	r18, 0x00	; 0
    2acc:	30 e0       	ldi	r19, 0x00	; 0
    2ace:	40 e8       	ldi	r20, 0x80	; 128
    2ad0:	5f e3       	ldi	r21, 0x3F	; 63
    2ad2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2ad6:	88 23       	and	r24, r24
    2ad8:	2c f4       	brge	.+10     	; 0x2ae4 <HLCD8_voidInit+0x23a>
		__ticks = 1;
    2ada:	81 e0       	ldi	r24, 0x01	; 1
    2adc:	90 e0       	ldi	r25, 0x00	; 0
    2ade:	9c 8b       	std	Y+20, r25	; 0x14
    2ae0:	8b 8b       	std	Y+19, r24	; 0x13
    2ae2:	3f c0       	rjmp	.+126    	; 0x2b62 <HLCD8_voidInit+0x2b8>
	else if (__tmp > 65535)
    2ae4:	6d 89       	ldd	r22, Y+21	; 0x15
    2ae6:	7e 89       	ldd	r23, Y+22	; 0x16
    2ae8:	8f 89       	ldd	r24, Y+23	; 0x17
    2aea:	98 8d       	ldd	r25, Y+24	; 0x18
    2aec:	20 e0       	ldi	r18, 0x00	; 0
    2aee:	3f ef       	ldi	r19, 0xFF	; 255
    2af0:	4f e7       	ldi	r20, 0x7F	; 127
    2af2:	57 e4       	ldi	r21, 0x47	; 71
    2af4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2af8:	18 16       	cp	r1, r24
    2afa:	4c f5       	brge	.+82     	; 0x2b4e <HLCD8_voidInit+0x2a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2afc:	69 8d       	ldd	r22, Y+25	; 0x19
    2afe:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2b00:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2b02:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2b04:	20 e0       	ldi	r18, 0x00	; 0
    2b06:	30 e0       	ldi	r19, 0x00	; 0
    2b08:	40 e2       	ldi	r20, 0x20	; 32
    2b0a:	51 e4       	ldi	r21, 0x41	; 65
    2b0c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b10:	dc 01       	movw	r26, r24
    2b12:	cb 01       	movw	r24, r22
    2b14:	bc 01       	movw	r22, r24
    2b16:	cd 01       	movw	r24, r26
    2b18:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b1c:	dc 01       	movw	r26, r24
    2b1e:	cb 01       	movw	r24, r22
    2b20:	9c 8b       	std	Y+20, r25	; 0x14
    2b22:	8b 8b       	std	Y+19, r24	; 0x13
    2b24:	0f c0       	rjmp	.+30     	; 0x2b44 <HLCD8_voidInit+0x29a>
    2b26:	88 ec       	ldi	r24, 0xC8	; 200
    2b28:	90 e0       	ldi	r25, 0x00	; 0
    2b2a:	9a 8b       	std	Y+18, r25	; 0x12
    2b2c:	89 8b       	std	Y+17, r24	; 0x11
    2b2e:	89 89       	ldd	r24, Y+17	; 0x11
    2b30:	9a 89       	ldd	r25, Y+18	; 0x12
    2b32:	01 97       	sbiw	r24, 0x01	; 1
    2b34:	f1 f7       	brne	.-4      	; 0x2b32 <HLCD8_voidInit+0x288>
    2b36:	9a 8b       	std	Y+18, r25	; 0x12
    2b38:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b3a:	8b 89       	ldd	r24, Y+19	; 0x13
    2b3c:	9c 89       	ldd	r25, Y+20	; 0x14
    2b3e:	01 97       	sbiw	r24, 0x01	; 1
    2b40:	9c 8b       	std	Y+20, r25	; 0x14
    2b42:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b44:	8b 89       	ldd	r24, Y+19	; 0x13
    2b46:	9c 89       	ldd	r25, Y+20	; 0x14
    2b48:	00 97       	sbiw	r24, 0x00	; 0
    2b4a:	69 f7       	brne	.-38     	; 0x2b26 <HLCD8_voidInit+0x27c>
    2b4c:	14 c0       	rjmp	.+40     	; 0x2b76 <HLCD8_voidInit+0x2cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b4e:	6d 89       	ldd	r22, Y+21	; 0x15
    2b50:	7e 89       	ldd	r23, Y+22	; 0x16
    2b52:	8f 89       	ldd	r24, Y+23	; 0x17
    2b54:	98 8d       	ldd	r25, Y+24	; 0x18
    2b56:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b5a:	dc 01       	movw	r26, r24
    2b5c:	cb 01       	movw	r24, r22
    2b5e:	9c 8b       	std	Y+20, r25	; 0x14
    2b60:	8b 8b       	std	Y+19, r24	; 0x13
    2b62:	8b 89       	ldd	r24, Y+19	; 0x13
    2b64:	9c 89       	ldd	r25, Y+20	; 0x14
    2b66:	98 8b       	std	Y+16, r25	; 0x10
    2b68:	8f 87       	std	Y+15, r24	; 0x0f
    2b6a:	8f 85       	ldd	r24, Y+15	; 0x0f
    2b6c:	98 89       	ldd	r25, Y+16	; 0x10
    2b6e:	01 97       	sbiw	r24, 0x01	; 1
    2b70:	f1 f7       	brne	.-4      	; 0x2b6e <HLCD8_voidInit+0x2c4>
    2b72:	98 8b       	std	Y+16, r25	; 0x10
    2b74:	8f 87       	std	Y+15, r24	; 0x0f
    _delay_ms(1);
    HLCD8_voidSendCommand(DISPLAY_CLEAR);
    2b76:	81 e0       	ldi	r24, 0x01	; 1
    2b78:	0e 94 19 13 	call	0x2632	; 0x2632 <HLCD8_voidSendCommand>
    2b7c:	80 e0       	ldi	r24, 0x00	; 0
    2b7e:	90 e0       	ldi	r25, 0x00	; 0
    2b80:	a0 e0       	ldi	r26, 0x00	; 0
    2b82:	b0 e4       	ldi	r27, 0x40	; 64
    2b84:	8b 87       	std	Y+11, r24	; 0x0b
    2b86:	9c 87       	std	Y+12, r25	; 0x0c
    2b88:	ad 87       	std	Y+13, r26	; 0x0d
    2b8a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b8c:	6b 85       	ldd	r22, Y+11	; 0x0b
    2b8e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2b90:	8d 85       	ldd	r24, Y+13	; 0x0d
    2b92:	9e 85       	ldd	r25, Y+14	; 0x0e
    2b94:	20 e0       	ldi	r18, 0x00	; 0
    2b96:	30 e0       	ldi	r19, 0x00	; 0
    2b98:	4a ef       	ldi	r20, 0xFA	; 250
    2b9a:	54 e4       	ldi	r21, 0x44	; 68
    2b9c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ba0:	dc 01       	movw	r26, r24
    2ba2:	cb 01       	movw	r24, r22
    2ba4:	8f 83       	std	Y+7, r24	; 0x07
    2ba6:	98 87       	std	Y+8, r25	; 0x08
    2ba8:	a9 87       	std	Y+9, r26	; 0x09
    2baa:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2bac:	6f 81       	ldd	r22, Y+7	; 0x07
    2bae:	78 85       	ldd	r23, Y+8	; 0x08
    2bb0:	89 85       	ldd	r24, Y+9	; 0x09
    2bb2:	9a 85       	ldd	r25, Y+10	; 0x0a
    2bb4:	20 e0       	ldi	r18, 0x00	; 0
    2bb6:	30 e0       	ldi	r19, 0x00	; 0
    2bb8:	40 e8       	ldi	r20, 0x80	; 128
    2bba:	5f e3       	ldi	r21, 0x3F	; 63
    2bbc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2bc0:	88 23       	and	r24, r24
    2bc2:	2c f4       	brge	.+10     	; 0x2bce <HLCD8_voidInit+0x324>
		__ticks = 1;
    2bc4:	81 e0       	ldi	r24, 0x01	; 1
    2bc6:	90 e0       	ldi	r25, 0x00	; 0
    2bc8:	9e 83       	std	Y+6, r25	; 0x06
    2bca:	8d 83       	std	Y+5, r24	; 0x05
    2bcc:	3f c0       	rjmp	.+126    	; 0x2c4c <HLCD8_voidInit+0x3a2>
	else if (__tmp > 65535)
    2bce:	6f 81       	ldd	r22, Y+7	; 0x07
    2bd0:	78 85       	ldd	r23, Y+8	; 0x08
    2bd2:	89 85       	ldd	r24, Y+9	; 0x09
    2bd4:	9a 85       	ldd	r25, Y+10	; 0x0a
    2bd6:	20 e0       	ldi	r18, 0x00	; 0
    2bd8:	3f ef       	ldi	r19, 0xFF	; 255
    2bda:	4f e7       	ldi	r20, 0x7F	; 127
    2bdc:	57 e4       	ldi	r21, 0x47	; 71
    2bde:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2be2:	18 16       	cp	r1, r24
    2be4:	4c f5       	brge	.+82     	; 0x2c38 <HLCD8_voidInit+0x38e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2be6:	6b 85       	ldd	r22, Y+11	; 0x0b
    2be8:	7c 85       	ldd	r23, Y+12	; 0x0c
    2bea:	8d 85       	ldd	r24, Y+13	; 0x0d
    2bec:	9e 85       	ldd	r25, Y+14	; 0x0e
    2bee:	20 e0       	ldi	r18, 0x00	; 0
    2bf0:	30 e0       	ldi	r19, 0x00	; 0
    2bf2:	40 e2       	ldi	r20, 0x20	; 32
    2bf4:	51 e4       	ldi	r21, 0x41	; 65
    2bf6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2bfa:	dc 01       	movw	r26, r24
    2bfc:	cb 01       	movw	r24, r22
    2bfe:	bc 01       	movw	r22, r24
    2c00:	cd 01       	movw	r24, r26
    2c02:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c06:	dc 01       	movw	r26, r24
    2c08:	cb 01       	movw	r24, r22
    2c0a:	9e 83       	std	Y+6, r25	; 0x06
    2c0c:	8d 83       	std	Y+5, r24	; 0x05
    2c0e:	0f c0       	rjmp	.+30     	; 0x2c2e <HLCD8_voidInit+0x384>
    2c10:	88 ec       	ldi	r24, 0xC8	; 200
    2c12:	90 e0       	ldi	r25, 0x00	; 0
    2c14:	9c 83       	std	Y+4, r25	; 0x04
    2c16:	8b 83       	std	Y+3, r24	; 0x03
    2c18:	8b 81       	ldd	r24, Y+3	; 0x03
    2c1a:	9c 81       	ldd	r25, Y+4	; 0x04
    2c1c:	01 97       	sbiw	r24, 0x01	; 1
    2c1e:	f1 f7       	brne	.-4      	; 0x2c1c <HLCD8_voidInit+0x372>
    2c20:	9c 83       	std	Y+4, r25	; 0x04
    2c22:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c24:	8d 81       	ldd	r24, Y+5	; 0x05
    2c26:	9e 81       	ldd	r25, Y+6	; 0x06
    2c28:	01 97       	sbiw	r24, 0x01	; 1
    2c2a:	9e 83       	std	Y+6, r25	; 0x06
    2c2c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c2e:	8d 81       	ldd	r24, Y+5	; 0x05
    2c30:	9e 81       	ldd	r25, Y+6	; 0x06
    2c32:	00 97       	sbiw	r24, 0x00	; 0
    2c34:	69 f7       	brne	.-38     	; 0x2c10 <HLCD8_voidInit+0x366>
    2c36:	14 c0       	rjmp	.+40     	; 0x2c60 <HLCD8_voidInit+0x3b6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c38:	6f 81       	ldd	r22, Y+7	; 0x07
    2c3a:	78 85       	ldd	r23, Y+8	; 0x08
    2c3c:	89 85       	ldd	r24, Y+9	; 0x09
    2c3e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c40:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c44:	dc 01       	movw	r26, r24
    2c46:	cb 01       	movw	r24, r22
    2c48:	9e 83       	std	Y+6, r25	; 0x06
    2c4a:	8d 83       	std	Y+5, r24	; 0x05
    2c4c:	8d 81       	ldd	r24, Y+5	; 0x05
    2c4e:	9e 81       	ldd	r25, Y+6	; 0x06
    2c50:	9a 83       	std	Y+2, r25	; 0x02
    2c52:	89 83       	std	Y+1, r24	; 0x01
    2c54:	89 81       	ldd	r24, Y+1	; 0x01
    2c56:	9a 81       	ldd	r25, Y+2	; 0x02
    2c58:	01 97       	sbiw	r24, 0x01	; 1
    2c5a:	f1 f7       	brne	.-4      	; 0x2c58 <HLCD8_voidInit+0x3ae>
    2c5c:	9a 83       	std	Y+2, r25	; 0x02
    2c5e:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(2);
    HLCD8_voidSendCommand(ENTRY_MODE_SET);
    2c60:	86 e0       	ldi	r24, 0x06	; 6
    2c62:	0e 94 19 13 	call	0x2632	; 0x2632 <HLCD8_voidSendCommand>
}
    2c66:	e8 96       	adiw	r28, 0x38	; 56
    2c68:	0f b6       	in	r0, 0x3f	; 63
    2c6a:	f8 94       	cli
    2c6c:	de bf       	out	0x3e, r29	; 62
    2c6e:	0f be       	out	0x3f, r0	; 63
    2c70:	cd bf       	out	0x3d, r28	; 61
    2c72:	cf 91       	pop	r28
    2c74:	df 91       	pop	r29
    2c76:	08 95       	ret

00002c78 <HLCD8_voidClearDisplay>:

void HLCD8_voidClearDisplay(void)
{
    2c78:	df 93       	push	r29
    2c7a:	cf 93       	push	r28
    2c7c:	cd b7       	in	r28, 0x3d	; 61
    2c7e:	de b7       	in	r29, 0x3e	; 62
    2c80:	2e 97       	sbiw	r28, 0x0e	; 14
    2c82:	0f b6       	in	r0, 0x3f	; 63
    2c84:	f8 94       	cli
    2c86:	de bf       	out	0x3e, r29	; 62
    2c88:	0f be       	out	0x3f, r0	; 63
    2c8a:	cd bf       	out	0x3d, r28	; 61
    HLCD8_voidSendCommand(DISPLAY_CLEAR);
    2c8c:	81 e0       	ldi	r24, 0x01	; 1
    2c8e:	0e 94 19 13 	call	0x2632	; 0x2632 <HLCD8_voidSendCommand>
    2c92:	80 e0       	ldi	r24, 0x00	; 0
    2c94:	90 e0       	ldi	r25, 0x00	; 0
    2c96:	a0 e0       	ldi	r26, 0x00	; 0
    2c98:	b0 e4       	ldi	r27, 0x40	; 64
    2c9a:	8b 87       	std	Y+11, r24	; 0x0b
    2c9c:	9c 87       	std	Y+12, r25	; 0x0c
    2c9e:	ad 87       	std	Y+13, r26	; 0x0d
    2ca0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2ca2:	6b 85       	ldd	r22, Y+11	; 0x0b
    2ca4:	7c 85       	ldd	r23, Y+12	; 0x0c
    2ca6:	8d 85       	ldd	r24, Y+13	; 0x0d
    2ca8:	9e 85       	ldd	r25, Y+14	; 0x0e
    2caa:	20 e0       	ldi	r18, 0x00	; 0
    2cac:	30 e0       	ldi	r19, 0x00	; 0
    2cae:	4a ef       	ldi	r20, 0xFA	; 250
    2cb0:	54 e4       	ldi	r21, 0x44	; 68
    2cb2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2cb6:	dc 01       	movw	r26, r24
    2cb8:	cb 01       	movw	r24, r22
    2cba:	8f 83       	std	Y+7, r24	; 0x07
    2cbc:	98 87       	std	Y+8, r25	; 0x08
    2cbe:	a9 87       	std	Y+9, r26	; 0x09
    2cc0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2cc2:	6f 81       	ldd	r22, Y+7	; 0x07
    2cc4:	78 85       	ldd	r23, Y+8	; 0x08
    2cc6:	89 85       	ldd	r24, Y+9	; 0x09
    2cc8:	9a 85       	ldd	r25, Y+10	; 0x0a
    2cca:	20 e0       	ldi	r18, 0x00	; 0
    2ccc:	30 e0       	ldi	r19, 0x00	; 0
    2cce:	40 e8       	ldi	r20, 0x80	; 128
    2cd0:	5f e3       	ldi	r21, 0x3F	; 63
    2cd2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2cd6:	88 23       	and	r24, r24
    2cd8:	2c f4       	brge	.+10     	; 0x2ce4 <HLCD8_voidClearDisplay+0x6c>
		__ticks = 1;
    2cda:	81 e0       	ldi	r24, 0x01	; 1
    2cdc:	90 e0       	ldi	r25, 0x00	; 0
    2cde:	9e 83       	std	Y+6, r25	; 0x06
    2ce0:	8d 83       	std	Y+5, r24	; 0x05
    2ce2:	3f c0       	rjmp	.+126    	; 0x2d62 <HLCD8_voidClearDisplay+0xea>
	else if (__tmp > 65535)
    2ce4:	6f 81       	ldd	r22, Y+7	; 0x07
    2ce6:	78 85       	ldd	r23, Y+8	; 0x08
    2ce8:	89 85       	ldd	r24, Y+9	; 0x09
    2cea:	9a 85       	ldd	r25, Y+10	; 0x0a
    2cec:	20 e0       	ldi	r18, 0x00	; 0
    2cee:	3f ef       	ldi	r19, 0xFF	; 255
    2cf0:	4f e7       	ldi	r20, 0x7F	; 127
    2cf2:	57 e4       	ldi	r21, 0x47	; 71
    2cf4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2cf8:	18 16       	cp	r1, r24
    2cfa:	4c f5       	brge	.+82     	; 0x2d4e <HLCD8_voidClearDisplay+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2cfc:	6b 85       	ldd	r22, Y+11	; 0x0b
    2cfe:	7c 85       	ldd	r23, Y+12	; 0x0c
    2d00:	8d 85       	ldd	r24, Y+13	; 0x0d
    2d02:	9e 85       	ldd	r25, Y+14	; 0x0e
    2d04:	20 e0       	ldi	r18, 0x00	; 0
    2d06:	30 e0       	ldi	r19, 0x00	; 0
    2d08:	40 e2       	ldi	r20, 0x20	; 32
    2d0a:	51 e4       	ldi	r21, 0x41	; 65
    2d0c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d10:	dc 01       	movw	r26, r24
    2d12:	cb 01       	movw	r24, r22
    2d14:	bc 01       	movw	r22, r24
    2d16:	cd 01       	movw	r24, r26
    2d18:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d1c:	dc 01       	movw	r26, r24
    2d1e:	cb 01       	movw	r24, r22
    2d20:	9e 83       	std	Y+6, r25	; 0x06
    2d22:	8d 83       	std	Y+5, r24	; 0x05
    2d24:	0f c0       	rjmp	.+30     	; 0x2d44 <HLCD8_voidClearDisplay+0xcc>
    2d26:	88 ec       	ldi	r24, 0xC8	; 200
    2d28:	90 e0       	ldi	r25, 0x00	; 0
    2d2a:	9c 83       	std	Y+4, r25	; 0x04
    2d2c:	8b 83       	std	Y+3, r24	; 0x03
    2d2e:	8b 81       	ldd	r24, Y+3	; 0x03
    2d30:	9c 81       	ldd	r25, Y+4	; 0x04
    2d32:	01 97       	sbiw	r24, 0x01	; 1
    2d34:	f1 f7       	brne	.-4      	; 0x2d32 <HLCD8_voidClearDisplay+0xba>
    2d36:	9c 83       	std	Y+4, r25	; 0x04
    2d38:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d3a:	8d 81       	ldd	r24, Y+5	; 0x05
    2d3c:	9e 81       	ldd	r25, Y+6	; 0x06
    2d3e:	01 97       	sbiw	r24, 0x01	; 1
    2d40:	9e 83       	std	Y+6, r25	; 0x06
    2d42:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d44:	8d 81       	ldd	r24, Y+5	; 0x05
    2d46:	9e 81       	ldd	r25, Y+6	; 0x06
    2d48:	00 97       	sbiw	r24, 0x00	; 0
    2d4a:	69 f7       	brne	.-38     	; 0x2d26 <HLCD8_voidClearDisplay+0xae>
    2d4c:	14 c0       	rjmp	.+40     	; 0x2d76 <HLCD8_voidClearDisplay+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d4e:	6f 81       	ldd	r22, Y+7	; 0x07
    2d50:	78 85       	ldd	r23, Y+8	; 0x08
    2d52:	89 85       	ldd	r24, Y+9	; 0x09
    2d54:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d56:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d5a:	dc 01       	movw	r26, r24
    2d5c:	cb 01       	movw	r24, r22
    2d5e:	9e 83       	std	Y+6, r25	; 0x06
    2d60:	8d 83       	std	Y+5, r24	; 0x05
    2d62:	8d 81       	ldd	r24, Y+5	; 0x05
    2d64:	9e 81       	ldd	r25, Y+6	; 0x06
    2d66:	9a 83       	std	Y+2, r25	; 0x02
    2d68:	89 83       	std	Y+1, r24	; 0x01
    2d6a:	89 81       	ldd	r24, Y+1	; 0x01
    2d6c:	9a 81       	ldd	r25, Y+2	; 0x02
    2d6e:	01 97       	sbiw	r24, 0x01	; 1
    2d70:	f1 f7       	brne	.-4      	; 0x2d6e <HLCD8_voidClearDisplay+0xf6>
    2d72:	9a 83       	std	Y+2, r25	; 0x02
    2d74:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(2);
}
    2d76:	2e 96       	adiw	r28, 0x0e	; 14
    2d78:	0f b6       	in	r0, 0x3f	; 63
    2d7a:	f8 94       	cli
    2d7c:	de bf       	out	0x3e, r29	; 62
    2d7e:	0f be       	out	0x3f, r0	; 63
    2d80:	cd bf       	out	0x3d, r28	; 61
    2d82:	cf 91       	pop	r28
    2d84:	df 91       	pop	r29
    2d86:	08 95       	ret

00002d88 <HLCD8_voidSendString>:


void HLCD8_voidSendString(u8 * A_Pu8String)
{
    2d88:	df 93       	push	r29
    2d8a:	cf 93       	push	r28
    2d8c:	00 d0       	rcall	.+0      	; 0x2d8e <HLCD8_voidSendString+0x6>
    2d8e:	0f 92       	push	r0
    2d90:	cd b7       	in	r28, 0x3d	; 61
    2d92:	de b7       	in	r29, 0x3e	; 62
    2d94:	9b 83       	std	Y+3, r25	; 0x03
    2d96:	8a 83       	std	Y+2, r24	; 0x02
    u8 local_u8Couter=0;
    2d98:	19 82       	std	Y+1, r1	; 0x01
    2d9a:	0e c0       	rjmp	.+28     	; 0x2db8 <HLCD8_voidSendString+0x30>
    while (A_Pu8String[local_u8Couter]!='\0')
    {
        HLCD8_voidSendData(A_Pu8String[local_u8Couter]);
    2d9c:	89 81       	ldd	r24, Y+1	; 0x01
    2d9e:	28 2f       	mov	r18, r24
    2da0:	30 e0       	ldi	r19, 0x00	; 0
    2da2:	8a 81       	ldd	r24, Y+2	; 0x02
    2da4:	9b 81       	ldd	r25, Y+3	; 0x03
    2da6:	fc 01       	movw	r30, r24
    2da8:	e2 0f       	add	r30, r18
    2daa:	f3 1f       	adc	r31, r19
    2dac:	80 81       	ld	r24, Z
    2dae:	0e 94 b7 13 	call	0x276e	; 0x276e <HLCD8_voidSendData>
        local_u8Couter++;
    2db2:	89 81       	ldd	r24, Y+1	; 0x01
    2db4:	8f 5f       	subi	r24, 0xFF	; 255
    2db6:	89 83       	std	Y+1, r24	; 0x01


void HLCD8_voidSendString(u8 * A_Pu8String)
{
    u8 local_u8Couter=0;
    while (A_Pu8String[local_u8Couter]!='\0')
    2db8:	89 81       	ldd	r24, Y+1	; 0x01
    2dba:	28 2f       	mov	r18, r24
    2dbc:	30 e0       	ldi	r19, 0x00	; 0
    2dbe:	8a 81       	ldd	r24, Y+2	; 0x02
    2dc0:	9b 81       	ldd	r25, Y+3	; 0x03
    2dc2:	fc 01       	movw	r30, r24
    2dc4:	e2 0f       	add	r30, r18
    2dc6:	f3 1f       	adc	r31, r19
    2dc8:	80 81       	ld	r24, Z
    2dca:	88 23       	and	r24, r24
    2dcc:	39 f7       	brne	.-50     	; 0x2d9c <HLCD8_voidSendString+0x14>
    {
        HLCD8_voidSendData(A_Pu8String[local_u8Couter]);
        local_u8Couter++;
    }
    
}
    2dce:	0f 90       	pop	r0
    2dd0:	0f 90       	pop	r0
    2dd2:	0f 90       	pop	r0
    2dd4:	cf 91       	pop	r28
    2dd6:	df 91       	pop	r29
    2dd8:	08 95       	ret

00002dda <HLCD8_voidGoToPos>:

void HLCD8_voidGoToPos(u8 A_u8RowNum,u8 A_u8ColNum)
{
    2dda:	df 93       	push	r29
    2ddc:	cf 93       	push	r28
    2dde:	cd b7       	in	r28, 0x3d	; 61
    2de0:	de b7       	in	r29, 0x3e	; 62
    2de2:	63 97       	sbiw	r28, 0x13	; 19
    2de4:	0f b6       	in	r0, 0x3f	; 63
    2de6:	f8 94       	cli
    2de8:	de bf       	out	0x3e, r29	; 62
    2dea:	0f be       	out	0x3f, r0	; 63
    2dec:	cd bf       	out	0x3d, r28	; 61
    2dee:	88 8b       	std	Y+16, r24	; 0x10
    2df0:	69 8b       	std	Y+17, r22	; 0x11
    // }
    // _delay_ms(1);
    /************************************************************/ 
    //Second method
	u8 local_u8Address;
    switch(A_u8RowNum)
    2df2:	88 89       	ldd	r24, Y+16	; 0x10
    2df4:	28 2f       	mov	r18, r24
    2df6:	30 e0       	ldi	r19, 0x00	; 0
    2df8:	3b 8b       	std	Y+19, r19	; 0x13
    2dfa:	2a 8b       	std	Y+18, r18	; 0x12
    2dfc:	8a 89       	ldd	r24, Y+18	; 0x12
    2dfe:	9b 89       	ldd	r25, Y+19	; 0x13
    2e00:	81 30       	cpi	r24, 0x01	; 1
    2e02:	91 05       	cpc	r25, r1
    2e04:	31 f0       	breq	.+12     	; 0x2e12 <HLCD8_voidGoToPos+0x38>
    2e06:	2a 89       	ldd	r18, Y+18	; 0x12
    2e08:	3b 89       	ldd	r19, Y+19	; 0x13
    2e0a:	22 30       	cpi	r18, 0x02	; 2
    2e0c:	31 05       	cpc	r19, r1
    2e0e:	59 f0       	breq	.+22     	; 0x2e26 <HLCD8_voidGoToPos+0x4c>
    2e10:	13 c0       	rjmp	.+38     	; 0x2e38 <HLCD8_voidGoToPos+0x5e>
    {
        case LCD_ROW_ONE:
        local_u8Address=FIRST_ROW_ADDRESS + A_u8ColNum -1;
    2e12:	89 89       	ldd	r24, Y+17	; 0x11
    2e14:	81 50       	subi	r24, 0x01	; 1
    2e16:	8f 87       	std	Y+15, r24	; 0x0f
        SET_BIT(local_u8Address,PIN7);
    2e18:	8f 85       	ldd	r24, Y+15	; 0x0f
    2e1a:	80 68       	ori	r24, 0x80	; 128
    2e1c:	8f 87       	std	Y+15, r24	; 0x0f
        HLCD8_voidSendCommand(local_u8Address);
    2e1e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2e20:	0e 94 19 13 	call	0x2632	; 0x2632 <HLCD8_voidSendCommand>
    2e24:	09 c0       	rjmp	.+18     	; 0x2e38 <HLCD8_voidGoToPos+0x5e>
        break;

        case LCD_ROW_TWO:
        local_u8Address=SECOND_ROW_ADDRESS + A_u8ColNum;
    2e26:	89 89       	ldd	r24, Y+17	; 0x11
    2e28:	81 5c       	subi	r24, 0xC1	; 193
    2e2a:	8f 87       	std	Y+15, r24	; 0x0f
        SET_BIT(local_u8Address,PIN7);
    2e2c:	8f 85       	ldd	r24, Y+15	; 0x0f
    2e2e:	80 68       	ori	r24, 0x80	; 128
    2e30:	8f 87       	std	Y+15, r24	; 0x0f
        HLCD8_voidSendCommand(local_u8Address);
    2e32:	8f 85       	ldd	r24, Y+15	; 0x0f
    2e34:	0e 94 19 13 	call	0x2632	; 0x2632 <HLCD8_voidSendCommand>
    2e38:	80 e0       	ldi	r24, 0x00	; 0
    2e3a:	90 e0       	ldi	r25, 0x00	; 0
    2e3c:	a0 e8       	ldi	r26, 0x80	; 128
    2e3e:	bf e3       	ldi	r27, 0x3F	; 63
    2e40:	8b 87       	std	Y+11, r24	; 0x0b
    2e42:	9c 87       	std	Y+12, r25	; 0x0c
    2e44:	ad 87       	std	Y+13, r26	; 0x0d
    2e46:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2e48:	6b 85       	ldd	r22, Y+11	; 0x0b
    2e4a:	7c 85       	ldd	r23, Y+12	; 0x0c
    2e4c:	8d 85       	ldd	r24, Y+13	; 0x0d
    2e4e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2e50:	20 e0       	ldi	r18, 0x00	; 0
    2e52:	30 e0       	ldi	r19, 0x00	; 0
    2e54:	4a ef       	ldi	r20, 0xFA	; 250
    2e56:	54 e4       	ldi	r21, 0x44	; 68
    2e58:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e5c:	dc 01       	movw	r26, r24
    2e5e:	cb 01       	movw	r24, r22
    2e60:	8f 83       	std	Y+7, r24	; 0x07
    2e62:	98 87       	std	Y+8, r25	; 0x08
    2e64:	a9 87       	std	Y+9, r26	; 0x09
    2e66:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2e68:	6f 81       	ldd	r22, Y+7	; 0x07
    2e6a:	78 85       	ldd	r23, Y+8	; 0x08
    2e6c:	89 85       	ldd	r24, Y+9	; 0x09
    2e6e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e70:	20 e0       	ldi	r18, 0x00	; 0
    2e72:	30 e0       	ldi	r19, 0x00	; 0
    2e74:	40 e8       	ldi	r20, 0x80	; 128
    2e76:	5f e3       	ldi	r21, 0x3F	; 63
    2e78:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2e7c:	88 23       	and	r24, r24
    2e7e:	2c f4       	brge	.+10     	; 0x2e8a <HLCD8_voidGoToPos+0xb0>
		__ticks = 1;
    2e80:	81 e0       	ldi	r24, 0x01	; 1
    2e82:	90 e0       	ldi	r25, 0x00	; 0
    2e84:	9e 83       	std	Y+6, r25	; 0x06
    2e86:	8d 83       	std	Y+5, r24	; 0x05
    2e88:	3f c0       	rjmp	.+126    	; 0x2f08 <HLCD8_voidGoToPos+0x12e>
	else if (__tmp > 65535)
    2e8a:	6f 81       	ldd	r22, Y+7	; 0x07
    2e8c:	78 85       	ldd	r23, Y+8	; 0x08
    2e8e:	89 85       	ldd	r24, Y+9	; 0x09
    2e90:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e92:	20 e0       	ldi	r18, 0x00	; 0
    2e94:	3f ef       	ldi	r19, 0xFF	; 255
    2e96:	4f e7       	ldi	r20, 0x7F	; 127
    2e98:	57 e4       	ldi	r21, 0x47	; 71
    2e9a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2e9e:	18 16       	cp	r1, r24
    2ea0:	4c f5       	brge	.+82     	; 0x2ef4 <HLCD8_voidGoToPos+0x11a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ea2:	6b 85       	ldd	r22, Y+11	; 0x0b
    2ea4:	7c 85       	ldd	r23, Y+12	; 0x0c
    2ea6:	8d 85       	ldd	r24, Y+13	; 0x0d
    2ea8:	9e 85       	ldd	r25, Y+14	; 0x0e
    2eaa:	20 e0       	ldi	r18, 0x00	; 0
    2eac:	30 e0       	ldi	r19, 0x00	; 0
    2eae:	40 e2       	ldi	r20, 0x20	; 32
    2eb0:	51 e4       	ldi	r21, 0x41	; 65
    2eb2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2eb6:	dc 01       	movw	r26, r24
    2eb8:	cb 01       	movw	r24, r22
    2eba:	bc 01       	movw	r22, r24
    2ebc:	cd 01       	movw	r24, r26
    2ebe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ec2:	dc 01       	movw	r26, r24
    2ec4:	cb 01       	movw	r24, r22
    2ec6:	9e 83       	std	Y+6, r25	; 0x06
    2ec8:	8d 83       	std	Y+5, r24	; 0x05
    2eca:	0f c0       	rjmp	.+30     	; 0x2eea <HLCD8_voidGoToPos+0x110>
    2ecc:	88 ec       	ldi	r24, 0xC8	; 200
    2ece:	90 e0       	ldi	r25, 0x00	; 0
    2ed0:	9c 83       	std	Y+4, r25	; 0x04
    2ed2:	8b 83       	std	Y+3, r24	; 0x03
    2ed4:	8b 81       	ldd	r24, Y+3	; 0x03
    2ed6:	9c 81       	ldd	r25, Y+4	; 0x04
    2ed8:	01 97       	sbiw	r24, 0x01	; 1
    2eda:	f1 f7       	brne	.-4      	; 0x2ed8 <HLCD8_voidGoToPos+0xfe>
    2edc:	9c 83       	std	Y+4, r25	; 0x04
    2ede:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ee0:	8d 81       	ldd	r24, Y+5	; 0x05
    2ee2:	9e 81       	ldd	r25, Y+6	; 0x06
    2ee4:	01 97       	sbiw	r24, 0x01	; 1
    2ee6:	9e 83       	std	Y+6, r25	; 0x06
    2ee8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2eea:	8d 81       	ldd	r24, Y+5	; 0x05
    2eec:	9e 81       	ldd	r25, Y+6	; 0x06
    2eee:	00 97       	sbiw	r24, 0x00	; 0
    2ef0:	69 f7       	brne	.-38     	; 0x2ecc <HLCD8_voidGoToPos+0xf2>
    2ef2:	14 c0       	rjmp	.+40     	; 0x2f1c <HLCD8_voidGoToPos+0x142>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ef4:	6f 81       	ldd	r22, Y+7	; 0x07
    2ef6:	78 85       	ldd	r23, Y+8	; 0x08
    2ef8:	89 85       	ldd	r24, Y+9	; 0x09
    2efa:	9a 85       	ldd	r25, Y+10	; 0x0a
    2efc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f00:	dc 01       	movw	r26, r24
    2f02:	cb 01       	movw	r24, r22
    2f04:	9e 83       	std	Y+6, r25	; 0x06
    2f06:	8d 83       	std	Y+5, r24	; 0x05
    2f08:	8d 81       	ldd	r24, Y+5	; 0x05
    2f0a:	9e 81       	ldd	r25, Y+6	; 0x06
    2f0c:	9a 83       	std	Y+2, r25	; 0x02
    2f0e:	89 83       	std	Y+1, r24	; 0x01
    2f10:	89 81       	ldd	r24, Y+1	; 0x01
    2f12:	9a 81       	ldd	r25, Y+2	; 0x02
    2f14:	01 97       	sbiw	r24, 0x01	; 1
    2f16:	f1 f7       	brne	.-4      	; 0x2f14 <HLCD8_voidGoToPos+0x13a>
    2f18:	9a 83       	std	Y+2, r25	; 0x02
    2f1a:	89 83       	std	Y+1, r24	; 0x01
        break;

    }
    _delay_ms(1);

}
    2f1c:	63 96       	adiw	r28, 0x13	; 19
    2f1e:	0f b6       	in	r0, 0x3f	; 63
    2f20:	f8 94       	cli
    2f22:	de bf       	out	0x3e, r29	; 62
    2f24:	0f be       	out	0x3f, r0	; 63
    2f26:	cd bf       	out	0x3d, r28	; 61
    2f28:	cf 91       	pop	r28
    2f2a:	df 91       	pop	r29
    2f2c:	08 95       	ret

00002f2e <HLCD8_voidDisplayNumber>:

void HLCD8_voidDisplayNumber(u32 A_u32Number)
{
    2f2e:	df 93       	push	r29
    2f30:	cf 93       	push	r28
    2f32:	00 d0       	rcall	.+0      	; 0x2f34 <HLCD8_voidDisplayNumber+0x6>
    2f34:	00 d0       	rcall	.+0      	; 0x2f36 <HLCD8_voidDisplayNumber+0x8>
    2f36:	cd b7       	in	r28, 0x3d	; 61
    2f38:	de b7       	in	r29, 0x3e	; 62
    2f3a:	9c 83       	std	Y+4, r25	; 0x04
    2f3c:	8b 83       	std	Y+3, r24	; 0x03
    // u8 local_u8NumToStr[100];
    // itoa(A_u32Number,local_u8NumToStr,10);
    // HLCD8_voidSendString(local_u8NumToStr);
    //****************************************************//
    //third method: it will deal with zero unlike the first method so it's not problem here
    u32 local_u32Number=1;
    2f3e:	81 e0       	ldi	r24, 0x01	; 1
    2f40:	90 e0       	ldi	r25, 0x00	; 0
    2f42:	9a 83       	std	Y+2, r25	; 0x02
    2f44:	89 83       	std	Y+1, r24	; 0x01
    if(A_u32Number==0)
    2f46:	8b 81       	ldd	r24, Y+3	; 0x03
    2f48:	9c 81       	ldd	r25, Y+4	; 0x04
    2f4a:	00 97       	sbiw	r24, 0x00	; 0
    2f4c:	31 f5       	brne	.+76     	; 0x2f9a <HLCD8_voidDisplayNumber+0x6c>
    {
        HLCD8_voidSendData('0');
    2f4e:	80 e3       	ldi	r24, 0x30	; 48
    2f50:	0e 94 b7 13 	call	0x276e	; 0x276e <HLCD8_voidSendData>
    2f54:	22 c0       	rjmp	.+68     	; 0x2f9a <HLCD8_voidDisplayNumber+0x6c>
    }   
    while(A_u32Number !=0)
    {
            local_u32Number=((local_u32Number * 10)+(A_u32Number%10));
    2f56:	89 81       	ldd	r24, Y+1	; 0x01
    2f58:	9a 81       	ldd	r25, Y+2	; 0x02
    2f5a:	9c 01       	movw	r18, r24
    2f5c:	22 0f       	add	r18, r18
    2f5e:	33 1f       	adc	r19, r19
    2f60:	c9 01       	movw	r24, r18
    2f62:	88 0f       	add	r24, r24
    2f64:	99 1f       	adc	r25, r25
    2f66:	88 0f       	add	r24, r24
    2f68:	99 1f       	adc	r25, r25
    2f6a:	f9 01       	movw	r30, r18
    2f6c:	e8 0f       	add	r30, r24
    2f6e:	f9 1f       	adc	r31, r25
    2f70:	8b 81       	ldd	r24, Y+3	; 0x03
    2f72:	9c 81       	ldd	r25, Y+4	; 0x04
    2f74:	2a e0       	ldi	r18, 0x0A	; 10
    2f76:	30 e0       	ldi	r19, 0x00	; 0
    2f78:	b9 01       	movw	r22, r18
    2f7a:	0e 94 bc 1b 	call	0x3778	; 0x3778 <__udivmodhi4>
    2f7e:	8e 0f       	add	r24, r30
    2f80:	9f 1f       	adc	r25, r31
    2f82:	9a 83       	std	Y+2, r25	; 0x02
    2f84:	89 83       	std	Y+1, r24	; 0x01
            A_u32Number=A_u32Number/10;
    2f86:	8b 81       	ldd	r24, Y+3	; 0x03
    2f88:	9c 81       	ldd	r25, Y+4	; 0x04
    2f8a:	2a e0       	ldi	r18, 0x0A	; 10
    2f8c:	30 e0       	ldi	r19, 0x00	; 0
    2f8e:	b9 01       	movw	r22, r18
    2f90:	0e 94 bc 1b 	call	0x3778	; 0x3778 <__udivmodhi4>
    2f94:	cb 01       	movw	r24, r22
    2f96:	9c 83       	std	Y+4, r25	; 0x04
    2f98:	8b 83       	std	Y+3, r24	; 0x03
    u32 local_u32Number=1;
    if(A_u32Number==0)
    {
        HLCD8_voidSendData('0');
    }   
    while(A_u32Number !=0)
    2f9a:	8b 81       	ldd	r24, Y+3	; 0x03
    2f9c:	9c 81       	ldd	r25, Y+4	; 0x04
    2f9e:	00 97       	sbiw	r24, 0x00	; 0
    2fa0:	d1 f6       	brne	.-76     	; 0x2f56 <HLCD8_voidDisplayNumber+0x28>
    2fa2:	14 c0       	rjmp	.+40     	; 0x2fcc <HLCD8_voidDisplayNumber+0x9e>
            A_u32Number=A_u32Number/10;

    }
    while (local_u32Number!=1)
    {
        HLCD8_voidSendData((local_u32Number%10)+48);
    2fa4:	89 81       	ldd	r24, Y+1	; 0x01
    2fa6:	9a 81       	ldd	r25, Y+2	; 0x02
    2fa8:	2a e0       	ldi	r18, 0x0A	; 10
    2faa:	30 e0       	ldi	r19, 0x00	; 0
    2fac:	b9 01       	movw	r22, r18
    2fae:	0e 94 bc 1b 	call	0x3778	; 0x3778 <__udivmodhi4>
    2fb2:	80 5d       	subi	r24, 0xD0	; 208
    2fb4:	0e 94 b7 13 	call	0x276e	; 0x276e <HLCD8_voidSendData>
        local_u32Number=local_u32Number/10;
    2fb8:	89 81       	ldd	r24, Y+1	; 0x01
    2fba:	9a 81       	ldd	r25, Y+2	; 0x02
    2fbc:	2a e0       	ldi	r18, 0x0A	; 10
    2fbe:	30 e0       	ldi	r19, 0x00	; 0
    2fc0:	b9 01       	movw	r22, r18
    2fc2:	0e 94 bc 1b 	call	0x3778	; 0x3778 <__udivmodhi4>
    2fc6:	cb 01       	movw	r24, r22
    2fc8:	9a 83       	std	Y+2, r25	; 0x02
    2fca:	89 83       	std	Y+1, r24	; 0x01
    {
            local_u32Number=((local_u32Number * 10)+(A_u32Number%10));
            A_u32Number=A_u32Number/10;

    }
    while (local_u32Number!=1)
    2fcc:	89 81       	ldd	r24, Y+1	; 0x01
    2fce:	9a 81       	ldd	r25, Y+2	; 0x02
    2fd0:	81 30       	cpi	r24, 0x01	; 1
    2fd2:	91 05       	cpc	r25, r1
    2fd4:	39 f7       	brne	.-50     	; 0x2fa4 <HLCD8_voidDisplayNumber+0x76>
    {
        HLCD8_voidSendData((local_u32Number%10)+48);
        local_u32Number=local_u32Number/10;
    }
}
    2fd6:	0f 90       	pop	r0
    2fd8:	0f 90       	pop	r0
    2fda:	0f 90       	pop	r0
    2fdc:	0f 90       	pop	r0
    2fde:	cf 91       	pop	r28
    2fe0:	df 91       	pop	r29
    2fe2:	08 95       	ret

00002fe4 <HLCD8_voidStoreCustomChar>:

void HLCD8_voidStoreCustomChar(u8 * A_u8Pattern,u8 A_u8CGRAMIndex)
{
    2fe4:	df 93       	push	r29
    2fe6:	cf 93       	push	r28
    2fe8:	cd b7       	in	r28, 0x3d	; 61
    2fea:	de b7       	in	r29, 0x3e	; 62
    2fec:	ab 97       	sbiw	r28, 0x2b	; 43
    2fee:	0f b6       	in	r0, 0x3f	; 63
    2ff0:	f8 94       	cli
    2ff2:	de bf       	out	0x3e, r29	; 62
    2ff4:	0f be       	out	0x3f, r0	; 63
    2ff6:	cd bf       	out	0x3d, r28	; 61
    2ff8:	9a a7       	std	Y+42, r25	; 0x2a
    2ffa:	89 a7       	std	Y+41, r24	; 0x29
    2ffc:	6b a7       	std	Y+43, r22	; 0x2b
    u8 local_u8Address;
    if(A_u8CGRAMIndex<8)
    2ffe:	8b a5       	ldd	r24, Y+43	; 0x2b
    3000:	88 30       	cpi	r24, 0x08	; 8
    3002:	08 f0       	brcs	.+2      	; 0x3006 <HLCD8_voidStoreCustomChar+0x22>
    3004:	e5 c0       	rjmp	.+458    	; 0x31d0 <HLCD8_voidStoreCustomChar+0x1ec>
    {
        A_u8CGRAMIndex=A_u8CGRAMIndex*8;
    3006:	8b a5       	ldd	r24, Y+43	; 0x2b
    3008:	88 2f       	mov	r24, r24
    300a:	90 e0       	ldi	r25, 0x00	; 0
    300c:	88 0f       	add	r24, r24
    300e:	99 1f       	adc	r25, r25
    3010:	88 0f       	add	r24, r24
    3012:	99 1f       	adc	r25, r25
    3014:	88 0f       	add	r24, r24
    3016:	99 1f       	adc	r25, r25
    3018:	8b a7       	std	Y+43, r24	; 0x2b
        SET_BIT(A_u8CGRAMIndex,PIN6);
    301a:	8b a5       	ldd	r24, Y+43	; 0x2b
    301c:	80 64       	ori	r24, 0x40	; 64
    301e:	8b a7       	std	Y+43, r24	; 0x2b
        CLR_BIT(A_u8CGRAMIndex,PIN7);
    3020:	8b a5       	ldd	r24, Y+43	; 0x2b
    3022:	8f 77       	andi	r24, 0x7F	; 127
    3024:	8b a7       	std	Y+43, r24	; 0x2b
        HLCD8_voidSendCommand(A_u8CGRAMIndex);
    3026:	8b a5       	ldd	r24, Y+43	; 0x2b
    3028:	0e 94 19 13 	call	0x2632	; 0x2632 <HLCD8_voidSendCommand>
        for(u8 i=0;i<8;i++)
    302c:	1f a2       	std	Y+39, r1	; 0x27
    302e:	cc c0       	rjmp	.+408    	; 0x31c8 <HLCD8_voidStoreCustomChar+0x1e4>
        {
            HLCD8_voidSendData(A_u8Pattern[i]);
    3030:	8f a1       	ldd	r24, Y+39	; 0x27
    3032:	28 2f       	mov	r18, r24
    3034:	30 e0       	ldi	r19, 0x00	; 0
    3036:	89 a5       	ldd	r24, Y+41	; 0x29
    3038:	9a a5       	ldd	r25, Y+42	; 0x2a
    303a:	fc 01       	movw	r30, r24
    303c:	e2 0f       	add	r30, r18
    303e:	f3 1f       	adc	r31, r19
    3040:	80 81       	ld	r24, Z
    3042:	0e 94 b7 13 	call	0x276e	; 0x276e <HLCD8_voidSendData>
    3046:	80 e0       	ldi	r24, 0x00	; 0
    3048:	90 e0       	ldi	r25, 0x00	; 0
    304a:	a0 e7       	ldi	r26, 0x70	; 112
    304c:	b2 e4       	ldi	r27, 0x42	; 66
    304e:	8b a3       	std	Y+35, r24	; 0x23
    3050:	9c a3       	std	Y+36, r25	; 0x24
    3052:	ad a3       	std	Y+37, r26	; 0x25
    3054:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    3056:	6b a1       	ldd	r22, Y+35	; 0x23
    3058:	7c a1       	ldd	r23, Y+36	; 0x24
    305a:	8d a1       	ldd	r24, Y+37	; 0x25
    305c:	9e a1       	ldd	r25, Y+38	; 0x26
    305e:	2b ea       	ldi	r18, 0xAB	; 171
    3060:	3a ea       	ldi	r19, 0xAA	; 170
    3062:	4a e2       	ldi	r20, 0x2A	; 42
    3064:	50 e4       	ldi	r21, 0x40	; 64
    3066:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    306a:	dc 01       	movw	r26, r24
    306c:	cb 01       	movw	r24, r22
    306e:	8f 8f       	std	Y+31, r24	; 0x1f
    3070:	98 a3       	std	Y+32, r25	; 0x20
    3072:	a9 a3       	std	Y+33, r26	; 0x21
    3074:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    3076:	6f 8d       	ldd	r22, Y+31	; 0x1f
    3078:	78 a1       	ldd	r23, Y+32	; 0x20
    307a:	89 a1       	ldd	r24, Y+33	; 0x21
    307c:	9a a1       	ldd	r25, Y+34	; 0x22
    307e:	20 e0       	ldi	r18, 0x00	; 0
    3080:	30 e0       	ldi	r19, 0x00	; 0
    3082:	40 e8       	ldi	r20, 0x80	; 128
    3084:	5f e3       	ldi	r21, 0x3F	; 63
    3086:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    308a:	88 23       	and	r24, r24
    308c:	1c f4       	brge	.+6      	; 0x3094 <HLCD8_voidStoreCustomChar+0xb0>
		__ticks = 1;
    308e:	81 e0       	ldi	r24, 0x01	; 1
    3090:	8e 8f       	std	Y+30, r24	; 0x1e
    3092:	91 c0       	rjmp	.+290    	; 0x31b6 <HLCD8_voidStoreCustomChar+0x1d2>
	else if (__tmp > 255)
    3094:	6f 8d       	ldd	r22, Y+31	; 0x1f
    3096:	78 a1       	ldd	r23, Y+32	; 0x20
    3098:	89 a1       	ldd	r24, Y+33	; 0x21
    309a:	9a a1       	ldd	r25, Y+34	; 0x22
    309c:	20 e0       	ldi	r18, 0x00	; 0
    309e:	30 e0       	ldi	r19, 0x00	; 0
    30a0:	4f e7       	ldi	r20, 0x7F	; 127
    30a2:	53 e4       	ldi	r21, 0x43	; 67
    30a4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    30a8:	18 16       	cp	r1, r24
    30aa:	0c f0       	brlt	.+2      	; 0x30ae <HLCD8_voidStoreCustomChar+0xca>
    30ac:	7b c0       	rjmp	.+246    	; 0x31a4 <HLCD8_voidStoreCustomChar+0x1c0>
	{
		_delay_ms(__us / 1000.0);
    30ae:	6b a1       	ldd	r22, Y+35	; 0x23
    30b0:	7c a1       	ldd	r23, Y+36	; 0x24
    30b2:	8d a1       	ldd	r24, Y+37	; 0x25
    30b4:	9e a1       	ldd	r25, Y+38	; 0x26
    30b6:	20 e0       	ldi	r18, 0x00	; 0
    30b8:	30 e0       	ldi	r19, 0x00	; 0
    30ba:	4a e7       	ldi	r20, 0x7A	; 122
    30bc:	54 e4       	ldi	r21, 0x44	; 68
    30be:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    30c2:	dc 01       	movw	r26, r24
    30c4:	cb 01       	movw	r24, r22
    30c6:	8a 8f       	std	Y+26, r24	; 0x1a
    30c8:	9b 8f       	std	Y+27, r25	; 0x1b
    30ca:	ac 8f       	std	Y+28, r26	; 0x1c
    30cc:	bd 8f       	std	Y+29, r27	; 0x1d
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    30ce:	6a 8d       	ldd	r22, Y+26	; 0x1a
    30d0:	7b 8d       	ldd	r23, Y+27	; 0x1b
    30d2:	8c 8d       	ldd	r24, Y+28	; 0x1c
    30d4:	9d 8d       	ldd	r25, Y+29	; 0x1d
    30d6:	20 e0       	ldi	r18, 0x00	; 0
    30d8:	30 e0       	ldi	r19, 0x00	; 0
    30da:	4a ef       	ldi	r20, 0xFA	; 250
    30dc:	54 e4       	ldi	r21, 0x44	; 68
    30de:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    30e2:	dc 01       	movw	r26, r24
    30e4:	cb 01       	movw	r24, r22
    30e6:	8e 8b       	std	Y+22, r24	; 0x16
    30e8:	9f 8b       	std	Y+23, r25	; 0x17
    30ea:	a8 8f       	std	Y+24, r26	; 0x18
    30ec:	b9 8f       	std	Y+25, r27	; 0x19
	if (__tmp < 1.0)
    30ee:	6e 89       	ldd	r22, Y+22	; 0x16
    30f0:	7f 89       	ldd	r23, Y+23	; 0x17
    30f2:	88 8d       	ldd	r24, Y+24	; 0x18
    30f4:	99 8d       	ldd	r25, Y+25	; 0x19
    30f6:	20 e0       	ldi	r18, 0x00	; 0
    30f8:	30 e0       	ldi	r19, 0x00	; 0
    30fa:	40 e8       	ldi	r20, 0x80	; 128
    30fc:	5f e3       	ldi	r21, 0x3F	; 63
    30fe:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3102:	88 23       	and	r24, r24
    3104:	2c f4       	brge	.+10     	; 0x3110 <HLCD8_voidStoreCustomChar+0x12c>
		__ticks = 1;
    3106:	81 e0       	ldi	r24, 0x01	; 1
    3108:	90 e0       	ldi	r25, 0x00	; 0
    310a:	9d 8b       	std	Y+21, r25	; 0x15
    310c:	8c 8b       	std	Y+20, r24	; 0x14
    310e:	3f c0       	rjmp	.+126    	; 0x318e <HLCD8_voidStoreCustomChar+0x1aa>
	else if (__tmp > 65535)
    3110:	6e 89       	ldd	r22, Y+22	; 0x16
    3112:	7f 89       	ldd	r23, Y+23	; 0x17
    3114:	88 8d       	ldd	r24, Y+24	; 0x18
    3116:	99 8d       	ldd	r25, Y+25	; 0x19
    3118:	20 e0       	ldi	r18, 0x00	; 0
    311a:	3f ef       	ldi	r19, 0xFF	; 255
    311c:	4f e7       	ldi	r20, 0x7F	; 127
    311e:	57 e4       	ldi	r21, 0x47	; 71
    3120:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3124:	18 16       	cp	r1, r24
    3126:	4c f5       	brge	.+82     	; 0x317a <HLCD8_voidStoreCustomChar+0x196>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3128:	6a 8d       	ldd	r22, Y+26	; 0x1a
    312a:	7b 8d       	ldd	r23, Y+27	; 0x1b
    312c:	8c 8d       	ldd	r24, Y+28	; 0x1c
    312e:	9d 8d       	ldd	r25, Y+29	; 0x1d
    3130:	20 e0       	ldi	r18, 0x00	; 0
    3132:	30 e0       	ldi	r19, 0x00	; 0
    3134:	40 e2       	ldi	r20, 0x20	; 32
    3136:	51 e4       	ldi	r21, 0x41	; 65
    3138:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    313c:	dc 01       	movw	r26, r24
    313e:	cb 01       	movw	r24, r22
    3140:	bc 01       	movw	r22, r24
    3142:	cd 01       	movw	r24, r26
    3144:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3148:	dc 01       	movw	r26, r24
    314a:	cb 01       	movw	r24, r22
    314c:	9d 8b       	std	Y+21, r25	; 0x15
    314e:	8c 8b       	std	Y+20, r24	; 0x14
    3150:	0f c0       	rjmp	.+30     	; 0x3170 <HLCD8_voidStoreCustomChar+0x18c>
    3152:	88 ec       	ldi	r24, 0xC8	; 200
    3154:	90 e0       	ldi	r25, 0x00	; 0
    3156:	9b 8b       	std	Y+19, r25	; 0x13
    3158:	8a 8b       	std	Y+18, r24	; 0x12
    315a:	8a 89       	ldd	r24, Y+18	; 0x12
    315c:	9b 89       	ldd	r25, Y+19	; 0x13
    315e:	01 97       	sbiw	r24, 0x01	; 1
    3160:	f1 f7       	brne	.-4      	; 0x315e <HLCD8_voidStoreCustomChar+0x17a>
    3162:	9b 8b       	std	Y+19, r25	; 0x13
    3164:	8a 8b       	std	Y+18, r24	; 0x12
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3166:	8c 89       	ldd	r24, Y+20	; 0x14
    3168:	9d 89       	ldd	r25, Y+21	; 0x15
    316a:	01 97       	sbiw	r24, 0x01	; 1
    316c:	9d 8b       	std	Y+21, r25	; 0x15
    316e:	8c 8b       	std	Y+20, r24	; 0x14
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3170:	8c 89       	ldd	r24, Y+20	; 0x14
    3172:	9d 89       	ldd	r25, Y+21	; 0x15
    3174:	00 97       	sbiw	r24, 0x00	; 0
    3176:	69 f7       	brne	.-38     	; 0x3152 <HLCD8_voidStoreCustomChar+0x16e>
    3178:	24 c0       	rjmp	.+72     	; 0x31c2 <HLCD8_voidStoreCustomChar+0x1de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    317a:	6e 89       	ldd	r22, Y+22	; 0x16
    317c:	7f 89       	ldd	r23, Y+23	; 0x17
    317e:	88 8d       	ldd	r24, Y+24	; 0x18
    3180:	99 8d       	ldd	r25, Y+25	; 0x19
    3182:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3186:	dc 01       	movw	r26, r24
    3188:	cb 01       	movw	r24, r22
    318a:	9d 8b       	std	Y+21, r25	; 0x15
    318c:	8c 8b       	std	Y+20, r24	; 0x14
    318e:	8c 89       	ldd	r24, Y+20	; 0x14
    3190:	9d 89       	ldd	r25, Y+21	; 0x15
    3192:	99 8b       	std	Y+17, r25	; 0x11
    3194:	88 8b       	std	Y+16, r24	; 0x10
    3196:	88 89       	ldd	r24, Y+16	; 0x10
    3198:	99 89       	ldd	r25, Y+17	; 0x11
    319a:	01 97       	sbiw	r24, 0x01	; 1
    319c:	f1 f7       	brne	.-4      	; 0x319a <HLCD8_voidStoreCustomChar+0x1b6>
    319e:	99 8b       	std	Y+17, r25	; 0x11
    31a0:	88 8b       	std	Y+16, r24	; 0x10
    31a2:	0f c0       	rjmp	.+30     	; 0x31c2 <HLCD8_voidStoreCustomChar+0x1de>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    31a4:	6f 8d       	ldd	r22, Y+31	; 0x1f
    31a6:	78 a1       	ldd	r23, Y+32	; 0x20
    31a8:	89 a1       	ldd	r24, Y+33	; 0x21
    31aa:	9a a1       	ldd	r25, Y+34	; 0x22
    31ac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    31b0:	dc 01       	movw	r26, r24
    31b2:	cb 01       	movw	r24, r22
    31b4:	8e 8f       	std	Y+30, r24	; 0x1e
    31b6:	8e 8d       	ldd	r24, Y+30	; 0x1e
    31b8:	8f 87       	std	Y+15, r24	; 0x0f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    31ba:	8f 85       	ldd	r24, Y+15	; 0x0f
    31bc:	8a 95       	dec	r24
    31be:	f1 f7       	brne	.-4      	; 0x31bc <HLCD8_voidStoreCustomChar+0x1d8>
    31c0:	8f 87       	std	Y+15, r24	; 0x0f
    {
        A_u8CGRAMIndex=A_u8CGRAMIndex*8;
        SET_BIT(A_u8CGRAMIndex,PIN6);
        CLR_BIT(A_u8CGRAMIndex,PIN7);
        HLCD8_voidSendCommand(A_u8CGRAMIndex);
        for(u8 i=0;i<8;i++)
    31c2:	8f a1       	ldd	r24, Y+39	; 0x27
    31c4:	8f 5f       	subi	r24, 0xFF	; 255
    31c6:	8f a3       	std	Y+39, r24	; 0x27
    31c8:	8f a1       	ldd	r24, Y+39	; 0x27
    31ca:	88 30       	cpi	r24, 0x08	; 8
    31cc:	08 f4       	brcc	.+2      	; 0x31d0 <HLCD8_voidStoreCustomChar+0x1ec>
    31ce:	30 cf       	rjmp	.-416    	; 0x3030 <HLCD8_voidStoreCustomChar+0x4c>
        {
            HLCD8_voidSendData(A_u8Pattern[i]);
            _delay_us(60);
        }
    }
    HLCD8_voidSendCommand(RETURN_HOME);
    31d0:	82 e0       	ldi	r24, 0x02	; 2
    31d2:	0e 94 19 13 	call	0x2632	; 0x2632 <HLCD8_voidSendCommand>
    31d6:	80 e0       	ldi	r24, 0x00	; 0
    31d8:	90 e0       	ldi	r25, 0x00	; 0
    31da:	a0 e0       	ldi	r26, 0x00	; 0
    31dc:	b0 e4       	ldi	r27, 0x40	; 64
    31de:	8b 87       	std	Y+11, r24	; 0x0b
    31e0:	9c 87       	std	Y+12, r25	; 0x0c
    31e2:	ad 87       	std	Y+13, r26	; 0x0d
    31e4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    31e6:	6b 85       	ldd	r22, Y+11	; 0x0b
    31e8:	7c 85       	ldd	r23, Y+12	; 0x0c
    31ea:	8d 85       	ldd	r24, Y+13	; 0x0d
    31ec:	9e 85       	ldd	r25, Y+14	; 0x0e
    31ee:	20 e0       	ldi	r18, 0x00	; 0
    31f0:	30 e0       	ldi	r19, 0x00	; 0
    31f2:	4a ef       	ldi	r20, 0xFA	; 250
    31f4:	54 e4       	ldi	r21, 0x44	; 68
    31f6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    31fa:	dc 01       	movw	r26, r24
    31fc:	cb 01       	movw	r24, r22
    31fe:	8f 83       	std	Y+7, r24	; 0x07
    3200:	98 87       	std	Y+8, r25	; 0x08
    3202:	a9 87       	std	Y+9, r26	; 0x09
    3204:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3206:	6f 81       	ldd	r22, Y+7	; 0x07
    3208:	78 85       	ldd	r23, Y+8	; 0x08
    320a:	89 85       	ldd	r24, Y+9	; 0x09
    320c:	9a 85       	ldd	r25, Y+10	; 0x0a
    320e:	20 e0       	ldi	r18, 0x00	; 0
    3210:	30 e0       	ldi	r19, 0x00	; 0
    3212:	40 e8       	ldi	r20, 0x80	; 128
    3214:	5f e3       	ldi	r21, 0x3F	; 63
    3216:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    321a:	88 23       	and	r24, r24
    321c:	2c f4       	brge	.+10     	; 0x3228 <HLCD8_voidStoreCustomChar+0x244>
		__ticks = 1;
    321e:	81 e0       	ldi	r24, 0x01	; 1
    3220:	90 e0       	ldi	r25, 0x00	; 0
    3222:	9e 83       	std	Y+6, r25	; 0x06
    3224:	8d 83       	std	Y+5, r24	; 0x05
    3226:	3f c0       	rjmp	.+126    	; 0x32a6 <HLCD8_voidStoreCustomChar+0x2c2>
	else if (__tmp > 65535)
    3228:	6f 81       	ldd	r22, Y+7	; 0x07
    322a:	78 85       	ldd	r23, Y+8	; 0x08
    322c:	89 85       	ldd	r24, Y+9	; 0x09
    322e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3230:	20 e0       	ldi	r18, 0x00	; 0
    3232:	3f ef       	ldi	r19, 0xFF	; 255
    3234:	4f e7       	ldi	r20, 0x7F	; 127
    3236:	57 e4       	ldi	r21, 0x47	; 71
    3238:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    323c:	18 16       	cp	r1, r24
    323e:	4c f5       	brge	.+82     	; 0x3292 <HLCD8_voidStoreCustomChar+0x2ae>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3240:	6b 85       	ldd	r22, Y+11	; 0x0b
    3242:	7c 85       	ldd	r23, Y+12	; 0x0c
    3244:	8d 85       	ldd	r24, Y+13	; 0x0d
    3246:	9e 85       	ldd	r25, Y+14	; 0x0e
    3248:	20 e0       	ldi	r18, 0x00	; 0
    324a:	30 e0       	ldi	r19, 0x00	; 0
    324c:	40 e2       	ldi	r20, 0x20	; 32
    324e:	51 e4       	ldi	r21, 0x41	; 65
    3250:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3254:	dc 01       	movw	r26, r24
    3256:	cb 01       	movw	r24, r22
    3258:	bc 01       	movw	r22, r24
    325a:	cd 01       	movw	r24, r26
    325c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3260:	dc 01       	movw	r26, r24
    3262:	cb 01       	movw	r24, r22
    3264:	9e 83       	std	Y+6, r25	; 0x06
    3266:	8d 83       	std	Y+5, r24	; 0x05
    3268:	0f c0       	rjmp	.+30     	; 0x3288 <HLCD8_voidStoreCustomChar+0x2a4>
    326a:	88 ec       	ldi	r24, 0xC8	; 200
    326c:	90 e0       	ldi	r25, 0x00	; 0
    326e:	9c 83       	std	Y+4, r25	; 0x04
    3270:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3272:	8b 81       	ldd	r24, Y+3	; 0x03
    3274:	9c 81       	ldd	r25, Y+4	; 0x04
    3276:	01 97       	sbiw	r24, 0x01	; 1
    3278:	f1 f7       	brne	.-4      	; 0x3276 <HLCD8_voidStoreCustomChar+0x292>
    327a:	9c 83       	std	Y+4, r25	; 0x04
    327c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    327e:	8d 81       	ldd	r24, Y+5	; 0x05
    3280:	9e 81       	ldd	r25, Y+6	; 0x06
    3282:	01 97       	sbiw	r24, 0x01	; 1
    3284:	9e 83       	std	Y+6, r25	; 0x06
    3286:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3288:	8d 81       	ldd	r24, Y+5	; 0x05
    328a:	9e 81       	ldd	r25, Y+6	; 0x06
    328c:	00 97       	sbiw	r24, 0x00	; 0
    328e:	69 f7       	brne	.-38     	; 0x326a <HLCD8_voidStoreCustomChar+0x286>
    3290:	14 c0       	rjmp	.+40     	; 0x32ba <HLCD8_voidStoreCustomChar+0x2d6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3292:	6f 81       	ldd	r22, Y+7	; 0x07
    3294:	78 85       	ldd	r23, Y+8	; 0x08
    3296:	89 85       	ldd	r24, Y+9	; 0x09
    3298:	9a 85       	ldd	r25, Y+10	; 0x0a
    329a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    329e:	dc 01       	movw	r26, r24
    32a0:	cb 01       	movw	r24, r22
    32a2:	9e 83       	std	Y+6, r25	; 0x06
    32a4:	8d 83       	std	Y+5, r24	; 0x05
    32a6:	8d 81       	ldd	r24, Y+5	; 0x05
    32a8:	9e 81       	ldd	r25, Y+6	; 0x06
    32aa:	9a 83       	std	Y+2, r25	; 0x02
    32ac:	89 83       	std	Y+1, r24	; 0x01
    32ae:	89 81       	ldd	r24, Y+1	; 0x01
    32b0:	9a 81       	ldd	r25, Y+2	; 0x02
    32b2:	01 97       	sbiw	r24, 0x01	; 1
    32b4:	f1 f7       	brne	.-4      	; 0x32b2 <HLCD8_voidStoreCustomChar+0x2ce>
    32b6:	9a 83       	std	Y+2, r25	; 0x02
    32b8:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(2);

}
    32ba:	ab 96       	adiw	r28, 0x2b	; 43
    32bc:	0f b6       	in	r0, 0x3f	; 63
    32be:	f8 94       	cli
    32c0:	de bf       	out	0x3e, r29	; 62
    32c2:	0f be       	out	0x3f, r0	; 63
    32c4:	cd bf       	out	0x3d, r28	; 61
    32c6:	cf 91       	pop	r28
    32c8:	df 91       	pop	r29
    32ca:	08 95       	ret

000032cc <HLCD8_voidDisplayCustomChar>:

void HLCD8_voidDisplayCustomChar(u8 A_u8CGRAMIndex,u8 A_u8Row,u8 A_u8Col)
{
    32cc:	df 93       	push	r29
    32ce:	cf 93       	push	r28
    32d0:	00 d0       	rcall	.+0      	; 0x32d2 <HLCD8_voidDisplayCustomChar+0x6>
    32d2:	0f 92       	push	r0
    32d4:	cd b7       	in	r28, 0x3d	; 61
    32d6:	de b7       	in	r29, 0x3e	; 62
    32d8:	89 83       	std	Y+1, r24	; 0x01
    32da:	6a 83       	std	Y+2, r22	; 0x02
    32dc:	4b 83       	std	Y+3, r20	; 0x03
    HLCD8_voidGoToPos(A_u8Row,A_u8Col);
    32de:	8a 81       	ldd	r24, Y+2	; 0x02
    32e0:	6b 81       	ldd	r22, Y+3	; 0x03
    32e2:	0e 94 ed 16 	call	0x2dda	; 0x2dda <HLCD8_voidGoToPos>
    HLCD8_voidSendData(A_u8CGRAMIndex);
    32e6:	89 81       	ldd	r24, Y+1	; 0x01
    32e8:	0e 94 b7 13 	call	0x276e	; 0x276e <HLCD8_voidSendData>
    32ec:	0f 90       	pop	r0
    32ee:	0f 90       	pop	r0
    32f0:	0f 90       	pop	r0
    32f2:	cf 91       	pop	r28
    32f4:	df 91       	pop	r29
    32f6:	08 95       	ret

000032f8 <HSSD_voidDisplay>:
#include "../Include/HAL/SSD/SSD_Private.h"
#include "../Include/HAL/SSD/SSD_Configuration.h"

#include <util/delay.h>
void HSSD_voidDisplay(u8 A_u8Number,u8 A_u8PortId)
{
    32f8:	df 93       	push	r29
    32fa:	cf 93       	push	r28
    32fc:	00 d0       	rcall	.+0      	; 0x32fe <HSSD_voidDisplay+0x6>
    32fe:	00 d0       	rcall	.+0      	; 0x3300 <HSSD_voidDisplay+0x8>
    3300:	cd b7       	in	r28, 0x3d	; 61
    3302:	de b7       	in	r29, 0x3e	; 62
    3304:	89 83       	std	Y+1, r24	; 0x01
    3306:	6a 83       	std	Y+2, r22	; 0x02
	switch(A_u8Number)
    3308:	89 81       	ldd	r24, Y+1	; 0x01
    330a:	28 2f       	mov	r18, r24
    330c:	30 e0       	ldi	r19, 0x00	; 0
    330e:	3c 83       	std	Y+4, r19	; 0x04
    3310:	2b 83       	std	Y+3, r18	; 0x03
    3312:	8b 81       	ldd	r24, Y+3	; 0x03
    3314:	9c 81       	ldd	r25, Y+4	; 0x04
    3316:	8b 35       	cpi	r24, 0x5B	; 91
    3318:	91 05       	cpc	r25, r1
    331a:	09 f4       	brne	.+2      	; 0x331e <HSSD_voidDisplay+0x26>
    331c:	4c c0       	rjmp	.+152    	; 0x33b6 <HSSD_voidDisplay+0xbe>
    331e:	2b 81       	ldd	r18, Y+3	; 0x03
    3320:	3c 81       	ldd	r19, Y+4	; 0x04
    3322:	2c 35       	cpi	r18, 0x5C	; 92
    3324:	31 05       	cpc	r19, r1
    3326:	e4 f4       	brge	.+56     	; 0x3360 <HSSD_voidDisplay+0x68>
    3328:	8b 81       	ldd	r24, Y+3	; 0x03
    332a:	9c 81       	ldd	r25, Y+4	; 0x04
    332c:	87 30       	cpi	r24, 0x07	; 7
    332e:	91 05       	cpc	r25, r1
    3330:	09 f4       	brne	.+2      	; 0x3334 <HSSD_voidDisplay+0x3c>
    3332:	5a c0       	rjmp	.+180    	; 0x33e8 <HSSD_voidDisplay+0xf0>
    3334:	2b 81       	ldd	r18, Y+3	; 0x03
    3336:	3c 81       	ldd	r19, Y+4	; 0x04
    3338:	28 30       	cpi	r18, 0x08	; 8
    333a:	31 05       	cpc	r19, r1
    333c:	34 f4       	brge	.+12     	; 0x334a <HSSD_voidDisplay+0x52>
    333e:	8b 81       	ldd	r24, Y+3	; 0x03
    3340:	9c 81       	ldd	r25, Y+4	; 0x04
    3342:	86 30       	cpi	r24, 0x06	; 6
    3344:	91 05       	cpc	r25, r1
    3346:	91 f1       	breq	.+100    	; 0x33ac <HSSD_voidDisplay+0xb4>
    3348:	5d c0       	rjmp	.+186    	; 0x3404 <HSSD_voidDisplay+0x10c>
    334a:	2b 81       	ldd	r18, Y+3	; 0x03
    334c:	3c 81       	ldd	r19, Y+4	; 0x04
    334e:	2f 33       	cpi	r18, 0x3F	; 63
    3350:	31 05       	cpc	r19, r1
    3352:	39 f1       	breq	.+78     	; 0x33a2 <HSSD_voidDisplay+0xaa>
    3354:	8b 81       	ldd	r24, Y+3	; 0x03
    3356:	9c 81       	ldd	r25, Y+4	; 0x04
    3358:	8f 34       	cpi	r24, 0x4F	; 79
    335a:	91 05       	cpc	r25, r1
    335c:	89 f1       	breq	.+98     	; 0x33c0 <HSSD_voidDisplay+0xc8>
    335e:	52 c0       	rjmp	.+164    	; 0x3404 <HSSD_voidDisplay+0x10c>
    3360:	2b 81       	ldd	r18, Y+3	; 0x03
    3362:	3c 81       	ldd	r19, Y+4	; 0x04
    3364:	2f 36       	cpi	r18, 0x6F	; 111
    3366:	31 05       	cpc	r19, r1
    3368:	09 f4       	brne	.+2      	; 0x336c <HSSD_voidDisplay+0x74>
    336a:	48 c0       	rjmp	.+144    	; 0x33fc <HSSD_voidDisplay+0x104>
    336c:	8b 81       	ldd	r24, Y+3	; 0x03
    336e:	9c 81       	ldd	r25, Y+4	; 0x04
    3370:	80 37       	cpi	r24, 0x70	; 112
    3372:	91 05       	cpc	r25, r1
    3374:	5c f4       	brge	.+22     	; 0x338c <HSSD_voidDisplay+0x94>
    3376:	2b 81       	ldd	r18, Y+3	; 0x03
    3378:	3c 81       	ldd	r19, Y+4	; 0x04
    337a:	26 36       	cpi	r18, 0x66	; 102
    337c:	31 05       	cpc	r19, r1
    337e:	29 f1       	breq	.+74     	; 0x33ca <HSSD_voidDisplay+0xd2>
    3380:	8b 81       	ldd	r24, Y+3	; 0x03
    3382:	9c 81       	ldd	r25, Y+4	; 0x04
    3384:	8d 36       	cpi	r24, 0x6D	; 109
    3386:	91 05       	cpc	r25, r1
    3388:	29 f1       	breq	.+74     	; 0x33d4 <HSSD_voidDisplay+0xdc>
    338a:	3c c0       	rjmp	.+120    	; 0x3404 <HSSD_voidDisplay+0x10c>
    338c:	2b 81       	ldd	r18, Y+3	; 0x03
    338e:	3c 81       	ldd	r19, Y+4	; 0x04
    3390:	2d 37       	cpi	r18, 0x7D	; 125
    3392:	31 05       	cpc	r19, r1
    3394:	21 f1       	breq	.+72     	; 0x33de <HSSD_voidDisplay+0xe6>
    3396:	8b 81       	ldd	r24, Y+3	; 0x03
    3398:	9c 81       	ldd	r25, Y+4	; 0x04
    339a:	8f 37       	cpi	r24, 0x7F	; 127
    339c:	91 05       	cpc	r25, r1
    339e:	49 f1       	breq	.+82     	; 0x33f2 <HSSD_voidDisplay+0xfa>
    33a0:	31 c0       	rjmp	.+98     	; 0x3404 <HSSD_voidDisplay+0x10c>
	{
	case ZERO:
		MDIO_voidSetPortValue(A_u8PortId,ZERO);
    33a2:	8a 81       	ldd	r24, Y+2	; 0x02
    33a4:	6f e3       	ldi	r22, 0x3F	; 63
    33a6:	0e 94 52 09 	call	0x12a4	; 0x12a4 <MDIO_voidSetPortValue>
    33aa:	2c c0       	rjmp	.+88     	; 0x3404 <HSSD_voidDisplay+0x10c>
		break;
	case ONE:
		MDIO_voidSetPortValue(A_u8PortId,ONE);
    33ac:	8a 81       	ldd	r24, Y+2	; 0x02
    33ae:	66 e0       	ldi	r22, 0x06	; 6
    33b0:	0e 94 52 09 	call	0x12a4	; 0x12a4 <MDIO_voidSetPortValue>
    33b4:	27 c0       	rjmp	.+78     	; 0x3404 <HSSD_voidDisplay+0x10c>
		break;
	case TWO:
		MDIO_voidSetPortValue(A_u8PortId,TWO);
    33b6:	8a 81       	ldd	r24, Y+2	; 0x02
    33b8:	6b e5       	ldi	r22, 0x5B	; 91
    33ba:	0e 94 52 09 	call	0x12a4	; 0x12a4 <MDIO_voidSetPortValue>
    33be:	22 c0       	rjmp	.+68     	; 0x3404 <HSSD_voidDisplay+0x10c>
		break;
	case THREE:
		MDIO_voidSetPortValue(A_u8PortId,THREE);
    33c0:	8a 81       	ldd	r24, Y+2	; 0x02
    33c2:	6f e4       	ldi	r22, 0x4F	; 79
    33c4:	0e 94 52 09 	call	0x12a4	; 0x12a4 <MDIO_voidSetPortValue>
    33c8:	1d c0       	rjmp	.+58     	; 0x3404 <HSSD_voidDisplay+0x10c>
		break;
	case FOUR:
		MDIO_voidSetPortValue(A_u8PortId,FOUR);
    33ca:	8a 81       	ldd	r24, Y+2	; 0x02
    33cc:	66 e6       	ldi	r22, 0x66	; 102
    33ce:	0e 94 52 09 	call	0x12a4	; 0x12a4 <MDIO_voidSetPortValue>
    33d2:	18 c0       	rjmp	.+48     	; 0x3404 <HSSD_voidDisplay+0x10c>
		break;
	case FIVE:
		MDIO_voidSetPortValue(A_u8PortId,FIVE);
    33d4:	8a 81       	ldd	r24, Y+2	; 0x02
    33d6:	6d e6       	ldi	r22, 0x6D	; 109
    33d8:	0e 94 52 09 	call	0x12a4	; 0x12a4 <MDIO_voidSetPortValue>
    33dc:	13 c0       	rjmp	.+38     	; 0x3404 <HSSD_voidDisplay+0x10c>
		break;
	case SIX:
		MDIO_voidSetPortValue(A_u8PortId,SIX);
    33de:	8a 81       	ldd	r24, Y+2	; 0x02
    33e0:	6d e7       	ldi	r22, 0x7D	; 125
    33e2:	0e 94 52 09 	call	0x12a4	; 0x12a4 <MDIO_voidSetPortValue>
    33e6:	0e c0       	rjmp	.+28     	; 0x3404 <HSSD_voidDisplay+0x10c>
		break;
	case SEVEN:
		MDIO_voidSetPortValue(A_u8PortId,SEVEN);
    33e8:	8a 81       	ldd	r24, Y+2	; 0x02
    33ea:	67 e0       	ldi	r22, 0x07	; 7
    33ec:	0e 94 52 09 	call	0x12a4	; 0x12a4 <MDIO_voidSetPortValue>
    33f0:	09 c0       	rjmp	.+18     	; 0x3404 <HSSD_voidDisplay+0x10c>
		break;
	case EIGHT:
		MDIO_voidSetPortValue(A_u8PortId,EIGHT);
    33f2:	8a 81       	ldd	r24, Y+2	; 0x02
    33f4:	6f e7       	ldi	r22, 0x7F	; 127
    33f6:	0e 94 52 09 	call	0x12a4	; 0x12a4 <MDIO_voidSetPortValue>
    33fa:	04 c0       	rjmp	.+8      	; 0x3404 <HSSD_voidDisplay+0x10c>
		break;
	case NINE:
		MDIO_voidSetPortValue(A_u8PortId,NINE);
    33fc:	8a 81       	ldd	r24, Y+2	; 0x02
    33fe:	6f e6       	ldi	r22, 0x6F	; 111
    3400:	0e 94 52 09 	call	0x12a4	; 0x12a4 <MDIO_voidSetPortValue>
		break;
	}
}
    3404:	0f 90       	pop	r0
    3406:	0f 90       	pop	r0
    3408:	0f 90       	pop	r0
    340a:	0f 90       	pop	r0
    340c:	cf 91       	pop	r28
    340e:	df 91       	pop	r29
    3410:	08 95       	ret

00003412 <HSSD_voidDisplayAscending>:

void HSSD_voidDisplayAscending(u8 A_u8PortId)
{
    3412:	df 93       	push	r29
    3414:	cf 93       	push	r28
    3416:	cd b7       	in	r28, 0x3d	; 61
    3418:	de b7       	in	r29, 0x3e	; 62
    341a:	6f 97       	sbiw	r28, 0x1f	; 31
    341c:	0f b6       	in	r0, 0x3f	; 63
    341e:	f8 94       	cli
    3420:	de bf       	out	0x3e, r29	; 62
    3422:	0f be       	out	0x3f, r0	; 63
    3424:	cd bf       	out	0x3d, r28	; 61
    3426:	8a 8f       	std	Y+26, r24	; 0x1a
u8 arr[]={ZERO,ONE,TWO,THREE,FOUR,FIVE,SIX,SEVEN,EIGHT,NINE};
    3428:	ce 01       	movw	r24, r28
    342a:	40 96       	adiw	r24, 0x10	; 16
    342c:	9c 8f       	std	Y+28, r25	; 0x1c
    342e:	8b 8f       	std	Y+27, r24	; 0x1b
    3430:	ee e6       	ldi	r30, 0x6E	; 110
    3432:	f0 e0       	ldi	r31, 0x00	; 0
    3434:	fe 8f       	std	Y+30, r31	; 0x1e
    3436:	ed 8f       	std	Y+29, r30	; 0x1d
    3438:	fa e0       	ldi	r31, 0x0A	; 10
    343a:	ff 8f       	std	Y+31, r31	; 0x1f
    343c:	ed 8d       	ldd	r30, Y+29	; 0x1d
    343e:	fe 8d       	ldd	r31, Y+30	; 0x1e
    3440:	00 80       	ld	r0, Z
    3442:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3444:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3446:	01 96       	adiw	r24, 0x01	; 1
    3448:	9e 8f       	std	Y+30, r25	; 0x1e
    344a:	8d 8f       	std	Y+29, r24	; 0x1d
    344c:	eb 8d       	ldd	r30, Y+27	; 0x1b
    344e:	fc 8d       	ldd	r31, Y+28	; 0x1c
    3450:	00 82       	st	Z, r0
    3452:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3454:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3456:	01 96       	adiw	r24, 0x01	; 1
    3458:	9c 8f       	std	Y+28, r25	; 0x1c
    345a:	8b 8f       	std	Y+27, r24	; 0x1b
    345c:	9f 8d       	ldd	r25, Y+31	; 0x1f
    345e:	91 50       	subi	r25, 0x01	; 1
    3460:	9f 8f       	std	Y+31, r25	; 0x1f
    3462:	ef 8d       	ldd	r30, Y+31	; 0x1f
    3464:	ee 23       	and	r30, r30
    3466:	51 f7       	brne	.-44     	; 0x343c <HSSD_voidDisplayAscending+0x2a>
	for(u8 i=0;i<10;i++)
    3468:	1f 86       	std	Y+15, r1	; 0x0f
    346a:	81 c0       	rjmp	.+258    	; 0x356e <HSSD_voidDisplayAscending+0x15c>
	{
		HSSD_voidDisplay(arr[i],A_u8PortId);
    346c:	8f 85       	ldd	r24, Y+15	; 0x0f
    346e:	28 2f       	mov	r18, r24
    3470:	30 e0       	ldi	r19, 0x00	; 0
    3472:	ce 01       	movw	r24, r28
    3474:	40 96       	adiw	r24, 0x10	; 16
    3476:	fc 01       	movw	r30, r24
    3478:	e2 0f       	add	r30, r18
    347a:	f3 1f       	adc	r31, r19
    347c:	80 81       	ld	r24, Z
    347e:	6a 8d       	ldd	r22, Y+26	; 0x1a
    3480:	0e 94 7c 19 	call	0x32f8	; 0x32f8 <HSSD_voidDisplay>
    3484:	80 e0       	ldi	r24, 0x00	; 0
    3486:	90 e0       	ldi	r25, 0x00	; 0
    3488:	aa e7       	ldi	r26, 0x7A	; 122
    348a:	b4 e4       	ldi	r27, 0x44	; 68
    348c:	8b 87       	std	Y+11, r24	; 0x0b
    348e:	9c 87       	std	Y+12, r25	; 0x0c
    3490:	ad 87       	std	Y+13, r26	; 0x0d
    3492:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3494:	6b 85       	ldd	r22, Y+11	; 0x0b
    3496:	7c 85       	ldd	r23, Y+12	; 0x0c
    3498:	8d 85       	ldd	r24, Y+13	; 0x0d
    349a:	9e 85       	ldd	r25, Y+14	; 0x0e
    349c:	20 e0       	ldi	r18, 0x00	; 0
    349e:	30 e0       	ldi	r19, 0x00	; 0
    34a0:	4a ef       	ldi	r20, 0xFA	; 250
    34a2:	54 e4       	ldi	r21, 0x44	; 68
    34a4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    34a8:	dc 01       	movw	r26, r24
    34aa:	cb 01       	movw	r24, r22
    34ac:	8f 83       	std	Y+7, r24	; 0x07
    34ae:	98 87       	std	Y+8, r25	; 0x08
    34b0:	a9 87       	std	Y+9, r26	; 0x09
    34b2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    34b4:	6f 81       	ldd	r22, Y+7	; 0x07
    34b6:	78 85       	ldd	r23, Y+8	; 0x08
    34b8:	89 85       	ldd	r24, Y+9	; 0x09
    34ba:	9a 85       	ldd	r25, Y+10	; 0x0a
    34bc:	20 e0       	ldi	r18, 0x00	; 0
    34be:	30 e0       	ldi	r19, 0x00	; 0
    34c0:	40 e8       	ldi	r20, 0x80	; 128
    34c2:	5f e3       	ldi	r21, 0x3F	; 63
    34c4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    34c8:	88 23       	and	r24, r24
    34ca:	2c f4       	brge	.+10     	; 0x34d6 <HSSD_voidDisplayAscending+0xc4>
		__ticks = 1;
    34cc:	81 e0       	ldi	r24, 0x01	; 1
    34ce:	90 e0       	ldi	r25, 0x00	; 0
    34d0:	9e 83       	std	Y+6, r25	; 0x06
    34d2:	8d 83       	std	Y+5, r24	; 0x05
    34d4:	3f c0       	rjmp	.+126    	; 0x3554 <HSSD_voidDisplayAscending+0x142>
	else if (__tmp > 65535)
    34d6:	6f 81       	ldd	r22, Y+7	; 0x07
    34d8:	78 85       	ldd	r23, Y+8	; 0x08
    34da:	89 85       	ldd	r24, Y+9	; 0x09
    34dc:	9a 85       	ldd	r25, Y+10	; 0x0a
    34de:	20 e0       	ldi	r18, 0x00	; 0
    34e0:	3f ef       	ldi	r19, 0xFF	; 255
    34e2:	4f e7       	ldi	r20, 0x7F	; 127
    34e4:	57 e4       	ldi	r21, 0x47	; 71
    34e6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    34ea:	18 16       	cp	r1, r24
    34ec:	4c f5       	brge	.+82     	; 0x3540 <HSSD_voidDisplayAscending+0x12e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    34ee:	6b 85       	ldd	r22, Y+11	; 0x0b
    34f0:	7c 85       	ldd	r23, Y+12	; 0x0c
    34f2:	8d 85       	ldd	r24, Y+13	; 0x0d
    34f4:	9e 85       	ldd	r25, Y+14	; 0x0e
    34f6:	20 e0       	ldi	r18, 0x00	; 0
    34f8:	30 e0       	ldi	r19, 0x00	; 0
    34fa:	40 e2       	ldi	r20, 0x20	; 32
    34fc:	51 e4       	ldi	r21, 0x41	; 65
    34fe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3502:	dc 01       	movw	r26, r24
    3504:	cb 01       	movw	r24, r22
    3506:	bc 01       	movw	r22, r24
    3508:	cd 01       	movw	r24, r26
    350a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    350e:	dc 01       	movw	r26, r24
    3510:	cb 01       	movw	r24, r22
    3512:	9e 83       	std	Y+6, r25	; 0x06
    3514:	8d 83       	std	Y+5, r24	; 0x05
    3516:	0f c0       	rjmp	.+30     	; 0x3536 <HSSD_voidDisplayAscending+0x124>
    3518:	88 ec       	ldi	r24, 0xC8	; 200
    351a:	90 e0       	ldi	r25, 0x00	; 0
    351c:	9c 83       	std	Y+4, r25	; 0x04
    351e:	8b 83       	std	Y+3, r24	; 0x03
    3520:	8b 81       	ldd	r24, Y+3	; 0x03
    3522:	9c 81       	ldd	r25, Y+4	; 0x04
    3524:	01 97       	sbiw	r24, 0x01	; 1
    3526:	f1 f7       	brne	.-4      	; 0x3524 <HSSD_voidDisplayAscending+0x112>
    3528:	9c 83       	std	Y+4, r25	; 0x04
    352a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    352c:	8d 81       	ldd	r24, Y+5	; 0x05
    352e:	9e 81       	ldd	r25, Y+6	; 0x06
    3530:	01 97       	sbiw	r24, 0x01	; 1
    3532:	9e 83       	std	Y+6, r25	; 0x06
    3534:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3536:	8d 81       	ldd	r24, Y+5	; 0x05
    3538:	9e 81       	ldd	r25, Y+6	; 0x06
    353a:	00 97       	sbiw	r24, 0x00	; 0
    353c:	69 f7       	brne	.-38     	; 0x3518 <HSSD_voidDisplayAscending+0x106>
    353e:	14 c0       	rjmp	.+40     	; 0x3568 <HSSD_voidDisplayAscending+0x156>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3540:	6f 81       	ldd	r22, Y+7	; 0x07
    3542:	78 85       	ldd	r23, Y+8	; 0x08
    3544:	89 85       	ldd	r24, Y+9	; 0x09
    3546:	9a 85       	ldd	r25, Y+10	; 0x0a
    3548:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    354c:	dc 01       	movw	r26, r24
    354e:	cb 01       	movw	r24, r22
    3550:	9e 83       	std	Y+6, r25	; 0x06
    3552:	8d 83       	std	Y+5, r24	; 0x05
    3554:	8d 81       	ldd	r24, Y+5	; 0x05
    3556:	9e 81       	ldd	r25, Y+6	; 0x06
    3558:	9a 83       	std	Y+2, r25	; 0x02
    355a:	89 83       	std	Y+1, r24	; 0x01
    355c:	89 81       	ldd	r24, Y+1	; 0x01
    355e:	9a 81       	ldd	r25, Y+2	; 0x02
    3560:	01 97       	sbiw	r24, 0x01	; 1
    3562:	f1 f7       	brne	.-4      	; 0x3560 <HSSD_voidDisplayAscending+0x14e>
    3564:	9a 83       	std	Y+2, r25	; 0x02
    3566:	89 83       	std	Y+1, r24	; 0x01
}

void HSSD_voidDisplayAscending(u8 A_u8PortId)
{
u8 arr[]={ZERO,ONE,TWO,THREE,FOUR,FIVE,SIX,SEVEN,EIGHT,NINE};
	for(u8 i=0;i<10;i++)
    3568:	8f 85       	ldd	r24, Y+15	; 0x0f
    356a:	8f 5f       	subi	r24, 0xFF	; 255
    356c:	8f 87       	std	Y+15, r24	; 0x0f
    356e:	8f 85       	ldd	r24, Y+15	; 0x0f
    3570:	8a 30       	cpi	r24, 0x0A	; 10
    3572:	08 f4       	brcc	.+2      	; 0x3576 <HSSD_voidDisplayAscending+0x164>
    3574:	7b cf       	rjmp	.-266    	; 0x346c <HSSD_voidDisplayAscending+0x5a>
	{
		HSSD_voidDisplay(arr[i],A_u8PortId);
		_delay_ms(SSD_DELAY);
	}
}
    3576:	6f 96       	adiw	r28, 0x1f	; 31
    3578:	0f b6       	in	r0, 0x3f	; 63
    357a:	f8 94       	cli
    357c:	de bf       	out	0x3e, r29	; 62
    357e:	0f be       	out	0x3f, r0	; 63
    3580:	cd bf       	out	0x3d, r28	; 61
    3582:	cf 91       	pop	r28
    3584:	df 91       	pop	r29
    3586:	08 95       	ret

00003588 <HSSD_voidDisplayDescending>:

void HSSD_voidDisplayDescending(u8 A_u8PortId)
{
    3588:	df 93       	push	r29
    358a:	cf 93       	push	r28
    358c:	cd b7       	in	r28, 0x3d	; 61
    358e:	de b7       	in	r29, 0x3e	; 62
    3590:	6f 97       	sbiw	r28, 0x1f	; 31
    3592:	0f b6       	in	r0, 0x3f	; 63
    3594:	f8 94       	cli
    3596:	de bf       	out	0x3e, r29	; 62
    3598:	0f be       	out	0x3f, r0	; 63
    359a:	cd bf       	out	0x3d, r28	; 61
    359c:	8a 8f       	std	Y+26, r24	; 0x1a
u8 arr[]={ZERO,ONE,TWO,THREE,FOUR,FIVE,SIX,SEVEN,EIGHT,NINE};
    359e:	ce 01       	movw	r24, r28
    35a0:	40 96       	adiw	r24, 0x10	; 16
    35a2:	9c 8f       	std	Y+28, r25	; 0x1c
    35a4:	8b 8f       	std	Y+27, r24	; 0x1b
    35a6:	e8 e7       	ldi	r30, 0x78	; 120
    35a8:	f0 e0       	ldi	r31, 0x00	; 0
    35aa:	fe 8f       	std	Y+30, r31	; 0x1e
    35ac:	ed 8f       	std	Y+29, r30	; 0x1d
    35ae:	fa e0       	ldi	r31, 0x0A	; 10
    35b0:	ff 8f       	std	Y+31, r31	; 0x1f
    35b2:	ed 8d       	ldd	r30, Y+29	; 0x1d
    35b4:	fe 8d       	ldd	r31, Y+30	; 0x1e
    35b6:	00 80       	ld	r0, Z
    35b8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    35ba:	9e 8d       	ldd	r25, Y+30	; 0x1e
    35bc:	01 96       	adiw	r24, 0x01	; 1
    35be:	9e 8f       	std	Y+30, r25	; 0x1e
    35c0:	8d 8f       	std	Y+29, r24	; 0x1d
    35c2:	eb 8d       	ldd	r30, Y+27	; 0x1b
    35c4:	fc 8d       	ldd	r31, Y+28	; 0x1c
    35c6:	00 82       	st	Z, r0
    35c8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    35ca:	9c 8d       	ldd	r25, Y+28	; 0x1c
    35cc:	01 96       	adiw	r24, 0x01	; 1
    35ce:	9c 8f       	std	Y+28, r25	; 0x1c
    35d0:	8b 8f       	std	Y+27, r24	; 0x1b
    35d2:	9f 8d       	ldd	r25, Y+31	; 0x1f
    35d4:	91 50       	subi	r25, 0x01	; 1
    35d6:	9f 8f       	std	Y+31, r25	; 0x1f
    35d8:	ef 8d       	ldd	r30, Y+31	; 0x1f
    35da:	ee 23       	and	r30, r30
    35dc:	51 f7       	brne	.-44     	; 0x35b2 <HSSD_voidDisplayDescending+0x2a>
	for(u8 j=9;j>=0;j--)
    35de:	89 e0       	ldi	r24, 0x09	; 9
    35e0:	8f 87       	std	Y+15, r24	; 0x0f
	{
		HSSD_voidDisplay(arr[j],A_u8PortId);
    35e2:	8f 85       	ldd	r24, Y+15	; 0x0f
    35e4:	28 2f       	mov	r18, r24
    35e6:	30 e0       	ldi	r19, 0x00	; 0
    35e8:	ce 01       	movw	r24, r28
    35ea:	40 96       	adiw	r24, 0x10	; 16
    35ec:	fc 01       	movw	r30, r24
    35ee:	e2 0f       	add	r30, r18
    35f0:	f3 1f       	adc	r31, r19
    35f2:	80 81       	ld	r24, Z
    35f4:	6a 8d       	ldd	r22, Y+26	; 0x1a
    35f6:	0e 94 7c 19 	call	0x32f8	; 0x32f8 <HSSD_voidDisplay>
    35fa:	80 e0       	ldi	r24, 0x00	; 0
    35fc:	90 e0       	ldi	r25, 0x00	; 0
    35fe:	aa e7       	ldi	r26, 0x7A	; 122
    3600:	b4 e4       	ldi	r27, 0x44	; 68
    3602:	8b 87       	std	Y+11, r24	; 0x0b
    3604:	9c 87       	std	Y+12, r25	; 0x0c
    3606:	ad 87       	std	Y+13, r26	; 0x0d
    3608:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    360a:	6b 85       	ldd	r22, Y+11	; 0x0b
    360c:	7c 85       	ldd	r23, Y+12	; 0x0c
    360e:	8d 85       	ldd	r24, Y+13	; 0x0d
    3610:	9e 85       	ldd	r25, Y+14	; 0x0e
    3612:	20 e0       	ldi	r18, 0x00	; 0
    3614:	30 e0       	ldi	r19, 0x00	; 0
    3616:	4a ef       	ldi	r20, 0xFA	; 250
    3618:	54 e4       	ldi	r21, 0x44	; 68
    361a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    361e:	dc 01       	movw	r26, r24
    3620:	cb 01       	movw	r24, r22
    3622:	8f 83       	std	Y+7, r24	; 0x07
    3624:	98 87       	std	Y+8, r25	; 0x08
    3626:	a9 87       	std	Y+9, r26	; 0x09
    3628:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    362a:	6f 81       	ldd	r22, Y+7	; 0x07
    362c:	78 85       	ldd	r23, Y+8	; 0x08
    362e:	89 85       	ldd	r24, Y+9	; 0x09
    3630:	9a 85       	ldd	r25, Y+10	; 0x0a
    3632:	20 e0       	ldi	r18, 0x00	; 0
    3634:	30 e0       	ldi	r19, 0x00	; 0
    3636:	40 e8       	ldi	r20, 0x80	; 128
    3638:	5f e3       	ldi	r21, 0x3F	; 63
    363a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    363e:	88 23       	and	r24, r24
    3640:	2c f4       	brge	.+10     	; 0x364c <HSSD_voidDisplayDescending+0xc4>
		__ticks = 1;
    3642:	81 e0       	ldi	r24, 0x01	; 1
    3644:	90 e0       	ldi	r25, 0x00	; 0
    3646:	9e 83       	std	Y+6, r25	; 0x06
    3648:	8d 83       	std	Y+5, r24	; 0x05
    364a:	3f c0       	rjmp	.+126    	; 0x36ca <HSSD_voidDisplayDescending+0x142>
	else if (__tmp > 65535)
    364c:	6f 81       	ldd	r22, Y+7	; 0x07
    364e:	78 85       	ldd	r23, Y+8	; 0x08
    3650:	89 85       	ldd	r24, Y+9	; 0x09
    3652:	9a 85       	ldd	r25, Y+10	; 0x0a
    3654:	20 e0       	ldi	r18, 0x00	; 0
    3656:	3f ef       	ldi	r19, 0xFF	; 255
    3658:	4f e7       	ldi	r20, 0x7F	; 127
    365a:	57 e4       	ldi	r21, 0x47	; 71
    365c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3660:	18 16       	cp	r1, r24
    3662:	4c f5       	brge	.+82     	; 0x36b6 <HSSD_voidDisplayDescending+0x12e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3664:	6b 85       	ldd	r22, Y+11	; 0x0b
    3666:	7c 85       	ldd	r23, Y+12	; 0x0c
    3668:	8d 85       	ldd	r24, Y+13	; 0x0d
    366a:	9e 85       	ldd	r25, Y+14	; 0x0e
    366c:	20 e0       	ldi	r18, 0x00	; 0
    366e:	30 e0       	ldi	r19, 0x00	; 0
    3670:	40 e2       	ldi	r20, 0x20	; 32
    3672:	51 e4       	ldi	r21, 0x41	; 65
    3674:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3678:	dc 01       	movw	r26, r24
    367a:	cb 01       	movw	r24, r22
    367c:	bc 01       	movw	r22, r24
    367e:	cd 01       	movw	r24, r26
    3680:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3684:	dc 01       	movw	r26, r24
    3686:	cb 01       	movw	r24, r22
    3688:	9e 83       	std	Y+6, r25	; 0x06
    368a:	8d 83       	std	Y+5, r24	; 0x05
    368c:	0f c0       	rjmp	.+30     	; 0x36ac <HSSD_voidDisplayDescending+0x124>
    368e:	88 ec       	ldi	r24, 0xC8	; 200
    3690:	90 e0       	ldi	r25, 0x00	; 0
    3692:	9c 83       	std	Y+4, r25	; 0x04
    3694:	8b 83       	std	Y+3, r24	; 0x03
    3696:	8b 81       	ldd	r24, Y+3	; 0x03
    3698:	9c 81       	ldd	r25, Y+4	; 0x04
    369a:	01 97       	sbiw	r24, 0x01	; 1
    369c:	f1 f7       	brne	.-4      	; 0x369a <HSSD_voidDisplayDescending+0x112>
    369e:	9c 83       	std	Y+4, r25	; 0x04
    36a0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    36a2:	8d 81       	ldd	r24, Y+5	; 0x05
    36a4:	9e 81       	ldd	r25, Y+6	; 0x06
    36a6:	01 97       	sbiw	r24, 0x01	; 1
    36a8:	9e 83       	std	Y+6, r25	; 0x06
    36aa:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    36ac:	8d 81       	ldd	r24, Y+5	; 0x05
    36ae:	9e 81       	ldd	r25, Y+6	; 0x06
    36b0:	00 97       	sbiw	r24, 0x00	; 0
    36b2:	69 f7       	brne	.-38     	; 0x368e <HSSD_voidDisplayDescending+0x106>
    36b4:	14 c0       	rjmp	.+40     	; 0x36de <HSSD_voidDisplayDescending+0x156>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    36b6:	6f 81       	ldd	r22, Y+7	; 0x07
    36b8:	78 85       	ldd	r23, Y+8	; 0x08
    36ba:	89 85       	ldd	r24, Y+9	; 0x09
    36bc:	9a 85       	ldd	r25, Y+10	; 0x0a
    36be:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    36c2:	dc 01       	movw	r26, r24
    36c4:	cb 01       	movw	r24, r22
    36c6:	9e 83       	std	Y+6, r25	; 0x06
    36c8:	8d 83       	std	Y+5, r24	; 0x05
    36ca:	8d 81       	ldd	r24, Y+5	; 0x05
    36cc:	9e 81       	ldd	r25, Y+6	; 0x06
    36ce:	9a 83       	std	Y+2, r25	; 0x02
    36d0:	89 83       	std	Y+1, r24	; 0x01
    36d2:	89 81       	ldd	r24, Y+1	; 0x01
    36d4:	9a 81       	ldd	r25, Y+2	; 0x02
    36d6:	01 97       	sbiw	r24, 0x01	; 1
    36d8:	f1 f7       	brne	.-4      	; 0x36d6 <HSSD_voidDisplayDescending+0x14e>
    36da:	9a 83       	std	Y+2, r25	; 0x02
    36dc:	89 83       	std	Y+1, r24	; 0x01
}

void HSSD_voidDisplayDescending(u8 A_u8PortId)
{
u8 arr[]={ZERO,ONE,TWO,THREE,FOUR,FIVE,SIX,SEVEN,EIGHT,NINE};
	for(u8 j=9;j>=0;j--)
    36de:	8f 85       	ldd	r24, Y+15	; 0x0f
    36e0:	81 50       	subi	r24, 0x01	; 1
    36e2:	8f 87       	std	Y+15, r24	; 0x0f
    36e4:	7e cf       	rjmp	.-260    	; 0x35e2 <HSSD_voidDisplayDescending+0x5a>

000036e6 <main>:
//LCD4
#include "../Include/HAL/LCD4/LCD4_Configuration.h"
#include "../Include/HAL/LCD4/LCD4_Interface.h"

void main(void)
{
    36e6:	df 93       	push	r29
    36e8:	cf 93       	push	r28
    36ea:	cd b7       	in	r28, 0x3d	; 61
    36ec:	de b7       	in	r29, 0x3e	; 62
    36ee:	2d 97       	sbiw	r28, 0x0d	; 13
    36f0:	0f b6       	in	r0, 0x3f	; 63
    36f2:	f8 94       	cli
    36f4:	de bf       	out	0x3e, r29	; 62
    36f6:	0f be       	out	0x3f, r0	; 63
    36f8:	cd bf       	out	0x3d, r28	; 61
    MDIO_voidInit();
    36fa:	0e 94 4f 06 	call	0xc9e	; 0xc9e <MDIO_voidInit>
    HLCD4_voidInit();
    36fe:	0e 94 01 0d 	call	0x1a02	; 0x1a02 <HLCD4_voidInit>
    HLCD4_voidGoToPos(1,1);
    3702:	81 e0       	ldi	r24, 0x01	; 1
    3704:	61 e0       	ldi	r22, 0x01	; 1
    3706:	0e 94 8a 10 	call	0x2114	; 0x2114 <HLCD4_voidGoToPos>
    HLCD4_voidSendString("Ahmed");
    370a:	80 e6       	ldi	r24, 0x60	; 96
    370c:	90 e0       	ldi	r25, 0x00	; 0
    370e:	0e 94 61 10 	call	0x20c2	; 0x20c2 <HLCD4_voidSendString>
    HLCD4_voidGoToPos(2,1);
    3712:	82 e0       	ldi	r24, 0x02	; 2
    3714:	61 e0       	ldi	r22, 0x01	; 1
    3716:	0e 94 8a 10 	call	0x2114	; 0x2114 <HLCD4_voidGoToPos>
    HLCD4_voidDisplayNumber(2324);
    371a:	84 e1       	ldi	r24, 0x14	; 20
    371c:	99 e0       	ldi	r25, 0x09	; 9
    371e:	0e 94 34 11 	call	0x2268	; 0x2268 <HLCD4_voidDisplayNumber>
    0b00100,
    0b00100,
    0b10000,
    0b11111,
    0b10000
    };
    3722:	ce 01       	movw	r24, r28
    3724:	01 96       	adiw	r24, 0x01	; 1
    3726:	9a 87       	std	Y+10, r25	; 0x0a
    3728:	89 87       	std	Y+9, r24	; 0x09
    372a:	e2 e8       	ldi	r30, 0x82	; 130
    372c:	f0 e0       	ldi	r31, 0x00	; 0
    372e:	fc 87       	std	Y+12, r31	; 0x0c
    3730:	eb 87       	std	Y+11, r30	; 0x0b
    3732:	f8 e0       	ldi	r31, 0x08	; 8
    3734:	fd 87       	std	Y+13, r31	; 0x0d
    3736:	eb 85       	ldd	r30, Y+11	; 0x0b
    3738:	fc 85       	ldd	r31, Y+12	; 0x0c
    373a:	00 80       	ld	r0, Z
    373c:	8b 85       	ldd	r24, Y+11	; 0x0b
    373e:	9c 85       	ldd	r25, Y+12	; 0x0c
    3740:	01 96       	adiw	r24, 0x01	; 1
    3742:	9c 87       	std	Y+12, r25	; 0x0c
    3744:	8b 87       	std	Y+11, r24	; 0x0b
    3746:	e9 85       	ldd	r30, Y+9	; 0x09
    3748:	fa 85       	ldd	r31, Y+10	; 0x0a
    374a:	00 82       	st	Z, r0
    374c:	89 85       	ldd	r24, Y+9	; 0x09
    374e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3750:	01 96       	adiw	r24, 0x01	; 1
    3752:	9a 87       	std	Y+10, r25	; 0x0a
    3754:	89 87       	std	Y+9, r24	; 0x09
    3756:	9d 85       	ldd	r25, Y+13	; 0x0d
    3758:	91 50       	subi	r25, 0x01	; 1
    375a:	9d 87       	std	Y+13, r25	; 0x0d
    375c:	ed 85       	ldd	r30, Y+13	; 0x0d
    375e:	ee 23       	and	r30, r30
    3760:	51 f7       	brne	.-44     	; 0x3736 <main+0x50>
    HLCD4_voidStoreCustomChar(teleChar,0);
    3762:	ce 01       	movw	r24, r28
    3764:	01 96       	adiw	r24, 0x01	; 1
    3766:	60 e0       	ldi	r22, 0x00	; 0
    3768:	0e 94 8f 11 	call	0x231e	; 0x231e <HLCD4_voidStoreCustomChar>
    HLCD4_voidDisplayCustomChar(0,2,10);
    376c:	80 e0       	ldi	r24, 0x00	; 0
    376e:	62 e0       	ldi	r22, 0x02	; 2
    3770:	4a e0       	ldi	r20, 0x0A	; 10
    3772:	0e 94 03 13 	call	0x2606	; 0x2606 <HLCD4_voidDisplayCustomChar>
    3776:	ff cf       	rjmp	.-2      	; 0x3776 <main+0x90>

00003778 <__udivmodhi4>:
    3778:	aa 1b       	sub	r26, r26
    377a:	bb 1b       	sub	r27, r27
    377c:	51 e1       	ldi	r21, 0x11	; 17
    377e:	07 c0       	rjmp	.+14     	; 0x378e <__udivmodhi4_ep>

00003780 <__udivmodhi4_loop>:
    3780:	aa 1f       	adc	r26, r26
    3782:	bb 1f       	adc	r27, r27
    3784:	a6 17       	cp	r26, r22
    3786:	b7 07       	cpc	r27, r23
    3788:	10 f0       	brcs	.+4      	; 0x378e <__udivmodhi4_ep>
    378a:	a6 1b       	sub	r26, r22
    378c:	b7 0b       	sbc	r27, r23

0000378e <__udivmodhi4_ep>:
    378e:	88 1f       	adc	r24, r24
    3790:	99 1f       	adc	r25, r25
    3792:	5a 95       	dec	r21
    3794:	a9 f7       	brne	.-22     	; 0x3780 <__udivmodhi4_loop>
    3796:	80 95       	com	r24
    3798:	90 95       	com	r25
    379a:	bc 01       	movw	r22, r24
    379c:	cd 01       	movw	r24, r26
    379e:	08 95       	ret

000037a0 <__prologue_saves__>:
    37a0:	2f 92       	push	r2
    37a2:	3f 92       	push	r3
    37a4:	4f 92       	push	r4
    37a6:	5f 92       	push	r5
    37a8:	6f 92       	push	r6
    37aa:	7f 92       	push	r7
    37ac:	8f 92       	push	r8
    37ae:	9f 92       	push	r9
    37b0:	af 92       	push	r10
    37b2:	bf 92       	push	r11
    37b4:	cf 92       	push	r12
    37b6:	df 92       	push	r13
    37b8:	ef 92       	push	r14
    37ba:	ff 92       	push	r15
    37bc:	0f 93       	push	r16
    37be:	1f 93       	push	r17
    37c0:	cf 93       	push	r28
    37c2:	df 93       	push	r29
    37c4:	cd b7       	in	r28, 0x3d	; 61
    37c6:	de b7       	in	r29, 0x3e	; 62
    37c8:	ca 1b       	sub	r28, r26
    37ca:	db 0b       	sbc	r29, r27
    37cc:	0f b6       	in	r0, 0x3f	; 63
    37ce:	f8 94       	cli
    37d0:	de bf       	out	0x3e, r29	; 62
    37d2:	0f be       	out	0x3f, r0	; 63
    37d4:	cd bf       	out	0x3d, r28	; 61
    37d6:	09 94       	ijmp

000037d8 <__epilogue_restores__>:
    37d8:	2a 88       	ldd	r2, Y+18	; 0x12
    37da:	39 88       	ldd	r3, Y+17	; 0x11
    37dc:	48 88       	ldd	r4, Y+16	; 0x10
    37de:	5f 84       	ldd	r5, Y+15	; 0x0f
    37e0:	6e 84       	ldd	r6, Y+14	; 0x0e
    37e2:	7d 84       	ldd	r7, Y+13	; 0x0d
    37e4:	8c 84       	ldd	r8, Y+12	; 0x0c
    37e6:	9b 84       	ldd	r9, Y+11	; 0x0b
    37e8:	aa 84       	ldd	r10, Y+10	; 0x0a
    37ea:	b9 84       	ldd	r11, Y+9	; 0x09
    37ec:	c8 84       	ldd	r12, Y+8	; 0x08
    37ee:	df 80       	ldd	r13, Y+7	; 0x07
    37f0:	ee 80       	ldd	r14, Y+6	; 0x06
    37f2:	fd 80       	ldd	r15, Y+5	; 0x05
    37f4:	0c 81       	ldd	r16, Y+4	; 0x04
    37f6:	1b 81       	ldd	r17, Y+3	; 0x03
    37f8:	aa 81       	ldd	r26, Y+2	; 0x02
    37fa:	b9 81       	ldd	r27, Y+1	; 0x01
    37fc:	ce 0f       	add	r28, r30
    37fe:	d1 1d       	adc	r29, r1
    3800:	0f b6       	in	r0, 0x3f	; 63
    3802:	f8 94       	cli
    3804:	de bf       	out	0x3e, r29	; 62
    3806:	0f be       	out	0x3f, r0	; 63
    3808:	cd bf       	out	0x3d, r28	; 61
    380a:	ed 01       	movw	r28, r26
    380c:	08 95       	ret

0000380e <_exit>:
    380e:	f8 94       	cli

00003810 <__stop_program>:
    3810:	ff cf       	rjmp	.-2      	; 0x3810 <__stop_program>
