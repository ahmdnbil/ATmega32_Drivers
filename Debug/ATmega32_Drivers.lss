
ATmega32_Drivers.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000367c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000001c  00800060  0000367c  000036f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000026b8  00000000  00000000  0000370c  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000cc1  00000000  00000000  00005dc4  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000160  00000000  00000000  00006a85  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 0000018f  00000000  00000000  00006be5  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002045  00000000  00000000  00006d74  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001101  00000000  00000000  00008db9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000f82  00000000  00000000  00009eba  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000180  00000000  00000000  0000ae3c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000002c2  00000000  00000000  0000afbc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000088e  00000000  00000000  0000b27e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  0000bb0c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec e7       	ldi	r30, 0x7C	; 124
      68:	f6 e3       	ldi	r31, 0x36	; 54
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ac 37       	cpi	r26, 0x7C	; 124
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 e4 1a 	call	0x35c8	; 0x35c8 <main>
      7a:	0c 94 3c 1b 	jmp	0x3678	; 0x3678 <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 ed 03 	call	0x7da	; 0x7da <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 4d 04 	call	0x89a	; 0x89a <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 4d 04 	call	0x89a	; 0x89a <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 05 1b 	jmp	0x360a	; 0x360a <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	a0 e6       	ldi	r26, 0x60	; 96
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 21 1b 	jmp	0x3642	; 0x3642 <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 11 1b 	jmp	0x3622	; 0x3622 <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 a1 04 	call	0x942	; 0x942 <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 2d 1b 	jmp	0x365a	; 0x365a <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 11 1b 	jmp	0x3622	; 0x3622 <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 a1 04 	call	0x942	; 0x942 <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 2d 1b 	jmp	0x365a	; 0x365a <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 05 1b 	jmp	0x360a	; 0x360a <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__mulsf3+0x60>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__mulsf3+0x76>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__mulsf3+0x4e>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__mulsf3+0x60>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__mulsf3+0x56>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__mulsf3+0x5c>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__mulsf3+0x76>
     484:	80 e6       	ldi	r24, 0x60	; 96
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__mulsf3+0x1e8>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__mulsf3+0x72>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__mulsf3+0x1e8>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__mulsf3+0x88>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__mulsf3+0x1e8>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__mulsf3+0xf4>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__mulsf3+0xe8>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__mulsf3+0x110>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__mulsf3+0x12a>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__mulsf3+0xb0>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__mulsf3+0x16e>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__mulsf3+0x162>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__mulsf3+0x140>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__mulsf3+0x18c>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__mulsf3+0x174>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__mulsf3+0x1ce>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__mulsf3+0x1ce>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__mulsf3+0x1ce>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__mulsf3+0x1d8>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 a1 04 	call	0x942	; 0x942 <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 21 1b 	jmp	0x3642	; 0x3642 <__epilogue_restores__>

00000622 <__divsf3>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 0d 1b 	jmp	0x361a	; 0x361a <__prologue_saves__+0x10>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	b9 e0       	ldi	r27, 0x09	; 9
     640:	eb 2e       	mov	r14, r27
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     662:	29 85       	ldd	r18, Y+9	; 0x09
     664:	22 30       	cpi	r18, 0x02	; 2
     666:	08 f4       	brcc	.+2      	; 0x66a <__divsf3+0x48>
     668:	7e c0       	rjmp	.+252    	; 0x766 <__divsf3+0x144>
     66a:	39 89       	ldd	r19, Y+17	; 0x11
     66c:	32 30       	cpi	r19, 0x02	; 2
     66e:	10 f4       	brcc	.+4      	; 0x674 <__divsf3+0x52>
     670:	b8 01       	movw	r22, r16
     672:	7c c0       	rjmp	.+248    	; 0x76c <__divsf3+0x14a>
     674:	8a 85       	ldd	r24, Y+10	; 0x0a
     676:	9a 89       	ldd	r25, Y+18	; 0x12
     678:	89 27       	eor	r24, r25
     67a:	8a 87       	std	Y+10, r24	; 0x0a
     67c:	24 30       	cpi	r18, 0x04	; 4
     67e:	11 f0       	breq	.+4      	; 0x684 <__divsf3+0x62>
     680:	22 30       	cpi	r18, 0x02	; 2
     682:	31 f4       	brne	.+12     	; 0x690 <__divsf3+0x6e>
     684:	23 17       	cp	r18, r19
     686:	09 f0       	breq	.+2      	; 0x68a <__divsf3+0x68>
     688:	6e c0       	rjmp	.+220    	; 0x766 <__divsf3+0x144>
     68a:	60 e6       	ldi	r22, 0x60	; 96
     68c:	70 e0       	ldi	r23, 0x00	; 0
     68e:	6e c0       	rjmp	.+220    	; 0x76c <__divsf3+0x14a>
     690:	34 30       	cpi	r19, 0x04	; 4
     692:	39 f4       	brne	.+14     	; 0x6a2 <__divsf3+0x80>
     694:	1d 86       	std	Y+13, r1	; 0x0d
     696:	1e 86       	std	Y+14, r1	; 0x0e
     698:	1f 86       	std	Y+15, r1	; 0x0f
     69a:	18 8a       	std	Y+16, r1	; 0x10
     69c:	1c 86       	std	Y+12, r1	; 0x0c
     69e:	1b 86       	std	Y+11, r1	; 0x0b
     6a0:	04 c0       	rjmp	.+8      	; 0x6aa <__divsf3+0x88>
     6a2:	32 30       	cpi	r19, 0x02	; 2
     6a4:	21 f4       	brne	.+8      	; 0x6ae <__divsf3+0x8c>
     6a6:	84 e0       	ldi	r24, 0x04	; 4
     6a8:	89 87       	std	Y+9, r24	; 0x09
     6aa:	b7 01       	movw	r22, r14
     6ac:	5f c0       	rjmp	.+190    	; 0x76c <__divsf3+0x14a>
     6ae:	2b 85       	ldd	r18, Y+11	; 0x0b
     6b0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6b2:	8b 89       	ldd	r24, Y+19	; 0x13
     6b4:	9c 89       	ldd	r25, Y+20	; 0x14
     6b6:	28 1b       	sub	r18, r24
     6b8:	39 0b       	sbc	r19, r25
     6ba:	3c 87       	std	Y+12, r19	; 0x0c
     6bc:	2b 87       	std	Y+11, r18	; 0x0b
     6be:	ed 84       	ldd	r14, Y+13	; 0x0d
     6c0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6c2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6c4:	18 89       	ldd	r17, Y+16	; 0x10
     6c6:	ad 88       	ldd	r10, Y+21	; 0x15
     6c8:	be 88       	ldd	r11, Y+22	; 0x16
     6ca:	cf 88       	ldd	r12, Y+23	; 0x17
     6cc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6ce:	ea 14       	cp	r14, r10
     6d0:	fb 04       	cpc	r15, r11
     6d2:	0c 05       	cpc	r16, r12
     6d4:	1d 05       	cpc	r17, r13
     6d6:	40 f4       	brcc	.+16     	; 0x6e8 <__divsf3+0xc6>
     6d8:	ee 0c       	add	r14, r14
     6da:	ff 1c       	adc	r15, r15
     6dc:	00 1f       	adc	r16, r16
     6de:	11 1f       	adc	r17, r17
     6e0:	21 50       	subi	r18, 0x01	; 1
     6e2:	30 40       	sbci	r19, 0x00	; 0
     6e4:	3c 87       	std	Y+12, r19	; 0x0c
     6e6:	2b 87       	std	Y+11, r18	; 0x0b
     6e8:	20 e0       	ldi	r18, 0x00	; 0
     6ea:	30 e0       	ldi	r19, 0x00	; 0
     6ec:	40 e0       	ldi	r20, 0x00	; 0
     6ee:	50 e0       	ldi	r21, 0x00	; 0
     6f0:	80 e0       	ldi	r24, 0x00	; 0
     6f2:	90 e0       	ldi	r25, 0x00	; 0
     6f4:	a0 e0       	ldi	r26, 0x00	; 0
     6f6:	b0 e4       	ldi	r27, 0x40	; 64
     6f8:	60 e0       	ldi	r22, 0x00	; 0
     6fa:	70 e0       	ldi	r23, 0x00	; 0
     6fc:	ea 14       	cp	r14, r10
     6fe:	fb 04       	cpc	r15, r11
     700:	0c 05       	cpc	r16, r12
     702:	1d 05       	cpc	r17, r13
     704:	40 f0       	brcs	.+16     	; 0x716 <__divsf3+0xf4>
     706:	28 2b       	or	r18, r24
     708:	39 2b       	or	r19, r25
     70a:	4a 2b       	or	r20, r26
     70c:	5b 2b       	or	r21, r27
     70e:	ea 18       	sub	r14, r10
     710:	fb 08       	sbc	r15, r11
     712:	0c 09       	sbc	r16, r12
     714:	1d 09       	sbc	r17, r13
     716:	b6 95       	lsr	r27
     718:	a7 95       	ror	r26
     71a:	97 95       	ror	r25
     71c:	87 95       	ror	r24
     71e:	ee 0c       	add	r14, r14
     720:	ff 1c       	adc	r15, r15
     722:	00 1f       	adc	r16, r16
     724:	11 1f       	adc	r17, r17
     726:	6f 5f       	subi	r22, 0xFF	; 255
     728:	7f 4f       	sbci	r23, 0xFF	; 255
     72a:	6f 31       	cpi	r22, 0x1F	; 31
     72c:	71 05       	cpc	r23, r1
     72e:	31 f7       	brne	.-52     	; 0x6fc <__divsf3+0xda>
     730:	da 01       	movw	r26, r20
     732:	c9 01       	movw	r24, r18
     734:	8f 77       	andi	r24, 0x7F	; 127
     736:	90 70       	andi	r25, 0x00	; 0
     738:	a0 70       	andi	r26, 0x00	; 0
     73a:	b0 70       	andi	r27, 0x00	; 0
     73c:	80 34       	cpi	r24, 0x40	; 64
     73e:	91 05       	cpc	r25, r1
     740:	a1 05       	cpc	r26, r1
     742:	b1 05       	cpc	r27, r1
     744:	61 f4       	brne	.+24     	; 0x75e <__divsf3+0x13c>
     746:	27 fd       	sbrc	r18, 7
     748:	0a c0       	rjmp	.+20     	; 0x75e <__divsf3+0x13c>
     74a:	e1 14       	cp	r14, r1
     74c:	f1 04       	cpc	r15, r1
     74e:	01 05       	cpc	r16, r1
     750:	11 05       	cpc	r17, r1
     752:	29 f0       	breq	.+10     	; 0x75e <__divsf3+0x13c>
     754:	20 5c       	subi	r18, 0xC0	; 192
     756:	3f 4f       	sbci	r19, 0xFF	; 255
     758:	4f 4f       	sbci	r20, 0xFF	; 255
     75a:	5f 4f       	sbci	r21, 0xFF	; 255
     75c:	20 78       	andi	r18, 0x80	; 128
     75e:	2d 87       	std	Y+13, r18	; 0x0d
     760:	3e 87       	std	Y+14, r19	; 0x0e
     762:	4f 87       	std	Y+15, r20	; 0x0f
     764:	58 8b       	std	Y+16, r21	; 0x10
     766:	be 01       	movw	r22, r28
     768:	67 5f       	subi	r22, 0xF7	; 247
     76a:	7f 4f       	sbci	r23, 0xFF	; 255
     76c:	cb 01       	movw	r24, r22
     76e:	0e 94 a1 04 	call	0x942	; 0x942 <__pack_f>
     772:	68 96       	adiw	r28, 0x18	; 24
     774:	ea e0       	ldi	r30, 0x0A	; 10
     776:	0c 94 29 1b 	jmp	0x3652	; 0x3652 <__epilogue_restores__+0x10>

0000077a <__gtsf2>:
     77a:	a8 e1       	ldi	r26, 0x18	; 24
     77c:	b0 e0       	ldi	r27, 0x00	; 0
     77e:	e3 ec       	ldi	r30, 0xC3	; 195
     780:	f3 e0       	ldi	r31, 0x03	; 3
     782:	0c 94 11 1b 	jmp	0x3622	; 0x3622 <__prologue_saves__+0x18>
     786:	69 83       	std	Y+1, r22	; 0x01
     788:	7a 83       	std	Y+2, r23	; 0x02
     78a:	8b 83       	std	Y+3, r24	; 0x03
     78c:	9c 83       	std	Y+4, r25	; 0x04
     78e:	2d 83       	std	Y+5, r18	; 0x05
     790:	3e 83       	std	Y+6, r19	; 0x06
     792:	4f 83       	std	Y+7, r20	; 0x07
     794:	58 87       	std	Y+8, r21	; 0x08
     796:	89 e0       	ldi	r24, 0x09	; 9
     798:	e8 2e       	mov	r14, r24
     79a:	f1 2c       	mov	r15, r1
     79c:	ec 0e       	add	r14, r28
     79e:	fd 1e       	adc	r15, r29
     7a0:	ce 01       	movw	r24, r28
     7a2:	01 96       	adiw	r24, 0x01	; 1
     7a4:	b7 01       	movw	r22, r14
     7a6:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     7aa:	8e 01       	movw	r16, r28
     7ac:	0f 5e       	subi	r16, 0xEF	; 239
     7ae:	1f 4f       	sbci	r17, 0xFF	; 255
     7b0:	ce 01       	movw	r24, r28
     7b2:	05 96       	adiw	r24, 0x05	; 5
     7b4:	b8 01       	movw	r22, r16
     7b6:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     7ba:	89 85       	ldd	r24, Y+9	; 0x09
     7bc:	82 30       	cpi	r24, 0x02	; 2
     7be:	40 f0       	brcs	.+16     	; 0x7d0 <__gtsf2+0x56>
     7c0:	89 89       	ldd	r24, Y+17	; 0x11
     7c2:	82 30       	cpi	r24, 0x02	; 2
     7c4:	28 f0       	brcs	.+10     	; 0x7d0 <__gtsf2+0x56>
     7c6:	c7 01       	movw	r24, r14
     7c8:	b8 01       	movw	r22, r16
     7ca:	0e 94 ee 05 	call	0xbdc	; 0xbdc <__fpcmp_parts_f>
     7ce:	01 c0       	rjmp	.+2      	; 0x7d2 <__gtsf2+0x58>
     7d0:	8f ef       	ldi	r24, 0xFF	; 255
     7d2:	68 96       	adiw	r28, 0x18	; 24
     7d4:	e6 e0       	ldi	r30, 0x06	; 6
     7d6:	0c 94 2d 1b 	jmp	0x365a	; 0x365a <__epilogue_restores__+0x18>

000007da <__gesf2>:
     7da:	a8 e1       	ldi	r26, 0x18	; 24
     7dc:	b0 e0       	ldi	r27, 0x00	; 0
     7de:	e3 ef       	ldi	r30, 0xF3	; 243
     7e0:	f3 e0       	ldi	r31, 0x03	; 3
     7e2:	0c 94 11 1b 	jmp	0x3622	; 0x3622 <__prologue_saves__+0x18>
     7e6:	69 83       	std	Y+1, r22	; 0x01
     7e8:	7a 83       	std	Y+2, r23	; 0x02
     7ea:	8b 83       	std	Y+3, r24	; 0x03
     7ec:	9c 83       	std	Y+4, r25	; 0x04
     7ee:	2d 83       	std	Y+5, r18	; 0x05
     7f0:	3e 83       	std	Y+6, r19	; 0x06
     7f2:	4f 83       	std	Y+7, r20	; 0x07
     7f4:	58 87       	std	Y+8, r21	; 0x08
     7f6:	89 e0       	ldi	r24, 0x09	; 9
     7f8:	e8 2e       	mov	r14, r24
     7fa:	f1 2c       	mov	r15, r1
     7fc:	ec 0e       	add	r14, r28
     7fe:	fd 1e       	adc	r15, r29
     800:	ce 01       	movw	r24, r28
     802:	01 96       	adiw	r24, 0x01	; 1
     804:	b7 01       	movw	r22, r14
     806:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     80a:	8e 01       	movw	r16, r28
     80c:	0f 5e       	subi	r16, 0xEF	; 239
     80e:	1f 4f       	sbci	r17, 0xFF	; 255
     810:	ce 01       	movw	r24, r28
     812:	05 96       	adiw	r24, 0x05	; 5
     814:	b8 01       	movw	r22, r16
     816:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     81a:	89 85       	ldd	r24, Y+9	; 0x09
     81c:	82 30       	cpi	r24, 0x02	; 2
     81e:	40 f0       	brcs	.+16     	; 0x830 <__gesf2+0x56>
     820:	89 89       	ldd	r24, Y+17	; 0x11
     822:	82 30       	cpi	r24, 0x02	; 2
     824:	28 f0       	brcs	.+10     	; 0x830 <__gesf2+0x56>
     826:	c7 01       	movw	r24, r14
     828:	b8 01       	movw	r22, r16
     82a:	0e 94 ee 05 	call	0xbdc	; 0xbdc <__fpcmp_parts_f>
     82e:	01 c0       	rjmp	.+2      	; 0x832 <__gesf2+0x58>
     830:	8f ef       	ldi	r24, 0xFF	; 255
     832:	68 96       	adiw	r28, 0x18	; 24
     834:	e6 e0       	ldi	r30, 0x06	; 6
     836:	0c 94 2d 1b 	jmp	0x365a	; 0x365a <__epilogue_restores__+0x18>

0000083a <__ltsf2>:
     83a:	a8 e1       	ldi	r26, 0x18	; 24
     83c:	b0 e0       	ldi	r27, 0x00	; 0
     83e:	e3 e2       	ldi	r30, 0x23	; 35
     840:	f4 e0       	ldi	r31, 0x04	; 4
     842:	0c 94 11 1b 	jmp	0x3622	; 0x3622 <__prologue_saves__+0x18>
     846:	69 83       	std	Y+1, r22	; 0x01
     848:	7a 83       	std	Y+2, r23	; 0x02
     84a:	8b 83       	std	Y+3, r24	; 0x03
     84c:	9c 83       	std	Y+4, r25	; 0x04
     84e:	2d 83       	std	Y+5, r18	; 0x05
     850:	3e 83       	std	Y+6, r19	; 0x06
     852:	4f 83       	std	Y+7, r20	; 0x07
     854:	58 87       	std	Y+8, r21	; 0x08
     856:	89 e0       	ldi	r24, 0x09	; 9
     858:	e8 2e       	mov	r14, r24
     85a:	f1 2c       	mov	r15, r1
     85c:	ec 0e       	add	r14, r28
     85e:	fd 1e       	adc	r15, r29
     860:	ce 01       	movw	r24, r28
     862:	01 96       	adiw	r24, 0x01	; 1
     864:	b7 01       	movw	r22, r14
     866:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     86a:	8e 01       	movw	r16, r28
     86c:	0f 5e       	subi	r16, 0xEF	; 239
     86e:	1f 4f       	sbci	r17, 0xFF	; 255
     870:	ce 01       	movw	r24, r28
     872:	05 96       	adiw	r24, 0x05	; 5
     874:	b8 01       	movw	r22, r16
     876:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     87a:	89 85       	ldd	r24, Y+9	; 0x09
     87c:	82 30       	cpi	r24, 0x02	; 2
     87e:	40 f0       	brcs	.+16     	; 0x890 <__stack+0x31>
     880:	89 89       	ldd	r24, Y+17	; 0x11
     882:	82 30       	cpi	r24, 0x02	; 2
     884:	28 f0       	brcs	.+10     	; 0x890 <__stack+0x31>
     886:	c7 01       	movw	r24, r14
     888:	b8 01       	movw	r22, r16
     88a:	0e 94 ee 05 	call	0xbdc	; 0xbdc <__fpcmp_parts_f>
     88e:	01 c0       	rjmp	.+2      	; 0x892 <__stack+0x33>
     890:	81 e0       	ldi	r24, 0x01	; 1
     892:	68 96       	adiw	r28, 0x18	; 24
     894:	e6 e0       	ldi	r30, 0x06	; 6
     896:	0c 94 2d 1b 	jmp	0x365a	; 0x365a <__epilogue_restores__+0x18>

0000089a <__fixsfsi>:
     89a:	ac e0       	ldi	r26, 0x0C	; 12
     89c:	b0 e0       	ldi	r27, 0x00	; 0
     89e:	e3 e5       	ldi	r30, 0x53	; 83
     8a0:	f4 e0       	ldi	r31, 0x04	; 4
     8a2:	0c 94 15 1b 	jmp	0x362a	; 0x362a <__prologue_saves__+0x20>
     8a6:	69 83       	std	Y+1, r22	; 0x01
     8a8:	7a 83       	std	Y+2, r23	; 0x02
     8aa:	8b 83       	std	Y+3, r24	; 0x03
     8ac:	9c 83       	std	Y+4, r25	; 0x04
     8ae:	ce 01       	movw	r24, r28
     8b0:	01 96       	adiw	r24, 0x01	; 1
     8b2:	be 01       	movw	r22, r28
     8b4:	6b 5f       	subi	r22, 0xFB	; 251
     8b6:	7f 4f       	sbci	r23, 0xFF	; 255
     8b8:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     8bc:	8d 81       	ldd	r24, Y+5	; 0x05
     8be:	82 30       	cpi	r24, 0x02	; 2
     8c0:	61 f1       	breq	.+88     	; 0x91a <__fixsfsi+0x80>
     8c2:	82 30       	cpi	r24, 0x02	; 2
     8c4:	50 f1       	brcs	.+84     	; 0x91a <__fixsfsi+0x80>
     8c6:	84 30       	cpi	r24, 0x04	; 4
     8c8:	21 f4       	brne	.+8      	; 0x8d2 <__fixsfsi+0x38>
     8ca:	8e 81       	ldd	r24, Y+6	; 0x06
     8cc:	88 23       	and	r24, r24
     8ce:	51 f1       	breq	.+84     	; 0x924 <__fixsfsi+0x8a>
     8d0:	2e c0       	rjmp	.+92     	; 0x92e <__fixsfsi+0x94>
     8d2:	2f 81       	ldd	r18, Y+7	; 0x07
     8d4:	38 85       	ldd	r19, Y+8	; 0x08
     8d6:	37 fd       	sbrc	r19, 7
     8d8:	20 c0       	rjmp	.+64     	; 0x91a <__fixsfsi+0x80>
     8da:	6e 81       	ldd	r22, Y+6	; 0x06
     8dc:	2f 31       	cpi	r18, 0x1F	; 31
     8de:	31 05       	cpc	r19, r1
     8e0:	1c f0       	brlt	.+6      	; 0x8e8 <__fixsfsi+0x4e>
     8e2:	66 23       	and	r22, r22
     8e4:	f9 f0       	breq	.+62     	; 0x924 <__fixsfsi+0x8a>
     8e6:	23 c0       	rjmp	.+70     	; 0x92e <__fixsfsi+0x94>
     8e8:	8e e1       	ldi	r24, 0x1E	; 30
     8ea:	90 e0       	ldi	r25, 0x00	; 0
     8ec:	82 1b       	sub	r24, r18
     8ee:	93 0b       	sbc	r25, r19
     8f0:	29 85       	ldd	r18, Y+9	; 0x09
     8f2:	3a 85       	ldd	r19, Y+10	; 0x0a
     8f4:	4b 85       	ldd	r20, Y+11	; 0x0b
     8f6:	5c 85       	ldd	r21, Y+12	; 0x0c
     8f8:	04 c0       	rjmp	.+8      	; 0x902 <__fixsfsi+0x68>
     8fa:	56 95       	lsr	r21
     8fc:	47 95       	ror	r20
     8fe:	37 95       	ror	r19
     900:	27 95       	ror	r18
     902:	8a 95       	dec	r24
     904:	d2 f7       	brpl	.-12     	; 0x8fa <__fixsfsi+0x60>
     906:	66 23       	and	r22, r22
     908:	b1 f0       	breq	.+44     	; 0x936 <__fixsfsi+0x9c>
     90a:	50 95       	com	r21
     90c:	40 95       	com	r20
     90e:	30 95       	com	r19
     910:	21 95       	neg	r18
     912:	3f 4f       	sbci	r19, 0xFF	; 255
     914:	4f 4f       	sbci	r20, 0xFF	; 255
     916:	5f 4f       	sbci	r21, 0xFF	; 255
     918:	0e c0       	rjmp	.+28     	; 0x936 <__fixsfsi+0x9c>
     91a:	20 e0       	ldi	r18, 0x00	; 0
     91c:	30 e0       	ldi	r19, 0x00	; 0
     91e:	40 e0       	ldi	r20, 0x00	; 0
     920:	50 e0       	ldi	r21, 0x00	; 0
     922:	09 c0       	rjmp	.+18     	; 0x936 <__fixsfsi+0x9c>
     924:	2f ef       	ldi	r18, 0xFF	; 255
     926:	3f ef       	ldi	r19, 0xFF	; 255
     928:	4f ef       	ldi	r20, 0xFF	; 255
     92a:	5f e7       	ldi	r21, 0x7F	; 127
     92c:	04 c0       	rjmp	.+8      	; 0x936 <__fixsfsi+0x9c>
     92e:	20 e0       	ldi	r18, 0x00	; 0
     930:	30 e0       	ldi	r19, 0x00	; 0
     932:	40 e0       	ldi	r20, 0x00	; 0
     934:	50 e8       	ldi	r21, 0x80	; 128
     936:	b9 01       	movw	r22, r18
     938:	ca 01       	movw	r24, r20
     93a:	2c 96       	adiw	r28, 0x0c	; 12
     93c:	e2 e0       	ldi	r30, 0x02	; 2
     93e:	0c 94 31 1b 	jmp	0x3662	; 0x3662 <__epilogue_restores__+0x20>

00000942 <__pack_f>:
     942:	df 92       	push	r13
     944:	ef 92       	push	r14
     946:	ff 92       	push	r15
     948:	0f 93       	push	r16
     94a:	1f 93       	push	r17
     94c:	fc 01       	movw	r30, r24
     94e:	e4 80       	ldd	r14, Z+4	; 0x04
     950:	f5 80       	ldd	r15, Z+5	; 0x05
     952:	06 81       	ldd	r16, Z+6	; 0x06
     954:	17 81       	ldd	r17, Z+7	; 0x07
     956:	d1 80       	ldd	r13, Z+1	; 0x01
     958:	80 81       	ld	r24, Z
     95a:	82 30       	cpi	r24, 0x02	; 2
     95c:	48 f4       	brcc	.+18     	; 0x970 <__pack_f+0x2e>
     95e:	80 e0       	ldi	r24, 0x00	; 0
     960:	90 e0       	ldi	r25, 0x00	; 0
     962:	a0 e1       	ldi	r26, 0x10	; 16
     964:	b0 e0       	ldi	r27, 0x00	; 0
     966:	e8 2a       	or	r14, r24
     968:	f9 2a       	or	r15, r25
     96a:	0a 2b       	or	r16, r26
     96c:	1b 2b       	or	r17, r27
     96e:	a5 c0       	rjmp	.+330    	; 0xaba <__pack_f+0x178>
     970:	84 30       	cpi	r24, 0x04	; 4
     972:	09 f4       	brne	.+2      	; 0x976 <__pack_f+0x34>
     974:	9f c0       	rjmp	.+318    	; 0xab4 <__pack_f+0x172>
     976:	82 30       	cpi	r24, 0x02	; 2
     978:	21 f4       	brne	.+8      	; 0x982 <__pack_f+0x40>
     97a:	ee 24       	eor	r14, r14
     97c:	ff 24       	eor	r15, r15
     97e:	87 01       	movw	r16, r14
     980:	05 c0       	rjmp	.+10     	; 0x98c <__pack_f+0x4a>
     982:	e1 14       	cp	r14, r1
     984:	f1 04       	cpc	r15, r1
     986:	01 05       	cpc	r16, r1
     988:	11 05       	cpc	r17, r1
     98a:	19 f4       	brne	.+6      	; 0x992 <__pack_f+0x50>
     98c:	e0 e0       	ldi	r30, 0x00	; 0
     98e:	f0 e0       	ldi	r31, 0x00	; 0
     990:	96 c0       	rjmp	.+300    	; 0xabe <__pack_f+0x17c>
     992:	62 81       	ldd	r22, Z+2	; 0x02
     994:	73 81       	ldd	r23, Z+3	; 0x03
     996:	9f ef       	ldi	r25, 0xFF	; 255
     998:	62 38       	cpi	r22, 0x82	; 130
     99a:	79 07       	cpc	r23, r25
     99c:	0c f0       	brlt	.+2      	; 0x9a0 <__pack_f+0x5e>
     99e:	5b c0       	rjmp	.+182    	; 0xa56 <__pack_f+0x114>
     9a0:	22 e8       	ldi	r18, 0x82	; 130
     9a2:	3f ef       	ldi	r19, 0xFF	; 255
     9a4:	26 1b       	sub	r18, r22
     9a6:	37 0b       	sbc	r19, r23
     9a8:	2a 31       	cpi	r18, 0x1A	; 26
     9aa:	31 05       	cpc	r19, r1
     9ac:	2c f0       	brlt	.+10     	; 0x9b8 <__pack_f+0x76>
     9ae:	20 e0       	ldi	r18, 0x00	; 0
     9b0:	30 e0       	ldi	r19, 0x00	; 0
     9b2:	40 e0       	ldi	r20, 0x00	; 0
     9b4:	50 e0       	ldi	r21, 0x00	; 0
     9b6:	2a c0       	rjmp	.+84     	; 0xa0c <__pack_f+0xca>
     9b8:	b8 01       	movw	r22, r16
     9ba:	a7 01       	movw	r20, r14
     9bc:	02 2e       	mov	r0, r18
     9be:	04 c0       	rjmp	.+8      	; 0x9c8 <__pack_f+0x86>
     9c0:	76 95       	lsr	r23
     9c2:	67 95       	ror	r22
     9c4:	57 95       	ror	r21
     9c6:	47 95       	ror	r20
     9c8:	0a 94       	dec	r0
     9ca:	d2 f7       	brpl	.-12     	; 0x9c0 <__pack_f+0x7e>
     9cc:	81 e0       	ldi	r24, 0x01	; 1
     9ce:	90 e0       	ldi	r25, 0x00	; 0
     9d0:	a0 e0       	ldi	r26, 0x00	; 0
     9d2:	b0 e0       	ldi	r27, 0x00	; 0
     9d4:	04 c0       	rjmp	.+8      	; 0x9de <__pack_f+0x9c>
     9d6:	88 0f       	add	r24, r24
     9d8:	99 1f       	adc	r25, r25
     9da:	aa 1f       	adc	r26, r26
     9dc:	bb 1f       	adc	r27, r27
     9de:	2a 95       	dec	r18
     9e0:	d2 f7       	brpl	.-12     	; 0x9d6 <__pack_f+0x94>
     9e2:	01 97       	sbiw	r24, 0x01	; 1
     9e4:	a1 09       	sbc	r26, r1
     9e6:	b1 09       	sbc	r27, r1
     9e8:	8e 21       	and	r24, r14
     9ea:	9f 21       	and	r25, r15
     9ec:	a0 23       	and	r26, r16
     9ee:	b1 23       	and	r27, r17
     9f0:	00 97       	sbiw	r24, 0x00	; 0
     9f2:	a1 05       	cpc	r26, r1
     9f4:	b1 05       	cpc	r27, r1
     9f6:	21 f0       	breq	.+8      	; 0xa00 <__pack_f+0xbe>
     9f8:	81 e0       	ldi	r24, 0x01	; 1
     9fa:	90 e0       	ldi	r25, 0x00	; 0
     9fc:	a0 e0       	ldi	r26, 0x00	; 0
     9fe:	b0 e0       	ldi	r27, 0x00	; 0
     a00:	9a 01       	movw	r18, r20
     a02:	ab 01       	movw	r20, r22
     a04:	28 2b       	or	r18, r24
     a06:	39 2b       	or	r19, r25
     a08:	4a 2b       	or	r20, r26
     a0a:	5b 2b       	or	r21, r27
     a0c:	da 01       	movw	r26, r20
     a0e:	c9 01       	movw	r24, r18
     a10:	8f 77       	andi	r24, 0x7F	; 127
     a12:	90 70       	andi	r25, 0x00	; 0
     a14:	a0 70       	andi	r26, 0x00	; 0
     a16:	b0 70       	andi	r27, 0x00	; 0
     a18:	80 34       	cpi	r24, 0x40	; 64
     a1a:	91 05       	cpc	r25, r1
     a1c:	a1 05       	cpc	r26, r1
     a1e:	b1 05       	cpc	r27, r1
     a20:	39 f4       	brne	.+14     	; 0xa30 <__pack_f+0xee>
     a22:	27 ff       	sbrs	r18, 7
     a24:	09 c0       	rjmp	.+18     	; 0xa38 <__pack_f+0xf6>
     a26:	20 5c       	subi	r18, 0xC0	; 192
     a28:	3f 4f       	sbci	r19, 0xFF	; 255
     a2a:	4f 4f       	sbci	r20, 0xFF	; 255
     a2c:	5f 4f       	sbci	r21, 0xFF	; 255
     a2e:	04 c0       	rjmp	.+8      	; 0xa38 <__pack_f+0xf6>
     a30:	21 5c       	subi	r18, 0xC1	; 193
     a32:	3f 4f       	sbci	r19, 0xFF	; 255
     a34:	4f 4f       	sbci	r20, 0xFF	; 255
     a36:	5f 4f       	sbci	r21, 0xFF	; 255
     a38:	e0 e0       	ldi	r30, 0x00	; 0
     a3a:	f0 e0       	ldi	r31, 0x00	; 0
     a3c:	20 30       	cpi	r18, 0x00	; 0
     a3e:	a0 e0       	ldi	r26, 0x00	; 0
     a40:	3a 07       	cpc	r19, r26
     a42:	a0 e0       	ldi	r26, 0x00	; 0
     a44:	4a 07       	cpc	r20, r26
     a46:	a0 e4       	ldi	r26, 0x40	; 64
     a48:	5a 07       	cpc	r21, r26
     a4a:	10 f0       	brcs	.+4      	; 0xa50 <__pack_f+0x10e>
     a4c:	e1 e0       	ldi	r30, 0x01	; 1
     a4e:	f0 e0       	ldi	r31, 0x00	; 0
     a50:	79 01       	movw	r14, r18
     a52:	8a 01       	movw	r16, r20
     a54:	27 c0       	rjmp	.+78     	; 0xaa4 <__pack_f+0x162>
     a56:	60 38       	cpi	r22, 0x80	; 128
     a58:	71 05       	cpc	r23, r1
     a5a:	64 f5       	brge	.+88     	; 0xab4 <__pack_f+0x172>
     a5c:	fb 01       	movw	r30, r22
     a5e:	e1 58       	subi	r30, 0x81	; 129
     a60:	ff 4f       	sbci	r31, 0xFF	; 255
     a62:	d8 01       	movw	r26, r16
     a64:	c7 01       	movw	r24, r14
     a66:	8f 77       	andi	r24, 0x7F	; 127
     a68:	90 70       	andi	r25, 0x00	; 0
     a6a:	a0 70       	andi	r26, 0x00	; 0
     a6c:	b0 70       	andi	r27, 0x00	; 0
     a6e:	80 34       	cpi	r24, 0x40	; 64
     a70:	91 05       	cpc	r25, r1
     a72:	a1 05       	cpc	r26, r1
     a74:	b1 05       	cpc	r27, r1
     a76:	39 f4       	brne	.+14     	; 0xa86 <__pack_f+0x144>
     a78:	e7 fe       	sbrs	r14, 7
     a7a:	0d c0       	rjmp	.+26     	; 0xa96 <__pack_f+0x154>
     a7c:	80 e4       	ldi	r24, 0x40	; 64
     a7e:	90 e0       	ldi	r25, 0x00	; 0
     a80:	a0 e0       	ldi	r26, 0x00	; 0
     a82:	b0 e0       	ldi	r27, 0x00	; 0
     a84:	04 c0       	rjmp	.+8      	; 0xa8e <__pack_f+0x14c>
     a86:	8f e3       	ldi	r24, 0x3F	; 63
     a88:	90 e0       	ldi	r25, 0x00	; 0
     a8a:	a0 e0       	ldi	r26, 0x00	; 0
     a8c:	b0 e0       	ldi	r27, 0x00	; 0
     a8e:	e8 0e       	add	r14, r24
     a90:	f9 1e       	adc	r15, r25
     a92:	0a 1f       	adc	r16, r26
     a94:	1b 1f       	adc	r17, r27
     a96:	17 ff       	sbrs	r17, 7
     a98:	05 c0       	rjmp	.+10     	; 0xaa4 <__pack_f+0x162>
     a9a:	16 95       	lsr	r17
     a9c:	07 95       	ror	r16
     a9e:	f7 94       	ror	r15
     aa0:	e7 94       	ror	r14
     aa2:	31 96       	adiw	r30, 0x01	; 1
     aa4:	87 e0       	ldi	r24, 0x07	; 7
     aa6:	16 95       	lsr	r17
     aa8:	07 95       	ror	r16
     aaa:	f7 94       	ror	r15
     aac:	e7 94       	ror	r14
     aae:	8a 95       	dec	r24
     ab0:	d1 f7       	brne	.-12     	; 0xaa6 <__pack_f+0x164>
     ab2:	05 c0       	rjmp	.+10     	; 0xabe <__pack_f+0x17c>
     ab4:	ee 24       	eor	r14, r14
     ab6:	ff 24       	eor	r15, r15
     ab8:	87 01       	movw	r16, r14
     aba:	ef ef       	ldi	r30, 0xFF	; 255
     abc:	f0 e0       	ldi	r31, 0x00	; 0
     abe:	6e 2f       	mov	r22, r30
     ac0:	67 95       	ror	r22
     ac2:	66 27       	eor	r22, r22
     ac4:	67 95       	ror	r22
     ac6:	90 2f       	mov	r25, r16
     ac8:	9f 77       	andi	r25, 0x7F	; 127
     aca:	d7 94       	ror	r13
     acc:	dd 24       	eor	r13, r13
     ace:	d7 94       	ror	r13
     ad0:	8e 2f       	mov	r24, r30
     ad2:	86 95       	lsr	r24
     ad4:	49 2f       	mov	r20, r25
     ad6:	46 2b       	or	r20, r22
     ad8:	58 2f       	mov	r21, r24
     ada:	5d 29       	or	r21, r13
     adc:	b7 01       	movw	r22, r14
     ade:	ca 01       	movw	r24, r20
     ae0:	1f 91       	pop	r17
     ae2:	0f 91       	pop	r16
     ae4:	ff 90       	pop	r15
     ae6:	ef 90       	pop	r14
     ae8:	df 90       	pop	r13
     aea:	08 95       	ret

00000aec <__unpack_f>:
     aec:	fc 01       	movw	r30, r24
     aee:	db 01       	movw	r26, r22
     af0:	40 81       	ld	r20, Z
     af2:	51 81       	ldd	r21, Z+1	; 0x01
     af4:	22 81       	ldd	r18, Z+2	; 0x02
     af6:	62 2f       	mov	r22, r18
     af8:	6f 77       	andi	r22, 0x7F	; 127
     afa:	70 e0       	ldi	r23, 0x00	; 0
     afc:	22 1f       	adc	r18, r18
     afe:	22 27       	eor	r18, r18
     b00:	22 1f       	adc	r18, r18
     b02:	93 81       	ldd	r25, Z+3	; 0x03
     b04:	89 2f       	mov	r24, r25
     b06:	88 0f       	add	r24, r24
     b08:	82 2b       	or	r24, r18
     b0a:	28 2f       	mov	r18, r24
     b0c:	30 e0       	ldi	r19, 0x00	; 0
     b0e:	99 1f       	adc	r25, r25
     b10:	99 27       	eor	r25, r25
     b12:	99 1f       	adc	r25, r25
     b14:	11 96       	adiw	r26, 0x01	; 1
     b16:	9c 93       	st	X, r25
     b18:	11 97       	sbiw	r26, 0x01	; 1
     b1a:	21 15       	cp	r18, r1
     b1c:	31 05       	cpc	r19, r1
     b1e:	a9 f5       	brne	.+106    	; 0xb8a <__unpack_f+0x9e>
     b20:	41 15       	cp	r20, r1
     b22:	51 05       	cpc	r21, r1
     b24:	61 05       	cpc	r22, r1
     b26:	71 05       	cpc	r23, r1
     b28:	11 f4       	brne	.+4      	; 0xb2e <__unpack_f+0x42>
     b2a:	82 e0       	ldi	r24, 0x02	; 2
     b2c:	37 c0       	rjmp	.+110    	; 0xb9c <__unpack_f+0xb0>
     b2e:	82 e8       	ldi	r24, 0x82	; 130
     b30:	9f ef       	ldi	r25, 0xFF	; 255
     b32:	13 96       	adiw	r26, 0x03	; 3
     b34:	9c 93       	st	X, r25
     b36:	8e 93       	st	-X, r24
     b38:	12 97       	sbiw	r26, 0x02	; 2
     b3a:	9a 01       	movw	r18, r20
     b3c:	ab 01       	movw	r20, r22
     b3e:	67 e0       	ldi	r22, 0x07	; 7
     b40:	22 0f       	add	r18, r18
     b42:	33 1f       	adc	r19, r19
     b44:	44 1f       	adc	r20, r20
     b46:	55 1f       	adc	r21, r21
     b48:	6a 95       	dec	r22
     b4a:	d1 f7       	brne	.-12     	; 0xb40 <__unpack_f+0x54>
     b4c:	83 e0       	ldi	r24, 0x03	; 3
     b4e:	8c 93       	st	X, r24
     b50:	0d c0       	rjmp	.+26     	; 0xb6c <__unpack_f+0x80>
     b52:	22 0f       	add	r18, r18
     b54:	33 1f       	adc	r19, r19
     b56:	44 1f       	adc	r20, r20
     b58:	55 1f       	adc	r21, r21
     b5a:	12 96       	adiw	r26, 0x02	; 2
     b5c:	8d 91       	ld	r24, X+
     b5e:	9c 91       	ld	r25, X
     b60:	13 97       	sbiw	r26, 0x03	; 3
     b62:	01 97       	sbiw	r24, 0x01	; 1
     b64:	13 96       	adiw	r26, 0x03	; 3
     b66:	9c 93       	st	X, r25
     b68:	8e 93       	st	-X, r24
     b6a:	12 97       	sbiw	r26, 0x02	; 2
     b6c:	20 30       	cpi	r18, 0x00	; 0
     b6e:	80 e0       	ldi	r24, 0x00	; 0
     b70:	38 07       	cpc	r19, r24
     b72:	80 e0       	ldi	r24, 0x00	; 0
     b74:	48 07       	cpc	r20, r24
     b76:	80 e4       	ldi	r24, 0x40	; 64
     b78:	58 07       	cpc	r21, r24
     b7a:	58 f3       	brcs	.-42     	; 0xb52 <__unpack_f+0x66>
     b7c:	14 96       	adiw	r26, 0x04	; 4
     b7e:	2d 93       	st	X+, r18
     b80:	3d 93       	st	X+, r19
     b82:	4d 93       	st	X+, r20
     b84:	5c 93       	st	X, r21
     b86:	17 97       	sbiw	r26, 0x07	; 7
     b88:	08 95       	ret
     b8a:	2f 3f       	cpi	r18, 0xFF	; 255
     b8c:	31 05       	cpc	r19, r1
     b8e:	79 f4       	brne	.+30     	; 0xbae <__unpack_f+0xc2>
     b90:	41 15       	cp	r20, r1
     b92:	51 05       	cpc	r21, r1
     b94:	61 05       	cpc	r22, r1
     b96:	71 05       	cpc	r23, r1
     b98:	19 f4       	brne	.+6      	; 0xba0 <__unpack_f+0xb4>
     b9a:	84 e0       	ldi	r24, 0x04	; 4
     b9c:	8c 93       	st	X, r24
     b9e:	08 95       	ret
     ba0:	64 ff       	sbrs	r22, 4
     ba2:	03 c0       	rjmp	.+6      	; 0xbaa <__unpack_f+0xbe>
     ba4:	81 e0       	ldi	r24, 0x01	; 1
     ba6:	8c 93       	st	X, r24
     ba8:	12 c0       	rjmp	.+36     	; 0xbce <__unpack_f+0xe2>
     baa:	1c 92       	st	X, r1
     bac:	10 c0       	rjmp	.+32     	; 0xbce <__unpack_f+0xe2>
     bae:	2f 57       	subi	r18, 0x7F	; 127
     bb0:	30 40       	sbci	r19, 0x00	; 0
     bb2:	13 96       	adiw	r26, 0x03	; 3
     bb4:	3c 93       	st	X, r19
     bb6:	2e 93       	st	-X, r18
     bb8:	12 97       	sbiw	r26, 0x02	; 2
     bba:	83 e0       	ldi	r24, 0x03	; 3
     bbc:	8c 93       	st	X, r24
     bbe:	87 e0       	ldi	r24, 0x07	; 7
     bc0:	44 0f       	add	r20, r20
     bc2:	55 1f       	adc	r21, r21
     bc4:	66 1f       	adc	r22, r22
     bc6:	77 1f       	adc	r23, r23
     bc8:	8a 95       	dec	r24
     bca:	d1 f7       	brne	.-12     	; 0xbc0 <__unpack_f+0xd4>
     bcc:	70 64       	ori	r23, 0x40	; 64
     bce:	14 96       	adiw	r26, 0x04	; 4
     bd0:	4d 93       	st	X+, r20
     bd2:	5d 93       	st	X+, r21
     bd4:	6d 93       	st	X+, r22
     bd6:	7c 93       	st	X, r23
     bd8:	17 97       	sbiw	r26, 0x07	; 7
     bda:	08 95       	ret

00000bdc <__fpcmp_parts_f>:
     bdc:	1f 93       	push	r17
     bde:	dc 01       	movw	r26, r24
     be0:	fb 01       	movw	r30, r22
     be2:	9c 91       	ld	r25, X
     be4:	92 30       	cpi	r25, 0x02	; 2
     be6:	08 f4       	brcc	.+2      	; 0xbea <__fpcmp_parts_f+0xe>
     be8:	47 c0       	rjmp	.+142    	; 0xc78 <__fpcmp_parts_f+0x9c>
     bea:	80 81       	ld	r24, Z
     bec:	82 30       	cpi	r24, 0x02	; 2
     bee:	08 f4       	brcc	.+2      	; 0xbf2 <__fpcmp_parts_f+0x16>
     bf0:	43 c0       	rjmp	.+134    	; 0xc78 <__fpcmp_parts_f+0x9c>
     bf2:	94 30       	cpi	r25, 0x04	; 4
     bf4:	51 f4       	brne	.+20     	; 0xc0a <__fpcmp_parts_f+0x2e>
     bf6:	11 96       	adiw	r26, 0x01	; 1
     bf8:	1c 91       	ld	r17, X
     bfa:	84 30       	cpi	r24, 0x04	; 4
     bfc:	99 f5       	brne	.+102    	; 0xc64 <__fpcmp_parts_f+0x88>
     bfe:	81 81       	ldd	r24, Z+1	; 0x01
     c00:	68 2f       	mov	r22, r24
     c02:	70 e0       	ldi	r23, 0x00	; 0
     c04:	61 1b       	sub	r22, r17
     c06:	71 09       	sbc	r23, r1
     c08:	3f c0       	rjmp	.+126    	; 0xc88 <__fpcmp_parts_f+0xac>
     c0a:	84 30       	cpi	r24, 0x04	; 4
     c0c:	21 f0       	breq	.+8      	; 0xc16 <__fpcmp_parts_f+0x3a>
     c0e:	92 30       	cpi	r25, 0x02	; 2
     c10:	31 f4       	brne	.+12     	; 0xc1e <__fpcmp_parts_f+0x42>
     c12:	82 30       	cpi	r24, 0x02	; 2
     c14:	b9 f1       	breq	.+110    	; 0xc84 <__fpcmp_parts_f+0xa8>
     c16:	81 81       	ldd	r24, Z+1	; 0x01
     c18:	88 23       	and	r24, r24
     c1a:	89 f1       	breq	.+98     	; 0xc7e <__fpcmp_parts_f+0xa2>
     c1c:	2d c0       	rjmp	.+90     	; 0xc78 <__fpcmp_parts_f+0x9c>
     c1e:	11 96       	adiw	r26, 0x01	; 1
     c20:	1c 91       	ld	r17, X
     c22:	11 97       	sbiw	r26, 0x01	; 1
     c24:	82 30       	cpi	r24, 0x02	; 2
     c26:	f1 f0       	breq	.+60     	; 0xc64 <__fpcmp_parts_f+0x88>
     c28:	81 81       	ldd	r24, Z+1	; 0x01
     c2a:	18 17       	cp	r17, r24
     c2c:	d9 f4       	brne	.+54     	; 0xc64 <__fpcmp_parts_f+0x88>
     c2e:	12 96       	adiw	r26, 0x02	; 2
     c30:	2d 91       	ld	r18, X+
     c32:	3c 91       	ld	r19, X
     c34:	13 97       	sbiw	r26, 0x03	; 3
     c36:	82 81       	ldd	r24, Z+2	; 0x02
     c38:	93 81       	ldd	r25, Z+3	; 0x03
     c3a:	82 17       	cp	r24, r18
     c3c:	93 07       	cpc	r25, r19
     c3e:	94 f0       	brlt	.+36     	; 0xc64 <__fpcmp_parts_f+0x88>
     c40:	28 17       	cp	r18, r24
     c42:	39 07       	cpc	r19, r25
     c44:	bc f0       	brlt	.+46     	; 0xc74 <__fpcmp_parts_f+0x98>
     c46:	14 96       	adiw	r26, 0x04	; 4
     c48:	8d 91       	ld	r24, X+
     c4a:	9d 91       	ld	r25, X+
     c4c:	0d 90       	ld	r0, X+
     c4e:	bc 91       	ld	r27, X
     c50:	a0 2d       	mov	r26, r0
     c52:	24 81       	ldd	r18, Z+4	; 0x04
     c54:	35 81       	ldd	r19, Z+5	; 0x05
     c56:	46 81       	ldd	r20, Z+6	; 0x06
     c58:	57 81       	ldd	r21, Z+7	; 0x07
     c5a:	28 17       	cp	r18, r24
     c5c:	39 07       	cpc	r19, r25
     c5e:	4a 07       	cpc	r20, r26
     c60:	5b 07       	cpc	r21, r27
     c62:	18 f4       	brcc	.+6      	; 0xc6a <__fpcmp_parts_f+0x8e>
     c64:	11 23       	and	r17, r17
     c66:	41 f0       	breq	.+16     	; 0xc78 <__fpcmp_parts_f+0x9c>
     c68:	0a c0       	rjmp	.+20     	; 0xc7e <__fpcmp_parts_f+0xa2>
     c6a:	82 17       	cp	r24, r18
     c6c:	93 07       	cpc	r25, r19
     c6e:	a4 07       	cpc	r26, r20
     c70:	b5 07       	cpc	r27, r21
     c72:	40 f4       	brcc	.+16     	; 0xc84 <__fpcmp_parts_f+0xa8>
     c74:	11 23       	and	r17, r17
     c76:	19 f0       	breq	.+6      	; 0xc7e <__fpcmp_parts_f+0xa2>
     c78:	61 e0       	ldi	r22, 0x01	; 1
     c7a:	70 e0       	ldi	r23, 0x00	; 0
     c7c:	05 c0       	rjmp	.+10     	; 0xc88 <__fpcmp_parts_f+0xac>
     c7e:	6f ef       	ldi	r22, 0xFF	; 255
     c80:	7f ef       	ldi	r23, 0xFF	; 255
     c82:	02 c0       	rjmp	.+4      	; 0xc88 <__fpcmp_parts_f+0xac>
     c84:	60 e0       	ldi	r22, 0x00	; 0
     c86:	70 e0       	ldi	r23, 0x00	; 0
     c88:	cb 01       	movw	r24, r22
     c8a:	1f 91       	pop	r17
     c8c:	08 95       	ret

00000c8e <MDIO_voidInit>:
#include "../Include/MCAL/DIO/DIO_Private.h"
#include "../Include/MCAL/DIO/DIO_Configuration.h"
#include "../Include/MCAL/DIO/DIO_Interface.h"

void MDIO_voidInit()
{
     c8e:	df 93       	push	r29
     c90:	cf 93       	push	r28
     c92:	cd b7       	in	r28, 0x3d	; 61
     c94:	de b7       	in	r29, 0x3e	; 62
    PORTA_REG=CONC_BIT(PORTA_PIN7_VALUE,PORTA_PIN6_VALUE,PORTA_PIN5_VALUE,PORTA_PIN4_VALUE,PORTA_PIN3_VALUE,PORTA_PIN2_VALUE,PORTA_PIN1_VALUE,PORTA_PIN0_VALUE);
     c96:	eb e3       	ldi	r30, 0x3B	; 59
     c98:	f0 e0       	ldi	r31, 0x00	; 0
     c9a:	10 82       	st	Z, r1
    PORTB_REG=CONC_BIT(PORTB_PIN7_VALUE,PORTB_PIN6_VALUE,PORTB_PIN5_VALUE,PORTB_PIN4_VALUE,PORTB_PIN3_VALUE,PORTB_PIN2_VALUE,PORTB_PIN1_VALUE,PORTB_PIN0_VALUE);
     c9c:	e8 e3       	ldi	r30, 0x38	; 56
     c9e:	f0 e0       	ldi	r31, 0x00	; 0
     ca0:	10 82       	st	Z, r1
    PORTC_REG=CONC_BIT(PORTC_PIN7_VALUE,PORTC_PIN6_VALUE,PORTC_PIN5_VALUE,PORTC_PIN4_VALUE,PORTC_PIN3_VALUE,PORTC_PIN2_VALUE,PORTC_PIN1_VALUE,PORTC_PIN0_VALUE);
     ca2:	e5 e3       	ldi	r30, 0x35	; 53
     ca4:	f0 e0       	ldi	r31, 0x00	; 0
     ca6:	10 82       	st	Z, r1
    PORTD_REG=CONC_BIT(PORTD_PIN7_VALUE,PORTD_PIN6_VALUE,PORTD_PIN5_VALUE,PORTD_PIN4_VALUE,PORTD_PIN3_VALUE,PORTD_PIN2_VALUE,PORTD_PIN1_VALUE,PORTD_PIN0_VALUE);
     ca8:	e2 e3       	ldi	r30, 0x32	; 50
     caa:	f0 e0       	ldi	r31, 0x00	; 0
     cac:	10 82       	st	Z, r1
    
    DDRA_REG=CONC_BIT(DDRA_PIN7_DIRECTION,DDRA_PIN6_DIRECTION,DDRA_PIN5_DIRECTION,DDRA_PIN4_DIRECTION,DDRA_PIN3_DIRECTION,DDRA_PIN2_DIRECTION,DDRA_PIN1_DIRECTION,DDRA_PIN0_DIRECTION);
     cae:	ea e3       	ldi	r30, 0x3A	; 58
     cb0:	f0 e0       	ldi	r31, 0x00	; 0
     cb2:	8f ef       	ldi	r24, 0xFF	; 255
     cb4:	80 83       	st	Z, r24
    DDRB_REG=CONC_BIT(DDRB_PIN7_DIRECTION,DDRB_PIN6_DIRECTION,DDRB_PIN5_DIRECTION,DDRB_PIN4_DIRECTION,DDRB_PIN3_DIRECTION,DDRB_PIN2_DIRECTION,DDRB_PIN1_DIRECTION,DDRB_PIN0_DIRECTION);
     cb6:	e7 e3       	ldi	r30, 0x37	; 55
     cb8:	f0 e0       	ldi	r31, 0x00	; 0
     cba:	8f ef       	ldi	r24, 0xFF	; 255
     cbc:	80 83       	st	Z, r24
    DDRC_REG=CONC_BIT(DDRC_PIN7_DIRECTION,DDRC_PIN6_DIRECTION,DDRC_PIN5_DIRECTION,DDRC_PIN4_DIRECTION,DDRC_PIN3_DIRECTION,DDRC_PIN2_DIRECTION,DDRC_PIN1_DIRECTION,DDRC_PIN0_DIRECTION);
     cbe:	e4 e3       	ldi	r30, 0x34	; 52
     cc0:	f0 e0       	ldi	r31, 0x00	; 0
     cc2:	8f ef       	ldi	r24, 0xFF	; 255
     cc4:	80 83       	st	Z, r24
    DDRD_REG=CONC_BIT(DDRD_PIN7_DIRECTION,DDRD_PIN6_DIRECTION,DDRD_PIN5_DIRECTION,DDRD_PIN4_DIRECTION,DDRD_PIN3_DIRECTION,DDRD_PIN2_DIRECTION,DDRD_PIN1_DIRECTION,DDRD_PIN0_DIRECTION);
     cc6:	e1 e3       	ldi	r30, 0x31	; 49
     cc8:	f0 e0       	ldi	r31, 0x00	; 0
     cca:	8f ef       	ldi	r24, 0xFF	; 255
     ccc:	80 83       	st	Z, r24

}
     cce:	cf 91       	pop	r28
     cd0:	df 91       	pop	r29
     cd2:	08 95       	ret

00000cd4 <MDIO_u8GetPinValue>:

u8 MDIO_u8GetPinValue(u8 A_u8Port,u8 A_u8Pin)
{
     cd4:	df 93       	push	r29
     cd6:	cf 93       	push	r28
     cd8:	00 d0       	rcall	.+0      	; 0xcda <MDIO_u8GetPinValue+0x6>
     cda:	00 d0       	rcall	.+0      	; 0xcdc <MDIO_u8GetPinValue+0x8>
     cdc:	0f 92       	push	r0
     cde:	cd b7       	in	r28, 0x3d	; 61
     ce0:	de b7       	in	r29, 0x3e	; 62
     ce2:	8a 83       	std	Y+2, r24	; 0x02
     ce4:	6b 83       	std	Y+3, r22	; 0x03
    u8 local_u8Value;
    switch(A_u8Port)
     ce6:	8a 81       	ldd	r24, Y+2	; 0x02
     ce8:	28 2f       	mov	r18, r24
     cea:	30 e0       	ldi	r19, 0x00	; 0
     cec:	3d 83       	std	Y+5, r19	; 0x05
     cee:	2c 83       	std	Y+4, r18	; 0x04
     cf0:	8c 81       	ldd	r24, Y+4	; 0x04
     cf2:	9d 81       	ldd	r25, Y+5	; 0x05
     cf4:	81 30       	cpi	r24, 0x01	; 1
     cf6:	91 05       	cpc	r25, r1
     cf8:	c1 f1       	breq	.+112    	; 0xd6a <MDIO_u8GetPinValue+0x96>
     cfa:	2c 81       	ldd	r18, Y+4	; 0x04
     cfc:	3d 81       	ldd	r19, Y+5	; 0x05
     cfe:	22 30       	cpi	r18, 0x02	; 2
     d00:	31 05       	cpc	r19, r1
     d02:	2c f4       	brge	.+10     	; 0xd0e <MDIO_u8GetPinValue+0x3a>
     d04:	8c 81       	ldd	r24, Y+4	; 0x04
     d06:	9d 81       	ldd	r25, Y+5	; 0x05
     d08:	00 97       	sbiw	r24, 0x00	; 0
     d0a:	71 f0       	breq	.+28     	; 0xd28 <MDIO_u8GetPinValue+0x54>
     d0c:	8e c0       	rjmp	.+284    	; 0xe2a <MDIO_u8GetPinValue+0x156>
     d0e:	2c 81       	ldd	r18, Y+4	; 0x04
     d10:	3d 81       	ldd	r19, Y+5	; 0x05
     d12:	22 30       	cpi	r18, 0x02	; 2
     d14:	31 05       	cpc	r19, r1
     d16:	09 f4       	brne	.+2      	; 0xd1a <MDIO_u8GetPinValue+0x46>
     d18:	49 c0       	rjmp	.+146    	; 0xdac <MDIO_u8GetPinValue+0xd8>
     d1a:	8c 81       	ldd	r24, Y+4	; 0x04
     d1c:	9d 81       	ldd	r25, Y+5	; 0x05
     d1e:	83 30       	cpi	r24, 0x03	; 3
     d20:	91 05       	cpc	r25, r1
     d22:	09 f4       	brne	.+2      	; 0xd26 <MDIO_u8GetPinValue+0x52>
     d24:	63 c0       	rjmp	.+198    	; 0xdec <MDIO_u8GetPinValue+0x118>
     d26:	81 c0       	rjmp	.+258    	; 0xe2a <MDIO_u8GetPinValue+0x156>
    {
        case PORTA: local_u8Value=GET_BIT(PINA_REG,A_u8Pin);
     d28:	e9 e3       	ldi	r30, 0x39	; 57
     d2a:	f0 e0       	ldi	r31, 0x00	; 0
     d2c:	80 81       	ld	r24, Z
     d2e:	48 2f       	mov	r20, r24
     d30:	50 e0       	ldi	r21, 0x00	; 0
     d32:	8b 81       	ldd	r24, Y+3	; 0x03
     d34:	28 2f       	mov	r18, r24
     d36:	30 e0       	ldi	r19, 0x00	; 0
     d38:	81 e0       	ldi	r24, 0x01	; 1
     d3a:	90 e0       	ldi	r25, 0x00	; 0
     d3c:	02 c0       	rjmp	.+4      	; 0xd42 <MDIO_u8GetPinValue+0x6e>
     d3e:	88 0f       	add	r24, r24
     d40:	99 1f       	adc	r25, r25
     d42:	2a 95       	dec	r18
     d44:	e2 f7       	brpl	.-8      	; 0xd3e <MDIO_u8GetPinValue+0x6a>
     d46:	80 95       	com	r24
     d48:	90 95       	com	r25
     d4a:	9a 01       	movw	r18, r20
     d4c:	28 23       	and	r18, r24
     d4e:	39 23       	and	r19, r25
     d50:	e9 e3       	ldi	r30, 0x39	; 57
     d52:	f0 e0       	ldi	r31, 0x00	; 0
     d54:	80 81       	ld	r24, Z
     d56:	88 2f       	mov	r24, r24
     d58:	90 e0       	ldi	r25, 0x00	; 0
     d5a:	19 82       	std	Y+1, r1	; 0x01
     d5c:	28 17       	cp	r18, r24
     d5e:	39 07       	cpc	r19, r25
     d60:	09 f4       	brne	.+2      	; 0xd64 <MDIO_u8GetPinValue+0x90>
     d62:	63 c0       	rjmp	.+198    	; 0xe2a <MDIO_u8GetPinValue+0x156>
     d64:	81 e0       	ldi	r24, 0x01	; 1
     d66:	89 83       	std	Y+1, r24	; 0x01
     d68:	60 c0       	rjmp	.+192    	; 0xe2a <MDIO_u8GetPinValue+0x156>
        break;
        case PORTB: local_u8Value=GET_BIT(PINB_REG,A_u8Pin);
     d6a:	e6 e3       	ldi	r30, 0x36	; 54
     d6c:	f0 e0       	ldi	r31, 0x00	; 0
     d6e:	80 81       	ld	r24, Z
     d70:	48 2f       	mov	r20, r24
     d72:	50 e0       	ldi	r21, 0x00	; 0
     d74:	8b 81       	ldd	r24, Y+3	; 0x03
     d76:	28 2f       	mov	r18, r24
     d78:	30 e0       	ldi	r19, 0x00	; 0
     d7a:	81 e0       	ldi	r24, 0x01	; 1
     d7c:	90 e0       	ldi	r25, 0x00	; 0
     d7e:	02 c0       	rjmp	.+4      	; 0xd84 <MDIO_u8GetPinValue+0xb0>
     d80:	88 0f       	add	r24, r24
     d82:	99 1f       	adc	r25, r25
     d84:	2a 95       	dec	r18
     d86:	e2 f7       	brpl	.-8      	; 0xd80 <MDIO_u8GetPinValue+0xac>
     d88:	80 95       	com	r24
     d8a:	90 95       	com	r25
     d8c:	9a 01       	movw	r18, r20
     d8e:	28 23       	and	r18, r24
     d90:	39 23       	and	r19, r25
     d92:	e6 e3       	ldi	r30, 0x36	; 54
     d94:	f0 e0       	ldi	r31, 0x00	; 0
     d96:	80 81       	ld	r24, Z
     d98:	88 2f       	mov	r24, r24
     d9a:	90 e0       	ldi	r25, 0x00	; 0
     d9c:	19 82       	std	Y+1, r1	; 0x01
     d9e:	28 17       	cp	r18, r24
     da0:	39 07       	cpc	r19, r25
     da2:	09 f4       	brne	.+2      	; 0xda6 <MDIO_u8GetPinValue+0xd2>
     da4:	42 c0       	rjmp	.+132    	; 0xe2a <MDIO_u8GetPinValue+0x156>
     da6:	81 e0       	ldi	r24, 0x01	; 1
     da8:	89 83       	std	Y+1, r24	; 0x01
     daa:	3f c0       	rjmp	.+126    	; 0xe2a <MDIO_u8GetPinValue+0x156>
        break;
        case PORTC: local_u8Value=GET_BIT(PINC_REG,A_u8Pin);
     dac:	e3 e3       	ldi	r30, 0x33	; 51
     dae:	f0 e0       	ldi	r31, 0x00	; 0
     db0:	80 81       	ld	r24, Z
     db2:	48 2f       	mov	r20, r24
     db4:	50 e0       	ldi	r21, 0x00	; 0
     db6:	8b 81       	ldd	r24, Y+3	; 0x03
     db8:	28 2f       	mov	r18, r24
     dba:	30 e0       	ldi	r19, 0x00	; 0
     dbc:	81 e0       	ldi	r24, 0x01	; 1
     dbe:	90 e0       	ldi	r25, 0x00	; 0
     dc0:	02 c0       	rjmp	.+4      	; 0xdc6 <MDIO_u8GetPinValue+0xf2>
     dc2:	88 0f       	add	r24, r24
     dc4:	99 1f       	adc	r25, r25
     dc6:	2a 95       	dec	r18
     dc8:	e2 f7       	brpl	.-8      	; 0xdc2 <MDIO_u8GetPinValue+0xee>
     dca:	80 95       	com	r24
     dcc:	90 95       	com	r25
     dce:	9a 01       	movw	r18, r20
     dd0:	28 23       	and	r18, r24
     dd2:	39 23       	and	r19, r25
     dd4:	e3 e3       	ldi	r30, 0x33	; 51
     dd6:	f0 e0       	ldi	r31, 0x00	; 0
     dd8:	80 81       	ld	r24, Z
     dda:	88 2f       	mov	r24, r24
     ddc:	90 e0       	ldi	r25, 0x00	; 0
     dde:	19 82       	std	Y+1, r1	; 0x01
     de0:	28 17       	cp	r18, r24
     de2:	39 07       	cpc	r19, r25
     de4:	11 f1       	breq	.+68     	; 0xe2a <MDIO_u8GetPinValue+0x156>
     de6:	81 e0       	ldi	r24, 0x01	; 1
     de8:	89 83       	std	Y+1, r24	; 0x01
     dea:	1f c0       	rjmp	.+62     	; 0xe2a <MDIO_u8GetPinValue+0x156>
        break;
        case PORTD: local_u8Value=GET_BIT(PIND_REG,A_u8Pin);
     dec:	e0 e3       	ldi	r30, 0x30	; 48
     dee:	f0 e0       	ldi	r31, 0x00	; 0
     df0:	80 81       	ld	r24, Z
     df2:	48 2f       	mov	r20, r24
     df4:	50 e0       	ldi	r21, 0x00	; 0
     df6:	8b 81       	ldd	r24, Y+3	; 0x03
     df8:	28 2f       	mov	r18, r24
     dfa:	30 e0       	ldi	r19, 0x00	; 0
     dfc:	81 e0       	ldi	r24, 0x01	; 1
     dfe:	90 e0       	ldi	r25, 0x00	; 0
     e00:	02 c0       	rjmp	.+4      	; 0xe06 <MDIO_u8GetPinValue+0x132>
     e02:	88 0f       	add	r24, r24
     e04:	99 1f       	adc	r25, r25
     e06:	2a 95       	dec	r18
     e08:	e2 f7       	brpl	.-8      	; 0xe02 <MDIO_u8GetPinValue+0x12e>
     e0a:	80 95       	com	r24
     e0c:	90 95       	com	r25
     e0e:	9a 01       	movw	r18, r20
     e10:	28 23       	and	r18, r24
     e12:	39 23       	and	r19, r25
     e14:	e0 e3       	ldi	r30, 0x30	; 48
     e16:	f0 e0       	ldi	r31, 0x00	; 0
     e18:	80 81       	ld	r24, Z
     e1a:	88 2f       	mov	r24, r24
     e1c:	90 e0       	ldi	r25, 0x00	; 0
     e1e:	19 82       	std	Y+1, r1	; 0x01
     e20:	28 17       	cp	r18, r24
     e22:	39 07       	cpc	r19, r25
     e24:	11 f0       	breq	.+4      	; 0xe2a <MDIO_u8GetPinValue+0x156>
     e26:	81 e0       	ldi	r24, 0x01	; 1
     e28:	89 83       	std	Y+1, r24	; 0x01
        break;
    }
    return local_u8Value;
     e2a:	89 81       	ldd	r24, Y+1	; 0x01
}
     e2c:	0f 90       	pop	r0
     e2e:	0f 90       	pop	r0
     e30:	0f 90       	pop	r0
     e32:	0f 90       	pop	r0
     e34:	0f 90       	pop	r0
     e36:	cf 91       	pop	r28
     e38:	df 91       	pop	r29
     e3a:	08 95       	ret

00000e3c <MDIO_voidSetPinValue>:

void MDIO_voidSetPinValue(u8 A_u8Port,u8 A_u8Pin, u8 A_u8Value)
{
     e3c:	df 93       	push	r29
     e3e:	cf 93       	push	r28
     e40:	cd b7       	in	r28, 0x3d	; 61
     e42:	de b7       	in	r29, 0x3e	; 62
     e44:	2d 97       	sbiw	r28, 0x0d	; 13
     e46:	0f b6       	in	r0, 0x3f	; 63
     e48:	f8 94       	cli
     e4a:	de bf       	out	0x3e, r29	; 62
     e4c:	0f be       	out	0x3f, r0	; 63
     e4e:	cd bf       	out	0x3d, r28	; 61
     e50:	89 83       	std	Y+1, r24	; 0x01
     e52:	6a 83       	std	Y+2, r22	; 0x02
     e54:	4b 83       	std	Y+3, r20	; 0x03
    switch(A_u8Port)
     e56:	89 81       	ldd	r24, Y+1	; 0x01
     e58:	28 2f       	mov	r18, r24
     e5a:	30 e0       	ldi	r19, 0x00	; 0
     e5c:	3d 87       	std	Y+13, r19	; 0x0d
     e5e:	2c 87       	std	Y+12, r18	; 0x0c
     e60:	8c 85       	ldd	r24, Y+12	; 0x0c
     e62:	9d 85       	ldd	r25, Y+13	; 0x0d
     e64:	81 30       	cpi	r24, 0x01	; 1
     e66:	91 05       	cpc	r25, r1
     e68:	09 f4       	brne	.+2      	; 0xe6c <MDIO_voidSetPinValue+0x30>
     e6a:	4f c0       	rjmp	.+158    	; 0xf0a <MDIO_voidSetPinValue+0xce>
     e6c:	2c 85       	ldd	r18, Y+12	; 0x0c
     e6e:	3d 85       	ldd	r19, Y+13	; 0x0d
     e70:	22 30       	cpi	r18, 0x02	; 2
     e72:	31 05       	cpc	r19, r1
     e74:	2c f4       	brge	.+10     	; 0xe80 <MDIO_voidSetPinValue+0x44>
     e76:	8c 85       	ldd	r24, Y+12	; 0x0c
     e78:	9d 85       	ldd	r25, Y+13	; 0x0d
     e7a:	00 97       	sbiw	r24, 0x00	; 0
     e7c:	71 f0       	breq	.+28     	; 0xe9a <MDIO_voidSetPinValue+0x5e>
     e7e:	eb c0       	rjmp	.+470    	; 0x1056 <MDIO_voidSetPinValue+0x21a>
     e80:	2c 85       	ldd	r18, Y+12	; 0x0c
     e82:	3d 85       	ldd	r19, Y+13	; 0x0d
     e84:	22 30       	cpi	r18, 0x02	; 2
     e86:	31 05       	cpc	r19, r1
     e88:	09 f4       	brne	.+2      	; 0xe8c <MDIO_voidSetPinValue+0x50>
     e8a:	77 c0       	rjmp	.+238    	; 0xf7a <MDIO_voidSetPinValue+0x13e>
     e8c:	8c 85       	ldd	r24, Y+12	; 0x0c
     e8e:	9d 85       	ldd	r25, Y+13	; 0x0d
     e90:	83 30       	cpi	r24, 0x03	; 3
     e92:	91 05       	cpc	r25, r1
     e94:	09 f4       	brne	.+2      	; 0xe98 <MDIO_voidSetPinValue+0x5c>
     e96:	a9 c0       	rjmp	.+338    	; 0xfea <MDIO_voidSetPinValue+0x1ae>
     e98:	de c0       	rjmp	.+444    	; 0x1056 <MDIO_voidSetPinValue+0x21a>
    {
        case PORTA:
        switch (A_u8Value)
     e9a:	8b 81       	ldd	r24, Y+3	; 0x03
     e9c:	28 2f       	mov	r18, r24
     e9e:	30 e0       	ldi	r19, 0x00	; 0
     ea0:	3b 87       	std	Y+11, r19	; 0x0b
     ea2:	2a 87       	std	Y+10, r18	; 0x0a
     ea4:	8a 85       	ldd	r24, Y+10	; 0x0a
     ea6:	9b 85       	ldd	r25, Y+11	; 0x0b
     ea8:	00 97       	sbiw	r24, 0x00	; 0
     eaa:	d1 f0       	breq	.+52     	; 0xee0 <MDIO_voidSetPinValue+0xa4>
     eac:	2a 85       	ldd	r18, Y+10	; 0x0a
     eae:	3b 85       	ldd	r19, Y+11	; 0x0b
     eb0:	21 30       	cpi	r18, 0x01	; 1
     eb2:	31 05       	cpc	r19, r1
     eb4:	09 f0       	breq	.+2      	; 0xeb8 <MDIO_voidSetPinValue+0x7c>
     eb6:	cf c0       	rjmp	.+414    	; 0x1056 <MDIO_voidSetPinValue+0x21a>
        {
            case PIN_HIGH: SET_BIT(PORTA_REG,A_u8Pin);
     eb8:	ab e3       	ldi	r26, 0x3B	; 59
     eba:	b0 e0       	ldi	r27, 0x00	; 0
     ebc:	eb e3       	ldi	r30, 0x3B	; 59
     ebe:	f0 e0       	ldi	r31, 0x00	; 0
     ec0:	80 81       	ld	r24, Z
     ec2:	48 2f       	mov	r20, r24
     ec4:	8a 81       	ldd	r24, Y+2	; 0x02
     ec6:	28 2f       	mov	r18, r24
     ec8:	30 e0       	ldi	r19, 0x00	; 0
     eca:	81 e0       	ldi	r24, 0x01	; 1
     ecc:	90 e0       	ldi	r25, 0x00	; 0
     ece:	02 2e       	mov	r0, r18
     ed0:	02 c0       	rjmp	.+4      	; 0xed6 <MDIO_voidSetPinValue+0x9a>
     ed2:	88 0f       	add	r24, r24
     ed4:	99 1f       	adc	r25, r25
     ed6:	0a 94       	dec	r0
     ed8:	e2 f7       	brpl	.-8      	; 0xed2 <MDIO_voidSetPinValue+0x96>
     eda:	84 2b       	or	r24, r20
     edc:	8c 93       	st	X, r24
     ede:	bb c0       	rjmp	.+374    	; 0x1056 <MDIO_voidSetPinValue+0x21a>
            break;

            case PIN_LOW: CLR_BIT(PORTA_REG,A_u8Pin);
     ee0:	ab e3       	ldi	r26, 0x3B	; 59
     ee2:	b0 e0       	ldi	r27, 0x00	; 0
     ee4:	eb e3       	ldi	r30, 0x3B	; 59
     ee6:	f0 e0       	ldi	r31, 0x00	; 0
     ee8:	80 81       	ld	r24, Z
     eea:	48 2f       	mov	r20, r24
     eec:	8a 81       	ldd	r24, Y+2	; 0x02
     eee:	28 2f       	mov	r18, r24
     ef0:	30 e0       	ldi	r19, 0x00	; 0
     ef2:	81 e0       	ldi	r24, 0x01	; 1
     ef4:	90 e0       	ldi	r25, 0x00	; 0
     ef6:	02 2e       	mov	r0, r18
     ef8:	02 c0       	rjmp	.+4      	; 0xefe <MDIO_voidSetPinValue+0xc2>
     efa:	88 0f       	add	r24, r24
     efc:	99 1f       	adc	r25, r25
     efe:	0a 94       	dec	r0
     f00:	e2 f7       	brpl	.-8      	; 0xefa <MDIO_voidSetPinValue+0xbe>
     f02:	80 95       	com	r24
     f04:	84 23       	and	r24, r20
     f06:	8c 93       	st	X, r24
     f08:	a6 c0       	rjmp	.+332    	; 0x1056 <MDIO_voidSetPinValue+0x21a>
            break;
        };
        break;

        case PORTB:
        switch (A_u8Value)
     f0a:	8b 81       	ldd	r24, Y+3	; 0x03
     f0c:	28 2f       	mov	r18, r24
     f0e:	30 e0       	ldi	r19, 0x00	; 0
     f10:	39 87       	std	Y+9, r19	; 0x09
     f12:	28 87       	std	Y+8, r18	; 0x08
     f14:	88 85       	ldd	r24, Y+8	; 0x08
     f16:	99 85       	ldd	r25, Y+9	; 0x09
     f18:	00 97       	sbiw	r24, 0x00	; 0
     f1a:	d1 f0       	breq	.+52     	; 0xf50 <MDIO_voidSetPinValue+0x114>
     f1c:	28 85       	ldd	r18, Y+8	; 0x08
     f1e:	39 85       	ldd	r19, Y+9	; 0x09
     f20:	21 30       	cpi	r18, 0x01	; 1
     f22:	31 05       	cpc	r19, r1
     f24:	09 f0       	breq	.+2      	; 0xf28 <MDIO_voidSetPinValue+0xec>
     f26:	97 c0       	rjmp	.+302    	; 0x1056 <MDIO_voidSetPinValue+0x21a>
        {
            case PIN_HIGH: SET_BIT(PORTB_REG,A_u8Pin);
     f28:	a8 e3       	ldi	r26, 0x38	; 56
     f2a:	b0 e0       	ldi	r27, 0x00	; 0
     f2c:	e8 e3       	ldi	r30, 0x38	; 56
     f2e:	f0 e0       	ldi	r31, 0x00	; 0
     f30:	80 81       	ld	r24, Z
     f32:	48 2f       	mov	r20, r24
     f34:	8a 81       	ldd	r24, Y+2	; 0x02
     f36:	28 2f       	mov	r18, r24
     f38:	30 e0       	ldi	r19, 0x00	; 0
     f3a:	81 e0       	ldi	r24, 0x01	; 1
     f3c:	90 e0       	ldi	r25, 0x00	; 0
     f3e:	02 2e       	mov	r0, r18
     f40:	02 c0       	rjmp	.+4      	; 0xf46 <MDIO_voidSetPinValue+0x10a>
     f42:	88 0f       	add	r24, r24
     f44:	99 1f       	adc	r25, r25
     f46:	0a 94       	dec	r0
     f48:	e2 f7       	brpl	.-8      	; 0xf42 <MDIO_voidSetPinValue+0x106>
     f4a:	84 2b       	or	r24, r20
     f4c:	8c 93       	st	X, r24
     f4e:	83 c0       	rjmp	.+262    	; 0x1056 <MDIO_voidSetPinValue+0x21a>
            break;

            case PIN_LOW: CLR_BIT(PORTB_REG,A_u8Pin);
     f50:	a8 e3       	ldi	r26, 0x38	; 56
     f52:	b0 e0       	ldi	r27, 0x00	; 0
     f54:	e8 e3       	ldi	r30, 0x38	; 56
     f56:	f0 e0       	ldi	r31, 0x00	; 0
     f58:	80 81       	ld	r24, Z
     f5a:	48 2f       	mov	r20, r24
     f5c:	8a 81       	ldd	r24, Y+2	; 0x02
     f5e:	28 2f       	mov	r18, r24
     f60:	30 e0       	ldi	r19, 0x00	; 0
     f62:	81 e0       	ldi	r24, 0x01	; 1
     f64:	90 e0       	ldi	r25, 0x00	; 0
     f66:	02 2e       	mov	r0, r18
     f68:	02 c0       	rjmp	.+4      	; 0xf6e <MDIO_voidSetPinValue+0x132>
     f6a:	88 0f       	add	r24, r24
     f6c:	99 1f       	adc	r25, r25
     f6e:	0a 94       	dec	r0
     f70:	e2 f7       	brpl	.-8      	; 0xf6a <MDIO_voidSetPinValue+0x12e>
     f72:	80 95       	com	r24
     f74:	84 23       	and	r24, r20
     f76:	8c 93       	st	X, r24
     f78:	6e c0       	rjmp	.+220    	; 0x1056 <MDIO_voidSetPinValue+0x21a>
            break;
        };
        break;

        case PORTC:
        switch (A_u8Value)
     f7a:	8b 81       	ldd	r24, Y+3	; 0x03
     f7c:	28 2f       	mov	r18, r24
     f7e:	30 e0       	ldi	r19, 0x00	; 0
     f80:	3f 83       	std	Y+7, r19	; 0x07
     f82:	2e 83       	std	Y+6, r18	; 0x06
     f84:	8e 81       	ldd	r24, Y+6	; 0x06
     f86:	9f 81       	ldd	r25, Y+7	; 0x07
     f88:	00 97       	sbiw	r24, 0x00	; 0
     f8a:	d1 f0       	breq	.+52     	; 0xfc0 <MDIO_voidSetPinValue+0x184>
     f8c:	2e 81       	ldd	r18, Y+6	; 0x06
     f8e:	3f 81       	ldd	r19, Y+7	; 0x07
     f90:	21 30       	cpi	r18, 0x01	; 1
     f92:	31 05       	cpc	r19, r1
     f94:	09 f0       	breq	.+2      	; 0xf98 <MDIO_voidSetPinValue+0x15c>
     f96:	5f c0       	rjmp	.+190    	; 0x1056 <MDIO_voidSetPinValue+0x21a>
        {
            case PIN_HIGH: SET_BIT(PORTC_REG,A_u8Pin);
     f98:	a5 e3       	ldi	r26, 0x35	; 53
     f9a:	b0 e0       	ldi	r27, 0x00	; 0
     f9c:	e5 e3       	ldi	r30, 0x35	; 53
     f9e:	f0 e0       	ldi	r31, 0x00	; 0
     fa0:	80 81       	ld	r24, Z
     fa2:	48 2f       	mov	r20, r24
     fa4:	8a 81       	ldd	r24, Y+2	; 0x02
     fa6:	28 2f       	mov	r18, r24
     fa8:	30 e0       	ldi	r19, 0x00	; 0
     faa:	81 e0       	ldi	r24, 0x01	; 1
     fac:	90 e0       	ldi	r25, 0x00	; 0
     fae:	02 2e       	mov	r0, r18
     fb0:	02 c0       	rjmp	.+4      	; 0xfb6 <MDIO_voidSetPinValue+0x17a>
     fb2:	88 0f       	add	r24, r24
     fb4:	99 1f       	adc	r25, r25
     fb6:	0a 94       	dec	r0
     fb8:	e2 f7       	brpl	.-8      	; 0xfb2 <MDIO_voidSetPinValue+0x176>
     fba:	84 2b       	or	r24, r20
     fbc:	8c 93       	st	X, r24
     fbe:	4b c0       	rjmp	.+150    	; 0x1056 <MDIO_voidSetPinValue+0x21a>
            break;

            case PIN_LOW: CLR_BIT(PORTC_REG,A_u8Pin);
     fc0:	a5 e3       	ldi	r26, 0x35	; 53
     fc2:	b0 e0       	ldi	r27, 0x00	; 0
     fc4:	e5 e3       	ldi	r30, 0x35	; 53
     fc6:	f0 e0       	ldi	r31, 0x00	; 0
     fc8:	80 81       	ld	r24, Z
     fca:	48 2f       	mov	r20, r24
     fcc:	8a 81       	ldd	r24, Y+2	; 0x02
     fce:	28 2f       	mov	r18, r24
     fd0:	30 e0       	ldi	r19, 0x00	; 0
     fd2:	81 e0       	ldi	r24, 0x01	; 1
     fd4:	90 e0       	ldi	r25, 0x00	; 0
     fd6:	02 2e       	mov	r0, r18
     fd8:	02 c0       	rjmp	.+4      	; 0xfde <MDIO_voidSetPinValue+0x1a2>
     fda:	88 0f       	add	r24, r24
     fdc:	99 1f       	adc	r25, r25
     fde:	0a 94       	dec	r0
     fe0:	e2 f7       	brpl	.-8      	; 0xfda <MDIO_voidSetPinValue+0x19e>
     fe2:	80 95       	com	r24
     fe4:	84 23       	and	r24, r20
     fe6:	8c 93       	st	X, r24
     fe8:	36 c0       	rjmp	.+108    	; 0x1056 <MDIO_voidSetPinValue+0x21a>
            break;
        };
        break;

        case PORTD:
        switch (A_u8Value)
     fea:	8b 81       	ldd	r24, Y+3	; 0x03
     fec:	28 2f       	mov	r18, r24
     fee:	30 e0       	ldi	r19, 0x00	; 0
     ff0:	3d 83       	std	Y+5, r19	; 0x05
     ff2:	2c 83       	std	Y+4, r18	; 0x04
     ff4:	8c 81       	ldd	r24, Y+4	; 0x04
     ff6:	9d 81       	ldd	r25, Y+5	; 0x05
     ff8:	00 97       	sbiw	r24, 0x00	; 0
     ffa:	c9 f0       	breq	.+50     	; 0x102e <MDIO_voidSetPinValue+0x1f2>
     ffc:	2c 81       	ldd	r18, Y+4	; 0x04
     ffe:	3d 81       	ldd	r19, Y+5	; 0x05
    1000:	21 30       	cpi	r18, 0x01	; 1
    1002:	31 05       	cpc	r19, r1
    1004:	41 f5       	brne	.+80     	; 0x1056 <MDIO_voidSetPinValue+0x21a>
        {
            case PIN_HIGH: SET_BIT(PORTD_REG,A_u8Pin);
    1006:	a2 e3       	ldi	r26, 0x32	; 50
    1008:	b0 e0       	ldi	r27, 0x00	; 0
    100a:	e2 e3       	ldi	r30, 0x32	; 50
    100c:	f0 e0       	ldi	r31, 0x00	; 0
    100e:	80 81       	ld	r24, Z
    1010:	48 2f       	mov	r20, r24
    1012:	8a 81       	ldd	r24, Y+2	; 0x02
    1014:	28 2f       	mov	r18, r24
    1016:	30 e0       	ldi	r19, 0x00	; 0
    1018:	81 e0       	ldi	r24, 0x01	; 1
    101a:	90 e0       	ldi	r25, 0x00	; 0
    101c:	02 2e       	mov	r0, r18
    101e:	02 c0       	rjmp	.+4      	; 0x1024 <MDIO_voidSetPinValue+0x1e8>
    1020:	88 0f       	add	r24, r24
    1022:	99 1f       	adc	r25, r25
    1024:	0a 94       	dec	r0
    1026:	e2 f7       	brpl	.-8      	; 0x1020 <MDIO_voidSetPinValue+0x1e4>
    1028:	84 2b       	or	r24, r20
    102a:	8c 93       	st	X, r24
    102c:	14 c0       	rjmp	.+40     	; 0x1056 <MDIO_voidSetPinValue+0x21a>
            break;

            case PIN_LOW: CLR_BIT(PORTD_REG,A_u8Pin);
    102e:	a2 e3       	ldi	r26, 0x32	; 50
    1030:	b0 e0       	ldi	r27, 0x00	; 0
    1032:	e2 e3       	ldi	r30, 0x32	; 50
    1034:	f0 e0       	ldi	r31, 0x00	; 0
    1036:	80 81       	ld	r24, Z
    1038:	48 2f       	mov	r20, r24
    103a:	8a 81       	ldd	r24, Y+2	; 0x02
    103c:	28 2f       	mov	r18, r24
    103e:	30 e0       	ldi	r19, 0x00	; 0
    1040:	81 e0       	ldi	r24, 0x01	; 1
    1042:	90 e0       	ldi	r25, 0x00	; 0
    1044:	02 2e       	mov	r0, r18
    1046:	02 c0       	rjmp	.+4      	; 0x104c <MDIO_voidSetPinValue+0x210>
    1048:	88 0f       	add	r24, r24
    104a:	99 1f       	adc	r25, r25
    104c:	0a 94       	dec	r0
    104e:	e2 f7       	brpl	.-8      	; 0x1048 <MDIO_voidSetPinValue+0x20c>
    1050:	80 95       	com	r24
    1052:	84 23       	and	r24, r20
    1054:	8c 93       	st	X, r24
            break;
        };
        break;
    }
}
    1056:	2d 96       	adiw	r28, 0x0d	; 13
    1058:	0f b6       	in	r0, 0x3f	; 63
    105a:	f8 94       	cli
    105c:	de bf       	out	0x3e, r29	; 62
    105e:	0f be       	out	0x3f, r0	; 63
    1060:	cd bf       	out	0x3d, r28	; 61
    1062:	cf 91       	pop	r28
    1064:	df 91       	pop	r29
    1066:	08 95       	ret

00001068 <MDIO_voidSetPinDirection>:

void MDIO_voidSetPinDirection(u8 A_u8Port,u8 A_u8Pin, u8 A_u8Value)
{
    1068:	df 93       	push	r29
    106a:	cf 93       	push	r28
    106c:	cd b7       	in	r28, 0x3d	; 61
    106e:	de b7       	in	r29, 0x3e	; 62
    1070:	2d 97       	sbiw	r28, 0x0d	; 13
    1072:	0f b6       	in	r0, 0x3f	; 63
    1074:	f8 94       	cli
    1076:	de bf       	out	0x3e, r29	; 62
    1078:	0f be       	out	0x3f, r0	; 63
    107a:	cd bf       	out	0x3d, r28	; 61
    107c:	89 83       	std	Y+1, r24	; 0x01
    107e:	6a 83       	std	Y+2, r22	; 0x02
    1080:	4b 83       	std	Y+3, r20	; 0x03
    switch(A_u8Port)
    1082:	89 81       	ldd	r24, Y+1	; 0x01
    1084:	28 2f       	mov	r18, r24
    1086:	30 e0       	ldi	r19, 0x00	; 0
    1088:	3d 87       	std	Y+13, r19	; 0x0d
    108a:	2c 87       	std	Y+12, r18	; 0x0c
    108c:	8c 85       	ldd	r24, Y+12	; 0x0c
    108e:	9d 85       	ldd	r25, Y+13	; 0x0d
    1090:	81 30       	cpi	r24, 0x01	; 1
    1092:	91 05       	cpc	r25, r1
    1094:	09 f4       	brne	.+2      	; 0x1098 <MDIO_voidSetPinDirection+0x30>
    1096:	4f c0       	rjmp	.+158    	; 0x1136 <MDIO_voidSetPinDirection+0xce>
    1098:	2c 85       	ldd	r18, Y+12	; 0x0c
    109a:	3d 85       	ldd	r19, Y+13	; 0x0d
    109c:	22 30       	cpi	r18, 0x02	; 2
    109e:	31 05       	cpc	r19, r1
    10a0:	2c f4       	brge	.+10     	; 0x10ac <MDIO_voidSetPinDirection+0x44>
    10a2:	8c 85       	ldd	r24, Y+12	; 0x0c
    10a4:	9d 85       	ldd	r25, Y+13	; 0x0d
    10a6:	00 97       	sbiw	r24, 0x00	; 0
    10a8:	71 f0       	breq	.+28     	; 0x10c6 <MDIO_voidSetPinDirection+0x5e>
    10aa:	eb c0       	rjmp	.+470    	; 0x1282 <MDIO_voidSetPinDirection+0x21a>
    10ac:	2c 85       	ldd	r18, Y+12	; 0x0c
    10ae:	3d 85       	ldd	r19, Y+13	; 0x0d
    10b0:	22 30       	cpi	r18, 0x02	; 2
    10b2:	31 05       	cpc	r19, r1
    10b4:	09 f4       	brne	.+2      	; 0x10b8 <MDIO_voidSetPinDirection+0x50>
    10b6:	77 c0       	rjmp	.+238    	; 0x11a6 <MDIO_voidSetPinDirection+0x13e>
    10b8:	8c 85       	ldd	r24, Y+12	; 0x0c
    10ba:	9d 85       	ldd	r25, Y+13	; 0x0d
    10bc:	83 30       	cpi	r24, 0x03	; 3
    10be:	91 05       	cpc	r25, r1
    10c0:	09 f4       	brne	.+2      	; 0x10c4 <MDIO_voidSetPinDirection+0x5c>
    10c2:	a9 c0       	rjmp	.+338    	; 0x1216 <MDIO_voidSetPinDirection+0x1ae>
    10c4:	de c0       	rjmp	.+444    	; 0x1282 <MDIO_voidSetPinDirection+0x21a>
    {
        case PORTA:
        switch (A_u8Value)
    10c6:	8b 81       	ldd	r24, Y+3	; 0x03
    10c8:	28 2f       	mov	r18, r24
    10ca:	30 e0       	ldi	r19, 0x00	; 0
    10cc:	3b 87       	std	Y+11, r19	; 0x0b
    10ce:	2a 87       	std	Y+10, r18	; 0x0a
    10d0:	8a 85       	ldd	r24, Y+10	; 0x0a
    10d2:	9b 85       	ldd	r25, Y+11	; 0x0b
    10d4:	00 97       	sbiw	r24, 0x00	; 0
    10d6:	d1 f0       	breq	.+52     	; 0x110c <MDIO_voidSetPinDirection+0xa4>
    10d8:	2a 85       	ldd	r18, Y+10	; 0x0a
    10da:	3b 85       	ldd	r19, Y+11	; 0x0b
    10dc:	21 30       	cpi	r18, 0x01	; 1
    10de:	31 05       	cpc	r19, r1
    10e0:	09 f0       	breq	.+2      	; 0x10e4 <MDIO_voidSetPinDirection+0x7c>
    10e2:	cf c0       	rjmp	.+414    	; 0x1282 <MDIO_voidSetPinDirection+0x21a>
        {
            case PIN_OUTPUT: SET_BIT(DDRA_REG,A_u8Pin);
    10e4:	aa e3       	ldi	r26, 0x3A	; 58
    10e6:	b0 e0       	ldi	r27, 0x00	; 0
    10e8:	ea e3       	ldi	r30, 0x3A	; 58
    10ea:	f0 e0       	ldi	r31, 0x00	; 0
    10ec:	80 81       	ld	r24, Z
    10ee:	48 2f       	mov	r20, r24
    10f0:	8a 81       	ldd	r24, Y+2	; 0x02
    10f2:	28 2f       	mov	r18, r24
    10f4:	30 e0       	ldi	r19, 0x00	; 0
    10f6:	81 e0       	ldi	r24, 0x01	; 1
    10f8:	90 e0       	ldi	r25, 0x00	; 0
    10fa:	02 2e       	mov	r0, r18
    10fc:	02 c0       	rjmp	.+4      	; 0x1102 <MDIO_voidSetPinDirection+0x9a>
    10fe:	88 0f       	add	r24, r24
    1100:	99 1f       	adc	r25, r25
    1102:	0a 94       	dec	r0
    1104:	e2 f7       	brpl	.-8      	; 0x10fe <MDIO_voidSetPinDirection+0x96>
    1106:	84 2b       	or	r24, r20
    1108:	8c 93       	st	X, r24
    110a:	bb c0       	rjmp	.+374    	; 0x1282 <MDIO_voidSetPinDirection+0x21a>
            break;

            case PIN_INPUT: CLR_BIT(DDRA_REG,A_u8Pin);
    110c:	aa e3       	ldi	r26, 0x3A	; 58
    110e:	b0 e0       	ldi	r27, 0x00	; 0
    1110:	ea e3       	ldi	r30, 0x3A	; 58
    1112:	f0 e0       	ldi	r31, 0x00	; 0
    1114:	80 81       	ld	r24, Z
    1116:	48 2f       	mov	r20, r24
    1118:	8a 81       	ldd	r24, Y+2	; 0x02
    111a:	28 2f       	mov	r18, r24
    111c:	30 e0       	ldi	r19, 0x00	; 0
    111e:	81 e0       	ldi	r24, 0x01	; 1
    1120:	90 e0       	ldi	r25, 0x00	; 0
    1122:	02 2e       	mov	r0, r18
    1124:	02 c0       	rjmp	.+4      	; 0x112a <MDIO_voidSetPinDirection+0xc2>
    1126:	88 0f       	add	r24, r24
    1128:	99 1f       	adc	r25, r25
    112a:	0a 94       	dec	r0
    112c:	e2 f7       	brpl	.-8      	; 0x1126 <MDIO_voidSetPinDirection+0xbe>
    112e:	80 95       	com	r24
    1130:	84 23       	and	r24, r20
    1132:	8c 93       	st	X, r24
    1134:	a6 c0       	rjmp	.+332    	; 0x1282 <MDIO_voidSetPinDirection+0x21a>
            break;
        };
        break;

        case PORTB:
        switch (A_u8Value)
    1136:	8b 81       	ldd	r24, Y+3	; 0x03
    1138:	28 2f       	mov	r18, r24
    113a:	30 e0       	ldi	r19, 0x00	; 0
    113c:	39 87       	std	Y+9, r19	; 0x09
    113e:	28 87       	std	Y+8, r18	; 0x08
    1140:	88 85       	ldd	r24, Y+8	; 0x08
    1142:	99 85       	ldd	r25, Y+9	; 0x09
    1144:	00 97       	sbiw	r24, 0x00	; 0
    1146:	d1 f0       	breq	.+52     	; 0x117c <MDIO_voidSetPinDirection+0x114>
    1148:	28 85       	ldd	r18, Y+8	; 0x08
    114a:	39 85       	ldd	r19, Y+9	; 0x09
    114c:	21 30       	cpi	r18, 0x01	; 1
    114e:	31 05       	cpc	r19, r1
    1150:	09 f0       	breq	.+2      	; 0x1154 <MDIO_voidSetPinDirection+0xec>
    1152:	97 c0       	rjmp	.+302    	; 0x1282 <MDIO_voidSetPinDirection+0x21a>
        {
            case PIN_OUTPUT: SET_BIT(DDRB_REG,A_u8Pin);
    1154:	a7 e3       	ldi	r26, 0x37	; 55
    1156:	b0 e0       	ldi	r27, 0x00	; 0
    1158:	e7 e3       	ldi	r30, 0x37	; 55
    115a:	f0 e0       	ldi	r31, 0x00	; 0
    115c:	80 81       	ld	r24, Z
    115e:	48 2f       	mov	r20, r24
    1160:	8a 81       	ldd	r24, Y+2	; 0x02
    1162:	28 2f       	mov	r18, r24
    1164:	30 e0       	ldi	r19, 0x00	; 0
    1166:	81 e0       	ldi	r24, 0x01	; 1
    1168:	90 e0       	ldi	r25, 0x00	; 0
    116a:	02 2e       	mov	r0, r18
    116c:	02 c0       	rjmp	.+4      	; 0x1172 <MDIO_voidSetPinDirection+0x10a>
    116e:	88 0f       	add	r24, r24
    1170:	99 1f       	adc	r25, r25
    1172:	0a 94       	dec	r0
    1174:	e2 f7       	brpl	.-8      	; 0x116e <MDIO_voidSetPinDirection+0x106>
    1176:	84 2b       	or	r24, r20
    1178:	8c 93       	st	X, r24
    117a:	83 c0       	rjmp	.+262    	; 0x1282 <MDIO_voidSetPinDirection+0x21a>
            break;

            case PIN_INPUT: CLR_BIT(DDRB_REG,A_u8Pin);
    117c:	a7 e3       	ldi	r26, 0x37	; 55
    117e:	b0 e0       	ldi	r27, 0x00	; 0
    1180:	e7 e3       	ldi	r30, 0x37	; 55
    1182:	f0 e0       	ldi	r31, 0x00	; 0
    1184:	80 81       	ld	r24, Z
    1186:	48 2f       	mov	r20, r24
    1188:	8a 81       	ldd	r24, Y+2	; 0x02
    118a:	28 2f       	mov	r18, r24
    118c:	30 e0       	ldi	r19, 0x00	; 0
    118e:	81 e0       	ldi	r24, 0x01	; 1
    1190:	90 e0       	ldi	r25, 0x00	; 0
    1192:	02 2e       	mov	r0, r18
    1194:	02 c0       	rjmp	.+4      	; 0x119a <MDIO_voidSetPinDirection+0x132>
    1196:	88 0f       	add	r24, r24
    1198:	99 1f       	adc	r25, r25
    119a:	0a 94       	dec	r0
    119c:	e2 f7       	brpl	.-8      	; 0x1196 <MDIO_voidSetPinDirection+0x12e>
    119e:	80 95       	com	r24
    11a0:	84 23       	and	r24, r20
    11a2:	8c 93       	st	X, r24
    11a4:	6e c0       	rjmp	.+220    	; 0x1282 <MDIO_voidSetPinDirection+0x21a>
            break;
        };
        break;

        case PORTC:
        switch (A_u8Value)
    11a6:	8b 81       	ldd	r24, Y+3	; 0x03
    11a8:	28 2f       	mov	r18, r24
    11aa:	30 e0       	ldi	r19, 0x00	; 0
    11ac:	3f 83       	std	Y+7, r19	; 0x07
    11ae:	2e 83       	std	Y+6, r18	; 0x06
    11b0:	8e 81       	ldd	r24, Y+6	; 0x06
    11b2:	9f 81       	ldd	r25, Y+7	; 0x07
    11b4:	00 97       	sbiw	r24, 0x00	; 0
    11b6:	d1 f0       	breq	.+52     	; 0x11ec <MDIO_voidSetPinDirection+0x184>
    11b8:	2e 81       	ldd	r18, Y+6	; 0x06
    11ba:	3f 81       	ldd	r19, Y+7	; 0x07
    11bc:	21 30       	cpi	r18, 0x01	; 1
    11be:	31 05       	cpc	r19, r1
    11c0:	09 f0       	breq	.+2      	; 0x11c4 <MDIO_voidSetPinDirection+0x15c>
    11c2:	5f c0       	rjmp	.+190    	; 0x1282 <MDIO_voidSetPinDirection+0x21a>
        {
            case PIN_OUTPUT: SET_BIT(DDRC_REG,A_u8Pin);
    11c4:	a4 e3       	ldi	r26, 0x34	; 52
    11c6:	b0 e0       	ldi	r27, 0x00	; 0
    11c8:	e4 e3       	ldi	r30, 0x34	; 52
    11ca:	f0 e0       	ldi	r31, 0x00	; 0
    11cc:	80 81       	ld	r24, Z
    11ce:	48 2f       	mov	r20, r24
    11d0:	8a 81       	ldd	r24, Y+2	; 0x02
    11d2:	28 2f       	mov	r18, r24
    11d4:	30 e0       	ldi	r19, 0x00	; 0
    11d6:	81 e0       	ldi	r24, 0x01	; 1
    11d8:	90 e0       	ldi	r25, 0x00	; 0
    11da:	02 2e       	mov	r0, r18
    11dc:	02 c0       	rjmp	.+4      	; 0x11e2 <MDIO_voidSetPinDirection+0x17a>
    11de:	88 0f       	add	r24, r24
    11e0:	99 1f       	adc	r25, r25
    11e2:	0a 94       	dec	r0
    11e4:	e2 f7       	brpl	.-8      	; 0x11de <MDIO_voidSetPinDirection+0x176>
    11e6:	84 2b       	or	r24, r20
    11e8:	8c 93       	st	X, r24
    11ea:	4b c0       	rjmp	.+150    	; 0x1282 <MDIO_voidSetPinDirection+0x21a>
            break;

            case PIN_INPUT: CLR_BIT(DDRC_REG,A_u8Pin);
    11ec:	a4 e3       	ldi	r26, 0x34	; 52
    11ee:	b0 e0       	ldi	r27, 0x00	; 0
    11f0:	e4 e3       	ldi	r30, 0x34	; 52
    11f2:	f0 e0       	ldi	r31, 0x00	; 0
    11f4:	80 81       	ld	r24, Z
    11f6:	48 2f       	mov	r20, r24
    11f8:	8a 81       	ldd	r24, Y+2	; 0x02
    11fa:	28 2f       	mov	r18, r24
    11fc:	30 e0       	ldi	r19, 0x00	; 0
    11fe:	81 e0       	ldi	r24, 0x01	; 1
    1200:	90 e0       	ldi	r25, 0x00	; 0
    1202:	02 2e       	mov	r0, r18
    1204:	02 c0       	rjmp	.+4      	; 0x120a <MDIO_voidSetPinDirection+0x1a2>
    1206:	88 0f       	add	r24, r24
    1208:	99 1f       	adc	r25, r25
    120a:	0a 94       	dec	r0
    120c:	e2 f7       	brpl	.-8      	; 0x1206 <MDIO_voidSetPinDirection+0x19e>
    120e:	80 95       	com	r24
    1210:	84 23       	and	r24, r20
    1212:	8c 93       	st	X, r24
    1214:	36 c0       	rjmp	.+108    	; 0x1282 <MDIO_voidSetPinDirection+0x21a>
            break;
        };
        break;

        case PORTD:
        switch (A_u8Value)
    1216:	8b 81       	ldd	r24, Y+3	; 0x03
    1218:	28 2f       	mov	r18, r24
    121a:	30 e0       	ldi	r19, 0x00	; 0
    121c:	3d 83       	std	Y+5, r19	; 0x05
    121e:	2c 83       	std	Y+4, r18	; 0x04
    1220:	8c 81       	ldd	r24, Y+4	; 0x04
    1222:	9d 81       	ldd	r25, Y+5	; 0x05
    1224:	00 97       	sbiw	r24, 0x00	; 0
    1226:	c9 f0       	breq	.+50     	; 0x125a <MDIO_voidSetPinDirection+0x1f2>
    1228:	2c 81       	ldd	r18, Y+4	; 0x04
    122a:	3d 81       	ldd	r19, Y+5	; 0x05
    122c:	21 30       	cpi	r18, 0x01	; 1
    122e:	31 05       	cpc	r19, r1
    1230:	41 f5       	brne	.+80     	; 0x1282 <MDIO_voidSetPinDirection+0x21a>
        {
            case PIN_OUTPUT: SET_BIT(DDRD_REG,A_u8Pin);
    1232:	a1 e3       	ldi	r26, 0x31	; 49
    1234:	b0 e0       	ldi	r27, 0x00	; 0
    1236:	e1 e3       	ldi	r30, 0x31	; 49
    1238:	f0 e0       	ldi	r31, 0x00	; 0
    123a:	80 81       	ld	r24, Z
    123c:	48 2f       	mov	r20, r24
    123e:	8a 81       	ldd	r24, Y+2	; 0x02
    1240:	28 2f       	mov	r18, r24
    1242:	30 e0       	ldi	r19, 0x00	; 0
    1244:	81 e0       	ldi	r24, 0x01	; 1
    1246:	90 e0       	ldi	r25, 0x00	; 0
    1248:	02 2e       	mov	r0, r18
    124a:	02 c0       	rjmp	.+4      	; 0x1250 <MDIO_voidSetPinDirection+0x1e8>
    124c:	88 0f       	add	r24, r24
    124e:	99 1f       	adc	r25, r25
    1250:	0a 94       	dec	r0
    1252:	e2 f7       	brpl	.-8      	; 0x124c <MDIO_voidSetPinDirection+0x1e4>
    1254:	84 2b       	or	r24, r20
    1256:	8c 93       	st	X, r24
    1258:	14 c0       	rjmp	.+40     	; 0x1282 <MDIO_voidSetPinDirection+0x21a>
            break;

            case PIN_INPUT: CLR_BIT(DDRD_REG,A_u8Pin);
    125a:	a1 e3       	ldi	r26, 0x31	; 49
    125c:	b0 e0       	ldi	r27, 0x00	; 0
    125e:	e1 e3       	ldi	r30, 0x31	; 49
    1260:	f0 e0       	ldi	r31, 0x00	; 0
    1262:	80 81       	ld	r24, Z
    1264:	48 2f       	mov	r20, r24
    1266:	8a 81       	ldd	r24, Y+2	; 0x02
    1268:	28 2f       	mov	r18, r24
    126a:	30 e0       	ldi	r19, 0x00	; 0
    126c:	81 e0       	ldi	r24, 0x01	; 1
    126e:	90 e0       	ldi	r25, 0x00	; 0
    1270:	02 2e       	mov	r0, r18
    1272:	02 c0       	rjmp	.+4      	; 0x1278 <MDIO_voidSetPinDirection+0x210>
    1274:	88 0f       	add	r24, r24
    1276:	99 1f       	adc	r25, r25
    1278:	0a 94       	dec	r0
    127a:	e2 f7       	brpl	.-8      	; 0x1274 <MDIO_voidSetPinDirection+0x20c>
    127c:	80 95       	com	r24
    127e:	84 23       	and	r24, r20
    1280:	8c 93       	st	X, r24
            break;
        };
        break;
    }
}
    1282:	2d 96       	adiw	r28, 0x0d	; 13
    1284:	0f b6       	in	r0, 0x3f	; 63
    1286:	f8 94       	cli
    1288:	de bf       	out	0x3e, r29	; 62
    128a:	0f be       	out	0x3f, r0	; 63
    128c:	cd bf       	out	0x3d, r28	; 61
    128e:	cf 91       	pop	r28
    1290:	df 91       	pop	r29
    1292:	08 95       	ret

00001294 <MDIO_voidSetPortValue>:


void MDIO_voidSetPortValue(u8 A_u8Port,u8 A_u8Value)
{
    1294:	df 93       	push	r29
    1296:	cf 93       	push	r28
    1298:	00 d0       	rcall	.+0      	; 0x129a <MDIO_voidSetPortValue+0x6>
    129a:	00 d0       	rcall	.+0      	; 0x129c <MDIO_voidSetPortValue+0x8>
    129c:	cd b7       	in	r28, 0x3d	; 61
    129e:	de b7       	in	r29, 0x3e	; 62
    12a0:	89 83       	std	Y+1, r24	; 0x01
    12a2:	6a 83       	std	Y+2, r22	; 0x02
    switch(A_u8Port)
    12a4:	89 81       	ldd	r24, Y+1	; 0x01
    12a6:	28 2f       	mov	r18, r24
    12a8:	30 e0       	ldi	r19, 0x00	; 0
    12aa:	3c 83       	std	Y+4, r19	; 0x04
    12ac:	2b 83       	std	Y+3, r18	; 0x03
    12ae:	8b 81       	ldd	r24, Y+3	; 0x03
    12b0:	9c 81       	ldd	r25, Y+4	; 0x04
    12b2:	81 30       	cpi	r24, 0x01	; 1
    12b4:	91 05       	cpc	r25, r1
    12b6:	d1 f0       	breq	.+52     	; 0x12ec <MDIO_voidSetPortValue+0x58>
    12b8:	2b 81       	ldd	r18, Y+3	; 0x03
    12ba:	3c 81       	ldd	r19, Y+4	; 0x04
    12bc:	22 30       	cpi	r18, 0x02	; 2
    12be:	31 05       	cpc	r19, r1
    12c0:	2c f4       	brge	.+10     	; 0x12cc <MDIO_voidSetPortValue+0x38>
    12c2:	8b 81       	ldd	r24, Y+3	; 0x03
    12c4:	9c 81       	ldd	r25, Y+4	; 0x04
    12c6:	00 97       	sbiw	r24, 0x00	; 0
    12c8:	61 f0       	breq	.+24     	; 0x12e2 <MDIO_voidSetPortValue+0x4e>
    12ca:	1e c0       	rjmp	.+60     	; 0x1308 <MDIO_voidSetPortValue+0x74>
    12cc:	2b 81       	ldd	r18, Y+3	; 0x03
    12ce:	3c 81       	ldd	r19, Y+4	; 0x04
    12d0:	22 30       	cpi	r18, 0x02	; 2
    12d2:	31 05       	cpc	r19, r1
    12d4:	81 f0       	breq	.+32     	; 0x12f6 <MDIO_voidSetPortValue+0x62>
    12d6:	8b 81       	ldd	r24, Y+3	; 0x03
    12d8:	9c 81       	ldd	r25, Y+4	; 0x04
    12da:	83 30       	cpi	r24, 0x03	; 3
    12dc:	91 05       	cpc	r25, r1
    12de:	81 f0       	breq	.+32     	; 0x1300 <MDIO_voidSetPortValue+0x6c>
    12e0:	13 c0       	rjmp	.+38     	; 0x1308 <MDIO_voidSetPortValue+0x74>
    {
        case PORTA:PORTA_REG=A_u8Value;
    12e2:	eb e3       	ldi	r30, 0x3B	; 59
    12e4:	f0 e0       	ldi	r31, 0x00	; 0
    12e6:	8a 81       	ldd	r24, Y+2	; 0x02
    12e8:	80 83       	st	Z, r24
    12ea:	0e c0       	rjmp	.+28     	; 0x1308 <MDIO_voidSetPortValue+0x74>
        break;
        case PORTB:PORTB_REG=A_u8Value;
    12ec:	e8 e3       	ldi	r30, 0x38	; 56
    12ee:	f0 e0       	ldi	r31, 0x00	; 0
    12f0:	8a 81       	ldd	r24, Y+2	; 0x02
    12f2:	80 83       	st	Z, r24
    12f4:	09 c0       	rjmp	.+18     	; 0x1308 <MDIO_voidSetPortValue+0x74>
        break;
        case PORTC:PORTC_REG=A_u8Value;
    12f6:	e5 e3       	ldi	r30, 0x35	; 53
    12f8:	f0 e0       	ldi	r31, 0x00	; 0
    12fa:	8a 81       	ldd	r24, Y+2	; 0x02
    12fc:	80 83       	st	Z, r24
    12fe:	04 c0       	rjmp	.+8      	; 0x1308 <MDIO_voidSetPortValue+0x74>
        break;
        case PORTD:PORTD_REG=A_u8Value;
    1300:	e2 e3       	ldi	r30, 0x32	; 50
    1302:	f0 e0       	ldi	r31, 0x00	; 0
    1304:	8a 81       	ldd	r24, Y+2	; 0x02
    1306:	80 83       	st	Z, r24
        break;
    }
}
    1308:	0f 90       	pop	r0
    130a:	0f 90       	pop	r0
    130c:	0f 90       	pop	r0
    130e:	0f 90       	pop	r0
    1310:	cf 91       	pop	r28
    1312:	df 91       	pop	r29
    1314:	08 95       	ret

00001316 <MDIO_voidSetPortDirection>:

void MDIO_voidSetPortDirection(u8 A_u8Port,u8 A_u8Value)
{
    1316:	df 93       	push	r29
    1318:	cf 93       	push	r28
    131a:	00 d0       	rcall	.+0      	; 0x131c <MDIO_voidSetPortDirection+0x6>
    131c:	00 d0       	rcall	.+0      	; 0x131e <MDIO_voidSetPortDirection+0x8>
    131e:	cd b7       	in	r28, 0x3d	; 61
    1320:	de b7       	in	r29, 0x3e	; 62
    1322:	89 83       	std	Y+1, r24	; 0x01
    1324:	6a 83       	std	Y+2, r22	; 0x02
    switch(A_u8Port)
    1326:	89 81       	ldd	r24, Y+1	; 0x01
    1328:	28 2f       	mov	r18, r24
    132a:	30 e0       	ldi	r19, 0x00	; 0
    132c:	3c 83       	std	Y+4, r19	; 0x04
    132e:	2b 83       	std	Y+3, r18	; 0x03
    1330:	8b 81       	ldd	r24, Y+3	; 0x03
    1332:	9c 81       	ldd	r25, Y+4	; 0x04
    1334:	81 30       	cpi	r24, 0x01	; 1
    1336:	91 05       	cpc	r25, r1
    1338:	d1 f0       	breq	.+52     	; 0x136e <MDIO_voidSetPortDirection+0x58>
    133a:	2b 81       	ldd	r18, Y+3	; 0x03
    133c:	3c 81       	ldd	r19, Y+4	; 0x04
    133e:	22 30       	cpi	r18, 0x02	; 2
    1340:	31 05       	cpc	r19, r1
    1342:	2c f4       	brge	.+10     	; 0x134e <MDIO_voidSetPortDirection+0x38>
    1344:	8b 81       	ldd	r24, Y+3	; 0x03
    1346:	9c 81       	ldd	r25, Y+4	; 0x04
    1348:	00 97       	sbiw	r24, 0x00	; 0
    134a:	61 f0       	breq	.+24     	; 0x1364 <MDIO_voidSetPortDirection+0x4e>
    134c:	1e c0       	rjmp	.+60     	; 0x138a <MDIO_voidSetPortDirection+0x74>
    134e:	2b 81       	ldd	r18, Y+3	; 0x03
    1350:	3c 81       	ldd	r19, Y+4	; 0x04
    1352:	22 30       	cpi	r18, 0x02	; 2
    1354:	31 05       	cpc	r19, r1
    1356:	81 f0       	breq	.+32     	; 0x1378 <MDIO_voidSetPortDirection+0x62>
    1358:	8b 81       	ldd	r24, Y+3	; 0x03
    135a:	9c 81       	ldd	r25, Y+4	; 0x04
    135c:	83 30       	cpi	r24, 0x03	; 3
    135e:	91 05       	cpc	r25, r1
    1360:	81 f0       	breq	.+32     	; 0x1382 <MDIO_voidSetPortDirection+0x6c>
    1362:	13 c0       	rjmp	.+38     	; 0x138a <MDIO_voidSetPortDirection+0x74>
    {
        case PORTA:DDRA_REG=A_u8Value;
    1364:	ea e3       	ldi	r30, 0x3A	; 58
    1366:	f0 e0       	ldi	r31, 0x00	; 0
    1368:	8a 81       	ldd	r24, Y+2	; 0x02
    136a:	80 83       	st	Z, r24
    136c:	0e c0       	rjmp	.+28     	; 0x138a <MDIO_voidSetPortDirection+0x74>
        break;
        case PORTB:DDRB_REG=A_u8Value;
    136e:	e7 e3       	ldi	r30, 0x37	; 55
    1370:	f0 e0       	ldi	r31, 0x00	; 0
    1372:	8a 81       	ldd	r24, Y+2	; 0x02
    1374:	80 83       	st	Z, r24
    1376:	09 c0       	rjmp	.+18     	; 0x138a <MDIO_voidSetPortDirection+0x74>
        break;
        case PORTC:DDRC_REG=A_u8Value;
    1378:	e4 e3       	ldi	r30, 0x34	; 52
    137a:	f0 e0       	ldi	r31, 0x00	; 0
    137c:	8a 81       	ldd	r24, Y+2	; 0x02
    137e:	80 83       	st	Z, r24
    1380:	04 c0       	rjmp	.+8      	; 0x138a <MDIO_voidSetPortDirection+0x74>
        break;
        case PORTD:DDRD_REG=A_u8Value;
    1382:	e1 e3       	ldi	r30, 0x31	; 49
    1384:	f0 e0       	ldi	r31, 0x00	; 0
    1386:	8a 81       	ldd	r24, Y+2	; 0x02
    1388:	80 83       	st	Z, r24
        break;
    }
    138a:	0f 90       	pop	r0
    138c:	0f 90       	pop	r0
    138e:	0f 90       	pop	r0
    1390:	0f 90       	pop	r0
    1392:	cf 91       	pop	r28
    1394:	df 91       	pop	r29
    1396:	08 95       	ret

00001398 <HLCD4_voidSendCommand>:




void HLCD4_voidSendCommand(u8 A_u8Command)
{
    1398:	0f 93       	push	r16
    139a:	1f 93       	push	r17
    139c:	df 93       	push	r29
    139e:	cf 93       	push	r28
    13a0:	cd b7       	in	r28, 0x3d	; 61
    13a2:	de b7       	in	r29, 0x3e	; 62
    13a4:	c1 56       	subi	r28, 0x61	; 97
    13a6:	d0 40       	sbci	r29, 0x00	; 0
    13a8:	0f b6       	in	r0, 0x3f	; 63
    13aa:	f8 94       	cli
    13ac:	de bf       	out	0x3e, r29	; 62
    13ae:	0f be       	out	0x3f, r0	; 63
    13b0:	cd bf       	out	0x3d, r28	; 61
    13b2:	fe 01       	movw	r30, r28
    13b4:	ef 59       	subi	r30, 0x9F	; 159
    13b6:	ff 4f       	sbci	r31, 0xFF	; 255
    13b8:	80 83       	st	Z, r24
    //RS=0 RW=0
	MDIO_voidSetPinValue(LCD_CONTROL_PORT,E_PIN,PIN_LOW);
    13ba:	82 e0       	ldi	r24, 0x02	; 2
    13bc:	62 e0       	ldi	r22, 0x02	; 2
    13be:	40 e0       	ldi	r20, 0x00	; 0
    13c0:	0e 94 1e 07 	call	0xe3c	; 0xe3c <MDIO_voidSetPinValue>

    MDIO_voidSetPortValue(LCD_DATA_PORT,A_u8Command);
    13c4:	fe 01       	movw	r30, r28
    13c6:	ef 59       	subi	r30, 0x9F	; 159
    13c8:	ff 4f       	sbci	r31, 0xFF	; 255
    13ca:	83 e0       	ldi	r24, 0x03	; 3
    13cc:	60 81       	ld	r22, Z
    13ce:	0e 94 4a 09 	call	0x1294	; 0x1294 <MDIO_voidSetPortValue>

    MDIO_voidSetPinValue(LCD_CONTROL_PORT,RS_PIN,PIN_LOW);
    13d2:	82 e0       	ldi	r24, 0x02	; 2
    13d4:	60 e0       	ldi	r22, 0x00	; 0
    13d6:	40 e0       	ldi	r20, 0x00	; 0
    13d8:	0e 94 1e 07 	call	0xe3c	; 0xe3c <MDIO_voidSetPinValue>
    MDIO_voidSetPinValue(LCD_CONTROL_PORT,RW_PIN,PIN_LOW);
    13dc:	82 e0       	ldi	r24, 0x02	; 2
    13de:	61 e0       	ldi	r22, 0x01	; 1
    13e0:	40 e0       	ldi	r20, 0x00	; 0
    13e2:	0e 94 1e 07 	call	0xe3c	; 0xe3c <MDIO_voidSetPinValue>

    MDIO_voidSetPinValue(LCD_CONTROL_PORT,E_PIN,PIN_HIGH);
    13e6:	82 e0       	ldi	r24, 0x02	; 2
    13e8:	62 e0       	ldi	r22, 0x02	; 2
    13ea:	41 e0       	ldi	r20, 0x01	; 1
    13ec:	0e 94 1e 07 	call	0xe3c	; 0xe3c <MDIO_voidSetPinValue>
    13f0:	fe 01       	movw	r30, r28
    13f2:	e3 5a       	subi	r30, 0xA3	; 163
    13f4:	ff 4f       	sbci	r31, 0xFF	; 255
    13f6:	80 e0       	ldi	r24, 0x00	; 0
    13f8:	90 e0       	ldi	r25, 0x00	; 0
    13fa:	a0 e0       	ldi	r26, 0x00	; 0
    13fc:	b0 e4       	ldi	r27, 0x40	; 64
    13fe:	80 83       	st	Z, r24
    1400:	91 83       	std	Z+1, r25	; 0x01
    1402:	a2 83       	std	Z+2, r26	; 0x02
    1404:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1406:	8e 01       	movw	r16, r28
    1408:	07 5a       	subi	r16, 0xA7	; 167
    140a:	1f 4f       	sbci	r17, 0xFF	; 255
    140c:	fe 01       	movw	r30, r28
    140e:	e3 5a       	subi	r30, 0xA3	; 163
    1410:	ff 4f       	sbci	r31, 0xFF	; 255
    1412:	60 81       	ld	r22, Z
    1414:	71 81       	ldd	r23, Z+1	; 0x01
    1416:	82 81       	ldd	r24, Z+2	; 0x02
    1418:	93 81       	ldd	r25, Z+3	; 0x03
    141a:	2b ea       	ldi	r18, 0xAB	; 171
    141c:	3a ea       	ldi	r19, 0xAA	; 170
    141e:	4a e2       	ldi	r20, 0x2A	; 42
    1420:	50 e4       	ldi	r21, 0x40	; 64
    1422:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1426:	dc 01       	movw	r26, r24
    1428:	cb 01       	movw	r24, r22
    142a:	f8 01       	movw	r30, r16
    142c:	80 83       	st	Z, r24
    142e:	91 83       	std	Z+1, r25	; 0x01
    1430:	a2 83       	std	Z+2, r26	; 0x02
    1432:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1434:	fe 01       	movw	r30, r28
    1436:	e7 5a       	subi	r30, 0xA7	; 167
    1438:	ff 4f       	sbci	r31, 0xFF	; 255
    143a:	60 81       	ld	r22, Z
    143c:	71 81       	ldd	r23, Z+1	; 0x01
    143e:	82 81       	ldd	r24, Z+2	; 0x02
    1440:	93 81       	ldd	r25, Z+3	; 0x03
    1442:	20 e0       	ldi	r18, 0x00	; 0
    1444:	30 e0       	ldi	r19, 0x00	; 0
    1446:	40 e8       	ldi	r20, 0x80	; 128
    1448:	5f e3       	ldi	r21, 0x3F	; 63
    144a:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    144e:	88 23       	and	r24, r24
    1450:	34 f4       	brge	.+12     	; 0x145e <HLCD4_voidSendCommand+0xc6>
		__ticks = 1;
    1452:	fe 01       	movw	r30, r28
    1454:	e8 5a       	subi	r30, 0xA8	; 168
    1456:	ff 4f       	sbci	r31, 0xFF	; 255
    1458:	81 e0       	ldi	r24, 0x01	; 1
    145a:	80 83       	st	Z, r24
    145c:	e0 c0       	rjmp	.+448    	; 0x161e <HLCD4_voidSendCommand+0x286>
	else if (__tmp > 255)
    145e:	fe 01       	movw	r30, r28
    1460:	e7 5a       	subi	r30, 0xA7	; 167
    1462:	ff 4f       	sbci	r31, 0xFF	; 255
    1464:	60 81       	ld	r22, Z
    1466:	71 81       	ldd	r23, Z+1	; 0x01
    1468:	82 81       	ldd	r24, Z+2	; 0x02
    146a:	93 81       	ldd	r25, Z+3	; 0x03
    146c:	20 e0       	ldi	r18, 0x00	; 0
    146e:	30 e0       	ldi	r19, 0x00	; 0
    1470:	4f e7       	ldi	r20, 0x7F	; 127
    1472:	53 e4       	ldi	r21, 0x43	; 67
    1474:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1478:	18 16       	cp	r1, r24
    147a:	0c f0       	brlt	.+2      	; 0x147e <HLCD4_voidSendCommand+0xe6>
    147c:	c0 c0       	rjmp	.+384    	; 0x15fe <HLCD4_voidSendCommand+0x266>
	{
		_delay_ms(__us / 1000.0);
    147e:	fe 01       	movw	r30, r28
    1480:	e3 5a       	subi	r30, 0xA3	; 163
    1482:	ff 4f       	sbci	r31, 0xFF	; 255
    1484:	60 81       	ld	r22, Z
    1486:	71 81       	ldd	r23, Z+1	; 0x01
    1488:	82 81       	ldd	r24, Z+2	; 0x02
    148a:	93 81       	ldd	r25, Z+3	; 0x03
    148c:	20 e0       	ldi	r18, 0x00	; 0
    148e:	30 e0       	ldi	r19, 0x00	; 0
    1490:	4a e7       	ldi	r20, 0x7A	; 122
    1492:	54 e4       	ldi	r21, 0x44	; 68
    1494:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    1498:	dc 01       	movw	r26, r24
    149a:	cb 01       	movw	r24, r22
    149c:	fe 01       	movw	r30, r28
    149e:	ec 5a       	subi	r30, 0xAC	; 172
    14a0:	ff 4f       	sbci	r31, 0xFF	; 255
    14a2:	80 83       	st	Z, r24
    14a4:	91 83       	std	Z+1, r25	; 0x01
    14a6:	a2 83       	std	Z+2, r26	; 0x02
    14a8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    14aa:	8e 01       	movw	r16, r28
    14ac:	00 5b       	subi	r16, 0xB0	; 176
    14ae:	1f 4f       	sbci	r17, 0xFF	; 255
    14b0:	fe 01       	movw	r30, r28
    14b2:	ec 5a       	subi	r30, 0xAC	; 172
    14b4:	ff 4f       	sbci	r31, 0xFF	; 255
    14b6:	60 81       	ld	r22, Z
    14b8:	71 81       	ldd	r23, Z+1	; 0x01
    14ba:	82 81       	ldd	r24, Z+2	; 0x02
    14bc:	93 81       	ldd	r25, Z+3	; 0x03
    14be:	20 e0       	ldi	r18, 0x00	; 0
    14c0:	30 e0       	ldi	r19, 0x00	; 0
    14c2:	4a ef       	ldi	r20, 0xFA	; 250
    14c4:	54 e4       	ldi	r21, 0x44	; 68
    14c6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    14ca:	dc 01       	movw	r26, r24
    14cc:	cb 01       	movw	r24, r22
    14ce:	f8 01       	movw	r30, r16
    14d0:	80 83       	st	Z, r24
    14d2:	91 83       	std	Z+1, r25	; 0x01
    14d4:	a2 83       	std	Z+2, r26	; 0x02
    14d6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    14d8:	fe 01       	movw	r30, r28
    14da:	e0 5b       	subi	r30, 0xB0	; 176
    14dc:	ff 4f       	sbci	r31, 0xFF	; 255
    14de:	60 81       	ld	r22, Z
    14e0:	71 81       	ldd	r23, Z+1	; 0x01
    14e2:	82 81       	ldd	r24, Z+2	; 0x02
    14e4:	93 81       	ldd	r25, Z+3	; 0x03
    14e6:	20 e0       	ldi	r18, 0x00	; 0
    14e8:	30 e0       	ldi	r19, 0x00	; 0
    14ea:	40 e8       	ldi	r20, 0x80	; 128
    14ec:	5f e3       	ldi	r21, 0x3F	; 63
    14ee:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    14f2:	88 23       	and	r24, r24
    14f4:	44 f4       	brge	.+16     	; 0x1506 <HLCD4_voidSendCommand+0x16e>
		__ticks = 1;
    14f6:	fe 01       	movw	r30, r28
    14f8:	e2 5b       	subi	r30, 0xB2	; 178
    14fa:	ff 4f       	sbci	r31, 0xFF	; 255
    14fc:	81 e0       	ldi	r24, 0x01	; 1
    14fe:	90 e0       	ldi	r25, 0x00	; 0
    1500:	91 83       	std	Z+1, r25	; 0x01
    1502:	80 83       	st	Z, r24
    1504:	64 c0       	rjmp	.+200    	; 0x15ce <HLCD4_voidSendCommand+0x236>
	else if (__tmp > 65535)
    1506:	fe 01       	movw	r30, r28
    1508:	e0 5b       	subi	r30, 0xB0	; 176
    150a:	ff 4f       	sbci	r31, 0xFF	; 255
    150c:	60 81       	ld	r22, Z
    150e:	71 81       	ldd	r23, Z+1	; 0x01
    1510:	82 81       	ldd	r24, Z+2	; 0x02
    1512:	93 81       	ldd	r25, Z+3	; 0x03
    1514:	20 e0       	ldi	r18, 0x00	; 0
    1516:	3f ef       	ldi	r19, 0xFF	; 255
    1518:	4f e7       	ldi	r20, 0x7F	; 127
    151a:	57 e4       	ldi	r21, 0x47	; 71
    151c:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1520:	18 16       	cp	r1, r24
    1522:	0c f0       	brlt	.+2      	; 0x1526 <HLCD4_voidSendCommand+0x18e>
    1524:	43 c0       	rjmp	.+134    	; 0x15ac <HLCD4_voidSendCommand+0x214>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1526:	fe 01       	movw	r30, r28
    1528:	ec 5a       	subi	r30, 0xAC	; 172
    152a:	ff 4f       	sbci	r31, 0xFF	; 255
    152c:	60 81       	ld	r22, Z
    152e:	71 81       	ldd	r23, Z+1	; 0x01
    1530:	82 81       	ldd	r24, Z+2	; 0x02
    1532:	93 81       	ldd	r25, Z+3	; 0x03
    1534:	20 e0       	ldi	r18, 0x00	; 0
    1536:	30 e0       	ldi	r19, 0x00	; 0
    1538:	40 e2       	ldi	r20, 0x20	; 32
    153a:	51 e4       	ldi	r21, 0x41	; 65
    153c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1540:	dc 01       	movw	r26, r24
    1542:	cb 01       	movw	r24, r22
    1544:	8e 01       	movw	r16, r28
    1546:	02 5b       	subi	r16, 0xB2	; 178
    1548:	1f 4f       	sbci	r17, 0xFF	; 255
    154a:	bc 01       	movw	r22, r24
    154c:	cd 01       	movw	r24, r26
    154e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1552:	dc 01       	movw	r26, r24
    1554:	cb 01       	movw	r24, r22
    1556:	f8 01       	movw	r30, r16
    1558:	91 83       	std	Z+1, r25	; 0x01
    155a:	80 83       	st	Z, r24
    155c:	1f c0       	rjmp	.+62     	; 0x159c <HLCD4_voidSendCommand+0x204>
    155e:	fe 01       	movw	r30, r28
    1560:	e4 5b       	subi	r30, 0xB4	; 180
    1562:	ff 4f       	sbci	r31, 0xFF	; 255
    1564:	88 ec       	ldi	r24, 0xC8	; 200
    1566:	90 e0       	ldi	r25, 0x00	; 0
    1568:	91 83       	std	Z+1, r25	; 0x01
    156a:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    156c:	fe 01       	movw	r30, r28
    156e:	e4 5b       	subi	r30, 0xB4	; 180
    1570:	ff 4f       	sbci	r31, 0xFF	; 255
    1572:	80 81       	ld	r24, Z
    1574:	91 81       	ldd	r25, Z+1	; 0x01
    1576:	01 97       	sbiw	r24, 0x01	; 1
    1578:	f1 f7       	brne	.-4      	; 0x1576 <HLCD4_voidSendCommand+0x1de>
    157a:	fe 01       	movw	r30, r28
    157c:	e4 5b       	subi	r30, 0xB4	; 180
    157e:	ff 4f       	sbci	r31, 0xFF	; 255
    1580:	91 83       	std	Z+1, r25	; 0x01
    1582:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1584:	de 01       	movw	r26, r28
    1586:	a2 5b       	subi	r26, 0xB2	; 178
    1588:	bf 4f       	sbci	r27, 0xFF	; 255
    158a:	fe 01       	movw	r30, r28
    158c:	e2 5b       	subi	r30, 0xB2	; 178
    158e:	ff 4f       	sbci	r31, 0xFF	; 255
    1590:	80 81       	ld	r24, Z
    1592:	91 81       	ldd	r25, Z+1	; 0x01
    1594:	01 97       	sbiw	r24, 0x01	; 1
    1596:	11 96       	adiw	r26, 0x01	; 1
    1598:	9c 93       	st	X, r25
    159a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    159c:	fe 01       	movw	r30, r28
    159e:	e2 5b       	subi	r30, 0xB2	; 178
    15a0:	ff 4f       	sbci	r31, 0xFF	; 255
    15a2:	80 81       	ld	r24, Z
    15a4:	91 81       	ldd	r25, Z+1	; 0x01
    15a6:	00 97       	sbiw	r24, 0x00	; 0
    15a8:	d1 f6       	brne	.-76     	; 0x155e <HLCD4_voidSendCommand+0x1c6>
    15aa:	4b c0       	rjmp	.+150    	; 0x1642 <HLCD4_voidSendCommand+0x2aa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    15ac:	8e 01       	movw	r16, r28
    15ae:	02 5b       	subi	r16, 0xB2	; 178
    15b0:	1f 4f       	sbci	r17, 0xFF	; 255
    15b2:	fe 01       	movw	r30, r28
    15b4:	e0 5b       	subi	r30, 0xB0	; 176
    15b6:	ff 4f       	sbci	r31, 0xFF	; 255
    15b8:	60 81       	ld	r22, Z
    15ba:	71 81       	ldd	r23, Z+1	; 0x01
    15bc:	82 81       	ldd	r24, Z+2	; 0x02
    15be:	93 81       	ldd	r25, Z+3	; 0x03
    15c0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    15c4:	dc 01       	movw	r26, r24
    15c6:	cb 01       	movw	r24, r22
    15c8:	f8 01       	movw	r30, r16
    15ca:	91 83       	std	Z+1, r25	; 0x01
    15cc:	80 83       	st	Z, r24
    15ce:	de 01       	movw	r26, r28
    15d0:	a6 5b       	subi	r26, 0xB6	; 182
    15d2:	bf 4f       	sbci	r27, 0xFF	; 255
    15d4:	fe 01       	movw	r30, r28
    15d6:	e2 5b       	subi	r30, 0xB2	; 178
    15d8:	ff 4f       	sbci	r31, 0xFF	; 255
    15da:	80 81       	ld	r24, Z
    15dc:	91 81       	ldd	r25, Z+1	; 0x01
    15de:	11 96       	adiw	r26, 0x01	; 1
    15e0:	9c 93       	st	X, r25
    15e2:	8e 93       	st	-X, r24
    15e4:	fe 01       	movw	r30, r28
    15e6:	e6 5b       	subi	r30, 0xB6	; 182
    15e8:	ff 4f       	sbci	r31, 0xFF	; 255
    15ea:	80 81       	ld	r24, Z
    15ec:	91 81       	ldd	r25, Z+1	; 0x01
    15ee:	01 97       	sbiw	r24, 0x01	; 1
    15f0:	f1 f7       	brne	.-4      	; 0x15ee <HLCD4_voidSendCommand+0x256>
    15f2:	fe 01       	movw	r30, r28
    15f4:	e6 5b       	subi	r30, 0xB6	; 182
    15f6:	ff 4f       	sbci	r31, 0xFF	; 255
    15f8:	91 83       	std	Z+1, r25	; 0x01
    15fa:	80 83       	st	Z, r24
    15fc:	22 c0       	rjmp	.+68     	; 0x1642 <HLCD4_voidSendCommand+0x2aa>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    15fe:	8e 01       	movw	r16, r28
    1600:	08 5a       	subi	r16, 0xA8	; 168
    1602:	1f 4f       	sbci	r17, 0xFF	; 255
    1604:	fe 01       	movw	r30, r28
    1606:	e7 5a       	subi	r30, 0xA7	; 167
    1608:	ff 4f       	sbci	r31, 0xFF	; 255
    160a:	60 81       	ld	r22, Z
    160c:	71 81       	ldd	r23, Z+1	; 0x01
    160e:	82 81       	ldd	r24, Z+2	; 0x02
    1610:	93 81       	ldd	r25, Z+3	; 0x03
    1612:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1616:	dc 01       	movw	r26, r24
    1618:	cb 01       	movw	r24, r22
    161a:	f8 01       	movw	r30, r16
    161c:	80 83       	st	Z, r24
    161e:	de 01       	movw	r26, r28
    1620:	a7 5b       	subi	r26, 0xB7	; 183
    1622:	bf 4f       	sbci	r27, 0xFF	; 255
    1624:	fe 01       	movw	r30, r28
    1626:	e8 5a       	subi	r30, 0xA8	; 168
    1628:	ff 4f       	sbci	r31, 0xFF	; 255
    162a:	80 81       	ld	r24, Z
    162c:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    162e:	fe 01       	movw	r30, r28
    1630:	e7 5b       	subi	r30, 0xB7	; 183
    1632:	ff 4f       	sbci	r31, 0xFF	; 255
    1634:	80 81       	ld	r24, Z
    1636:	8a 95       	dec	r24
    1638:	f1 f7       	brne	.-4      	; 0x1636 <HLCD4_voidSendCommand+0x29e>
    163a:	fe 01       	movw	r30, r28
    163c:	e7 5b       	subi	r30, 0xB7	; 183
    163e:	ff 4f       	sbci	r31, 0xFF	; 255
    1640:	80 83       	st	Z, r24
    _delay_us(2);
    MDIO_voidSetPinValue(LCD_CONTROL_PORT,E_PIN,PIN_LOW);
    1642:	82 e0       	ldi	r24, 0x02	; 2
    1644:	62 e0       	ldi	r22, 0x02	; 2
    1646:	40 e0       	ldi	r20, 0x00	; 0
    1648:	0e 94 1e 07 	call	0xe3c	; 0xe3c <MDIO_voidSetPinValue>
    164c:	fe 01       	movw	r30, r28
    164e:	eb 5b       	subi	r30, 0xBB	; 187
    1650:	ff 4f       	sbci	r31, 0xFF	; 255
    1652:	80 e0       	ldi	r24, 0x00	; 0
    1654:	90 e0       	ldi	r25, 0x00	; 0
    1656:	a0 e0       	ldi	r26, 0x00	; 0
    1658:	b0 e4       	ldi	r27, 0x40	; 64
    165a:	80 83       	st	Z, r24
    165c:	91 83       	std	Z+1, r25	; 0x01
    165e:	a2 83       	std	Z+2, r26	; 0x02
    1660:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1662:	8e 01       	movw	r16, r28
    1664:	0f 5b       	subi	r16, 0xBF	; 191
    1666:	1f 4f       	sbci	r17, 0xFF	; 255
    1668:	fe 01       	movw	r30, r28
    166a:	eb 5b       	subi	r30, 0xBB	; 187
    166c:	ff 4f       	sbci	r31, 0xFF	; 255
    166e:	60 81       	ld	r22, Z
    1670:	71 81       	ldd	r23, Z+1	; 0x01
    1672:	82 81       	ldd	r24, Z+2	; 0x02
    1674:	93 81       	ldd	r25, Z+3	; 0x03
    1676:	2b ea       	ldi	r18, 0xAB	; 171
    1678:	3a ea       	ldi	r19, 0xAA	; 170
    167a:	4a e2       	ldi	r20, 0x2A	; 42
    167c:	50 e4       	ldi	r21, 0x40	; 64
    167e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1682:	dc 01       	movw	r26, r24
    1684:	cb 01       	movw	r24, r22
    1686:	f8 01       	movw	r30, r16
    1688:	80 83       	st	Z, r24
    168a:	91 83       	std	Z+1, r25	; 0x01
    168c:	a2 83       	std	Z+2, r26	; 0x02
    168e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1690:	fe 01       	movw	r30, r28
    1692:	ef 5b       	subi	r30, 0xBF	; 191
    1694:	ff 4f       	sbci	r31, 0xFF	; 255
    1696:	60 81       	ld	r22, Z
    1698:	71 81       	ldd	r23, Z+1	; 0x01
    169a:	82 81       	ldd	r24, Z+2	; 0x02
    169c:	93 81       	ldd	r25, Z+3	; 0x03
    169e:	20 e0       	ldi	r18, 0x00	; 0
    16a0:	30 e0       	ldi	r19, 0x00	; 0
    16a2:	40 e8       	ldi	r20, 0x80	; 128
    16a4:	5f e3       	ldi	r21, 0x3F	; 63
    16a6:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    16aa:	88 23       	and	r24, r24
    16ac:	34 f4       	brge	.+12     	; 0x16ba <HLCD4_voidSendCommand+0x322>
		__ticks = 1;
    16ae:	81 e0       	ldi	r24, 0x01	; 1
    16b0:	fe 01       	movw	r30, r28
    16b2:	e0 5c       	subi	r30, 0xC0	; 192
    16b4:	ff 4f       	sbci	r31, 0xFF	; 255
    16b6:	80 83       	st	Z, r24
    16b8:	9d c0       	rjmp	.+314    	; 0x17f4 <HLCD4_voidSendCommand+0x45c>
	else if (__tmp > 255)
    16ba:	fe 01       	movw	r30, r28
    16bc:	ef 5b       	subi	r30, 0xBF	; 191
    16be:	ff 4f       	sbci	r31, 0xFF	; 255
    16c0:	60 81       	ld	r22, Z
    16c2:	71 81       	ldd	r23, Z+1	; 0x01
    16c4:	82 81       	ldd	r24, Z+2	; 0x02
    16c6:	93 81       	ldd	r25, Z+3	; 0x03
    16c8:	20 e0       	ldi	r18, 0x00	; 0
    16ca:	30 e0       	ldi	r19, 0x00	; 0
    16cc:	4f e7       	ldi	r20, 0x7F	; 127
    16ce:	53 e4       	ldi	r21, 0x43	; 67
    16d0:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    16d4:	18 16       	cp	r1, r24
    16d6:	0c f0       	brlt	.+2      	; 0x16da <HLCD4_voidSendCommand+0x342>
    16d8:	7e c0       	rjmp	.+252    	; 0x17d6 <HLCD4_voidSendCommand+0x43e>
	{
		_delay_ms(__us / 1000.0);
    16da:	fe 01       	movw	r30, r28
    16dc:	eb 5b       	subi	r30, 0xBB	; 187
    16de:	ff 4f       	sbci	r31, 0xFF	; 255
    16e0:	60 81       	ld	r22, Z
    16e2:	71 81       	ldd	r23, Z+1	; 0x01
    16e4:	82 81       	ldd	r24, Z+2	; 0x02
    16e6:	93 81       	ldd	r25, Z+3	; 0x03
    16e8:	20 e0       	ldi	r18, 0x00	; 0
    16ea:	30 e0       	ldi	r19, 0x00	; 0
    16ec:	4a e7       	ldi	r20, 0x7A	; 122
    16ee:	54 e4       	ldi	r21, 0x44	; 68
    16f0:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    16f4:	dc 01       	movw	r26, r24
    16f6:	cb 01       	movw	r24, r22
    16f8:	8c af       	std	Y+60, r24	; 0x3c
    16fa:	9d af       	std	Y+61, r25	; 0x3d
    16fc:	ae af       	std	Y+62, r26	; 0x3e
    16fe:	bf af       	std	Y+63, r27	; 0x3f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1700:	6c ad       	ldd	r22, Y+60	; 0x3c
    1702:	7d ad       	ldd	r23, Y+61	; 0x3d
    1704:	8e ad       	ldd	r24, Y+62	; 0x3e
    1706:	9f ad       	ldd	r25, Y+63	; 0x3f
    1708:	20 e0       	ldi	r18, 0x00	; 0
    170a:	30 e0       	ldi	r19, 0x00	; 0
    170c:	4a ef       	ldi	r20, 0xFA	; 250
    170e:	54 e4       	ldi	r21, 0x44	; 68
    1710:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1714:	dc 01       	movw	r26, r24
    1716:	cb 01       	movw	r24, r22
    1718:	88 af       	std	Y+56, r24	; 0x38
    171a:	99 af       	std	Y+57, r25	; 0x39
    171c:	aa af       	std	Y+58, r26	; 0x3a
    171e:	bb af       	std	Y+59, r27	; 0x3b
	if (__tmp < 1.0)
    1720:	68 ad       	ldd	r22, Y+56	; 0x38
    1722:	79 ad       	ldd	r23, Y+57	; 0x39
    1724:	8a ad       	ldd	r24, Y+58	; 0x3a
    1726:	9b ad       	ldd	r25, Y+59	; 0x3b
    1728:	20 e0       	ldi	r18, 0x00	; 0
    172a:	30 e0       	ldi	r19, 0x00	; 0
    172c:	40 e8       	ldi	r20, 0x80	; 128
    172e:	5f e3       	ldi	r21, 0x3F	; 63
    1730:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1734:	88 23       	and	r24, r24
    1736:	2c f4       	brge	.+10     	; 0x1742 <HLCD4_voidSendCommand+0x3aa>
		__ticks = 1;
    1738:	81 e0       	ldi	r24, 0x01	; 1
    173a:	90 e0       	ldi	r25, 0x00	; 0
    173c:	9f ab       	std	Y+55, r25	; 0x37
    173e:	8e ab       	std	Y+54, r24	; 0x36
    1740:	3f c0       	rjmp	.+126    	; 0x17c0 <HLCD4_voidSendCommand+0x428>
	else if (__tmp > 65535)
    1742:	68 ad       	ldd	r22, Y+56	; 0x38
    1744:	79 ad       	ldd	r23, Y+57	; 0x39
    1746:	8a ad       	ldd	r24, Y+58	; 0x3a
    1748:	9b ad       	ldd	r25, Y+59	; 0x3b
    174a:	20 e0       	ldi	r18, 0x00	; 0
    174c:	3f ef       	ldi	r19, 0xFF	; 255
    174e:	4f e7       	ldi	r20, 0x7F	; 127
    1750:	57 e4       	ldi	r21, 0x47	; 71
    1752:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1756:	18 16       	cp	r1, r24
    1758:	4c f5       	brge	.+82     	; 0x17ac <HLCD4_voidSendCommand+0x414>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    175a:	6c ad       	ldd	r22, Y+60	; 0x3c
    175c:	7d ad       	ldd	r23, Y+61	; 0x3d
    175e:	8e ad       	ldd	r24, Y+62	; 0x3e
    1760:	9f ad       	ldd	r25, Y+63	; 0x3f
    1762:	20 e0       	ldi	r18, 0x00	; 0
    1764:	30 e0       	ldi	r19, 0x00	; 0
    1766:	40 e2       	ldi	r20, 0x20	; 32
    1768:	51 e4       	ldi	r21, 0x41	; 65
    176a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    176e:	dc 01       	movw	r26, r24
    1770:	cb 01       	movw	r24, r22
    1772:	bc 01       	movw	r22, r24
    1774:	cd 01       	movw	r24, r26
    1776:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    177a:	dc 01       	movw	r26, r24
    177c:	cb 01       	movw	r24, r22
    177e:	9f ab       	std	Y+55, r25	; 0x37
    1780:	8e ab       	std	Y+54, r24	; 0x36
    1782:	0f c0       	rjmp	.+30     	; 0x17a2 <HLCD4_voidSendCommand+0x40a>
    1784:	88 ec       	ldi	r24, 0xC8	; 200
    1786:	90 e0       	ldi	r25, 0x00	; 0
    1788:	9d ab       	std	Y+53, r25	; 0x35
    178a:	8c ab       	std	Y+52, r24	; 0x34
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    178c:	8c a9       	ldd	r24, Y+52	; 0x34
    178e:	9d a9       	ldd	r25, Y+53	; 0x35
    1790:	01 97       	sbiw	r24, 0x01	; 1
    1792:	f1 f7       	brne	.-4      	; 0x1790 <HLCD4_voidSendCommand+0x3f8>
    1794:	9d ab       	std	Y+53, r25	; 0x35
    1796:	8c ab       	std	Y+52, r24	; 0x34
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1798:	8e a9       	ldd	r24, Y+54	; 0x36
    179a:	9f a9       	ldd	r25, Y+55	; 0x37
    179c:	01 97       	sbiw	r24, 0x01	; 1
    179e:	9f ab       	std	Y+55, r25	; 0x37
    17a0:	8e ab       	std	Y+54, r24	; 0x36
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    17a2:	8e a9       	ldd	r24, Y+54	; 0x36
    17a4:	9f a9       	ldd	r25, Y+55	; 0x37
    17a6:	00 97       	sbiw	r24, 0x00	; 0
    17a8:	69 f7       	brne	.-38     	; 0x1784 <HLCD4_voidSendCommand+0x3ec>
    17aa:	2d c0       	rjmp	.+90     	; 0x1806 <HLCD4_voidSendCommand+0x46e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    17ac:	68 ad       	ldd	r22, Y+56	; 0x38
    17ae:	79 ad       	ldd	r23, Y+57	; 0x39
    17b0:	8a ad       	ldd	r24, Y+58	; 0x3a
    17b2:	9b ad       	ldd	r25, Y+59	; 0x3b
    17b4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    17b8:	dc 01       	movw	r26, r24
    17ba:	cb 01       	movw	r24, r22
    17bc:	9f ab       	std	Y+55, r25	; 0x37
    17be:	8e ab       	std	Y+54, r24	; 0x36
    17c0:	8e a9       	ldd	r24, Y+54	; 0x36
    17c2:	9f a9       	ldd	r25, Y+55	; 0x37
    17c4:	9b ab       	std	Y+51, r25	; 0x33
    17c6:	8a ab       	std	Y+50, r24	; 0x32
    17c8:	8a a9       	ldd	r24, Y+50	; 0x32
    17ca:	9b a9       	ldd	r25, Y+51	; 0x33
    17cc:	01 97       	sbiw	r24, 0x01	; 1
    17ce:	f1 f7       	brne	.-4      	; 0x17cc <HLCD4_voidSendCommand+0x434>
    17d0:	9b ab       	std	Y+51, r25	; 0x33
    17d2:	8a ab       	std	Y+50, r24	; 0x32
    17d4:	18 c0       	rjmp	.+48     	; 0x1806 <HLCD4_voidSendCommand+0x46e>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    17d6:	fe 01       	movw	r30, r28
    17d8:	ef 5b       	subi	r30, 0xBF	; 191
    17da:	ff 4f       	sbci	r31, 0xFF	; 255
    17dc:	60 81       	ld	r22, Z
    17de:	71 81       	ldd	r23, Z+1	; 0x01
    17e0:	82 81       	ldd	r24, Z+2	; 0x02
    17e2:	93 81       	ldd	r25, Z+3	; 0x03
    17e4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    17e8:	dc 01       	movw	r26, r24
    17ea:	cb 01       	movw	r24, r22
    17ec:	fe 01       	movw	r30, r28
    17ee:	e0 5c       	subi	r30, 0xC0	; 192
    17f0:	ff 4f       	sbci	r31, 0xFF	; 255
    17f2:	80 83       	st	Z, r24
    17f4:	fe 01       	movw	r30, r28
    17f6:	e0 5c       	subi	r30, 0xC0	; 192
    17f8:	ff 4f       	sbci	r31, 0xFF	; 255
    17fa:	80 81       	ld	r24, Z
    17fc:	89 ab       	std	Y+49, r24	; 0x31
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    17fe:	89 a9       	ldd	r24, Y+49	; 0x31
    1800:	8a 95       	dec	r24
    1802:	f1 f7       	brne	.-4      	; 0x1800 <HLCD4_voidSendCommand+0x468>
    1804:	89 ab       	std	Y+49, r24	; 0x31
    _delay_us(2);

    MDIO_voidSetPortValue(LCD_DATA_PORT,A_u8Command<<4);
    1806:	fe 01       	movw	r30, r28
    1808:	ef 59       	subi	r30, 0x9F	; 159
    180a:	ff 4f       	sbci	r31, 0xFF	; 255
    180c:	80 81       	ld	r24, Z
    180e:	98 2f       	mov	r25, r24
    1810:	92 95       	swap	r25
    1812:	90 7f       	andi	r25, 0xF0	; 240
    1814:	83 e0       	ldi	r24, 0x03	; 3
    1816:	69 2f       	mov	r22, r25
    1818:	0e 94 4a 09 	call	0x1294	; 0x1294 <MDIO_voidSetPortValue>

    MDIO_voidSetPinValue(LCD_CONTROL_PORT,E_PIN,PIN_HIGH);
    181c:	82 e0       	ldi	r24, 0x02	; 2
    181e:	62 e0       	ldi	r22, 0x02	; 2
    1820:	41 e0       	ldi	r20, 0x01	; 1
    1822:	0e 94 1e 07 	call	0xe3c	; 0xe3c <MDIO_voidSetPinValue>
    1826:	80 e0       	ldi	r24, 0x00	; 0
    1828:	90 e0       	ldi	r25, 0x00	; 0
    182a:	a0 e0       	ldi	r26, 0x00	; 0
    182c:	b0 e4       	ldi	r27, 0x40	; 64
    182e:	8d a7       	std	Y+45, r24	; 0x2d
    1830:	9e a7       	std	Y+46, r25	; 0x2e
    1832:	af a7       	std	Y+47, r26	; 0x2f
    1834:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1836:	6d a5       	ldd	r22, Y+45	; 0x2d
    1838:	7e a5       	ldd	r23, Y+46	; 0x2e
    183a:	8f a5       	ldd	r24, Y+47	; 0x2f
    183c:	98 a9       	ldd	r25, Y+48	; 0x30
    183e:	2b ea       	ldi	r18, 0xAB	; 171
    1840:	3a ea       	ldi	r19, 0xAA	; 170
    1842:	4a e2       	ldi	r20, 0x2A	; 42
    1844:	50 e4       	ldi	r21, 0x40	; 64
    1846:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    184a:	dc 01       	movw	r26, r24
    184c:	cb 01       	movw	r24, r22
    184e:	89 a7       	std	Y+41, r24	; 0x29
    1850:	9a a7       	std	Y+42, r25	; 0x2a
    1852:	ab a7       	std	Y+43, r26	; 0x2b
    1854:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    1856:	69 a5       	ldd	r22, Y+41	; 0x29
    1858:	7a a5       	ldd	r23, Y+42	; 0x2a
    185a:	8b a5       	ldd	r24, Y+43	; 0x2b
    185c:	9c a5       	ldd	r25, Y+44	; 0x2c
    185e:	20 e0       	ldi	r18, 0x00	; 0
    1860:	30 e0       	ldi	r19, 0x00	; 0
    1862:	40 e8       	ldi	r20, 0x80	; 128
    1864:	5f e3       	ldi	r21, 0x3F	; 63
    1866:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    186a:	88 23       	and	r24, r24
    186c:	1c f4       	brge	.+6      	; 0x1874 <HLCD4_voidSendCommand+0x4dc>
		__ticks = 1;
    186e:	81 e0       	ldi	r24, 0x01	; 1
    1870:	88 a7       	std	Y+40, r24	; 0x28
    1872:	91 c0       	rjmp	.+290    	; 0x1996 <HLCD4_voidSendCommand+0x5fe>
	else if (__tmp > 255)
    1874:	69 a5       	ldd	r22, Y+41	; 0x29
    1876:	7a a5       	ldd	r23, Y+42	; 0x2a
    1878:	8b a5       	ldd	r24, Y+43	; 0x2b
    187a:	9c a5       	ldd	r25, Y+44	; 0x2c
    187c:	20 e0       	ldi	r18, 0x00	; 0
    187e:	30 e0       	ldi	r19, 0x00	; 0
    1880:	4f e7       	ldi	r20, 0x7F	; 127
    1882:	53 e4       	ldi	r21, 0x43	; 67
    1884:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1888:	18 16       	cp	r1, r24
    188a:	0c f0       	brlt	.+2      	; 0x188e <HLCD4_voidSendCommand+0x4f6>
    188c:	7b c0       	rjmp	.+246    	; 0x1984 <HLCD4_voidSendCommand+0x5ec>
	{
		_delay_ms(__us / 1000.0);
    188e:	6d a5       	ldd	r22, Y+45	; 0x2d
    1890:	7e a5       	ldd	r23, Y+46	; 0x2e
    1892:	8f a5       	ldd	r24, Y+47	; 0x2f
    1894:	98 a9       	ldd	r25, Y+48	; 0x30
    1896:	20 e0       	ldi	r18, 0x00	; 0
    1898:	30 e0       	ldi	r19, 0x00	; 0
    189a:	4a e7       	ldi	r20, 0x7A	; 122
    189c:	54 e4       	ldi	r21, 0x44	; 68
    189e:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    18a2:	dc 01       	movw	r26, r24
    18a4:	cb 01       	movw	r24, r22
    18a6:	8c a3       	std	Y+36, r24	; 0x24
    18a8:	9d a3       	std	Y+37, r25	; 0x25
    18aa:	ae a3       	std	Y+38, r26	; 0x26
    18ac:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    18ae:	6c a1       	ldd	r22, Y+36	; 0x24
    18b0:	7d a1       	ldd	r23, Y+37	; 0x25
    18b2:	8e a1       	ldd	r24, Y+38	; 0x26
    18b4:	9f a1       	ldd	r25, Y+39	; 0x27
    18b6:	20 e0       	ldi	r18, 0x00	; 0
    18b8:	30 e0       	ldi	r19, 0x00	; 0
    18ba:	4a ef       	ldi	r20, 0xFA	; 250
    18bc:	54 e4       	ldi	r21, 0x44	; 68
    18be:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    18c2:	dc 01       	movw	r26, r24
    18c4:	cb 01       	movw	r24, r22
    18c6:	88 a3       	std	Y+32, r24	; 0x20
    18c8:	99 a3       	std	Y+33, r25	; 0x21
    18ca:	aa a3       	std	Y+34, r26	; 0x22
    18cc:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    18ce:	68 a1       	ldd	r22, Y+32	; 0x20
    18d0:	79 a1       	ldd	r23, Y+33	; 0x21
    18d2:	8a a1       	ldd	r24, Y+34	; 0x22
    18d4:	9b a1       	ldd	r25, Y+35	; 0x23
    18d6:	20 e0       	ldi	r18, 0x00	; 0
    18d8:	30 e0       	ldi	r19, 0x00	; 0
    18da:	40 e8       	ldi	r20, 0x80	; 128
    18dc:	5f e3       	ldi	r21, 0x3F	; 63
    18de:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    18e2:	88 23       	and	r24, r24
    18e4:	2c f4       	brge	.+10     	; 0x18f0 <HLCD4_voidSendCommand+0x558>
		__ticks = 1;
    18e6:	81 e0       	ldi	r24, 0x01	; 1
    18e8:	90 e0       	ldi	r25, 0x00	; 0
    18ea:	9f 8f       	std	Y+31, r25	; 0x1f
    18ec:	8e 8f       	std	Y+30, r24	; 0x1e
    18ee:	3f c0       	rjmp	.+126    	; 0x196e <HLCD4_voidSendCommand+0x5d6>
	else if (__tmp > 65535)
    18f0:	68 a1       	ldd	r22, Y+32	; 0x20
    18f2:	79 a1       	ldd	r23, Y+33	; 0x21
    18f4:	8a a1       	ldd	r24, Y+34	; 0x22
    18f6:	9b a1       	ldd	r25, Y+35	; 0x23
    18f8:	20 e0       	ldi	r18, 0x00	; 0
    18fa:	3f ef       	ldi	r19, 0xFF	; 255
    18fc:	4f e7       	ldi	r20, 0x7F	; 127
    18fe:	57 e4       	ldi	r21, 0x47	; 71
    1900:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1904:	18 16       	cp	r1, r24
    1906:	4c f5       	brge	.+82     	; 0x195a <HLCD4_voidSendCommand+0x5c2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1908:	6c a1       	ldd	r22, Y+36	; 0x24
    190a:	7d a1       	ldd	r23, Y+37	; 0x25
    190c:	8e a1       	ldd	r24, Y+38	; 0x26
    190e:	9f a1       	ldd	r25, Y+39	; 0x27
    1910:	20 e0       	ldi	r18, 0x00	; 0
    1912:	30 e0       	ldi	r19, 0x00	; 0
    1914:	40 e2       	ldi	r20, 0x20	; 32
    1916:	51 e4       	ldi	r21, 0x41	; 65
    1918:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    191c:	dc 01       	movw	r26, r24
    191e:	cb 01       	movw	r24, r22
    1920:	bc 01       	movw	r22, r24
    1922:	cd 01       	movw	r24, r26
    1924:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1928:	dc 01       	movw	r26, r24
    192a:	cb 01       	movw	r24, r22
    192c:	9f 8f       	std	Y+31, r25	; 0x1f
    192e:	8e 8f       	std	Y+30, r24	; 0x1e
    1930:	0f c0       	rjmp	.+30     	; 0x1950 <HLCD4_voidSendCommand+0x5b8>
    1932:	88 ec       	ldi	r24, 0xC8	; 200
    1934:	90 e0       	ldi	r25, 0x00	; 0
    1936:	9d 8f       	std	Y+29, r25	; 0x1d
    1938:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    193a:	8c 8d       	ldd	r24, Y+28	; 0x1c
    193c:	9d 8d       	ldd	r25, Y+29	; 0x1d
    193e:	01 97       	sbiw	r24, 0x01	; 1
    1940:	f1 f7       	brne	.-4      	; 0x193e <HLCD4_voidSendCommand+0x5a6>
    1942:	9d 8f       	std	Y+29, r25	; 0x1d
    1944:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1946:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1948:	9f 8d       	ldd	r25, Y+31	; 0x1f
    194a:	01 97       	sbiw	r24, 0x01	; 1
    194c:	9f 8f       	std	Y+31, r25	; 0x1f
    194e:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1950:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1952:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1954:	00 97       	sbiw	r24, 0x00	; 0
    1956:	69 f7       	brne	.-38     	; 0x1932 <HLCD4_voidSendCommand+0x59a>
    1958:	24 c0       	rjmp	.+72     	; 0x19a2 <HLCD4_voidSendCommand+0x60a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    195a:	68 a1       	ldd	r22, Y+32	; 0x20
    195c:	79 a1       	ldd	r23, Y+33	; 0x21
    195e:	8a a1       	ldd	r24, Y+34	; 0x22
    1960:	9b a1       	ldd	r25, Y+35	; 0x23
    1962:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1966:	dc 01       	movw	r26, r24
    1968:	cb 01       	movw	r24, r22
    196a:	9f 8f       	std	Y+31, r25	; 0x1f
    196c:	8e 8f       	std	Y+30, r24	; 0x1e
    196e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1970:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1972:	9b 8f       	std	Y+27, r25	; 0x1b
    1974:	8a 8f       	std	Y+26, r24	; 0x1a
    1976:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1978:	9b 8d       	ldd	r25, Y+27	; 0x1b
    197a:	01 97       	sbiw	r24, 0x01	; 1
    197c:	f1 f7       	brne	.-4      	; 0x197a <HLCD4_voidSendCommand+0x5e2>
    197e:	9b 8f       	std	Y+27, r25	; 0x1b
    1980:	8a 8f       	std	Y+26, r24	; 0x1a
    1982:	0f c0       	rjmp	.+30     	; 0x19a2 <HLCD4_voidSendCommand+0x60a>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1984:	69 a5       	ldd	r22, Y+41	; 0x29
    1986:	7a a5       	ldd	r23, Y+42	; 0x2a
    1988:	8b a5       	ldd	r24, Y+43	; 0x2b
    198a:	9c a5       	ldd	r25, Y+44	; 0x2c
    198c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1990:	dc 01       	movw	r26, r24
    1992:	cb 01       	movw	r24, r22
    1994:	88 a7       	std	Y+40, r24	; 0x28
    1996:	88 a5       	ldd	r24, Y+40	; 0x28
    1998:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    199a:	89 8d       	ldd	r24, Y+25	; 0x19
    199c:	8a 95       	dec	r24
    199e:	f1 f7       	brne	.-4      	; 0x199c <HLCD4_voidSendCommand+0x604>
    19a0:	89 8f       	std	Y+25, r24	; 0x19
    _delay_us(2);
    MDIO_voidSetPinValue(LCD_CONTROL_PORT,E_PIN,PIN_LOW);
    19a2:	82 e0       	ldi	r24, 0x02	; 2
    19a4:	62 e0       	ldi	r22, 0x02	; 2
    19a6:	40 e0       	ldi	r20, 0x00	; 0
    19a8:	0e 94 1e 07 	call	0xe3c	; 0xe3c <MDIO_voidSetPinValue>
    19ac:	80 e0       	ldi	r24, 0x00	; 0
    19ae:	90 e0       	ldi	r25, 0x00	; 0
    19b0:	a0 e0       	ldi	r26, 0x00	; 0
    19b2:	b0 e4       	ldi	r27, 0x40	; 64
    19b4:	8d 8b       	std	Y+21, r24	; 0x15
    19b6:	9e 8b       	std	Y+22, r25	; 0x16
    19b8:	af 8b       	std	Y+23, r26	; 0x17
    19ba:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    19bc:	6d 89       	ldd	r22, Y+21	; 0x15
    19be:	7e 89       	ldd	r23, Y+22	; 0x16
    19c0:	8f 89       	ldd	r24, Y+23	; 0x17
    19c2:	98 8d       	ldd	r25, Y+24	; 0x18
    19c4:	2b ea       	ldi	r18, 0xAB	; 171
    19c6:	3a ea       	ldi	r19, 0xAA	; 170
    19c8:	4a e2       	ldi	r20, 0x2A	; 42
    19ca:	50 e4       	ldi	r21, 0x40	; 64
    19cc:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    19d0:	dc 01       	movw	r26, r24
    19d2:	cb 01       	movw	r24, r22
    19d4:	89 8b       	std	Y+17, r24	; 0x11
    19d6:	9a 8b       	std	Y+18, r25	; 0x12
    19d8:	ab 8b       	std	Y+19, r26	; 0x13
    19da:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    19dc:	69 89       	ldd	r22, Y+17	; 0x11
    19de:	7a 89       	ldd	r23, Y+18	; 0x12
    19e0:	8b 89       	ldd	r24, Y+19	; 0x13
    19e2:	9c 89       	ldd	r25, Y+20	; 0x14
    19e4:	20 e0       	ldi	r18, 0x00	; 0
    19e6:	30 e0       	ldi	r19, 0x00	; 0
    19e8:	40 e8       	ldi	r20, 0x80	; 128
    19ea:	5f e3       	ldi	r21, 0x3F	; 63
    19ec:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    19f0:	88 23       	and	r24, r24
    19f2:	1c f4       	brge	.+6      	; 0x19fa <HLCD4_voidSendCommand+0x662>
		__ticks = 1;
    19f4:	81 e0       	ldi	r24, 0x01	; 1
    19f6:	88 8b       	std	Y+16, r24	; 0x10
    19f8:	91 c0       	rjmp	.+290    	; 0x1b1c <HLCD4_voidSendCommand+0x784>
	else if (__tmp > 255)
    19fa:	69 89       	ldd	r22, Y+17	; 0x11
    19fc:	7a 89       	ldd	r23, Y+18	; 0x12
    19fe:	8b 89       	ldd	r24, Y+19	; 0x13
    1a00:	9c 89       	ldd	r25, Y+20	; 0x14
    1a02:	20 e0       	ldi	r18, 0x00	; 0
    1a04:	30 e0       	ldi	r19, 0x00	; 0
    1a06:	4f e7       	ldi	r20, 0x7F	; 127
    1a08:	53 e4       	ldi	r21, 0x43	; 67
    1a0a:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1a0e:	18 16       	cp	r1, r24
    1a10:	0c f0       	brlt	.+2      	; 0x1a14 <HLCD4_voidSendCommand+0x67c>
    1a12:	7b c0       	rjmp	.+246    	; 0x1b0a <HLCD4_voidSendCommand+0x772>
	{
		_delay_ms(__us / 1000.0);
    1a14:	6d 89       	ldd	r22, Y+21	; 0x15
    1a16:	7e 89       	ldd	r23, Y+22	; 0x16
    1a18:	8f 89       	ldd	r24, Y+23	; 0x17
    1a1a:	98 8d       	ldd	r25, Y+24	; 0x18
    1a1c:	20 e0       	ldi	r18, 0x00	; 0
    1a1e:	30 e0       	ldi	r19, 0x00	; 0
    1a20:	4a e7       	ldi	r20, 0x7A	; 122
    1a22:	54 e4       	ldi	r21, 0x44	; 68
    1a24:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    1a28:	dc 01       	movw	r26, r24
    1a2a:	cb 01       	movw	r24, r22
    1a2c:	8c 87       	std	Y+12, r24	; 0x0c
    1a2e:	9d 87       	std	Y+13, r25	; 0x0d
    1a30:	ae 87       	std	Y+14, r26	; 0x0e
    1a32:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a34:	6c 85       	ldd	r22, Y+12	; 0x0c
    1a36:	7d 85       	ldd	r23, Y+13	; 0x0d
    1a38:	8e 85       	ldd	r24, Y+14	; 0x0e
    1a3a:	9f 85       	ldd	r25, Y+15	; 0x0f
    1a3c:	20 e0       	ldi	r18, 0x00	; 0
    1a3e:	30 e0       	ldi	r19, 0x00	; 0
    1a40:	4a ef       	ldi	r20, 0xFA	; 250
    1a42:	54 e4       	ldi	r21, 0x44	; 68
    1a44:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1a48:	dc 01       	movw	r26, r24
    1a4a:	cb 01       	movw	r24, r22
    1a4c:	88 87       	std	Y+8, r24	; 0x08
    1a4e:	99 87       	std	Y+9, r25	; 0x09
    1a50:	aa 87       	std	Y+10, r26	; 0x0a
    1a52:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    1a54:	68 85       	ldd	r22, Y+8	; 0x08
    1a56:	79 85       	ldd	r23, Y+9	; 0x09
    1a58:	8a 85       	ldd	r24, Y+10	; 0x0a
    1a5a:	9b 85       	ldd	r25, Y+11	; 0x0b
    1a5c:	20 e0       	ldi	r18, 0x00	; 0
    1a5e:	30 e0       	ldi	r19, 0x00	; 0
    1a60:	40 e8       	ldi	r20, 0x80	; 128
    1a62:	5f e3       	ldi	r21, 0x3F	; 63
    1a64:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1a68:	88 23       	and	r24, r24
    1a6a:	2c f4       	brge	.+10     	; 0x1a76 <HLCD4_voidSendCommand+0x6de>
		__ticks = 1;
    1a6c:	81 e0       	ldi	r24, 0x01	; 1
    1a6e:	90 e0       	ldi	r25, 0x00	; 0
    1a70:	9f 83       	std	Y+7, r25	; 0x07
    1a72:	8e 83       	std	Y+6, r24	; 0x06
    1a74:	3f c0       	rjmp	.+126    	; 0x1af4 <HLCD4_voidSendCommand+0x75c>
	else if (__tmp > 65535)
    1a76:	68 85       	ldd	r22, Y+8	; 0x08
    1a78:	79 85       	ldd	r23, Y+9	; 0x09
    1a7a:	8a 85       	ldd	r24, Y+10	; 0x0a
    1a7c:	9b 85       	ldd	r25, Y+11	; 0x0b
    1a7e:	20 e0       	ldi	r18, 0x00	; 0
    1a80:	3f ef       	ldi	r19, 0xFF	; 255
    1a82:	4f e7       	ldi	r20, 0x7F	; 127
    1a84:	57 e4       	ldi	r21, 0x47	; 71
    1a86:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1a8a:	18 16       	cp	r1, r24
    1a8c:	4c f5       	brge	.+82     	; 0x1ae0 <HLCD4_voidSendCommand+0x748>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a8e:	6c 85       	ldd	r22, Y+12	; 0x0c
    1a90:	7d 85       	ldd	r23, Y+13	; 0x0d
    1a92:	8e 85       	ldd	r24, Y+14	; 0x0e
    1a94:	9f 85       	ldd	r25, Y+15	; 0x0f
    1a96:	20 e0       	ldi	r18, 0x00	; 0
    1a98:	30 e0       	ldi	r19, 0x00	; 0
    1a9a:	40 e2       	ldi	r20, 0x20	; 32
    1a9c:	51 e4       	ldi	r21, 0x41	; 65
    1a9e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1aa2:	dc 01       	movw	r26, r24
    1aa4:	cb 01       	movw	r24, r22
    1aa6:	bc 01       	movw	r22, r24
    1aa8:	cd 01       	movw	r24, r26
    1aaa:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1aae:	dc 01       	movw	r26, r24
    1ab0:	cb 01       	movw	r24, r22
    1ab2:	9f 83       	std	Y+7, r25	; 0x07
    1ab4:	8e 83       	std	Y+6, r24	; 0x06
    1ab6:	0f c0       	rjmp	.+30     	; 0x1ad6 <HLCD4_voidSendCommand+0x73e>
    1ab8:	88 ec       	ldi	r24, 0xC8	; 200
    1aba:	90 e0       	ldi	r25, 0x00	; 0
    1abc:	9d 83       	std	Y+5, r25	; 0x05
    1abe:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1ac0:	8c 81       	ldd	r24, Y+4	; 0x04
    1ac2:	9d 81       	ldd	r25, Y+5	; 0x05
    1ac4:	01 97       	sbiw	r24, 0x01	; 1
    1ac6:	f1 f7       	brne	.-4      	; 0x1ac4 <HLCD4_voidSendCommand+0x72c>
    1ac8:	9d 83       	std	Y+5, r25	; 0x05
    1aca:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1acc:	8e 81       	ldd	r24, Y+6	; 0x06
    1ace:	9f 81       	ldd	r25, Y+7	; 0x07
    1ad0:	01 97       	sbiw	r24, 0x01	; 1
    1ad2:	9f 83       	std	Y+7, r25	; 0x07
    1ad4:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ad6:	8e 81       	ldd	r24, Y+6	; 0x06
    1ad8:	9f 81       	ldd	r25, Y+7	; 0x07
    1ada:	00 97       	sbiw	r24, 0x00	; 0
    1adc:	69 f7       	brne	.-38     	; 0x1ab8 <HLCD4_voidSendCommand+0x720>
    1ade:	24 c0       	rjmp	.+72     	; 0x1b28 <HLCD4_voidSendCommand+0x790>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ae0:	68 85       	ldd	r22, Y+8	; 0x08
    1ae2:	79 85       	ldd	r23, Y+9	; 0x09
    1ae4:	8a 85       	ldd	r24, Y+10	; 0x0a
    1ae6:	9b 85       	ldd	r25, Y+11	; 0x0b
    1ae8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1aec:	dc 01       	movw	r26, r24
    1aee:	cb 01       	movw	r24, r22
    1af0:	9f 83       	std	Y+7, r25	; 0x07
    1af2:	8e 83       	std	Y+6, r24	; 0x06
    1af4:	8e 81       	ldd	r24, Y+6	; 0x06
    1af6:	9f 81       	ldd	r25, Y+7	; 0x07
    1af8:	9b 83       	std	Y+3, r25	; 0x03
    1afa:	8a 83       	std	Y+2, r24	; 0x02
    1afc:	8a 81       	ldd	r24, Y+2	; 0x02
    1afe:	9b 81       	ldd	r25, Y+3	; 0x03
    1b00:	01 97       	sbiw	r24, 0x01	; 1
    1b02:	f1 f7       	brne	.-4      	; 0x1b00 <HLCD4_voidSendCommand+0x768>
    1b04:	9b 83       	std	Y+3, r25	; 0x03
    1b06:	8a 83       	std	Y+2, r24	; 0x02
    1b08:	0f c0       	rjmp	.+30     	; 0x1b28 <HLCD4_voidSendCommand+0x790>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1b0a:	69 89       	ldd	r22, Y+17	; 0x11
    1b0c:	7a 89       	ldd	r23, Y+18	; 0x12
    1b0e:	8b 89       	ldd	r24, Y+19	; 0x13
    1b10:	9c 89       	ldd	r25, Y+20	; 0x14
    1b12:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1b16:	dc 01       	movw	r26, r24
    1b18:	cb 01       	movw	r24, r22
    1b1a:	88 8b       	std	Y+16, r24	; 0x10
    1b1c:	88 89       	ldd	r24, Y+16	; 0x10
    1b1e:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1b20:	89 81       	ldd	r24, Y+1	; 0x01
    1b22:	8a 95       	dec	r24
    1b24:	f1 f7       	brne	.-4      	; 0x1b22 <HLCD4_voidSendCommand+0x78a>
    1b26:	89 83       	std	Y+1, r24	; 0x01
    _delay_us(2);
}
    1b28:	cf 59       	subi	r28, 0x9F	; 159
    1b2a:	df 4f       	sbci	r29, 0xFF	; 255
    1b2c:	0f b6       	in	r0, 0x3f	; 63
    1b2e:	f8 94       	cli
    1b30:	de bf       	out	0x3e, r29	; 62
    1b32:	0f be       	out	0x3f, r0	; 63
    1b34:	cd bf       	out	0x3d, r28	; 61
    1b36:	cf 91       	pop	r28
    1b38:	df 91       	pop	r29
    1b3a:	1f 91       	pop	r17
    1b3c:	0f 91       	pop	r16
    1b3e:	08 95       	ret

00001b40 <HLCD4_voidSendData>:


void HLCD4_voidSendData(u8 A_u8Data)
{
    1b40:	0f 93       	push	r16
    1b42:	1f 93       	push	r17
    1b44:	df 93       	push	r29
    1b46:	cf 93       	push	r28
    1b48:	cd b7       	in	r28, 0x3d	; 61
    1b4a:	de b7       	in	r29, 0x3e	; 62
    1b4c:	c1 56       	subi	r28, 0x61	; 97
    1b4e:	d0 40       	sbci	r29, 0x00	; 0
    1b50:	0f b6       	in	r0, 0x3f	; 63
    1b52:	f8 94       	cli
    1b54:	de bf       	out	0x3e, r29	; 62
    1b56:	0f be       	out	0x3f, r0	; 63
    1b58:	cd bf       	out	0x3d, r28	; 61
    1b5a:	fe 01       	movw	r30, r28
    1b5c:	ef 59       	subi	r30, 0x9F	; 159
    1b5e:	ff 4f       	sbci	r31, 0xFF	; 255
    1b60:	80 83       	st	Z, r24
    //RS=1 RW=0
	MDIO_voidSetPinValue(LCD_CONTROL_PORT,E_PIN,PIN_LOW);
    1b62:	82 e0       	ldi	r24, 0x02	; 2
    1b64:	62 e0       	ldi	r22, 0x02	; 2
    1b66:	40 e0       	ldi	r20, 0x00	; 0
    1b68:	0e 94 1e 07 	call	0xe3c	; 0xe3c <MDIO_voidSetPinValue>
	MDIO_voidSetPortValue(LCD_DATA_PORT,A_u8Data);
    1b6c:	fe 01       	movw	r30, r28
    1b6e:	ef 59       	subi	r30, 0x9F	; 159
    1b70:	ff 4f       	sbci	r31, 0xFF	; 255
    1b72:	83 e0       	ldi	r24, 0x03	; 3
    1b74:	60 81       	ld	r22, Z
    1b76:	0e 94 4a 09 	call	0x1294	; 0x1294 <MDIO_voidSetPortValue>

    MDIO_voidSetPinValue(LCD_CONTROL_PORT,RS_PIN,PIN_HIGH);
    1b7a:	82 e0       	ldi	r24, 0x02	; 2
    1b7c:	60 e0       	ldi	r22, 0x00	; 0
    1b7e:	41 e0       	ldi	r20, 0x01	; 1
    1b80:	0e 94 1e 07 	call	0xe3c	; 0xe3c <MDIO_voidSetPinValue>
    MDIO_voidSetPinValue(LCD_CONTROL_PORT,RW_PIN,PIN_LOW);
    1b84:	82 e0       	ldi	r24, 0x02	; 2
    1b86:	61 e0       	ldi	r22, 0x01	; 1
    1b88:	40 e0       	ldi	r20, 0x00	; 0
    1b8a:	0e 94 1e 07 	call	0xe3c	; 0xe3c <MDIO_voidSetPinValue>

    MDIO_voidSetPinValue(LCD_CONTROL_PORT,E_PIN,PIN_HIGH);
    1b8e:	82 e0       	ldi	r24, 0x02	; 2
    1b90:	62 e0       	ldi	r22, 0x02	; 2
    1b92:	41 e0       	ldi	r20, 0x01	; 1
    1b94:	0e 94 1e 07 	call	0xe3c	; 0xe3c <MDIO_voidSetPinValue>
    1b98:	fe 01       	movw	r30, r28
    1b9a:	e3 5a       	subi	r30, 0xA3	; 163
    1b9c:	ff 4f       	sbci	r31, 0xFF	; 255
    1b9e:	80 e0       	ldi	r24, 0x00	; 0
    1ba0:	90 e0       	ldi	r25, 0x00	; 0
    1ba2:	a0 e2       	ldi	r26, 0x20	; 32
    1ba4:	b1 e4       	ldi	r27, 0x41	; 65
    1ba6:	80 83       	st	Z, r24
    1ba8:	91 83       	std	Z+1, r25	; 0x01
    1baa:	a2 83       	std	Z+2, r26	; 0x02
    1bac:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1bae:	8e 01       	movw	r16, r28
    1bb0:	07 5a       	subi	r16, 0xA7	; 167
    1bb2:	1f 4f       	sbci	r17, 0xFF	; 255
    1bb4:	fe 01       	movw	r30, r28
    1bb6:	e3 5a       	subi	r30, 0xA3	; 163
    1bb8:	ff 4f       	sbci	r31, 0xFF	; 255
    1bba:	60 81       	ld	r22, Z
    1bbc:	71 81       	ldd	r23, Z+1	; 0x01
    1bbe:	82 81       	ldd	r24, Z+2	; 0x02
    1bc0:	93 81       	ldd	r25, Z+3	; 0x03
    1bc2:	2b ea       	ldi	r18, 0xAB	; 171
    1bc4:	3a ea       	ldi	r19, 0xAA	; 170
    1bc6:	4a e2       	ldi	r20, 0x2A	; 42
    1bc8:	50 e4       	ldi	r21, 0x40	; 64
    1bca:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1bce:	dc 01       	movw	r26, r24
    1bd0:	cb 01       	movw	r24, r22
    1bd2:	f8 01       	movw	r30, r16
    1bd4:	80 83       	st	Z, r24
    1bd6:	91 83       	std	Z+1, r25	; 0x01
    1bd8:	a2 83       	std	Z+2, r26	; 0x02
    1bda:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1bdc:	fe 01       	movw	r30, r28
    1bde:	e7 5a       	subi	r30, 0xA7	; 167
    1be0:	ff 4f       	sbci	r31, 0xFF	; 255
    1be2:	60 81       	ld	r22, Z
    1be4:	71 81       	ldd	r23, Z+1	; 0x01
    1be6:	82 81       	ldd	r24, Z+2	; 0x02
    1be8:	93 81       	ldd	r25, Z+3	; 0x03
    1bea:	20 e0       	ldi	r18, 0x00	; 0
    1bec:	30 e0       	ldi	r19, 0x00	; 0
    1bee:	40 e8       	ldi	r20, 0x80	; 128
    1bf0:	5f e3       	ldi	r21, 0x3F	; 63
    1bf2:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1bf6:	88 23       	and	r24, r24
    1bf8:	34 f4       	brge	.+12     	; 0x1c06 <HLCD4_voidSendData+0xc6>
		__ticks = 1;
    1bfa:	fe 01       	movw	r30, r28
    1bfc:	e8 5a       	subi	r30, 0xA8	; 168
    1bfe:	ff 4f       	sbci	r31, 0xFF	; 255
    1c00:	81 e0       	ldi	r24, 0x01	; 1
    1c02:	80 83       	st	Z, r24
    1c04:	e0 c0       	rjmp	.+448    	; 0x1dc6 <HLCD4_voidSendData+0x286>
	else if (__tmp > 255)
    1c06:	fe 01       	movw	r30, r28
    1c08:	e7 5a       	subi	r30, 0xA7	; 167
    1c0a:	ff 4f       	sbci	r31, 0xFF	; 255
    1c0c:	60 81       	ld	r22, Z
    1c0e:	71 81       	ldd	r23, Z+1	; 0x01
    1c10:	82 81       	ldd	r24, Z+2	; 0x02
    1c12:	93 81       	ldd	r25, Z+3	; 0x03
    1c14:	20 e0       	ldi	r18, 0x00	; 0
    1c16:	30 e0       	ldi	r19, 0x00	; 0
    1c18:	4f e7       	ldi	r20, 0x7F	; 127
    1c1a:	53 e4       	ldi	r21, 0x43	; 67
    1c1c:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1c20:	18 16       	cp	r1, r24
    1c22:	0c f0       	brlt	.+2      	; 0x1c26 <HLCD4_voidSendData+0xe6>
    1c24:	c0 c0       	rjmp	.+384    	; 0x1da6 <HLCD4_voidSendData+0x266>
	{
		_delay_ms(__us / 1000.0);
    1c26:	fe 01       	movw	r30, r28
    1c28:	e3 5a       	subi	r30, 0xA3	; 163
    1c2a:	ff 4f       	sbci	r31, 0xFF	; 255
    1c2c:	60 81       	ld	r22, Z
    1c2e:	71 81       	ldd	r23, Z+1	; 0x01
    1c30:	82 81       	ldd	r24, Z+2	; 0x02
    1c32:	93 81       	ldd	r25, Z+3	; 0x03
    1c34:	20 e0       	ldi	r18, 0x00	; 0
    1c36:	30 e0       	ldi	r19, 0x00	; 0
    1c38:	4a e7       	ldi	r20, 0x7A	; 122
    1c3a:	54 e4       	ldi	r21, 0x44	; 68
    1c3c:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    1c40:	dc 01       	movw	r26, r24
    1c42:	cb 01       	movw	r24, r22
    1c44:	fe 01       	movw	r30, r28
    1c46:	ec 5a       	subi	r30, 0xAC	; 172
    1c48:	ff 4f       	sbci	r31, 0xFF	; 255
    1c4a:	80 83       	st	Z, r24
    1c4c:	91 83       	std	Z+1, r25	; 0x01
    1c4e:	a2 83       	std	Z+2, r26	; 0x02
    1c50:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c52:	8e 01       	movw	r16, r28
    1c54:	00 5b       	subi	r16, 0xB0	; 176
    1c56:	1f 4f       	sbci	r17, 0xFF	; 255
    1c58:	fe 01       	movw	r30, r28
    1c5a:	ec 5a       	subi	r30, 0xAC	; 172
    1c5c:	ff 4f       	sbci	r31, 0xFF	; 255
    1c5e:	60 81       	ld	r22, Z
    1c60:	71 81       	ldd	r23, Z+1	; 0x01
    1c62:	82 81       	ldd	r24, Z+2	; 0x02
    1c64:	93 81       	ldd	r25, Z+3	; 0x03
    1c66:	20 e0       	ldi	r18, 0x00	; 0
    1c68:	30 e0       	ldi	r19, 0x00	; 0
    1c6a:	4a ef       	ldi	r20, 0xFA	; 250
    1c6c:	54 e4       	ldi	r21, 0x44	; 68
    1c6e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1c72:	dc 01       	movw	r26, r24
    1c74:	cb 01       	movw	r24, r22
    1c76:	f8 01       	movw	r30, r16
    1c78:	80 83       	st	Z, r24
    1c7a:	91 83       	std	Z+1, r25	; 0x01
    1c7c:	a2 83       	std	Z+2, r26	; 0x02
    1c7e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1c80:	fe 01       	movw	r30, r28
    1c82:	e0 5b       	subi	r30, 0xB0	; 176
    1c84:	ff 4f       	sbci	r31, 0xFF	; 255
    1c86:	60 81       	ld	r22, Z
    1c88:	71 81       	ldd	r23, Z+1	; 0x01
    1c8a:	82 81       	ldd	r24, Z+2	; 0x02
    1c8c:	93 81       	ldd	r25, Z+3	; 0x03
    1c8e:	20 e0       	ldi	r18, 0x00	; 0
    1c90:	30 e0       	ldi	r19, 0x00	; 0
    1c92:	40 e8       	ldi	r20, 0x80	; 128
    1c94:	5f e3       	ldi	r21, 0x3F	; 63
    1c96:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1c9a:	88 23       	and	r24, r24
    1c9c:	44 f4       	brge	.+16     	; 0x1cae <HLCD4_voidSendData+0x16e>
		__ticks = 1;
    1c9e:	fe 01       	movw	r30, r28
    1ca0:	e2 5b       	subi	r30, 0xB2	; 178
    1ca2:	ff 4f       	sbci	r31, 0xFF	; 255
    1ca4:	81 e0       	ldi	r24, 0x01	; 1
    1ca6:	90 e0       	ldi	r25, 0x00	; 0
    1ca8:	91 83       	std	Z+1, r25	; 0x01
    1caa:	80 83       	st	Z, r24
    1cac:	64 c0       	rjmp	.+200    	; 0x1d76 <HLCD4_voidSendData+0x236>
	else if (__tmp > 65535)
    1cae:	fe 01       	movw	r30, r28
    1cb0:	e0 5b       	subi	r30, 0xB0	; 176
    1cb2:	ff 4f       	sbci	r31, 0xFF	; 255
    1cb4:	60 81       	ld	r22, Z
    1cb6:	71 81       	ldd	r23, Z+1	; 0x01
    1cb8:	82 81       	ldd	r24, Z+2	; 0x02
    1cba:	93 81       	ldd	r25, Z+3	; 0x03
    1cbc:	20 e0       	ldi	r18, 0x00	; 0
    1cbe:	3f ef       	ldi	r19, 0xFF	; 255
    1cc0:	4f e7       	ldi	r20, 0x7F	; 127
    1cc2:	57 e4       	ldi	r21, 0x47	; 71
    1cc4:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1cc8:	18 16       	cp	r1, r24
    1cca:	0c f0       	brlt	.+2      	; 0x1cce <HLCD4_voidSendData+0x18e>
    1ccc:	43 c0       	rjmp	.+134    	; 0x1d54 <HLCD4_voidSendData+0x214>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1cce:	fe 01       	movw	r30, r28
    1cd0:	ec 5a       	subi	r30, 0xAC	; 172
    1cd2:	ff 4f       	sbci	r31, 0xFF	; 255
    1cd4:	60 81       	ld	r22, Z
    1cd6:	71 81       	ldd	r23, Z+1	; 0x01
    1cd8:	82 81       	ldd	r24, Z+2	; 0x02
    1cda:	93 81       	ldd	r25, Z+3	; 0x03
    1cdc:	20 e0       	ldi	r18, 0x00	; 0
    1cde:	30 e0       	ldi	r19, 0x00	; 0
    1ce0:	40 e2       	ldi	r20, 0x20	; 32
    1ce2:	51 e4       	ldi	r21, 0x41	; 65
    1ce4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1ce8:	dc 01       	movw	r26, r24
    1cea:	cb 01       	movw	r24, r22
    1cec:	8e 01       	movw	r16, r28
    1cee:	02 5b       	subi	r16, 0xB2	; 178
    1cf0:	1f 4f       	sbci	r17, 0xFF	; 255
    1cf2:	bc 01       	movw	r22, r24
    1cf4:	cd 01       	movw	r24, r26
    1cf6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1cfa:	dc 01       	movw	r26, r24
    1cfc:	cb 01       	movw	r24, r22
    1cfe:	f8 01       	movw	r30, r16
    1d00:	91 83       	std	Z+1, r25	; 0x01
    1d02:	80 83       	st	Z, r24
    1d04:	1f c0       	rjmp	.+62     	; 0x1d44 <HLCD4_voidSendData+0x204>
    1d06:	fe 01       	movw	r30, r28
    1d08:	e4 5b       	subi	r30, 0xB4	; 180
    1d0a:	ff 4f       	sbci	r31, 0xFF	; 255
    1d0c:	88 ec       	ldi	r24, 0xC8	; 200
    1d0e:	90 e0       	ldi	r25, 0x00	; 0
    1d10:	91 83       	std	Z+1, r25	; 0x01
    1d12:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1d14:	fe 01       	movw	r30, r28
    1d16:	e4 5b       	subi	r30, 0xB4	; 180
    1d18:	ff 4f       	sbci	r31, 0xFF	; 255
    1d1a:	80 81       	ld	r24, Z
    1d1c:	91 81       	ldd	r25, Z+1	; 0x01
    1d1e:	01 97       	sbiw	r24, 0x01	; 1
    1d20:	f1 f7       	brne	.-4      	; 0x1d1e <HLCD4_voidSendData+0x1de>
    1d22:	fe 01       	movw	r30, r28
    1d24:	e4 5b       	subi	r30, 0xB4	; 180
    1d26:	ff 4f       	sbci	r31, 0xFF	; 255
    1d28:	91 83       	std	Z+1, r25	; 0x01
    1d2a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d2c:	de 01       	movw	r26, r28
    1d2e:	a2 5b       	subi	r26, 0xB2	; 178
    1d30:	bf 4f       	sbci	r27, 0xFF	; 255
    1d32:	fe 01       	movw	r30, r28
    1d34:	e2 5b       	subi	r30, 0xB2	; 178
    1d36:	ff 4f       	sbci	r31, 0xFF	; 255
    1d38:	80 81       	ld	r24, Z
    1d3a:	91 81       	ldd	r25, Z+1	; 0x01
    1d3c:	01 97       	sbiw	r24, 0x01	; 1
    1d3e:	11 96       	adiw	r26, 0x01	; 1
    1d40:	9c 93       	st	X, r25
    1d42:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d44:	fe 01       	movw	r30, r28
    1d46:	e2 5b       	subi	r30, 0xB2	; 178
    1d48:	ff 4f       	sbci	r31, 0xFF	; 255
    1d4a:	80 81       	ld	r24, Z
    1d4c:	91 81       	ldd	r25, Z+1	; 0x01
    1d4e:	00 97       	sbiw	r24, 0x00	; 0
    1d50:	d1 f6       	brne	.-76     	; 0x1d06 <HLCD4_voidSendData+0x1c6>
    1d52:	4b c0       	rjmp	.+150    	; 0x1dea <HLCD4_voidSendData+0x2aa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d54:	8e 01       	movw	r16, r28
    1d56:	02 5b       	subi	r16, 0xB2	; 178
    1d58:	1f 4f       	sbci	r17, 0xFF	; 255
    1d5a:	fe 01       	movw	r30, r28
    1d5c:	e0 5b       	subi	r30, 0xB0	; 176
    1d5e:	ff 4f       	sbci	r31, 0xFF	; 255
    1d60:	60 81       	ld	r22, Z
    1d62:	71 81       	ldd	r23, Z+1	; 0x01
    1d64:	82 81       	ldd	r24, Z+2	; 0x02
    1d66:	93 81       	ldd	r25, Z+3	; 0x03
    1d68:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1d6c:	dc 01       	movw	r26, r24
    1d6e:	cb 01       	movw	r24, r22
    1d70:	f8 01       	movw	r30, r16
    1d72:	91 83       	std	Z+1, r25	; 0x01
    1d74:	80 83       	st	Z, r24
    1d76:	de 01       	movw	r26, r28
    1d78:	a6 5b       	subi	r26, 0xB6	; 182
    1d7a:	bf 4f       	sbci	r27, 0xFF	; 255
    1d7c:	fe 01       	movw	r30, r28
    1d7e:	e2 5b       	subi	r30, 0xB2	; 178
    1d80:	ff 4f       	sbci	r31, 0xFF	; 255
    1d82:	80 81       	ld	r24, Z
    1d84:	91 81       	ldd	r25, Z+1	; 0x01
    1d86:	11 96       	adiw	r26, 0x01	; 1
    1d88:	9c 93       	st	X, r25
    1d8a:	8e 93       	st	-X, r24
    1d8c:	fe 01       	movw	r30, r28
    1d8e:	e6 5b       	subi	r30, 0xB6	; 182
    1d90:	ff 4f       	sbci	r31, 0xFF	; 255
    1d92:	80 81       	ld	r24, Z
    1d94:	91 81       	ldd	r25, Z+1	; 0x01
    1d96:	01 97       	sbiw	r24, 0x01	; 1
    1d98:	f1 f7       	brne	.-4      	; 0x1d96 <HLCD4_voidSendData+0x256>
    1d9a:	fe 01       	movw	r30, r28
    1d9c:	e6 5b       	subi	r30, 0xB6	; 182
    1d9e:	ff 4f       	sbci	r31, 0xFF	; 255
    1da0:	91 83       	std	Z+1, r25	; 0x01
    1da2:	80 83       	st	Z, r24
    1da4:	22 c0       	rjmp	.+68     	; 0x1dea <HLCD4_voidSendData+0x2aa>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1da6:	8e 01       	movw	r16, r28
    1da8:	08 5a       	subi	r16, 0xA8	; 168
    1daa:	1f 4f       	sbci	r17, 0xFF	; 255
    1dac:	fe 01       	movw	r30, r28
    1dae:	e7 5a       	subi	r30, 0xA7	; 167
    1db0:	ff 4f       	sbci	r31, 0xFF	; 255
    1db2:	60 81       	ld	r22, Z
    1db4:	71 81       	ldd	r23, Z+1	; 0x01
    1db6:	82 81       	ldd	r24, Z+2	; 0x02
    1db8:	93 81       	ldd	r25, Z+3	; 0x03
    1dba:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1dbe:	dc 01       	movw	r26, r24
    1dc0:	cb 01       	movw	r24, r22
    1dc2:	f8 01       	movw	r30, r16
    1dc4:	80 83       	st	Z, r24
    1dc6:	de 01       	movw	r26, r28
    1dc8:	a7 5b       	subi	r26, 0xB7	; 183
    1dca:	bf 4f       	sbci	r27, 0xFF	; 255
    1dcc:	fe 01       	movw	r30, r28
    1dce:	e8 5a       	subi	r30, 0xA8	; 168
    1dd0:	ff 4f       	sbci	r31, 0xFF	; 255
    1dd2:	80 81       	ld	r24, Z
    1dd4:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1dd6:	fe 01       	movw	r30, r28
    1dd8:	e7 5b       	subi	r30, 0xB7	; 183
    1dda:	ff 4f       	sbci	r31, 0xFF	; 255
    1ddc:	80 81       	ld	r24, Z
    1dde:	8a 95       	dec	r24
    1de0:	f1 f7       	brne	.-4      	; 0x1dde <HLCD4_voidSendData+0x29e>
    1de2:	fe 01       	movw	r30, r28
    1de4:	e7 5b       	subi	r30, 0xB7	; 183
    1de6:	ff 4f       	sbci	r31, 0xFF	; 255
    1de8:	80 83       	st	Z, r24
    _delay_us(10);
    MDIO_voidSetPinValue(LCD_CONTROL_PORT,E_PIN,PIN_LOW);
    1dea:	82 e0       	ldi	r24, 0x02	; 2
    1dec:	62 e0       	ldi	r22, 0x02	; 2
    1dee:	40 e0       	ldi	r20, 0x00	; 0
    1df0:	0e 94 1e 07 	call	0xe3c	; 0xe3c <MDIO_voidSetPinValue>
    1df4:	fe 01       	movw	r30, r28
    1df6:	eb 5b       	subi	r30, 0xBB	; 187
    1df8:	ff 4f       	sbci	r31, 0xFF	; 255
    1dfa:	80 e0       	ldi	r24, 0x00	; 0
    1dfc:	90 e0       	ldi	r25, 0x00	; 0
    1dfe:	a0 e2       	ldi	r26, 0x20	; 32
    1e00:	b1 e4       	ldi	r27, 0x41	; 65
    1e02:	80 83       	st	Z, r24
    1e04:	91 83       	std	Z+1, r25	; 0x01
    1e06:	a2 83       	std	Z+2, r26	; 0x02
    1e08:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1e0a:	8e 01       	movw	r16, r28
    1e0c:	0f 5b       	subi	r16, 0xBF	; 191
    1e0e:	1f 4f       	sbci	r17, 0xFF	; 255
    1e10:	fe 01       	movw	r30, r28
    1e12:	eb 5b       	subi	r30, 0xBB	; 187
    1e14:	ff 4f       	sbci	r31, 0xFF	; 255
    1e16:	60 81       	ld	r22, Z
    1e18:	71 81       	ldd	r23, Z+1	; 0x01
    1e1a:	82 81       	ldd	r24, Z+2	; 0x02
    1e1c:	93 81       	ldd	r25, Z+3	; 0x03
    1e1e:	2b ea       	ldi	r18, 0xAB	; 171
    1e20:	3a ea       	ldi	r19, 0xAA	; 170
    1e22:	4a e2       	ldi	r20, 0x2A	; 42
    1e24:	50 e4       	ldi	r21, 0x40	; 64
    1e26:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1e2a:	dc 01       	movw	r26, r24
    1e2c:	cb 01       	movw	r24, r22
    1e2e:	f8 01       	movw	r30, r16
    1e30:	80 83       	st	Z, r24
    1e32:	91 83       	std	Z+1, r25	; 0x01
    1e34:	a2 83       	std	Z+2, r26	; 0x02
    1e36:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1e38:	fe 01       	movw	r30, r28
    1e3a:	ef 5b       	subi	r30, 0xBF	; 191
    1e3c:	ff 4f       	sbci	r31, 0xFF	; 255
    1e3e:	60 81       	ld	r22, Z
    1e40:	71 81       	ldd	r23, Z+1	; 0x01
    1e42:	82 81       	ldd	r24, Z+2	; 0x02
    1e44:	93 81       	ldd	r25, Z+3	; 0x03
    1e46:	20 e0       	ldi	r18, 0x00	; 0
    1e48:	30 e0       	ldi	r19, 0x00	; 0
    1e4a:	40 e8       	ldi	r20, 0x80	; 128
    1e4c:	5f e3       	ldi	r21, 0x3F	; 63
    1e4e:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1e52:	88 23       	and	r24, r24
    1e54:	34 f4       	brge	.+12     	; 0x1e62 <HLCD4_voidSendData+0x322>
		__ticks = 1;
    1e56:	81 e0       	ldi	r24, 0x01	; 1
    1e58:	fe 01       	movw	r30, r28
    1e5a:	e0 5c       	subi	r30, 0xC0	; 192
    1e5c:	ff 4f       	sbci	r31, 0xFF	; 255
    1e5e:	80 83       	st	Z, r24
    1e60:	9d c0       	rjmp	.+314    	; 0x1f9c <HLCD4_voidSendData+0x45c>
	else if (__tmp > 255)
    1e62:	fe 01       	movw	r30, r28
    1e64:	ef 5b       	subi	r30, 0xBF	; 191
    1e66:	ff 4f       	sbci	r31, 0xFF	; 255
    1e68:	60 81       	ld	r22, Z
    1e6a:	71 81       	ldd	r23, Z+1	; 0x01
    1e6c:	82 81       	ldd	r24, Z+2	; 0x02
    1e6e:	93 81       	ldd	r25, Z+3	; 0x03
    1e70:	20 e0       	ldi	r18, 0x00	; 0
    1e72:	30 e0       	ldi	r19, 0x00	; 0
    1e74:	4f e7       	ldi	r20, 0x7F	; 127
    1e76:	53 e4       	ldi	r21, 0x43	; 67
    1e78:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1e7c:	18 16       	cp	r1, r24
    1e7e:	0c f0       	brlt	.+2      	; 0x1e82 <HLCD4_voidSendData+0x342>
    1e80:	7e c0       	rjmp	.+252    	; 0x1f7e <HLCD4_voidSendData+0x43e>
	{
		_delay_ms(__us / 1000.0);
    1e82:	fe 01       	movw	r30, r28
    1e84:	eb 5b       	subi	r30, 0xBB	; 187
    1e86:	ff 4f       	sbci	r31, 0xFF	; 255
    1e88:	60 81       	ld	r22, Z
    1e8a:	71 81       	ldd	r23, Z+1	; 0x01
    1e8c:	82 81       	ldd	r24, Z+2	; 0x02
    1e8e:	93 81       	ldd	r25, Z+3	; 0x03
    1e90:	20 e0       	ldi	r18, 0x00	; 0
    1e92:	30 e0       	ldi	r19, 0x00	; 0
    1e94:	4a e7       	ldi	r20, 0x7A	; 122
    1e96:	54 e4       	ldi	r21, 0x44	; 68
    1e98:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    1e9c:	dc 01       	movw	r26, r24
    1e9e:	cb 01       	movw	r24, r22
    1ea0:	8c af       	std	Y+60, r24	; 0x3c
    1ea2:	9d af       	std	Y+61, r25	; 0x3d
    1ea4:	ae af       	std	Y+62, r26	; 0x3e
    1ea6:	bf af       	std	Y+63, r27	; 0x3f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ea8:	6c ad       	ldd	r22, Y+60	; 0x3c
    1eaa:	7d ad       	ldd	r23, Y+61	; 0x3d
    1eac:	8e ad       	ldd	r24, Y+62	; 0x3e
    1eae:	9f ad       	ldd	r25, Y+63	; 0x3f
    1eb0:	20 e0       	ldi	r18, 0x00	; 0
    1eb2:	30 e0       	ldi	r19, 0x00	; 0
    1eb4:	4a ef       	ldi	r20, 0xFA	; 250
    1eb6:	54 e4       	ldi	r21, 0x44	; 68
    1eb8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1ebc:	dc 01       	movw	r26, r24
    1ebe:	cb 01       	movw	r24, r22
    1ec0:	88 af       	std	Y+56, r24	; 0x38
    1ec2:	99 af       	std	Y+57, r25	; 0x39
    1ec4:	aa af       	std	Y+58, r26	; 0x3a
    1ec6:	bb af       	std	Y+59, r27	; 0x3b
	if (__tmp < 1.0)
    1ec8:	68 ad       	ldd	r22, Y+56	; 0x38
    1eca:	79 ad       	ldd	r23, Y+57	; 0x39
    1ecc:	8a ad       	ldd	r24, Y+58	; 0x3a
    1ece:	9b ad       	ldd	r25, Y+59	; 0x3b
    1ed0:	20 e0       	ldi	r18, 0x00	; 0
    1ed2:	30 e0       	ldi	r19, 0x00	; 0
    1ed4:	40 e8       	ldi	r20, 0x80	; 128
    1ed6:	5f e3       	ldi	r21, 0x3F	; 63
    1ed8:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1edc:	88 23       	and	r24, r24
    1ede:	2c f4       	brge	.+10     	; 0x1eea <HLCD4_voidSendData+0x3aa>
		__ticks = 1;
    1ee0:	81 e0       	ldi	r24, 0x01	; 1
    1ee2:	90 e0       	ldi	r25, 0x00	; 0
    1ee4:	9f ab       	std	Y+55, r25	; 0x37
    1ee6:	8e ab       	std	Y+54, r24	; 0x36
    1ee8:	3f c0       	rjmp	.+126    	; 0x1f68 <HLCD4_voidSendData+0x428>
	else if (__tmp > 65535)
    1eea:	68 ad       	ldd	r22, Y+56	; 0x38
    1eec:	79 ad       	ldd	r23, Y+57	; 0x39
    1eee:	8a ad       	ldd	r24, Y+58	; 0x3a
    1ef0:	9b ad       	ldd	r25, Y+59	; 0x3b
    1ef2:	20 e0       	ldi	r18, 0x00	; 0
    1ef4:	3f ef       	ldi	r19, 0xFF	; 255
    1ef6:	4f e7       	ldi	r20, 0x7F	; 127
    1ef8:	57 e4       	ldi	r21, 0x47	; 71
    1efa:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1efe:	18 16       	cp	r1, r24
    1f00:	4c f5       	brge	.+82     	; 0x1f54 <HLCD4_voidSendData+0x414>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f02:	6c ad       	ldd	r22, Y+60	; 0x3c
    1f04:	7d ad       	ldd	r23, Y+61	; 0x3d
    1f06:	8e ad       	ldd	r24, Y+62	; 0x3e
    1f08:	9f ad       	ldd	r25, Y+63	; 0x3f
    1f0a:	20 e0       	ldi	r18, 0x00	; 0
    1f0c:	30 e0       	ldi	r19, 0x00	; 0
    1f0e:	40 e2       	ldi	r20, 0x20	; 32
    1f10:	51 e4       	ldi	r21, 0x41	; 65
    1f12:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1f16:	dc 01       	movw	r26, r24
    1f18:	cb 01       	movw	r24, r22
    1f1a:	bc 01       	movw	r22, r24
    1f1c:	cd 01       	movw	r24, r26
    1f1e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1f22:	dc 01       	movw	r26, r24
    1f24:	cb 01       	movw	r24, r22
    1f26:	9f ab       	std	Y+55, r25	; 0x37
    1f28:	8e ab       	std	Y+54, r24	; 0x36
    1f2a:	0f c0       	rjmp	.+30     	; 0x1f4a <HLCD4_voidSendData+0x40a>
    1f2c:	88 ec       	ldi	r24, 0xC8	; 200
    1f2e:	90 e0       	ldi	r25, 0x00	; 0
    1f30:	9d ab       	std	Y+53, r25	; 0x35
    1f32:	8c ab       	std	Y+52, r24	; 0x34
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1f34:	8c a9       	ldd	r24, Y+52	; 0x34
    1f36:	9d a9       	ldd	r25, Y+53	; 0x35
    1f38:	01 97       	sbiw	r24, 0x01	; 1
    1f3a:	f1 f7       	brne	.-4      	; 0x1f38 <HLCD4_voidSendData+0x3f8>
    1f3c:	9d ab       	std	Y+53, r25	; 0x35
    1f3e:	8c ab       	std	Y+52, r24	; 0x34
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f40:	8e a9       	ldd	r24, Y+54	; 0x36
    1f42:	9f a9       	ldd	r25, Y+55	; 0x37
    1f44:	01 97       	sbiw	r24, 0x01	; 1
    1f46:	9f ab       	std	Y+55, r25	; 0x37
    1f48:	8e ab       	std	Y+54, r24	; 0x36
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f4a:	8e a9       	ldd	r24, Y+54	; 0x36
    1f4c:	9f a9       	ldd	r25, Y+55	; 0x37
    1f4e:	00 97       	sbiw	r24, 0x00	; 0
    1f50:	69 f7       	brne	.-38     	; 0x1f2c <HLCD4_voidSendData+0x3ec>
    1f52:	2d c0       	rjmp	.+90     	; 0x1fae <HLCD4_voidSendData+0x46e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f54:	68 ad       	ldd	r22, Y+56	; 0x38
    1f56:	79 ad       	ldd	r23, Y+57	; 0x39
    1f58:	8a ad       	ldd	r24, Y+58	; 0x3a
    1f5a:	9b ad       	ldd	r25, Y+59	; 0x3b
    1f5c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1f60:	dc 01       	movw	r26, r24
    1f62:	cb 01       	movw	r24, r22
    1f64:	9f ab       	std	Y+55, r25	; 0x37
    1f66:	8e ab       	std	Y+54, r24	; 0x36
    1f68:	8e a9       	ldd	r24, Y+54	; 0x36
    1f6a:	9f a9       	ldd	r25, Y+55	; 0x37
    1f6c:	9b ab       	std	Y+51, r25	; 0x33
    1f6e:	8a ab       	std	Y+50, r24	; 0x32
    1f70:	8a a9       	ldd	r24, Y+50	; 0x32
    1f72:	9b a9       	ldd	r25, Y+51	; 0x33
    1f74:	01 97       	sbiw	r24, 0x01	; 1
    1f76:	f1 f7       	brne	.-4      	; 0x1f74 <HLCD4_voidSendData+0x434>
    1f78:	9b ab       	std	Y+51, r25	; 0x33
    1f7a:	8a ab       	std	Y+50, r24	; 0x32
    1f7c:	18 c0       	rjmp	.+48     	; 0x1fae <HLCD4_voidSendData+0x46e>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1f7e:	fe 01       	movw	r30, r28
    1f80:	ef 5b       	subi	r30, 0xBF	; 191
    1f82:	ff 4f       	sbci	r31, 0xFF	; 255
    1f84:	60 81       	ld	r22, Z
    1f86:	71 81       	ldd	r23, Z+1	; 0x01
    1f88:	82 81       	ldd	r24, Z+2	; 0x02
    1f8a:	93 81       	ldd	r25, Z+3	; 0x03
    1f8c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1f90:	dc 01       	movw	r26, r24
    1f92:	cb 01       	movw	r24, r22
    1f94:	fe 01       	movw	r30, r28
    1f96:	e0 5c       	subi	r30, 0xC0	; 192
    1f98:	ff 4f       	sbci	r31, 0xFF	; 255
    1f9a:	80 83       	st	Z, r24
    1f9c:	fe 01       	movw	r30, r28
    1f9e:	e0 5c       	subi	r30, 0xC0	; 192
    1fa0:	ff 4f       	sbci	r31, 0xFF	; 255
    1fa2:	80 81       	ld	r24, Z
    1fa4:	89 ab       	std	Y+49, r24	; 0x31
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1fa6:	89 a9       	ldd	r24, Y+49	; 0x31
    1fa8:	8a 95       	dec	r24
    1faa:	f1 f7       	brne	.-4      	; 0x1fa8 <HLCD4_voidSendData+0x468>
    1fac:	89 ab       	std	Y+49, r24	; 0x31
    _delay_us(10);

    MDIO_voidSetPortValue(LCD_DATA_PORT,A_u8Data<<4);
    1fae:	fe 01       	movw	r30, r28
    1fb0:	ef 59       	subi	r30, 0x9F	; 159
    1fb2:	ff 4f       	sbci	r31, 0xFF	; 255
    1fb4:	80 81       	ld	r24, Z
    1fb6:	98 2f       	mov	r25, r24
    1fb8:	92 95       	swap	r25
    1fba:	90 7f       	andi	r25, 0xF0	; 240
    1fbc:	83 e0       	ldi	r24, 0x03	; 3
    1fbe:	69 2f       	mov	r22, r25
    1fc0:	0e 94 4a 09 	call	0x1294	; 0x1294 <MDIO_voidSetPortValue>

    MDIO_voidSetPinValue(LCD_CONTROL_PORT,E_PIN,PIN_HIGH);
    1fc4:	82 e0       	ldi	r24, 0x02	; 2
    1fc6:	62 e0       	ldi	r22, 0x02	; 2
    1fc8:	41 e0       	ldi	r20, 0x01	; 1
    1fca:	0e 94 1e 07 	call	0xe3c	; 0xe3c <MDIO_voidSetPinValue>
    1fce:	80 e0       	ldi	r24, 0x00	; 0
    1fd0:	90 e0       	ldi	r25, 0x00	; 0
    1fd2:	a0 e2       	ldi	r26, 0x20	; 32
    1fd4:	b1 e4       	ldi	r27, 0x41	; 65
    1fd6:	8d a7       	std	Y+45, r24	; 0x2d
    1fd8:	9e a7       	std	Y+46, r25	; 0x2e
    1fda:	af a7       	std	Y+47, r26	; 0x2f
    1fdc:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1fde:	6d a5       	ldd	r22, Y+45	; 0x2d
    1fe0:	7e a5       	ldd	r23, Y+46	; 0x2e
    1fe2:	8f a5       	ldd	r24, Y+47	; 0x2f
    1fe4:	98 a9       	ldd	r25, Y+48	; 0x30
    1fe6:	2b ea       	ldi	r18, 0xAB	; 171
    1fe8:	3a ea       	ldi	r19, 0xAA	; 170
    1fea:	4a e2       	ldi	r20, 0x2A	; 42
    1fec:	50 e4       	ldi	r21, 0x40	; 64
    1fee:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1ff2:	dc 01       	movw	r26, r24
    1ff4:	cb 01       	movw	r24, r22
    1ff6:	89 a7       	std	Y+41, r24	; 0x29
    1ff8:	9a a7       	std	Y+42, r25	; 0x2a
    1ffa:	ab a7       	std	Y+43, r26	; 0x2b
    1ffc:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    1ffe:	69 a5       	ldd	r22, Y+41	; 0x29
    2000:	7a a5       	ldd	r23, Y+42	; 0x2a
    2002:	8b a5       	ldd	r24, Y+43	; 0x2b
    2004:	9c a5       	ldd	r25, Y+44	; 0x2c
    2006:	20 e0       	ldi	r18, 0x00	; 0
    2008:	30 e0       	ldi	r19, 0x00	; 0
    200a:	40 e8       	ldi	r20, 0x80	; 128
    200c:	5f e3       	ldi	r21, 0x3F	; 63
    200e:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2012:	88 23       	and	r24, r24
    2014:	1c f4       	brge	.+6      	; 0x201c <HLCD4_voidSendData+0x4dc>
		__ticks = 1;
    2016:	81 e0       	ldi	r24, 0x01	; 1
    2018:	88 a7       	std	Y+40, r24	; 0x28
    201a:	91 c0       	rjmp	.+290    	; 0x213e <HLCD4_voidSendData+0x5fe>
	else if (__tmp > 255)
    201c:	69 a5       	ldd	r22, Y+41	; 0x29
    201e:	7a a5       	ldd	r23, Y+42	; 0x2a
    2020:	8b a5       	ldd	r24, Y+43	; 0x2b
    2022:	9c a5       	ldd	r25, Y+44	; 0x2c
    2024:	20 e0       	ldi	r18, 0x00	; 0
    2026:	30 e0       	ldi	r19, 0x00	; 0
    2028:	4f e7       	ldi	r20, 0x7F	; 127
    202a:	53 e4       	ldi	r21, 0x43	; 67
    202c:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2030:	18 16       	cp	r1, r24
    2032:	0c f0       	brlt	.+2      	; 0x2036 <HLCD4_voidSendData+0x4f6>
    2034:	7b c0       	rjmp	.+246    	; 0x212c <HLCD4_voidSendData+0x5ec>
	{
		_delay_ms(__us / 1000.0);
    2036:	6d a5       	ldd	r22, Y+45	; 0x2d
    2038:	7e a5       	ldd	r23, Y+46	; 0x2e
    203a:	8f a5       	ldd	r24, Y+47	; 0x2f
    203c:	98 a9       	ldd	r25, Y+48	; 0x30
    203e:	20 e0       	ldi	r18, 0x00	; 0
    2040:	30 e0       	ldi	r19, 0x00	; 0
    2042:	4a e7       	ldi	r20, 0x7A	; 122
    2044:	54 e4       	ldi	r21, 0x44	; 68
    2046:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    204a:	dc 01       	movw	r26, r24
    204c:	cb 01       	movw	r24, r22
    204e:	8c a3       	std	Y+36, r24	; 0x24
    2050:	9d a3       	std	Y+37, r25	; 0x25
    2052:	ae a3       	std	Y+38, r26	; 0x26
    2054:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2056:	6c a1       	ldd	r22, Y+36	; 0x24
    2058:	7d a1       	ldd	r23, Y+37	; 0x25
    205a:	8e a1       	ldd	r24, Y+38	; 0x26
    205c:	9f a1       	ldd	r25, Y+39	; 0x27
    205e:	20 e0       	ldi	r18, 0x00	; 0
    2060:	30 e0       	ldi	r19, 0x00	; 0
    2062:	4a ef       	ldi	r20, 0xFA	; 250
    2064:	54 e4       	ldi	r21, 0x44	; 68
    2066:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    206a:	dc 01       	movw	r26, r24
    206c:	cb 01       	movw	r24, r22
    206e:	88 a3       	std	Y+32, r24	; 0x20
    2070:	99 a3       	std	Y+33, r25	; 0x21
    2072:	aa a3       	std	Y+34, r26	; 0x22
    2074:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    2076:	68 a1       	ldd	r22, Y+32	; 0x20
    2078:	79 a1       	ldd	r23, Y+33	; 0x21
    207a:	8a a1       	ldd	r24, Y+34	; 0x22
    207c:	9b a1       	ldd	r25, Y+35	; 0x23
    207e:	20 e0       	ldi	r18, 0x00	; 0
    2080:	30 e0       	ldi	r19, 0x00	; 0
    2082:	40 e8       	ldi	r20, 0x80	; 128
    2084:	5f e3       	ldi	r21, 0x3F	; 63
    2086:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    208a:	88 23       	and	r24, r24
    208c:	2c f4       	brge	.+10     	; 0x2098 <HLCD4_voidSendData+0x558>
		__ticks = 1;
    208e:	81 e0       	ldi	r24, 0x01	; 1
    2090:	90 e0       	ldi	r25, 0x00	; 0
    2092:	9f 8f       	std	Y+31, r25	; 0x1f
    2094:	8e 8f       	std	Y+30, r24	; 0x1e
    2096:	3f c0       	rjmp	.+126    	; 0x2116 <HLCD4_voidSendData+0x5d6>
	else if (__tmp > 65535)
    2098:	68 a1       	ldd	r22, Y+32	; 0x20
    209a:	79 a1       	ldd	r23, Y+33	; 0x21
    209c:	8a a1       	ldd	r24, Y+34	; 0x22
    209e:	9b a1       	ldd	r25, Y+35	; 0x23
    20a0:	20 e0       	ldi	r18, 0x00	; 0
    20a2:	3f ef       	ldi	r19, 0xFF	; 255
    20a4:	4f e7       	ldi	r20, 0x7F	; 127
    20a6:	57 e4       	ldi	r21, 0x47	; 71
    20a8:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    20ac:	18 16       	cp	r1, r24
    20ae:	4c f5       	brge	.+82     	; 0x2102 <HLCD4_voidSendData+0x5c2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    20b0:	6c a1       	ldd	r22, Y+36	; 0x24
    20b2:	7d a1       	ldd	r23, Y+37	; 0x25
    20b4:	8e a1       	ldd	r24, Y+38	; 0x26
    20b6:	9f a1       	ldd	r25, Y+39	; 0x27
    20b8:	20 e0       	ldi	r18, 0x00	; 0
    20ba:	30 e0       	ldi	r19, 0x00	; 0
    20bc:	40 e2       	ldi	r20, 0x20	; 32
    20be:	51 e4       	ldi	r21, 0x41	; 65
    20c0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    20c4:	dc 01       	movw	r26, r24
    20c6:	cb 01       	movw	r24, r22
    20c8:	bc 01       	movw	r22, r24
    20ca:	cd 01       	movw	r24, r26
    20cc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    20d0:	dc 01       	movw	r26, r24
    20d2:	cb 01       	movw	r24, r22
    20d4:	9f 8f       	std	Y+31, r25	; 0x1f
    20d6:	8e 8f       	std	Y+30, r24	; 0x1e
    20d8:	0f c0       	rjmp	.+30     	; 0x20f8 <HLCD4_voidSendData+0x5b8>
    20da:	88 ec       	ldi	r24, 0xC8	; 200
    20dc:	90 e0       	ldi	r25, 0x00	; 0
    20de:	9d 8f       	std	Y+29, r25	; 0x1d
    20e0:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    20e2:	8c 8d       	ldd	r24, Y+28	; 0x1c
    20e4:	9d 8d       	ldd	r25, Y+29	; 0x1d
    20e6:	01 97       	sbiw	r24, 0x01	; 1
    20e8:	f1 f7       	brne	.-4      	; 0x20e6 <HLCD4_voidSendData+0x5a6>
    20ea:	9d 8f       	std	Y+29, r25	; 0x1d
    20ec:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    20ee:	8e 8d       	ldd	r24, Y+30	; 0x1e
    20f0:	9f 8d       	ldd	r25, Y+31	; 0x1f
    20f2:	01 97       	sbiw	r24, 0x01	; 1
    20f4:	9f 8f       	std	Y+31, r25	; 0x1f
    20f6:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    20f8:	8e 8d       	ldd	r24, Y+30	; 0x1e
    20fa:	9f 8d       	ldd	r25, Y+31	; 0x1f
    20fc:	00 97       	sbiw	r24, 0x00	; 0
    20fe:	69 f7       	brne	.-38     	; 0x20da <HLCD4_voidSendData+0x59a>
    2100:	24 c0       	rjmp	.+72     	; 0x214a <HLCD4_voidSendData+0x60a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2102:	68 a1       	ldd	r22, Y+32	; 0x20
    2104:	79 a1       	ldd	r23, Y+33	; 0x21
    2106:	8a a1       	ldd	r24, Y+34	; 0x22
    2108:	9b a1       	ldd	r25, Y+35	; 0x23
    210a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    210e:	dc 01       	movw	r26, r24
    2110:	cb 01       	movw	r24, r22
    2112:	9f 8f       	std	Y+31, r25	; 0x1f
    2114:	8e 8f       	std	Y+30, r24	; 0x1e
    2116:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2118:	9f 8d       	ldd	r25, Y+31	; 0x1f
    211a:	9b 8f       	std	Y+27, r25	; 0x1b
    211c:	8a 8f       	std	Y+26, r24	; 0x1a
    211e:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2120:	9b 8d       	ldd	r25, Y+27	; 0x1b
    2122:	01 97       	sbiw	r24, 0x01	; 1
    2124:	f1 f7       	brne	.-4      	; 0x2122 <HLCD4_voidSendData+0x5e2>
    2126:	9b 8f       	std	Y+27, r25	; 0x1b
    2128:	8a 8f       	std	Y+26, r24	; 0x1a
    212a:	0f c0       	rjmp	.+30     	; 0x214a <HLCD4_voidSendData+0x60a>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    212c:	69 a5       	ldd	r22, Y+41	; 0x29
    212e:	7a a5       	ldd	r23, Y+42	; 0x2a
    2130:	8b a5       	ldd	r24, Y+43	; 0x2b
    2132:	9c a5       	ldd	r25, Y+44	; 0x2c
    2134:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2138:	dc 01       	movw	r26, r24
    213a:	cb 01       	movw	r24, r22
    213c:	88 a7       	std	Y+40, r24	; 0x28
    213e:	88 a5       	ldd	r24, Y+40	; 0x28
    2140:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2142:	89 8d       	ldd	r24, Y+25	; 0x19
    2144:	8a 95       	dec	r24
    2146:	f1 f7       	brne	.-4      	; 0x2144 <HLCD4_voidSendData+0x604>
    2148:	89 8f       	std	Y+25, r24	; 0x19
    _delay_us(10);
    MDIO_voidSetPinValue(LCD_CONTROL_PORT,E_PIN,PIN_LOW);
    214a:	82 e0       	ldi	r24, 0x02	; 2
    214c:	62 e0       	ldi	r22, 0x02	; 2
    214e:	40 e0       	ldi	r20, 0x00	; 0
    2150:	0e 94 1e 07 	call	0xe3c	; 0xe3c <MDIO_voidSetPinValue>
    2154:	80 e0       	ldi	r24, 0x00	; 0
    2156:	90 e0       	ldi	r25, 0x00	; 0
    2158:	a0 e2       	ldi	r26, 0x20	; 32
    215a:	b1 e4       	ldi	r27, 0x41	; 65
    215c:	8d 8b       	std	Y+21, r24	; 0x15
    215e:	9e 8b       	std	Y+22, r25	; 0x16
    2160:	af 8b       	std	Y+23, r26	; 0x17
    2162:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2164:	6d 89       	ldd	r22, Y+21	; 0x15
    2166:	7e 89       	ldd	r23, Y+22	; 0x16
    2168:	8f 89       	ldd	r24, Y+23	; 0x17
    216a:	98 8d       	ldd	r25, Y+24	; 0x18
    216c:	2b ea       	ldi	r18, 0xAB	; 171
    216e:	3a ea       	ldi	r19, 0xAA	; 170
    2170:	4a e2       	ldi	r20, 0x2A	; 42
    2172:	50 e4       	ldi	r21, 0x40	; 64
    2174:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2178:	dc 01       	movw	r26, r24
    217a:	cb 01       	movw	r24, r22
    217c:	89 8b       	std	Y+17, r24	; 0x11
    217e:	9a 8b       	std	Y+18, r25	; 0x12
    2180:	ab 8b       	std	Y+19, r26	; 0x13
    2182:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    2184:	69 89       	ldd	r22, Y+17	; 0x11
    2186:	7a 89       	ldd	r23, Y+18	; 0x12
    2188:	8b 89       	ldd	r24, Y+19	; 0x13
    218a:	9c 89       	ldd	r25, Y+20	; 0x14
    218c:	20 e0       	ldi	r18, 0x00	; 0
    218e:	30 e0       	ldi	r19, 0x00	; 0
    2190:	40 e8       	ldi	r20, 0x80	; 128
    2192:	5f e3       	ldi	r21, 0x3F	; 63
    2194:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2198:	88 23       	and	r24, r24
    219a:	1c f4       	brge	.+6      	; 0x21a2 <HLCD4_voidSendData+0x662>
		__ticks = 1;
    219c:	81 e0       	ldi	r24, 0x01	; 1
    219e:	88 8b       	std	Y+16, r24	; 0x10
    21a0:	91 c0       	rjmp	.+290    	; 0x22c4 <HLCD4_voidSendData+0x784>
	else if (__tmp > 255)
    21a2:	69 89       	ldd	r22, Y+17	; 0x11
    21a4:	7a 89       	ldd	r23, Y+18	; 0x12
    21a6:	8b 89       	ldd	r24, Y+19	; 0x13
    21a8:	9c 89       	ldd	r25, Y+20	; 0x14
    21aa:	20 e0       	ldi	r18, 0x00	; 0
    21ac:	30 e0       	ldi	r19, 0x00	; 0
    21ae:	4f e7       	ldi	r20, 0x7F	; 127
    21b0:	53 e4       	ldi	r21, 0x43	; 67
    21b2:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    21b6:	18 16       	cp	r1, r24
    21b8:	0c f0       	brlt	.+2      	; 0x21bc <HLCD4_voidSendData+0x67c>
    21ba:	7b c0       	rjmp	.+246    	; 0x22b2 <HLCD4_voidSendData+0x772>
	{
		_delay_ms(__us / 1000.0);
    21bc:	6d 89       	ldd	r22, Y+21	; 0x15
    21be:	7e 89       	ldd	r23, Y+22	; 0x16
    21c0:	8f 89       	ldd	r24, Y+23	; 0x17
    21c2:	98 8d       	ldd	r25, Y+24	; 0x18
    21c4:	20 e0       	ldi	r18, 0x00	; 0
    21c6:	30 e0       	ldi	r19, 0x00	; 0
    21c8:	4a e7       	ldi	r20, 0x7A	; 122
    21ca:	54 e4       	ldi	r21, 0x44	; 68
    21cc:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    21d0:	dc 01       	movw	r26, r24
    21d2:	cb 01       	movw	r24, r22
    21d4:	8c 87       	std	Y+12, r24	; 0x0c
    21d6:	9d 87       	std	Y+13, r25	; 0x0d
    21d8:	ae 87       	std	Y+14, r26	; 0x0e
    21da:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    21dc:	6c 85       	ldd	r22, Y+12	; 0x0c
    21de:	7d 85       	ldd	r23, Y+13	; 0x0d
    21e0:	8e 85       	ldd	r24, Y+14	; 0x0e
    21e2:	9f 85       	ldd	r25, Y+15	; 0x0f
    21e4:	20 e0       	ldi	r18, 0x00	; 0
    21e6:	30 e0       	ldi	r19, 0x00	; 0
    21e8:	4a ef       	ldi	r20, 0xFA	; 250
    21ea:	54 e4       	ldi	r21, 0x44	; 68
    21ec:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    21f0:	dc 01       	movw	r26, r24
    21f2:	cb 01       	movw	r24, r22
    21f4:	88 87       	std	Y+8, r24	; 0x08
    21f6:	99 87       	std	Y+9, r25	; 0x09
    21f8:	aa 87       	std	Y+10, r26	; 0x0a
    21fa:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    21fc:	68 85       	ldd	r22, Y+8	; 0x08
    21fe:	79 85       	ldd	r23, Y+9	; 0x09
    2200:	8a 85       	ldd	r24, Y+10	; 0x0a
    2202:	9b 85       	ldd	r25, Y+11	; 0x0b
    2204:	20 e0       	ldi	r18, 0x00	; 0
    2206:	30 e0       	ldi	r19, 0x00	; 0
    2208:	40 e8       	ldi	r20, 0x80	; 128
    220a:	5f e3       	ldi	r21, 0x3F	; 63
    220c:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2210:	88 23       	and	r24, r24
    2212:	2c f4       	brge	.+10     	; 0x221e <HLCD4_voidSendData+0x6de>
		__ticks = 1;
    2214:	81 e0       	ldi	r24, 0x01	; 1
    2216:	90 e0       	ldi	r25, 0x00	; 0
    2218:	9f 83       	std	Y+7, r25	; 0x07
    221a:	8e 83       	std	Y+6, r24	; 0x06
    221c:	3f c0       	rjmp	.+126    	; 0x229c <HLCD4_voidSendData+0x75c>
	else if (__tmp > 65535)
    221e:	68 85       	ldd	r22, Y+8	; 0x08
    2220:	79 85       	ldd	r23, Y+9	; 0x09
    2222:	8a 85       	ldd	r24, Y+10	; 0x0a
    2224:	9b 85       	ldd	r25, Y+11	; 0x0b
    2226:	20 e0       	ldi	r18, 0x00	; 0
    2228:	3f ef       	ldi	r19, 0xFF	; 255
    222a:	4f e7       	ldi	r20, 0x7F	; 127
    222c:	57 e4       	ldi	r21, 0x47	; 71
    222e:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2232:	18 16       	cp	r1, r24
    2234:	4c f5       	brge	.+82     	; 0x2288 <HLCD4_voidSendData+0x748>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2236:	6c 85       	ldd	r22, Y+12	; 0x0c
    2238:	7d 85       	ldd	r23, Y+13	; 0x0d
    223a:	8e 85       	ldd	r24, Y+14	; 0x0e
    223c:	9f 85       	ldd	r25, Y+15	; 0x0f
    223e:	20 e0       	ldi	r18, 0x00	; 0
    2240:	30 e0       	ldi	r19, 0x00	; 0
    2242:	40 e2       	ldi	r20, 0x20	; 32
    2244:	51 e4       	ldi	r21, 0x41	; 65
    2246:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    224a:	dc 01       	movw	r26, r24
    224c:	cb 01       	movw	r24, r22
    224e:	bc 01       	movw	r22, r24
    2250:	cd 01       	movw	r24, r26
    2252:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2256:	dc 01       	movw	r26, r24
    2258:	cb 01       	movw	r24, r22
    225a:	9f 83       	std	Y+7, r25	; 0x07
    225c:	8e 83       	std	Y+6, r24	; 0x06
    225e:	0f c0       	rjmp	.+30     	; 0x227e <HLCD4_voidSendData+0x73e>
    2260:	88 ec       	ldi	r24, 0xC8	; 200
    2262:	90 e0       	ldi	r25, 0x00	; 0
    2264:	9d 83       	std	Y+5, r25	; 0x05
    2266:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2268:	8c 81       	ldd	r24, Y+4	; 0x04
    226a:	9d 81       	ldd	r25, Y+5	; 0x05
    226c:	01 97       	sbiw	r24, 0x01	; 1
    226e:	f1 f7       	brne	.-4      	; 0x226c <HLCD4_voidSendData+0x72c>
    2270:	9d 83       	std	Y+5, r25	; 0x05
    2272:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2274:	8e 81       	ldd	r24, Y+6	; 0x06
    2276:	9f 81       	ldd	r25, Y+7	; 0x07
    2278:	01 97       	sbiw	r24, 0x01	; 1
    227a:	9f 83       	std	Y+7, r25	; 0x07
    227c:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    227e:	8e 81       	ldd	r24, Y+6	; 0x06
    2280:	9f 81       	ldd	r25, Y+7	; 0x07
    2282:	00 97       	sbiw	r24, 0x00	; 0
    2284:	69 f7       	brne	.-38     	; 0x2260 <HLCD4_voidSendData+0x720>
    2286:	24 c0       	rjmp	.+72     	; 0x22d0 <HLCD4_voidSendData+0x790>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2288:	68 85       	ldd	r22, Y+8	; 0x08
    228a:	79 85       	ldd	r23, Y+9	; 0x09
    228c:	8a 85       	ldd	r24, Y+10	; 0x0a
    228e:	9b 85       	ldd	r25, Y+11	; 0x0b
    2290:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2294:	dc 01       	movw	r26, r24
    2296:	cb 01       	movw	r24, r22
    2298:	9f 83       	std	Y+7, r25	; 0x07
    229a:	8e 83       	std	Y+6, r24	; 0x06
    229c:	8e 81       	ldd	r24, Y+6	; 0x06
    229e:	9f 81       	ldd	r25, Y+7	; 0x07
    22a0:	9b 83       	std	Y+3, r25	; 0x03
    22a2:	8a 83       	std	Y+2, r24	; 0x02
    22a4:	8a 81       	ldd	r24, Y+2	; 0x02
    22a6:	9b 81       	ldd	r25, Y+3	; 0x03
    22a8:	01 97       	sbiw	r24, 0x01	; 1
    22aa:	f1 f7       	brne	.-4      	; 0x22a8 <HLCD4_voidSendData+0x768>
    22ac:	9b 83       	std	Y+3, r25	; 0x03
    22ae:	8a 83       	std	Y+2, r24	; 0x02
    22b0:	0f c0       	rjmp	.+30     	; 0x22d0 <HLCD4_voidSendData+0x790>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    22b2:	69 89       	ldd	r22, Y+17	; 0x11
    22b4:	7a 89       	ldd	r23, Y+18	; 0x12
    22b6:	8b 89       	ldd	r24, Y+19	; 0x13
    22b8:	9c 89       	ldd	r25, Y+20	; 0x14
    22ba:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    22be:	dc 01       	movw	r26, r24
    22c0:	cb 01       	movw	r24, r22
    22c2:	88 8b       	std	Y+16, r24	; 0x10
    22c4:	88 89       	ldd	r24, Y+16	; 0x10
    22c6:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    22c8:	89 81       	ldd	r24, Y+1	; 0x01
    22ca:	8a 95       	dec	r24
    22cc:	f1 f7       	brne	.-4      	; 0x22ca <HLCD4_voidSendData+0x78a>
    22ce:	89 83       	std	Y+1, r24	; 0x01
    _delay_us(10);
}
    22d0:	cf 59       	subi	r28, 0x9F	; 159
    22d2:	df 4f       	sbci	r29, 0xFF	; 255
    22d4:	0f b6       	in	r0, 0x3f	; 63
    22d6:	f8 94       	cli
    22d8:	de bf       	out	0x3e, r29	; 62
    22da:	0f be       	out	0x3f, r0	; 63
    22dc:	cd bf       	out	0x3d, r28	; 61
    22de:	cf 91       	pop	r28
    22e0:	df 91       	pop	r29
    22e2:	1f 91       	pop	r17
    22e4:	0f 91       	pop	r16
    22e6:	08 95       	ret

000022e8 <HLCD4_voidInit>:



void HLCD4_voidInit()
{
    22e8:	df 93       	push	r29
    22ea:	cf 93       	push	r28
    22ec:	cd b7       	in	r28, 0x3d	; 61
    22ee:	de b7       	in	r29, 0x3e	; 62
    22f0:	e8 97       	sbiw	r28, 0x38	; 56
    22f2:	0f b6       	in	r0, 0x3f	; 63
    22f4:	f8 94       	cli
    22f6:	de bf       	out	0x3e, r29	; 62
    22f8:	0f be       	out	0x3f, r0	; 63
    22fa:	cd bf       	out	0x3d, r28	; 61
    22fc:	80 e0       	ldi	r24, 0x00	; 0
    22fe:	90 e0       	ldi	r25, 0x00	; 0
    2300:	a0 ef       	ldi	r26, 0xF0	; 240
    2302:	b1 e4       	ldi	r27, 0x41	; 65
    2304:	8d ab       	std	Y+53, r24	; 0x35
    2306:	9e ab       	std	Y+54, r25	; 0x36
    2308:	af ab       	std	Y+55, r26	; 0x37
    230a:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    230c:	6d a9       	ldd	r22, Y+53	; 0x35
    230e:	7e a9       	ldd	r23, Y+54	; 0x36
    2310:	8f a9       	ldd	r24, Y+55	; 0x37
    2312:	98 ad       	ldd	r25, Y+56	; 0x38
    2314:	20 e0       	ldi	r18, 0x00	; 0
    2316:	30 e0       	ldi	r19, 0x00	; 0
    2318:	4a ef       	ldi	r20, 0xFA	; 250
    231a:	54 e4       	ldi	r21, 0x44	; 68
    231c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2320:	dc 01       	movw	r26, r24
    2322:	cb 01       	movw	r24, r22
    2324:	89 ab       	std	Y+49, r24	; 0x31
    2326:	9a ab       	std	Y+50, r25	; 0x32
    2328:	ab ab       	std	Y+51, r26	; 0x33
    232a:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    232c:	69 a9       	ldd	r22, Y+49	; 0x31
    232e:	7a a9       	ldd	r23, Y+50	; 0x32
    2330:	8b a9       	ldd	r24, Y+51	; 0x33
    2332:	9c a9       	ldd	r25, Y+52	; 0x34
    2334:	20 e0       	ldi	r18, 0x00	; 0
    2336:	30 e0       	ldi	r19, 0x00	; 0
    2338:	40 e8       	ldi	r20, 0x80	; 128
    233a:	5f e3       	ldi	r21, 0x3F	; 63
    233c:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2340:	88 23       	and	r24, r24
    2342:	2c f4       	brge	.+10     	; 0x234e <HLCD4_voidInit+0x66>
		__ticks = 1;
    2344:	81 e0       	ldi	r24, 0x01	; 1
    2346:	90 e0       	ldi	r25, 0x00	; 0
    2348:	98 ab       	std	Y+48, r25	; 0x30
    234a:	8f a7       	std	Y+47, r24	; 0x2f
    234c:	3f c0       	rjmp	.+126    	; 0x23cc <HLCD4_voidInit+0xe4>
	else if (__tmp > 65535)
    234e:	69 a9       	ldd	r22, Y+49	; 0x31
    2350:	7a a9       	ldd	r23, Y+50	; 0x32
    2352:	8b a9       	ldd	r24, Y+51	; 0x33
    2354:	9c a9       	ldd	r25, Y+52	; 0x34
    2356:	20 e0       	ldi	r18, 0x00	; 0
    2358:	3f ef       	ldi	r19, 0xFF	; 255
    235a:	4f e7       	ldi	r20, 0x7F	; 127
    235c:	57 e4       	ldi	r21, 0x47	; 71
    235e:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2362:	18 16       	cp	r1, r24
    2364:	4c f5       	brge	.+82     	; 0x23b8 <HLCD4_voidInit+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2366:	6d a9       	ldd	r22, Y+53	; 0x35
    2368:	7e a9       	ldd	r23, Y+54	; 0x36
    236a:	8f a9       	ldd	r24, Y+55	; 0x37
    236c:	98 ad       	ldd	r25, Y+56	; 0x38
    236e:	20 e0       	ldi	r18, 0x00	; 0
    2370:	30 e0       	ldi	r19, 0x00	; 0
    2372:	40 e2       	ldi	r20, 0x20	; 32
    2374:	51 e4       	ldi	r21, 0x41	; 65
    2376:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    237a:	dc 01       	movw	r26, r24
    237c:	cb 01       	movw	r24, r22
    237e:	bc 01       	movw	r22, r24
    2380:	cd 01       	movw	r24, r26
    2382:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2386:	dc 01       	movw	r26, r24
    2388:	cb 01       	movw	r24, r22
    238a:	98 ab       	std	Y+48, r25	; 0x30
    238c:	8f a7       	std	Y+47, r24	; 0x2f
    238e:	0f c0       	rjmp	.+30     	; 0x23ae <HLCD4_voidInit+0xc6>
    2390:	88 ec       	ldi	r24, 0xC8	; 200
    2392:	90 e0       	ldi	r25, 0x00	; 0
    2394:	9e a7       	std	Y+46, r25	; 0x2e
    2396:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2398:	8d a5       	ldd	r24, Y+45	; 0x2d
    239a:	9e a5       	ldd	r25, Y+46	; 0x2e
    239c:	01 97       	sbiw	r24, 0x01	; 1
    239e:	f1 f7       	brne	.-4      	; 0x239c <HLCD4_voidInit+0xb4>
    23a0:	9e a7       	std	Y+46, r25	; 0x2e
    23a2:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    23a4:	8f a5       	ldd	r24, Y+47	; 0x2f
    23a6:	98 a9       	ldd	r25, Y+48	; 0x30
    23a8:	01 97       	sbiw	r24, 0x01	; 1
    23aa:	98 ab       	std	Y+48, r25	; 0x30
    23ac:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    23ae:	8f a5       	ldd	r24, Y+47	; 0x2f
    23b0:	98 a9       	ldd	r25, Y+48	; 0x30
    23b2:	00 97       	sbiw	r24, 0x00	; 0
    23b4:	69 f7       	brne	.-38     	; 0x2390 <HLCD4_voidInit+0xa8>
    23b6:	14 c0       	rjmp	.+40     	; 0x23e0 <HLCD4_voidInit+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    23b8:	69 a9       	ldd	r22, Y+49	; 0x31
    23ba:	7a a9       	ldd	r23, Y+50	; 0x32
    23bc:	8b a9       	ldd	r24, Y+51	; 0x33
    23be:	9c a9       	ldd	r25, Y+52	; 0x34
    23c0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    23c4:	dc 01       	movw	r26, r24
    23c6:	cb 01       	movw	r24, r22
    23c8:	98 ab       	std	Y+48, r25	; 0x30
    23ca:	8f a7       	std	Y+47, r24	; 0x2f
    23cc:	8f a5       	ldd	r24, Y+47	; 0x2f
    23ce:	98 a9       	ldd	r25, Y+48	; 0x30
    23d0:	9c a7       	std	Y+44, r25	; 0x2c
    23d2:	8b a7       	std	Y+43, r24	; 0x2b
    23d4:	8b a5       	ldd	r24, Y+43	; 0x2b
    23d6:	9c a5       	ldd	r25, Y+44	; 0x2c
    23d8:	01 97       	sbiw	r24, 0x01	; 1
    23da:	f1 f7       	brne	.-4      	; 0x23d8 <HLCD4_voidInit+0xf0>
    23dc:	9c a7       	std	Y+44, r25	; 0x2c
    23de:	8b a7       	std	Y+43, r24	; 0x2b
    _delay_ms(30);
    HLCD4_voidSendCommand(FUNCTION_SET1);
    23e0:	80 e2       	ldi	r24, 0x20	; 32
    23e2:	0e 94 cc 09 	call	0x1398	; 0x1398 <HLCD4_voidSendCommand>
    HLCD4_voidSendCommand(FUNCTION_SET2);
    23e6:	80 e2       	ldi	r24, 0x20	; 32
    23e8:	0e 94 cc 09 	call	0x1398	; 0x1398 <HLCD4_voidSendCommand>
    HLCD4_voidSendCommand(FUNCTION_SET3);
    23ec:	80 e8       	ldi	r24, 0x80	; 128
    23ee:	0e 94 cc 09 	call	0x1398	; 0x1398 <HLCD4_voidSendCommand>
    23f2:	80 e0       	ldi	r24, 0x00	; 0
    23f4:	90 e0       	ldi	r25, 0x00	; 0
    23f6:	a0 e8       	ldi	r26, 0x80	; 128
    23f8:	bf e3       	ldi	r27, 0x3F	; 63
    23fa:	8f a3       	std	Y+39, r24	; 0x27
    23fc:	98 a7       	std	Y+40, r25	; 0x28
    23fe:	a9 a7       	std	Y+41, r26	; 0x29
    2400:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2402:	6f a1       	ldd	r22, Y+39	; 0x27
    2404:	78 a5       	ldd	r23, Y+40	; 0x28
    2406:	89 a5       	ldd	r24, Y+41	; 0x29
    2408:	9a a5       	ldd	r25, Y+42	; 0x2a
    240a:	20 e0       	ldi	r18, 0x00	; 0
    240c:	30 e0       	ldi	r19, 0x00	; 0
    240e:	4a ef       	ldi	r20, 0xFA	; 250
    2410:	54 e4       	ldi	r21, 0x44	; 68
    2412:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2416:	dc 01       	movw	r26, r24
    2418:	cb 01       	movw	r24, r22
    241a:	8b a3       	std	Y+35, r24	; 0x23
    241c:	9c a3       	std	Y+36, r25	; 0x24
    241e:	ad a3       	std	Y+37, r26	; 0x25
    2420:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2422:	6b a1       	ldd	r22, Y+35	; 0x23
    2424:	7c a1       	ldd	r23, Y+36	; 0x24
    2426:	8d a1       	ldd	r24, Y+37	; 0x25
    2428:	9e a1       	ldd	r25, Y+38	; 0x26
    242a:	20 e0       	ldi	r18, 0x00	; 0
    242c:	30 e0       	ldi	r19, 0x00	; 0
    242e:	40 e8       	ldi	r20, 0x80	; 128
    2430:	5f e3       	ldi	r21, 0x3F	; 63
    2432:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2436:	88 23       	and	r24, r24
    2438:	2c f4       	brge	.+10     	; 0x2444 <HLCD4_voidInit+0x15c>
		__ticks = 1;
    243a:	81 e0       	ldi	r24, 0x01	; 1
    243c:	90 e0       	ldi	r25, 0x00	; 0
    243e:	9a a3       	std	Y+34, r25	; 0x22
    2440:	89 a3       	std	Y+33, r24	; 0x21
    2442:	3f c0       	rjmp	.+126    	; 0x24c2 <HLCD4_voidInit+0x1da>
	else if (__tmp > 65535)
    2444:	6b a1       	ldd	r22, Y+35	; 0x23
    2446:	7c a1       	ldd	r23, Y+36	; 0x24
    2448:	8d a1       	ldd	r24, Y+37	; 0x25
    244a:	9e a1       	ldd	r25, Y+38	; 0x26
    244c:	20 e0       	ldi	r18, 0x00	; 0
    244e:	3f ef       	ldi	r19, 0xFF	; 255
    2450:	4f e7       	ldi	r20, 0x7F	; 127
    2452:	57 e4       	ldi	r21, 0x47	; 71
    2454:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2458:	18 16       	cp	r1, r24
    245a:	4c f5       	brge	.+82     	; 0x24ae <HLCD4_voidInit+0x1c6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    245c:	6f a1       	ldd	r22, Y+39	; 0x27
    245e:	78 a5       	ldd	r23, Y+40	; 0x28
    2460:	89 a5       	ldd	r24, Y+41	; 0x29
    2462:	9a a5       	ldd	r25, Y+42	; 0x2a
    2464:	20 e0       	ldi	r18, 0x00	; 0
    2466:	30 e0       	ldi	r19, 0x00	; 0
    2468:	40 e2       	ldi	r20, 0x20	; 32
    246a:	51 e4       	ldi	r21, 0x41	; 65
    246c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2470:	dc 01       	movw	r26, r24
    2472:	cb 01       	movw	r24, r22
    2474:	bc 01       	movw	r22, r24
    2476:	cd 01       	movw	r24, r26
    2478:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    247c:	dc 01       	movw	r26, r24
    247e:	cb 01       	movw	r24, r22
    2480:	9a a3       	std	Y+34, r25	; 0x22
    2482:	89 a3       	std	Y+33, r24	; 0x21
    2484:	0f c0       	rjmp	.+30     	; 0x24a4 <HLCD4_voidInit+0x1bc>
    2486:	88 ec       	ldi	r24, 0xC8	; 200
    2488:	90 e0       	ldi	r25, 0x00	; 0
    248a:	98 a3       	std	Y+32, r25	; 0x20
    248c:	8f 8f       	std	Y+31, r24	; 0x1f
    248e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2490:	98 a1       	ldd	r25, Y+32	; 0x20
    2492:	01 97       	sbiw	r24, 0x01	; 1
    2494:	f1 f7       	brne	.-4      	; 0x2492 <HLCD4_voidInit+0x1aa>
    2496:	98 a3       	std	Y+32, r25	; 0x20
    2498:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    249a:	89 a1       	ldd	r24, Y+33	; 0x21
    249c:	9a a1       	ldd	r25, Y+34	; 0x22
    249e:	01 97       	sbiw	r24, 0x01	; 1
    24a0:	9a a3       	std	Y+34, r25	; 0x22
    24a2:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    24a4:	89 a1       	ldd	r24, Y+33	; 0x21
    24a6:	9a a1       	ldd	r25, Y+34	; 0x22
    24a8:	00 97       	sbiw	r24, 0x00	; 0
    24aa:	69 f7       	brne	.-38     	; 0x2486 <HLCD4_voidInit+0x19e>
    24ac:	14 c0       	rjmp	.+40     	; 0x24d6 <HLCD4_voidInit+0x1ee>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    24ae:	6b a1       	ldd	r22, Y+35	; 0x23
    24b0:	7c a1       	ldd	r23, Y+36	; 0x24
    24b2:	8d a1       	ldd	r24, Y+37	; 0x25
    24b4:	9e a1       	ldd	r25, Y+38	; 0x26
    24b6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    24ba:	dc 01       	movw	r26, r24
    24bc:	cb 01       	movw	r24, r22
    24be:	9a a3       	std	Y+34, r25	; 0x22
    24c0:	89 a3       	std	Y+33, r24	; 0x21
    24c2:	89 a1       	ldd	r24, Y+33	; 0x21
    24c4:	9a a1       	ldd	r25, Y+34	; 0x22
    24c6:	9e 8f       	std	Y+30, r25	; 0x1e
    24c8:	8d 8f       	std	Y+29, r24	; 0x1d
    24ca:	8d 8d       	ldd	r24, Y+29	; 0x1d
    24cc:	9e 8d       	ldd	r25, Y+30	; 0x1e
    24ce:	01 97       	sbiw	r24, 0x01	; 1
    24d0:	f1 f7       	brne	.-4      	; 0x24ce <HLCD4_voidInit+0x1e6>
    24d2:	9e 8f       	std	Y+30, r25	; 0x1e
    24d4:	8d 8f       	std	Y+29, r24	; 0x1d
    _delay_ms(1);
    HLCD4_voidSendCommand(ON_OFF_CONTROL1);
    24d6:	80 e0       	ldi	r24, 0x00	; 0
    24d8:	0e 94 cc 09 	call	0x1398	; 0x1398 <HLCD4_voidSendCommand>
    HLCD4_voidSendCommand(ON_OFF_CONTROL2);
    24dc:	80 ef       	ldi	r24, 0xF0	; 240
    24de:	0e 94 cc 09 	call	0x1398	; 0x1398 <HLCD4_voidSendCommand>
    24e2:	80 e0       	ldi	r24, 0x00	; 0
    24e4:	90 e0       	ldi	r25, 0x00	; 0
    24e6:	a0 e8       	ldi	r26, 0x80	; 128
    24e8:	bf e3       	ldi	r27, 0x3F	; 63
    24ea:	89 8f       	std	Y+25, r24	; 0x19
    24ec:	9a 8f       	std	Y+26, r25	; 0x1a
    24ee:	ab 8f       	std	Y+27, r26	; 0x1b
    24f0:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    24f2:	69 8d       	ldd	r22, Y+25	; 0x19
    24f4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    24f6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    24f8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    24fa:	20 e0       	ldi	r18, 0x00	; 0
    24fc:	30 e0       	ldi	r19, 0x00	; 0
    24fe:	4a ef       	ldi	r20, 0xFA	; 250
    2500:	54 e4       	ldi	r21, 0x44	; 68
    2502:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2506:	dc 01       	movw	r26, r24
    2508:	cb 01       	movw	r24, r22
    250a:	8d 8b       	std	Y+21, r24	; 0x15
    250c:	9e 8b       	std	Y+22, r25	; 0x16
    250e:	af 8b       	std	Y+23, r26	; 0x17
    2510:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2512:	6d 89       	ldd	r22, Y+21	; 0x15
    2514:	7e 89       	ldd	r23, Y+22	; 0x16
    2516:	8f 89       	ldd	r24, Y+23	; 0x17
    2518:	98 8d       	ldd	r25, Y+24	; 0x18
    251a:	20 e0       	ldi	r18, 0x00	; 0
    251c:	30 e0       	ldi	r19, 0x00	; 0
    251e:	40 e8       	ldi	r20, 0x80	; 128
    2520:	5f e3       	ldi	r21, 0x3F	; 63
    2522:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2526:	88 23       	and	r24, r24
    2528:	2c f4       	brge	.+10     	; 0x2534 <HLCD4_voidInit+0x24c>
		__ticks = 1;
    252a:	81 e0       	ldi	r24, 0x01	; 1
    252c:	90 e0       	ldi	r25, 0x00	; 0
    252e:	9c 8b       	std	Y+20, r25	; 0x14
    2530:	8b 8b       	std	Y+19, r24	; 0x13
    2532:	3f c0       	rjmp	.+126    	; 0x25b2 <HLCD4_voidInit+0x2ca>
	else if (__tmp > 65535)
    2534:	6d 89       	ldd	r22, Y+21	; 0x15
    2536:	7e 89       	ldd	r23, Y+22	; 0x16
    2538:	8f 89       	ldd	r24, Y+23	; 0x17
    253a:	98 8d       	ldd	r25, Y+24	; 0x18
    253c:	20 e0       	ldi	r18, 0x00	; 0
    253e:	3f ef       	ldi	r19, 0xFF	; 255
    2540:	4f e7       	ldi	r20, 0x7F	; 127
    2542:	57 e4       	ldi	r21, 0x47	; 71
    2544:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2548:	18 16       	cp	r1, r24
    254a:	4c f5       	brge	.+82     	; 0x259e <HLCD4_voidInit+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    254c:	69 8d       	ldd	r22, Y+25	; 0x19
    254e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2550:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2552:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2554:	20 e0       	ldi	r18, 0x00	; 0
    2556:	30 e0       	ldi	r19, 0x00	; 0
    2558:	40 e2       	ldi	r20, 0x20	; 32
    255a:	51 e4       	ldi	r21, 0x41	; 65
    255c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2560:	dc 01       	movw	r26, r24
    2562:	cb 01       	movw	r24, r22
    2564:	bc 01       	movw	r22, r24
    2566:	cd 01       	movw	r24, r26
    2568:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    256c:	dc 01       	movw	r26, r24
    256e:	cb 01       	movw	r24, r22
    2570:	9c 8b       	std	Y+20, r25	; 0x14
    2572:	8b 8b       	std	Y+19, r24	; 0x13
    2574:	0f c0       	rjmp	.+30     	; 0x2594 <HLCD4_voidInit+0x2ac>
    2576:	88 ec       	ldi	r24, 0xC8	; 200
    2578:	90 e0       	ldi	r25, 0x00	; 0
    257a:	9a 8b       	std	Y+18, r25	; 0x12
    257c:	89 8b       	std	Y+17, r24	; 0x11
    257e:	89 89       	ldd	r24, Y+17	; 0x11
    2580:	9a 89       	ldd	r25, Y+18	; 0x12
    2582:	01 97       	sbiw	r24, 0x01	; 1
    2584:	f1 f7       	brne	.-4      	; 0x2582 <HLCD4_voidInit+0x29a>
    2586:	9a 8b       	std	Y+18, r25	; 0x12
    2588:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    258a:	8b 89       	ldd	r24, Y+19	; 0x13
    258c:	9c 89       	ldd	r25, Y+20	; 0x14
    258e:	01 97       	sbiw	r24, 0x01	; 1
    2590:	9c 8b       	std	Y+20, r25	; 0x14
    2592:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2594:	8b 89       	ldd	r24, Y+19	; 0x13
    2596:	9c 89       	ldd	r25, Y+20	; 0x14
    2598:	00 97       	sbiw	r24, 0x00	; 0
    259a:	69 f7       	brne	.-38     	; 0x2576 <HLCD4_voidInit+0x28e>
    259c:	14 c0       	rjmp	.+40     	; 0x25c6 <HLCD4_voidInit+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    259e:	6d 89       	ldd	r22, Y+21	; 0x15
    25a0:	7e 89       	ldd	r23, Y+22	; 0x16
    25a2:	8f 89       	ldd	r24, Y+23	; 0x17
    25a4:	98 8d       	ldd	r25, Y+24	; 0x18
    25a6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    25aa:	dc 01       	movw	r26, r24
    25ac:	cb 01       	movw	r24, r22
    25ae:	9c 8b       	std	Y+20, r25	; 0x14
    25b0:	8b 8b       	std	Y+19, r24	; 0x13
    25b2:	8b 89       	ldd	r24, Y+19	; 0x13
    25b4:	9c 89       	ldd	r25, Y+20	; 0x14
    25b6:	98 8b       	std	Y+16, r25	; 0x10
    25b8:	8f 87       	std	Y+15, r24	; 0x0f
    25ba:	8f 85       	ldd	r24, Y+15	; 0x0f
    25bc:	98 89       	ldd	r25, Y+16	; 0x10
    25be:	01 97       	sbiw	r24, 0x01	; 1
    25c0:	f1 f7       	brne	.-4      	; 0x25be <HLCD4_voidInit+0x2d6>
    25c2:	98 8b       	std	Y+16, r25	; 0x10
    25c4:	8f 87       	std	Y+15, r24	; 0x0f
    _delay_ms(1);
    HLCD4_voidSendCommand(DISPLAY_CLEAR1);
    25c6:	80 e0       	ldi	r24, 0x00	; 0
    25c8:	0e 94 cc 09 	call	0x1398	; 0x1398 <HLCD4_voidSendCommand>
    HLCD4_voidSendCommand(DISPLAY_CLEAR2);
    25cc:	80 e1       	ldi	r24, 0x10	; 16
    25ce:	0e 94 cc 09 	call	0x1398	; 0x1398 <HLCD4_voidSendCommand>
    25d2:	80 e0       	ldi	r24, 0x00	; 0
    25d4:	90 e0       	ldi	r25, 0x00	; 0
    25d6:	a0 e0       	ldi	r26, 0x00	; 0
    25d8:	b0 e4       	ldi	r27, 0x40	; 64
    25da:	8b 87       	std	Y+11, r24	; 0x0b
    25dc:	9c 87       	std	Y+12, r25	; 0x0c
    25de:	ad 87       	std	Y+13, r26	; 0x0d
    25e0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    25e2:	6b 85       	ldd	r22, Y+11	; 0x0b
    25e4:	7c 85       	ldd	r23, Y+12	; 0x0c
    25e6:	8d 85       	ldd	r24, Y+13	; 0x0d
    25e8:	9e 85       	ldd	r25, Y+14	; 0x0e
    25ea:	20 e0       	ldi	r18, 0x00	; 0
    25ec:	30 e0       	ldi	r19, 0x00	; 0
    25ee:	4a ef       	ldi	r20, 0xFA	; 250
    25f0:	54 e4       	ldi	r21, 0x44	; 68
    25f2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    25f6:	dc 01       	movw	r26, r24
    25f8:	cb 01       	movw	r24, r22
    25fa:	8f 83       	std	Y+7, r24	; 0x07
    25fc:	98 87       	std	Y+8, r25	; 0x08
    25fe:	a9 87       	std	Y+9, r26	; 0x09
    2600:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2602:	6f 81       	ldd	r22, Y+7	; 0x07
    2604:	78 85       	ldd	r23, Y+8	; 0x08
    2606:	89 85       	ldd	r24, Y+9	; 0x09
    2608:	9a 85       	ldd	r25, Y+10	; 0x0a
    260a:	20 e0       	ldi	r18, 0x00	; 0
    260c:	30 e0       	ldi	r19, 0x00	; 0
    260e:	40 e8       	ldi	r20, 0x80	; 128
    2610:	5f e3       	ldi	r21, 0x3F	; 63
    2612:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2616:	88 23       	and	r24, r24
    2618:	2c f4       	brge	.+10     	; 0x2624 <HLCD4_voidInit+0x33c>
		__ticks = 1;
    261a:	81 e0       	ldi	r24, 0x01	; 1
    261c:	90 e0       	ldi	r25, 0x00	; 0
    261e:	9e 83       	std	Y+6, r25	; 0x06
    2620:	8d 83       	std	Y+5, r24	; 0x05
    2622:	3f c0       	rjmp	.+126    	; 0x26a2 <HLCD4_voidInit+0x3ba>
	else if (__tmp > 65535)
    2624:	6f 81       	ldd	r22, Y+7	; 0x07
    2626:	78 85       	ldd	r23, Y+8	; 0x08
    2628:	89 85       	ldd	r24, Y+9	; 0x09
    262a:	9a 85       	ldd	r25, Y+10	; 0x0a
    262c:	20 e0       	ldi	r18, 0x00	; 0
    262e:	3f ef       	ldi	r19, 0xFF	; 255
    2630:	4f e7       	ldi	r20, 0x7F	; 127
    2632:	57 e4       	ldi	r21, 0x47	; 71
    2634:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2638:	18 16       	cp	r1, r24
    263a:	4c f5       	brge	.+82     	; 0x268e <HLCD4_voidInit+0x3a6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    263c:	6b 85       	ldd	r22, Y+11	; 0x0b
    263e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2640:	8d 85       	ldd	r24, Y+13	; 0x0d
    2642:	9e 85       	ldd	r25, Y+14	; 0x0e
    2644:	20 e0       	ldi	r18, 0x00	; 0
    2646:	30 e0       	ldi	r19, 0x00	; 0
    2648:	40 e2       	ldi	r20, 0x20	; 32
    264a:	51 e4       	ldi	r21, 0x41	; 65
    264c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2650:	dc 01       	movw	r26, r24
    2652:	cb 01       	movw	r24, r22
    2654:	bc 01       	movw	r22, r24
    2656:	cd 01       	movw	r24, r26
    2658:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    265c:	dc 01       	movw	r26, r24
    265e:	cb 01       	movw	r24, r22
    2660:	9e 83       	std	Y+6, r25	; 0x06
    2662:	8d 83       	std	Y+5, r24	; 0x05
    2664:	0f c0       	rjmp	.+30     	; 0x2684 <HLCD4_voidInit+0x39c>
    2666:	88 ec       	ldi	r24, 0xC8	; 200
    2668:	90 e0       	ldi	r25, 0x00	; 0
    266a:	9c 83       	std	Y+4, r25	; 0x04
    266c:	8b 83       	std	Y+3, r24	; 0x03
    266e:	8b 81       	ldd	r24, Y+3	; 0x03
    2670:	9c 81       	ldd	r25, Y+4	; 0x04
    2672:	01 97       	sbiw	r24, 0x01	; 1
    2674:	f1 f7       	brne	.-4      	; 0x2672 <HLCD4_voidInit+0x38a>
    2676:	9c 83       	std	Y+4, r25	; 0x04
    2678:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    267a:	8d 81       	ldd	r24, Y+5	; 0x05
    267c:	9e 81       	ldd	r25, Y+6	; 0x06
    267e:	01 97       	sbiw	r24, 0x01	; 1
    2680:	9e 83       	std	Y+6, r25	; 0x06
    2682:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2684:	8d 81       	ldd	r24, Y+5	; 0x05
    2686:	9e 81       	ldd	r25, Y+6	; 0x06
    2688:	00 97       	sbiw	r24, 0x00	; 0
    268a:	69 f7       	brne	.-38     	; 0x2666 <HLCD4_voidInit+0x37e>
    268c:	14 c0       	rjmp	.+40     	; 0x26b6 <HLCD4_voidInit+0x3ce>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    268e:	6f 81       	ldd	r22, Y+7	; 0x07
    2690:	78 85       	ldd	r23, Y+8	; 0x08
    2692:	89 85       	ldd	r24, Y+9	; 0x09
    2694:	9a 85       	ldd	r25, Y+10	; 0x0a
    2696:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    269a:	dc 01       	movw	r26, r24
    269c:	cb 01       	movw	r24, r22
    269e:	9e 83       	std	Y+6, r25	; 0x06
    26a0:	8d 83       	std	Y+5, r24	; 0x05
    26a2:	8d 81       	ldd	r24, Y+5	; 0x05
    26a4:	9e 81       	ldd	r25, Y+6	; 0x06
    26a6:	9a 83       	std	Y+2, r25	; 0x02
    26a8:	89 83       	std	Y+1, r24	; 0x01
    26aa:	89 81       	ldd	r24, Y+1	; 0x01
    26ac:	9a 81       	ldd	r25, Y+2	; 0x02
    26ae:	01 97       	sbiw	r24, 0x01	; 1
    26b0:	f1 f7       	brne	.-4      	; 0x26ae <HLCD4_voidInit+0x3c6>
    26b2:	9a 83       	std	Y+2, r25	; 0x02
    26b4:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(2);
    HLCD4_voidSendCommand(ENTRY_MODE_SET1);
    26b6:	80 e0       	ldi	r24, 0x00	; 0
    26b8:	0e 94 cc 09 	call	0x1398	; 0x1398 <HLCD4_voidSendCommand>
    HLCD4_voidSendCommand(ENTRY_MODE_SET2);
    26bc:	80 e6       	ldi	r24, 0x60	; 96
    26be:	0e 94 cc 09 	call	0x1398	; 0x1398 <HLCD4_voidSendCommand>
}
    26c2:	e8 96       	adiw	r28, 0x38	; 56
    26c4:	0f b6       	in	r0, 0x3f	; 63
    26c6:	f8 94       	cli
    26c8:	de bf       	out	0x3e, r29	; 62
    26ca:	0f be       	out	0x3f, r0	; 63
    26cc:	cd bf       	out	0x3d, r28	; 61
    26ce:	cf 91       	pop	r28
    26d0:	df 91       	pop	r29
    26d2:	08 95       	ret

000026d4 <HLCD4_voidClearDisplay>:

void HLCD4_voidClearDisplay(void)
{
    26d4:	df 93       	push	r29
    26d6:	cf 93       	push	r28
    26d8:	cd b7       	in	r28, 0x3d	; 61
    26da:	de b7       	in	r29, 0x3e	; 62
    26dc:	2e 97       	sbiw	r28, 0x0e	; 14
    26de:	0f b6       	in	r0, 0x3f	; 63
    26e0:	f8 94       	cli
    26e2:	de bf       	out	0x3e, r29	; 62
    26e4:	0f be       	out	0x3f, r0	; 63
    26e6:	cd bf       	out	0x3d, r28	; 61
    HLCD4_voidSendCommand(DISPLAY_CLEAR1);
    26e8:	80 e0       	ldi	r24, 0x00	; 0
    26ea:	0e 94 cc 09 	call	0x1398	; 0x1398 <HLCD4_voidSendCommand>
    HLCD4_voidSendCommand(DISPLAY_CLEAR2);
    26ee:	80 e1       	ldi	r24, 0x10	; 16
    26f0:	0e 94 cc 09 	call	0x1398	; 0x1398 <HLCD4_voidSendCommand>
    26f4:	80 e0       	ldi	r24, 0x00	; 0
    26f6:	90 e0       	ldi	r25, 0x00	; 0
    26f8:	a0 e0       	ldi	r26, 0x00	; 0
    26fa:	b0 e4       	ldi	r27, 0x40	; 64
    26fc:	8b 87       	std	Y+11, r24	; 0x0b
    26fe:	9c 87       	std	Y+12, r25	; 0x0c
    2700:	ad 87       	std	Y+13, r26	; 0x0d
    2702:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2704:	6b 85       	ldd	r22, Y+11	; 0x0b
    2706:	7c 85       	ldd	r23, Y+12	; 0x0c
    2708:	8d 85       	ldd	r24, Y+13	; 0x0d
    270a:	9e 85       	ldd	r25, Y+14	; 0x0e
    270c:	20 e0       	ldi	r18, 0x00	; 0
    270e:	30 e0       	ldi	r19, 0x00	; 0
    2710:	4a ef       	ldi	r20, 0xFA	; 250
    2712:	54 e4       	ldi	r21, 0x44	; 68
    2714:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2718:	dc 01       	movw	r26, r24
    271a:	cb 01       	movw	r24, r22
    271c:	8f 83       	std	Y+7, r24	; 0x07
    271e:	98 87       	std	Y+8, r25	; 0x08
    2720:	a9 87       	std	Y+9, r26	; 0x09
    2722:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2724:	6f 81       	ldd	r22, Y+7	; 0x07
    2726:	78 85       	ldd	r23, Y+8	; 0x08
    2728:	89 85       	ldd	r24, Y+9	; 0x09
    272a:	9a 85       	ldd	r25, Y+10	; 0x0a
    272c:	20 e0       	ldi	r18, 0x00	; 0
    272e:	30 e0       	ldi	r19, 0x00	; 0
    2730:	40 e8       	ldi	r20, 0x80	; 128
    2732:	5f e3       	ldi	r21, 0x3F	; 63
    2734:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2738:	88 23       	and	r24, r24
    273a:	2c f4       	brge	.+10     	; 0x2746 <HLCD4_voidClearDisplay+0x72>
		__ticks = 1;
    273c:	81 e0       	ldi	r24, 0x01	; 1
    273e:	90 e0       	ldi	r25, 0x00	; 0
    2740:	9e 83       	std	Y+6, r25	; 0x06
    2742:	8d 83       	std	Y+5, r24	; 0x05
    2744:	3f c0       	rjmp	.+126    	; 0x27c4 <HLCD4_voidClearDisplay+0xf0>
	else if (__tmp > 65535)
    2746:	6f 81       	ldd	r22, Y+7	; 0x07
    2748:	78 85       	ldd	r23, Y+8	; 0x08
    274a:	89 85       	ldd	r24, Y+9	; 0x09
    274c:	9a 85       	ldd	r25, Y+10	; 0x0a
    274e:	20 e0       	ldi	r18, 0x00	; 0
    2750:	3f ef       	ldi	r19, 0xFF	; 255
    2752:	4f e7       	ldi	r20, 0x7F	; 127
    2754:	57 e4       	ldi	r21, 0x47	; 71
    2756:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    275a:	18 16       	cp	r1, r24
    275c:	4c f5       	brge	.+82     	; 0x27b0 <HLCD4_voidClearDisplay+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    275e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2760:	7c 85       	ldd	r23, Y+12	; 0x0c
    2762:	8d 85       	ldd	r24, Y+13	; 0x0d
    2764:	9e 85       	ldd	r25, Y+14	; 0x0e
    2766:	20 e0       	ldi	r18, 0x00	; 0
    2768:	30 e0       	ldi	r19, 0x00	; 0
    276a:	40 e2       	ldi	r20, 0x20	; 32
    276c:	51 e4       	ldi	r21, 0x41	; 65
    276e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2772:	dc 01       	movw	r26, r24
    2774:	cb 01       	movw	r24, r22
    2776:	bc 01       	movw	r22, r24
    2778:	cd 01       	movw	r24, r26
    277a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    277e:	dc 01       	movw	r26, r24
    2780:	cb 01       	movw	r24, r22
    2782:	9e 83       	std	Y+6, r25	; 0x06
    2784:	8d 83       	std	Y+5, r24	; 0x05
    2786:	0f c0       	rjmp	.+30     	; 0x27a6 <HLCD4_voidClearDisplay+0xd2>
    2788:	88 ec       	ldi	r24, 0xC8	; 200
    278a:	90 e0       	ldi	r25, 0x00	; 0
    278c:	9c 83       	std	Y+4, r25	; 0x04
    278e:	8b 83       	std	Y+3, r24	; 0x03
    2790:	8b 81       	ldd	r24, Y+3	; 0x03
    2792:	9c 81       	ldd	r25, Y+4	; 0x04
    2794:	01 97       	sbiw	r24, 0x01	; 1
    2796:	f1 f7       	brne	.-4      	; 0x2794 <HLCD4_voidClearDisplay+0xc0>
    2798:	9c 83       	std	Y+4, r25	; 0x04
    279a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    279c:	8d 81       	ldd	r24, Y+5	; 0x05
    279e:	9e 81       	ldd	r25, Y+6	; 0x06
    27a0:	01 97       	sbiw	r24, 0x01	; 1
    27a2:	9e 83       	std	Y+6, r25	; 0x06
    27a4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    27a6:	8d 81       	ldd	r24, Y+5	; 0x05
    27a8:	9e 81       	ldd	r25, Y+6	; 0x06
    27aa:	00 97       	sbiw	r24, 0x00	; 0
    27ac:	69 f7       	brne	.-38     	; 0x2788 <HLCD4_voidClearDisplay+0xb4>
    27ae:	14 c0       	rjmp	.+40     	; 0x27d8 <HLCD4_voidClearDisplay+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    27b0:	6f 81       	ldd	r22, Y+7	; 0x07
    27b2:	78 85       	ldd	r23, Y+8	; 0x08
    27b4:	89 85       	ldd	r24, Y+9	; 0x09
    27b6:	9a 85       	ldd	r25, Y+10	; 0x0a
    27b8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    27bc:	dc 01       	movw	r26, r24
    27be:	cb 01       	movw	r24, r22
    27c0:	9e 83       	std	Y+6, r25	; 0x06
    27c2:	8d 83       	std	Y+5, r24	; 0x05
    27c4:	8d 81       	ldd	r24, Y+5	; 0x05
    27c6:	9e 81       	ldd	r25, Y+6	; 0x06
    27c8:	9a 83       	std	Y+2, r25	; 0x02
    27ca:	89 83       	std	Y+1, r24	; 0x01
    27cc:	89 81       	ldd	r24, Y+1	; 0x01
    27ce:	9a 81       	ldd	r25, Y+2	; 0x02
    27d0:	01 97       	sbiw	r24, 0x01	; 1
    27d2:	f1 f7       	brne	.-4      	; 0x27d0 <HLCD4_voidClearDisplay+0xfc>
    27d4:	9a 83       	std	Y+2, r25	; 0x02
    27d6:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(2);
}
    27d8:	2e 96       	adiw	r28, 0x0e	; 14
    27da:	0f b6       	in	r0, 0x3f	; 63
    27dc:	f8 94       	cli
    27de:	de bf       	out	0x3e, r29	; 62
    27e0:	0f be       	out	0x3f, r0	; 63
    27e2:	cd bf       	out	0x3d, r28	; 61
    27e4:	cf 91       	pop	r28
    27e6:	df 91       	pop	r29
    27e8:	08 95       	ret

000027ea <HLCD4_voidSendString>:

void HLCD4_voidSendString(u8 * A_Pu8String)
{
    27ea:	df 93       	push	r29
    27ec:	cf 93       	push	r28
    27ee:	00 d0       	rcall	.+0      	; 0x27f0 <HLCD4_voidSendString+0x6>
    27f0:	0f 92       	push	r0
    27f2:	cd b7       	in	r28, 0x3d	; 61
    27f4:	de b7       	in	r29, 0x3e	; 62
    27f6:	9b 83       	std	Y+3, r25	; 0x03
    27f8:	8a 83       	std	Y+2, r24	; 0x02
    u8 local_u8Couter=0;
    27fa:	19 82       	std	Y+1, r1	; 0x01
    27fc:	0e c0       	rjmp	.+28     	; 0x281a <HLCD4_voidSendString+0x30>
    while (A_Pu8String[local_u8Couter]!='\0')
    {
        HLCD4_voidSendData(A_Pu8String[local_u8Couter]);
    27fe:	89 81       	ldd	r24, Y+1	; 0x01
    2800:	28 2f       	mov	r18, r24
    2802:	30 e0       	ldi	r19, 0x00	; 0
    2804:	8a 81       	ldd	r24, Y+2	; 0x02
    2806:	9b 81       	ldd	r25, Y+3	; 0x03
    2808:	fc 01       	movw	r30, r24
    280a:	e2 0f       	add	r30, r18
    280c:	f3 1f       	adc	r31, r19
    280e:	80 81       	ld	r24, Z
    2810:	0e 94 a0 0d 	call	0x1b40	; 0x1b40 <HLCD4_voidSendData>
        local_u8Couter++;
    2814:	89 81       	ldd	r24, Y+1	; 0x01
    2816:	8f 5f       	subi	r24, 0xFF	; 255
    2818:	89 83       	std	Y+1, r24	; 0x01
}

void HLCD4_voidSendString(u8 * A_Pu8String)
{
    u8 local_u8Couter=0;
    while (A_Pu8String[local_u8Couter]!='\0')
    281a:	89 81       	ldd	r24, Y+1	; 0x01
    281c:	28 2f       	mov	r18, r24
    281e:	30 e0       	ldi	r19, 0x00	; 0
    2820:	8a 81       	ldd	r24, Y+2	; 0x02
    2822:	9b 81       	ldd	r25, Y+3	; 0x03
    2824:	fc 01       	movw	r30, r24
    2826:	e2 0f       	add	r30, r18
    2828:	f3 1f       	adc	r31, r19
    282a:	80 81       	ld	r24, Z
    282c:	88 23       	and	r24, r24
    282e:	39 f7       	brne	.-50     	; 0x27fe <HLCD4_voidSendString+0x14>
    {
        HLCD4_voidSendData(A_Pu8String[local_u8Couter]);
        local_u8Couter++;
    }
    
}
    2830:	0f 90       	pop	r0
    2832:	0f 90       	pop	r0
    2834:	0f 90       	pop	r0
    2836:	cf 91       	pop	r28
    2838:	df 91       	pop	r29
    283a:	08 95       	ret

0000283c <HLCD8_voidSendCommand>:
#define F_CPU 8000000UL
#include <math.h>
#include <stdlib.h>

void HLCD8_voidSendCommand(u8 A_u8Command)
{
    283c:	df 93       	push	r29
    283e:	cf 93       	push	r28
    2840:	cd b7       	in	r28, 0x3d	; 61
    2842:	de b7       	in	r29, 0x3e	; 62
    2844:	2f 97       	sbiw	r28, 0x0f	; 15
    2846:	0f b6       	in	r0, 0x3f	; 63
    2848:	f8 94       	cli
    284a:	de bf       	out	0x3e, r29	; 62
    284c:	0f be       	out	0x3f, r0	; 63
    284e:	cd bf       	out	0x3d, r28	; 61
    2850:	8f 87       	std	Y+15, r24	; 0x0f
    //RS=0 RW=0
    MDIO_voidSetPinValue(LCD_CONTROL_PORT,RS_PIN,PIN_LOW);
    2852:	82 e0       	ldi	r24, 0x02	; 2
    2854:	60 e0       	ldi	r22, 0x00	; 0
    2856:	40 e0       	ldi	r20, 0x00	; 0
    2858:	0e 94 1e 07 	call	0xe3c	; 0xe3c <MDIO_voidSetPinValue>
    MDIO_voidSetPinValue(LCD_CONTROL_PORT,RW_PIN,PIN_LOW);
    285c:	82 e0       	ldi	r24, 0x02	; 2
    285e:	61 e0       	ldi	r22, 0x01	; 1
    2860:	40 e0       	ldi	r20, 0x00	; 0
    2862:	0e 94 1e 07 	call	0xe3c	; 0xe3c <MDIO_voidSetPinValue>

    MDIO_voidSetPortValue(LCD_DATA_PORT,A_u8Command);
    2866:	83 e0       	ldi	r24, 0x03	; 3
    2868:	6f 85       	ldd	r22, Y+15	; 0x0f
    286a:	0e 94 4a 09 	call	0x1294	; 0x1294 <MDIO_voidSetPortValue>
    MDIO_voidSetPinValue(LCD_CONTROL_PORT,E_PIN,PIN_HIGH);
    286e:	82 e0       	ldi	r24, 0x02	; 2
    2870:	62 e0       	ldi	r22, 0x02	; 2
    2872:	41 e0       	ldi	r20, 0x01	; 1
    2874:	0e 94 1e 07 	call	0xe3c	; 0xe3c <MDIO_voidSetPinValue>
    2878:	80 e0       	ldi	r24, 0x00	; 0
    287a:	90 e0       	ldi	r25, 0x00	; 0
    287c:	a0 e0       	ldi	r26, 0x00	; 0
    287e:	b0 e4       	ldi	r27, 0x40	; 64
    2880:	8b 87       	std	Y+11, r24	; 0x0b
    2882:	9c 87       	std	Y+12, r25	; 0x0c
    2884:	ad 87       	std	Y+13, r26	; 0x0d
    2886:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2888:	6b 85       	ldd	r22, Y+11	; 0x0b
    288a:	7c 85       	ldd	r23, Y+12	; 0x0c
    288c:	8d 85       	ldd	r24, Y+13	; 0x0d
    288e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2890:	20 e0       	ldi	r18, 0x00	; 0
    2892:	30 e0       	ldi	r19, 0x00	; 0
    2894:	4a ef       	ldi	r20, 0xFA	; 250
    2896:	54 e4       	ldi	r21, 0x44	; 68
    2898:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    289c:	dc 01       	movw	r26, r24
    289e:	cb 01       	movw	r24, r22
    28a0:	8f 83       	std	Y+7, r24	; 0x07
    28a2:	98 87       	std	Y+8, r25	; 0x08
    28a4:	a9 87       	std	Y+9, r26	; 0x09
    28a6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    28a8:	6f 81       	ldd	r22, Y+7	; 0x07
    28aa:	78 85       	ldd	r23, Y+8	; 0x08
    28ac:	89 85       	ldd	r24, Y+9	; 0x09
    28ae:	9a 85       	ldd	r25, Y+10	; 0x0a
    28b0:	20 e0       	ldi	r18, 0x00	; 0
    28b2:	30 e0       	ldi	r19, 0x00	; 0
    28b4:	40 e8       	ldi	r20, 0x80	; 128
    28b6:	5f e3       	ldi	r21, 0x3F	; 63
    28b8:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    28bc:	88 23       	and	r24, r24
    28be:	2c f4       	brge	.+10     	; 0x28ca <HLCD8_voidSendCommand+0x8e>
		__ticks = 1;
    28c0:	81 e0       	ldi	r24, 0x01	; 1
    28c2:	90 e0       	ldi	r25, 0x00	; 0
    28c4:	9e 83       	std	Y+6, r25	; 0x06
    28c6:	8d 83       	std	Y+5, r24	; 0x05
    28c8:	3f c0       	rjmp	.+126    	; 0x2948 <HLCD8_voidSendCommand+0x10c>
	else if (__tmp > 65535)
    28ca:	6f 81       	ldd	r22, Y+7	; 0x07
    28cc:	78 85       	ldd	r23, Y+8	; 0x08
    28ce:	89 85       	ldd	r24, Y+9	; 0x09
    28d0:	9a 85       	ldd	r25, Y+10	; 0x0a
    28d2:	20 e0       	ldi	r18, 0x00	; 0
    28d4:	3f ef       	ldi	r19, 0xFF	; 255
    28d6:	4f e7       	ldi	r20, 0x7F	; 127
    28d8:	57 e4       	ldi	r21, 0x47	; 71
    28da:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    28de:	18 16       	cp	r1, r24
    28e0:	4c f5       	brge	.+82     	; 0x2934 <HLCD8_voidSendCommand+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    28e2:	6b 85       	ldd	r22, Y+11	; 0x0b
    28e4:	7c 85       	ldd	r23, Y+12	; 0x0c
    28e6:	8d 85       	ldd	r24, Y+13	; 0x0d
    28e8:	9e 85       	ldd	r25, Y+14	; 0x0e
    28ea:	20 e0       	ldi	r18, 0x00	; 0
    28ec:	30 e0       	ldi	r19, 0x00	; 0
    28ee:	40 e2       	ldi	r20, 0x20	; 32
    28f0:	51 e4       	ldi	r21, 0x41	; 65
    28f2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    28f6:	dc 01       	movw	r26, r24
    28f8:	cb 01       	movw	r24, r22
    28fa:	bc 01       	movw	r22, r24
    28fc:	cd 01       	movw	r24, r26
    28fe:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2902:	dc 01       	movw	r26, r24
    2904:	cb 01       	movw	r24, r22
    2906:	9e 83       	std	Y+6, r25	; 0x06
    2908:	8d 83       	std	Y+5, r24	; 0x05
    290a:	0f c0       	rjmp	.+30     	; 0x292a <HLCD8_voidSendCommand+0xee>
    290c:	88 ec       	ldi	r24, 0xC8	; 200
    290e:	90 e0       	ldi	r25, 0x00	; 0
    2910:	9c 83       	std	Y+4, r25	; 0x04
    2912:	8b 83       	std	Y+3, r24	; 0x03
    2914:	8b 81       	ldd	r24, Y+3	; 0x03
    2916:	9c 81       	ldd	r25, Y+4	; 0x04
    2918:	01 97       	sbiw	r24, 0x01	; 1
    291a:	f1 f7       	brne	.-4      	; 0x2918 <HLCD8_voidSendCommand+0xdc>
    291c:	9c 83       	std	Y+4, r25	; 0x04
    291e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2920:	8d 81       	ldd	r24, Y+5	; 0x05
    2922:	9e 81       	ldd	r25, Y+6	; 0x06
    2924:	01 97       	sbiw	r24, 0x01	; 1
    2926:	9e 83       	std	Y+6, r25	; 0x06
    2928:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    292a:	8d 81       	ldd	r24, Y+5	; 0x05
    292c:	9e 81       	ldd	r25, Y+6	; 0x06
    292e:	00 97       	sbiw	r24, 0x00	; 0
    2930:	69 f7       	brne	.-38     	; 0x290c <HLCD8_voidSendCommand+0xd0>
    2932:	14 c0       	rjmp	.+40     	; 0x295c <HLCD8_voidSendCommand+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2934:	6f 81       	ldd	r22, Y+7	; 0x07
    2936:	78 85       	ldd	r23, Y+8	; 0x08
    2938:	89 85       	ldd	r24, Y+9	; 0x09
    293a:	9a 85       	ldd	r25, Y+10	; 0x0a
    293c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2940:	dc 01       	movw	r26, r24
    2942:	cb 01       	movw	r24, r22
    2944:	9e 83       	std	Y+6, r25	; 0x06
    2946:	8d 83       	std	Y+5, r24	; 0x05
    2948:	8d 81       	ldd	r24, Y+5	; 0x05
    294a:	9e 81       	ldd	r25, Y+6	; 0x06
    294c:	9a 83       	std	Y+2, r25	; 0x02
    294e:	89 83       	std	Y+1, r24	; 0x01
    2950:	89 81       	ldd	r24, Y+1	; 0x01
    2952:	9a 81       	ldd	r25, Y+2	; 0x02
    2954:	01 97       	sbiw	r24, 0x01	; 1
    2956:	f1 f7       	brne	.-4      	; 0x2954 <HLCD8_voidSendCommand+0x118>
    2958:	9a 83       	std	Y+2, r25	; 0x02
    295a:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(2);
    MDIO_voidSetPinValue(LCD_CONTROL_PORT,E_PIN,PIN_LOW);
    295c:	82 e0       	ldi	r24, 0x02	; 2
    295e:	62 e0       	ldi	r22, 0x02	; 2
    2960:	40 e0       	ldi	r20, 0x00	; 0
    2962:	0e 94 1e 07 	call	0xe3c	; 0xe3c <MDIO_voidSetPinValue>
}
    2966:	2f 96       	adiw	r28, 0x0f	; 15
    2968:	0f b6       	in	r0, 0x3f	; 63
    296a:	f8 94       	cli
    296c:	de bf       	out	0x3e, r29	; 62
    296e:	0f be       	out	0x3f, r0	; 63
    2970:	cd bf       	out	0x3d, r28	; 61
    2972:	cf 91       	pop	r28
    2974:	df 91       	pop	r29
    2976:	08 95       	ret

00002978 <HLCD8_voidSendData>:


void HLCD8_voidSendData(u8 A_u8Data)
{
    2978:	df 93       	push	r29
    297a:	cf 93       	push	r28
    297c:	cd b7       	in	r28, 0x3d	; 61
    297e:	de b7       	in	r29, 0x3e	; 62
    2980:	2f 97       	sbiw	r28, 0x0f	; 15
    2982:	0f b6       	in	r0, 0x3f	; 63
    2984:	f8 94       	cli
    2986:	de bf       	out	0x3e, r29	; 62
    2988:	0f be       	out	0x3f, r0	; 63
    298a:	cd bf       	out	0x3d, r28	; 61
    298c:	8f 87       	std	Y+15, r24	; 0x0f
    //RS=1 RW=0
    MDIO_voidSetPinValue(LCD_CONTROL_PORT,RS_PIN,PIN_HIGH);
    298e:	82 e0       	ldi	r24, 0x02	; 2
    2990:	60 e0       	ldi	r22, 0x00	; 0
    2992:	41 e0       	ldi	r20, 0x01	; 1
    2994:	0e 94 1e 07 	call	0xe3c	; 0xe3c <MDIO_voidSetPinValue>
    MDIO_voidSetPinValue(LCD_CONTROL_PORT,RW_PIN,PIN_LOW);
    2998:	82 e0       	ldi	r24, 0x02	; 2
    299a:	61 e0       	ldi	r22, 0x01	; 1
    299c:	40 e0       	ldi	r20, 0x00	; 0
    299e:	0e 94 1e 07 	call	0xe3c	; 0xe3c <MDIO_voidSetPinValue>

    MDIO_voidSetPortValue(LCD_DATA_PORT,A_u8Data);
    29a2:	83 e0       	ldi	r24, 0x03	; 3
    29a4:	6f 85       	ldd	r22, Y+15	; 0x0f
    29a6:	0e 94 4a 09 	call	0x1294	; 0x1294 <MDIO_voidSetPortValue>

    MDIO_voidSetPinValue(LCD_CONTROL_PORT,E_PIN,PIN_HIGH);
    29aa:	82 e0       	ldi	r24, 0x02	; 2
    29ac:	62 e0       	ldi	r22, 0x02	; 2
    29ae:	41 e0       	ldi	r20, 0x01	; 1
    29b0:	0e 94 1e 07 	call	0xe3c	; 0xe3c <MDIO_voidSetPinValue>
    29b4:	80 e0       	ldi	r24, 0x00	; 0
    29b6:	90 e0       	ldi	r25, 0x00	; 0
    29b8:	a0 e0       	ldi	r26, 0x00	; 0
    29ba:	b0 e4       	ldi	r27, 0x40	; 64
    29bc:	8b 87       	std	Y+11, r24	; 0x0b
    29be:	9c 87       	std	Y+12, r25	; 0x0c
    29c0:	ad 87       	std	Y+13, r26	; 0x0d
    29c2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    29c4:	6b 85       	ldd	r22, Y+11	; 0x0b
    29c6:	7c 85       	ldd	r23, Y+12	; 0x0c
    29c8:	8d 85       	ldd	r24, Y+13	; 0x0d
    29ca:	9e 85       	ldd	r25, Y+14	; 0x0e
    29cc:	20 e0       	ldi	r18, 0x00	; 0
    29ce:	30 e0       	ldi	r19, 0x00	; 0
    29d0:	4a ef       	ldi	r20, 0xFA	; 250
    29d2:	54 e4       	ldi	r21, 0x44	; 68
    29d4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    29d8:	dc 01       	movw	r26, r24
    29da:	cb 01       	movw	r24, r22
    29dc:	8f 83       	std	Y+7, r24	; 0x07
    29de:	98 87       	std	Y+8, r25	; 0x08
    29e0:	a9 87       	std	Y+9, r26	; 0x09
    29e2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    29e4:	6f 81       	ldd	r22, Y+7	; 0x07
    29e6:	78 85       	ldd	r23, Y+8	; 0x08
    29e8:	89 85       	ldd	r24, Y+9	; 0x09
    29ea:	9a 85       	ldd	r25, Y+10	; 0x0a
    29ec:	20 e0       	ldi	r18, 0x00	; 0
    29ee:	30 e0       	ldi	r19, 0x00	; 0
    29f0:	40 e8       	ldi	r20, 0x80	; 128
    29f2:	5f e3       	ldi	r21, 0x3F	; 63
    29f4:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    29f8:	88 23       	and	r24, r24
    29fa:	2c f4       	brge	.+10     	; 0x2a06 <HLCD8_voidSendData+0x8e>
		__ticks = 1;
    29fc:	81 e0       	ldi	r24, 0x01	; 1
    29fe:	90 e0       	ldi	r25, 0x00	; 0
    2a00:	9e 83       	std	Y+6, r25	; 0x06
    2a02:	8d 83       	std	Y+5, r24	; 0x05
    2a04:	3f c0       	rjmp	.+126    	; 0x2a84 <HLCD8_voidSendData+0x10c>
	else if (__tmp > 65535)
    2a06:	6f 81       	ldd	r22, Y+7	; 0x07
    2a08:	78 85       	ldd	r23, Y+8	; 0x08
    2a0a:	89 85       	ldd	r24, Y+9	; 0x09
    2a0c:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a0e:	20 e0       	ldi	r18, 0x00	; 0
    2a10:	3f ef       	ldi	r19, 0xFF	; 255
    2a12:	4f e7       	ldi	r20, 0x7F	; 127
    2a14:	57 e4       	ldi	r21, 0x47	; 71
    2a16:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2a1a:	18 16       	cp	r1, r24
    2a1c:	4c f5       	brge	.+82     	; 0x2a70 <HLCD8_voidSendData+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a1e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2a20:	7c 85       	ldd	r23, Y+12	; 0x0c
    2a22:	8d 85       	ldd	r24, Y+13	; 0x0d
    2a24:	9e 85       	ldd	r25, Y+14	; 0x0e
    2a26:	20 e0       	ldi	r18, 0x00	; 0
    2a28:	30 e0       	ldi	r19, 0x00	; 0
    2a2a:	40 e2       	ldi	r20, 0x20	; 32
    2a2c:	51 e4       	ldi	r21, 0x41	; 65
    2a2e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2a32:	dc 01       	movw	r26, r24
    2a34:	cb 01       	movw	r24, r22
    2a36:	bc 01       	movw	r22, r24
    2a38:	cd 01       	movw	r24, r26
    2a3a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2a3e:	dc 01       	movw	r26, r24
    2a40:	cb 01       	movw	r24, r22
    2a42:	9e 83       	std	Y+6, r25	; 0x06
    2a44:	8d 83       	std	Y+5, r24	; 0x05
    2a46:	0f c0       	rjmp	.+30     	; 0x2a66 <HLCD8_voidSendData+0xee>
    2a48:	88 ec       	ldi	r24, 0xC8	; 200
    2a4a:	90 e0       	ldi	r25, 0x00	; 0
    2a4c:	9c 83       	std	Y+4, r25	; 0x04
    2a4e:	8b 83       	std	Y+3, r24	; 0x03
    2a50:	8b 81       	ldd	r24, Y+3	; 0x03
    2a52:	9c 81       	ldd	r25, Y+4	; 0x04
    2a54:	01 97       	sbiw	r24, 0x01	; 1
    2a56:	f1 f7       	brne	.-4      	; 0x2a54 <HLCD8_voidSendData+0xdc>
    2a58:	9c 83       	std	Y+4, r25	; 0x04
    2a5a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a5c:	8d 81       	ldd	r24, Y+5	; 0x05
    2a5e:	9e 81       	ldd	r25, Y+6	; 0x06
    2a60:	01 97       	sbiw	r24, 0x01	; 1
    2a62:	9e 83       	std	Y+6, r25	; 0x06
    2a64:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a66:	8d 81       	ldd	r24, Y+5	; 0x05
    2a68:	9e 81       	ldd	r25, Y+6	; 0x06
    2a6a:	00 97       	sbiw	r24, 0x00	; 0
    2a6c:	69 f7       	brne	.-38     	; 0x2a48 <HLCD8_voidSendData+0xd0>
    2a6e:	14 c0       	rjmp	.+40     	; 0x2a98 <HLCD8_voidSendData+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a70:	6f 81       	ldd	r22, Y+7	; 0x07
    2a72:	78 85       	ldd	r23, Y+8	; 0x08
    2a74:	89 85       	ldd	r24, Y+9	; 0x09
    2a76:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a78:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2a7c:	dc 01       	movw	r26, r24
    2a7e:	cb 01       	movw	r24, r22
    2a80:	9e 83       	std	Y+6, r25	; 0x06
    2a82:	8d 83       	std	Y+5, r24	; 0x05
    2a84:	8d 81       	ldd	r24, Y+5	; 0x05
    2a86:	9e 81       	ldd	r25, Y+6	; 0x06
    2a88:	9a 83       	std	Y+2, r25	; 0x02
    2a8a:	89 83       	std	Y+1, r24	; 0x01
    2a8c:	89 81       	ldd	r24, Y+1	; 0x01
    2a8e:	9a 81       	ldd	r25, Y+2	; 0x02
    2a90:	01 97       	sbiw	r24, 0x01	; 1
    2a92:	f1 f7       	brne	.-4      	; 0x2a90 <HLCD8_voidSendData+0x118>
    2a94:	9a 83       	std	Y+2, r25	; 0x02
    2a96:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(2);
    MDIO_voidSetPinValue(LCD_CONTROL_PORT,E_PIN,PIN_LOW);
    2a98:	82 e0       	ldi	r24, 0x02	; 2
    2a9a:	62 e0       	ldi	r22, 0x02	; 2
    2a9c:	40 e0       	ldi	r20, 0x00	; 0
    2a9e:	0e 94 1e 07 	call	0xe3c	; 0xe3c <MDIO_voidSetPinValue>
}
    2aa2:	2f 96       	adiw	r28, 0x0f	; 15
    2aa4:	0f b6       	in	r0, 0x3f	; 63
    2aa6:	f8 94       	cli
    2aa8:	de bf       	out	0x3e, r29	; 62
    2aaa:	0f be       	out	0x3f, r0	; 63
    2aac:	cd bf       	out	0x3d, r28	; 61
    2aae:	cf 91       	pop	r28
    2ab0:	df 91       	pop	r29
    2ab2:	08 95       	ret

00002ab4 <HLCD8_voidInit>:


void HLCD8_voidInit()
{
    2ab4:	df 93       	push	r29
    2ab6:	cf 93       	push	r28
    2ab8:	cd b7       	in	r28, 0x3d	; 61
    2aba:	de b7       	in	r29, 0x3e	; 62
    2abc:	e8 97       	sbiw	r28, 0x38	; 56
    2abe:	0f b6       	in	r0, 0x3f	; 63
    2ac0:	f8 94       	cli
    2ac2:	de bf       	out	0x3e, r29	; 62
    2ac4:	0f be       	out	0x3f, r0	; 63
    2ac6:	cd bf       	out	0x3d, r28	; 61
    2ac8:	80 e0       	ldi	r24, 0x00	; 0
    2aca:	90 e0       	ldi	r25, 0x00	; 0
    2acc:	a0 ef       	ldi	r26, 0xF0	; 240
    2ace:	b1 e4       	ldi	r27, 0x41	; 65
    2ad0:	8d ab       	std	Y+53, r24	; 0x35
    2ad2:	9e ab       	std	Y+54, r25	; 0x36
    2ad4:	af ab       	std	Y+55, r26	; 0x37
    2ad6:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2ad8:	6d a9       	ldd	r22, Y+53	; 0x35
    2ada:	7e a9       	ldd	r23, Y+54	; 0x36
    2adc:	8f a9       	ldd	r24, Y+55	; 0x37
    2ade:	98 ad       	ldd	r25, Y+56	; 0x38
    2ae0:	20 e0       	ldi	r18, 0x00	; 0
    2ae2:	30 e0       	ldi	r19, 0x00	; 0
    2ae4:	4a ef       	ldi	r20, 0xFA	; 250
    2ae6:	54 e4       	ldi	r21, 0x44	; 68
    2ae8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2aec:	dc 01       	movw	r26, r24
    2aee:	cb 01       	movw	r24, r22
    2af0:	89 ab       	std	Y+49, r24	; 0x31
    2af2:	9a ab       	std	Y+50, r25	; 0x32
    2af4:	ab ab       	std	Y+51, r26	; 0x33
    2af6:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2af8:	69 a9       	ldd	r22, Y+49	; 0x31
    2afa:	7a a9       	ldd	r23, Y+50	; 0x32
    2afc:	8b a9       	ldd	r24, Y+51	; 0x33
    2afe:	9c a9       	ldd	r25, Y+52	; 0x34
    2b00:	20 e0       	ldi	r18, 0x00	; 0
    2b02:	30 e0       	ldi	r19, 0x00	; 0
    2b04:	40 e8       	ldi	r20, 0x80	; 128
    2b06:	5f e3       	ldi	r21, 0x3F	; 63
    2b08:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2b0c:	88 23       	and	r24, r24
    2b0e:	2c f4       	brge	.+10     	; 0x2b1a <HLCD8_voidInit+0x66>
		__ticks = 1;
    2b10:	81 e0       	ldi	r24, 0x01	; 1
    2b12:	90 e0       	ldi	r25, 0x00	; 0
    2b14:	98 ab       	std	Y+48, r25	; 0x30
    2b16:	8f a7       	std	Y+47, r24	; 0x2f
    2b18:	3f c0       	rjmp	.+126    	; 0x2b98 <HLCD8_voidInit+0xe4>
	else if (__tmp > 65535)
    2b1a:	69 a9       	ldd	r22, Y+49	; 0x31
    2b1c:	7a a9       	ldd	r23, Y+50	; 0x32
    2b1e:	8b a9       	ldd	r24, Y+51	; 0x33
    2b20:	9c a9       	ldd	r25, Y+52	; 0x34
    2b22:	20 e0       	ldi	r18, 0x00	; 0
    2b24:	3f ef       	ldi	r19, 0xFF	; 255
    2b26:	4f e7       	ldi	r20, 0x7F	; 127
    2b28:	57 e4       	ldi	r21, 0x47	; 71
    2b2a:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2b2e:	18 16       	cp	r1, r24
    2b30:	4c f5       	brge	.+82     	; 0x2b84 <HLCD8_voidInit+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b32:	6d a9       	ldd	r22, Y+53	; 0x35
    2b34:	7e a9       	ldd	r23, Y+54	; 0x36
    2b36:	8f a9       	ldd	r24, Y+55	; 0x37
    2b38:	98 ad       	ldd	r25, Y+56	; 0x38
    2b3a:	20 e0       	ldi	r18, 0x00	; 0
    2b3c:	30 e0       	ldi	r19, 0x00	; 0
    2b3e:	40 e2       	ldi	r20, 0x20	; 32
    2b40:	51 e4       	ldi	r21, 0x41	; 65
    2b42:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2b46:	dc 01       	movw	r26, r24
    2b48:	cb 01       	movw	r24, r22
    2b4a:	bc 01       	movw	r22, r24
    2b4c:	cd 01       	movw	r24, r26
    2b4e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2b52:	dc 01       	movw	r26, r24
    2b54:	cb 01       	movw	r24, r22
    2b56:	98 ab       	std	Y+48, r25	; 0x30
    2b58:	8f a7       	std	Y+47, r24	; 0x2f
    2b5a:	0f c0       	rjmp	.+30     	; 0x2b7a <HLCD8_voidInit+0xc6>
    2b5c:	88 ec       	ldi	r24, 0xC8	; 200
    2b5e:	90 e0       	ldi	r25, 0x00	; 0
    2b60:	9e a7       	std	Y+46, r25	; 0x2e
    2b62:	8d a7       	std	Y+45, r24	; 0x2d
    2b64:	8d a5       	ldd	r24, Y+45	; 0x2d
    2b66:	9e a5       	ldd	r25, Y+46	; 0x2e
    2b68:	01 97       	sbiw	r24, 0x01	; 1
    2b6a:	f1 f7       	brne	.-4      	; 0x2b68 <HLCD8_voidInit+0xb4>
    2b6c:	9e a7       	std	Y+46, r25	; 0x2e
    2b6e:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b70:	8f a5       	ldd	r24, Y+47	; 0x2f
    2b72:	98 a9       	ldd	r25, Y+48	; 0x30
    2b74:	01 97       	sbiw	r24, 0x01	; 1
    2b76:	98 ab       	std	Y+48, r25	; 0x30
    2b78:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b7a:	8f a5       	ldd	r24, Y+47	; 0x2f
    2b7c:	98 a9       	ldd	r25, Y+48	; 0x30
    2b7e:	00 97       	sbiw	r24, 0x00	; 0
    2b80:	69 f7       	brne	.-38     	; 0x2b5c <HLCD8_voidInit+0xa8>
    2b82:	14 c0       	rjmp	.+40     	; 0x2bac <HLCD8_voidInit+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b84:	69 a9       	ldd	r22, Y+49	; 0x31
    2b86:	7a a9       	ldd	r23, Y+50	; 0x32
    2b88:	8b a9       	ldd	r24, Y+51	; 0x33
    2b8a:	9c a9       	ldd	r25, Y+52	; 0x34
    2b8c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2b90:	dc 01       	movw	r26, r24
    2b92:	cb 01       	movw	r24, r22
    2b94:	98 ab       	std	Y+48, r25	; 0x30
    2b96:	8f a7       	std	Y+47, r24	; 0x2f
    2b98:	8f a5       	ldd	r24, Y+47	; 0x2f
    2b9a:	98 a9       	ldd	r25, Y+48	; 0x30
    2b9c:	9c a7       	std	Y+44, r25	; 0x2c
    2b9e:	8b a7       	std	Y+43, r24	; 0x2b
    2ba0:	8b a5       	ldd	r24, Y+43	; 0x2b
    2ba2:	9c a5       	ldd	r25, Y+44	; 0x2c
    2ba4:	01 97       	sbiw	r24, 0x01	; 1
    2ba6:	f1 f7       	brne	.-4      	; 0x2ba4 <HLCD8_voidInit+0xf0>
    2ba8:	9c a7       	std	Y+44, r25	; 0x2c
    2baa:	8b a7       	std	Y+43, r24	; 0x2b
    _delay_ms(30);
    HLCD8_voidSendCommand(FUNCTION_SET);
    2bac:	88 e3       	ldi	r24, 0x38	; 56
    2bae:	0e 94 1e 14 	call	0x283c	; 0x283c <HLCD8_voidSendCommand>
    2bb2:	80 e0       	ldi	r24, 0x00	; 0
    2bb4:	90 e0       	ldi	r25, 0x00	; 0
    2bb6:	a0 e8       	ldi	r26, 0x80	; 128
    2bb8:	bf e3       	ldi	r27, 0x3F	; 63
    2bba:	8f a3       	std	Y+39, r24	; 0x27
    2bbc:	98 a7       	std	Y+40, r25	; 0x28
    2bbe:	a9 a7       	std	Y+41, r26	; 0x29
    2bc0:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2bc2:	6f a1       	ldd	r22, Y+39	; 0x27
    2bc4:	78 a5       	ldd	r23, Y+40	; 0x28
    2bc6:	89 a5       	ldd	r24, Y+41	; 0x29
    2bc8:	9a a5       	ldd	r25, Y+42	; 0x2a
    2bca:	20 e0       	ldi	r18, 0x00	; 0
    2bcc:	30 e0       	ldi	r19, 0x00	; 0
    2bce:	4a ef       	ldi	r20, 0xFA	; 250
    2bd0:	54 e4       	ldi	r21, 0x44	; 68
    2bd2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2bd6:	dc 01       	movw	r26, r24
    2bd8:	cb 01       	movw	r24, r22
    2bda:	8b a3       	std	Y+35, r24	; 0x23
    2bdc:	9c a3       	std	Y+36, r25	; 0x24
    2bde:	ad a3       	std	Y+37, r26	; 0x25
    2be0:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2be2:	6b a1       	ldd	r22, Y+35	; 0x23
    2be4:	7c a1       	ldd	r23, Y+36	; 0x24
    2be6:	8d a1       	ldd	r24, Y+37	; 0x25
    2be8:	9e a1       	ldd	r25, Y+38	; 0x26
    2bea:	20 e0       	ldi	r18, 0x00	; 0
    2bec:	30 e0       	ldi	r19, 0x00	; 0
    2bee:	40 e8       	ldi	r20, 0x80	; 128
    2bf0:	5f e3       	ldi	r21, 0x3F	; 63
    2bf2:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2bf6:	88 23       	and	r24, r24
    2bf8:	2c f4       	brge	.+10     	; 0x2c04 <HLCD8_voidInit+0x150>
		__ticks = 1;
    2bfa:	81 e0       	ldi	r24, 0x01	; 1
    2bfc:	90 e0       	ldi	r25, 0x00	; 0
    2bfe:	9a a3       	std	Y+34, r25	; 0x22
    2c00:	89 a3       	std	Y+33, r24	; 0x21
    2c02:	3f c0       	rjmp	.+126    	; 0x2c82 <HLCD8_voidInit+0x1ce>
	else if (__tmp > 65535)
    2c04:	6b a1       	ldd	r22, Y+35	; 0x23
    2c06:	7c a1       	ldd	r23, Y+36	; 0x24
    2c08:	8d a1       	ldd	r24, Y+37	; 0x25
    2c0a:	9e a1       	ldd	r25, Y+38	; 0x26
    2c0c:	20 e0       	ldi	r18, 0x00	; 0
    2c0e:	3f ef       	ldi	r19, 0xFF	; 255
    2c10:	4f e7       	ldi	r20, 0x7F	; 127
    2c12:	57 e4       	ldi	r21, 0x47	; 71
    2c14:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2c18:	18 16       	cp	r1, r24
    2c1a:	4c f5       	brge	.+82     	; 0x2c6e <HLCD8_voidInit+0x1ba>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c1c:	6f a1       	ldd	r22, Y+39	; 0x27
    2c1e:	78 a5       	ldd	r23, Y+40	; 0x28
    2c20:	89 a5       	ldd	r24, Y+41	; 0x29
    2c22:	9a a5       	ldd	r25, Y+42	; 0x2a
    2c24:	20 e0       	ldi	r18, 0x00	; 0
    2c26:	30 e0       	ldi	r19, 0x00	; 0
    2c28:	40 e2       	ldi	r20, 0x20	; 32
    2c2a:	51 e4       	ldi	r21, 0x41	; 65
    2c2c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2c30:	dc 01       	movw	r26, r24
    2c32:	cb 01       	movw	r24, r22
    2c34:	bc 01       	movw	r22, r24
    2c36:	cd 01       	movw	r24, r26
    2c38:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2c3c:	dc 01       	movw	r26, r24
    2c3e:	cb 01       	movw	r24, r22
    2c40:	9a a3       	std	Y+34, r25	; 0x22
    2c42:	89 a3       	std	Y+33, r24	; 0x21
    2c44:	0f c0       	rjmp	.+30     	; 0x2c64 <HLCD8_voidInit+0x1b0>
    2c46:	88 ec       	ldi	r24, 0xC8	; 200
    2c48:	90 e0       	ldi	r25, 0x00	; 0
    2c4a:	98 a3       	std	Y+32, r25	; 0x20
    2c4c:	8f 8f       	std	Y+31, r24	; 0x1f
    2c4e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2c50:	98 a1       	ldd	r25, Y+32	; 0x20
    2c52:	01 97       	sbiw	r24, 0x01	; 1
    2c54:	f1 f7       	brne	.-4      	; 0x2c52 <HLCD8_voidInit+0x19e>
    2c56:	98 a3       	std	Y+32, r25	; 0x20
    2c58:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c5a:	89 a1       	ldd	r24, Y+33	; 0x21
    2c5c:	9a a1       	ldd	r25, Y+34	; 0x22
    2c5e:	01 97       	sbiw	r24, 0x01	; 1
    2c60:	9a a3       	std	Y+34, r25	; 0x22
    2c62:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c64:	89 a1       	ldd	r24, Y+33	; 0x21
    2c66:	9a a1       	ldd	r25, Y+34	; 0x22
    2c68:	00 97       	sbiw	r24, 0x00	; 0
    2c6a:	69 f7       	brne	.-38     	; 0x2c46 <HLCD8_voidInit+0x192>
    2c6c:	14 c0       	rjmp	.+40     	; 0x2c96 <HLCD8_voidInit+0x1e2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c6e:	6b a1       	ldd	r22, Y+35	; 0x23
    2c70:	7c a1       	ldd	r23, Y+36	; 0x24
    2c72:	8d a1       	ldd	r24, Y+37	; 0x25
    2c74:	9e a1       	ldd	r25, Y+38	; 0x26
    2c76:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2c7a:	dc 01       	movw	r26, r24
    2c7c:	cb 01       	movw	r24, r22
    2c7e:	9a a3       	std	Y+34, r25	; 0x22
    2c80:	89 a3       	std	Y+33, r24	; 0x21
    2c82:	89 a1       	ldd	r24, Y+33	; 0x21
    2c84:	9a a1       	ldd	r25, Y+34	; 0x22
    2c86:	9e 8f       	std	Y+30, r25	; 0x1e
    2c88:	8d 8f       	std	Y+29, r24	; 0x1d
    2c8a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2c8c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2c8e:	01 97       	sbiw	r24, 0x01	; 1
    2c90:	f1 f7       	brne	.-4      	; 0x2c8e <HLCD8_voidInit+0x1da>
    2c92:	9e 8f       	std	Y+30, r25	; 0x1e
    2c94:	8d 8f       	std	Y+29, r24	; 0x1d
    _delay_ms(1);
    HLCD8_voidSendCommand(ON_OFF_CONTROL);
    2c96:	8c e0       	ldi	r24, 0x0C	; 12
    2c98:	0e 94 1e 14 	call	0x283c	; 0x283c <HLCD8_voidSendCommand>
    2c9c:	80 e0       	ldi	r24, 0x00	; 0
    2c9e:	90 e0       	ldi	r25, 0x00	; 0
    2ca0:	a0 e8       	ldi	r26, 0x80	; 128
    2ca2:	bf e3       	ldi	r27, 0x3F	; 63
    2ca4:	89 8f       	std	Y+25, r24	; 0x19
    2ca6:	9a 8f       	std	Y+26, r25	; 0x1a
    2ca8:	ab 8f       	std	Y+27, r26	; 0x1b
    2caa:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2cac:	69 8d       	ldd	r22, Y+25	; 0x19
    2cae:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2cb0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2cb2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2cb4:	20 e0       	ldi	r18, 0x00	; 0
    2cb6:	30 e0       	ldi	r19, 0x00	; 0
    2cb8:	4a ef       	ldi	r20, 0xFA	; 250
    2cba:	54 e4       	ldi	r21, 0x44	; 68
    2cbc:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2cc0:	dc 01       	movw	r26, r24
    2cc2:	cb 01       	movw	r24, r22
    2cc4:	8d 8b       	std	Y+21, r24	; 0x15
    2cc6:	9e 8b       	std	Y+22, r25	; 0x16
    2cc8:	af 8b       	std	Y+23, r26	; 0x17
    2cca:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2ccc:	6d 89       	ldd	r22, Y+21	; 0x15
    2cce:	7e 89       	ldd	r23, Y+22	; 0x16
    2cd0:	8f 89       	ldd	r24, Y+23	; 0x17
    2cd2:	98 8d       	ldd	r25, Y+24	; 0x18
    2cd4:	20 e0       	ldi	r18, 0x00	; 0
    2cd6:	30 e0       	ldi	r19, 0x00	; 0
    2cd8:	40 e8       	ldi	r20, 0x80	; 128
    2cda:	5f e3       	ldi	r21, 0x3F	; 63
    2cdc:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2ce0:	88 23       	and	r24, r24
    2ce2:	2c f4       	brge	.+10     	; 0x2cee <HLCD8_voidInit+0x23a>
		__ticks = 1;
    2ce4:	81 e0       	ldi	r24, 0x01	; 1
    2ce6:	90 e0       	ldi	r25, 0x00	; 0
    2ce8:	9c 8b       	std	Y+20, r25	; 0x14
    2cea:	8b 8b       	std	Y+19, r24	; 0x13
    2cec:	3f c0       	rjmp	.+126    	; 0x2d6c <HLCD8_voidInit+0x2b8>
	else if (__tmp > 65535)
    2cee:	6d 89       	ldd	r22, Y+21	; 0x15
    2cf0:	7e 89       	ldd	r23, Y+22	; 0x16
    2cf2:	8f 89       	ldd	r24, Y+23	; 0x17
    2cf4:	98 8d       	ldd	r25, Y+24	; 0x18
    2cf6:	20 e0       	ldi	r18, 0x00	; 0
    2cf8:	3f ef       	ldi	r19, 0xFF	; 255
    2cfa:	4f e7       	ldi	r20, 0x7F	; 127
    2cfc:	57 e4       	ldi	r21, 0x47	; 71
    2cfe:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2d02:	18 16       	cp	r1, r24
    2d04:	4c f5       	brge	.+82     	; 0x2d58 <HLCD8_voidInit+0x2a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d06:	69 8d       	ldd	r22, Y+25	; 0x19
    2d08:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2d0a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2d0c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2d0e:	20 e0       	ldi	r18, 0x00	; 0
    2d10:	30 e0       	ldi	r19, 0x00	; 0
    2d12:	40 e2       	ldi	r20, 0x20	; 32
    2d14:	51 e4       	ldi	r21, 0x41	; 65
    2d16:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2d1a:	dc 01       	movw	r26, r24
    2d1c:	cb 01       	movw	r24, r22
    2d1e:	bc 01       	movw	r22, r24
    2d20:	cd 01       	movw	r24, r26
    2d22:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2d26:	dc 01       	movw	r26, r24
    2d28:	cb 01       	movw	r24, r22
    2d2a:	9c 8b       	std	Y+20, r25	; 0x14
    2d2c:	8b 8b       	std	Y+19, r24	; 0x13
    2d2e:	0f c0       	rjmp	.+30     	; 0x2d4e <HLCD8_voidInit+0x29a>
    2d30:	88 ec       	ldi	r24, 0xC8	; 200
    2d32:	90 e0       	ldi	r25, 0x00	; 0
    2d34:	9a 8b       	std	Y+18, r25	; 0x12
    2d36:	89 8b       	std	Y+17, r24	; 0x11
    2d38:	89 89       	ldd	r24, Y+17	; 0x11
    2d3a:	9a 89       	ldd	r25, Y+18	; 0x12
    2d3c:	01 97       	sbiw	r24, 0x01	; 1
    2d3e:	f1 f7       	brne	.-4      	; 0x2d3c <HLCD8_voidInit+0x288>
    2d40:	9a 8b       	std	Y+18, r25	; 0x12
    2d42:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d44:	8b 89       	ldd	r24, Y+19	; 0x13
    2d46:	9c 89       	ldd	r25, Y+20	; 0x14
    2d48:	01 97       	sbiw	r24, 0x01	; 1
    2d4a:	9c 8b       	std	Y+20, r25	; 0x14
    2d4c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d4e:	8b 89       	ldd	r24, Y+19	; 0x13
    2d50:	9c 89       	ldd	r25, Y+20	; 0x14
    2d52:	00 97       	sbiw	r24, 0x00	; 0
    2d54:	69 f7       	brne	.-38     	; 0x2d30 <HLCD8_voidInit+0x27c>
    2d56:	14 c0       	rjmp	.+40     	; 0x2d80 <HLCD8_voidInit+0x2cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d58:	6d 89       	ldd	r22, Y+21	; 0x15
    2d5a:	7e 89       	ldd	r23, Y+22	; 0x16
    2d5c:	8f 89       	ldd	r24, Y+23	; 0x17
    2d5e:	98 8d       	ldd	r25, Y+24	; 0x18
    2d60:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2d64:	dc 01       	movw	r26, r24
    2d66:	cb 01       	movw	r24, r22
    2d68:	9c 8b       	std	Y+20, r25	; 0x14
    2d6a:	8b 8b       	std	Y+19, r24	; 0x13
    2d6c:	8b 89       	ldd	r24, Y+19	; 0x13
    2d6e:	9c 89       	ldd	r25, Y+20	; 0x14
    2d70:	98 8b       	std	Y+16, r25	; 0x10
    2d72:	8f 87       	std	Y+15, r24	; 0x0f
    2d74:	8f 85       	ldd	r24, Y+15	; 0x0f
    2d76:	98 89       	ldd	r25, Y+16	; 0x10
    2d78:	01 97       	sbiw	r24, 0x01	; 1
    2d7a:	f1 f7       	brne	.-4      	; 0x2d78 <HLCD8_voidInit+0x2c4>
    2d7c:	98 8b       	std	Y+16, r25	; 0x10
    2d7e:	8f 87       	std	Y+15, r24	; 0x0f
    _delay_ms(1);
    HLCD8_voidSendCommand(DISPLAY_CLEAR);
    2d80:	81 e0       	ldi	r24, 0x01	; 1
    2d82:	0e 94 1e 14 	call	0x283c	; 0x283c <HLCD8_voidSendCommand>
    2d86:	80 e0       	ldi	r24, 0x00	; 0
    2d88:	90 e0       	ldi	r25, 0x00	; 0
    2d8a:	a0 e0       	ldi	r26, 0x00	; 0
    2d8c:	b0 e4       	ldi	r27, 0x40	; 64
    2d8e:	8b 87       	std	Y+11, r24	; 0x0b
    2d90:	9c 87       	std	Y+12, r25	; 0x0c
    2d92:	ad 87       	std	Y+13, r26	; 0x0d
    2d94:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2d96:	6b 85       	ldd	r22, Y+11	; 0x0b
    2d98:	7c 85       	ldd	r23, Y+12	; 0x0c
    2d9a:	8d 85       	ldd	r24, Y+13	; 0x0d
    2d9c:	9e 85       	ldd	r25, Y+14	; 0x0e
    2d9e:	20 e0       	ldi	r18, 0x00	; 0
    2da0:	30 e0       	ldi	r19, 0x00	; 0
    2da2:	4a ef       	ldi	r20, 0xFA	; 250
    2da4:	54 e4       	ldi	r21, 0x44	; 68
    2da6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2daa:	dc 01       	movw	r26, r24
    2dac:	cb 01       	movw	r24, r22
    2dae:	8f 83       	std	Y+7, r24	; 0x07
    2db0:	98 87       	std	Y+8, r25	; 0x08
    2db2:	a9 87       	std	Y+9, r26	; 0x09
    2db4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2db6:	6f 81       	ldd	r22, Y+7	; 0x07
    2db8:	78 85       	ldd	r23, Y+8	; 0x08
    2dba:	89 85       	ldd	r24, Y+9	; 0x09
    2dbc:	9a 85       	ldd	r25, Y+10	; 0x0a
    2dbe:	20 e0       	ldi	r18, 0x00	; 0
    2dc0:	30 e0       	ldi	r19, 0x00	; 0
    2dc2:	40 e8       	ldi	r20, 0x80	; 128
    2dc4:	5f e3       	ldi	r21, 0x3F	; 63
    2dc6:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2dca:	88 23       	and	r24, r24
    2dcc:	2c f4       	brge	.+10     	; 0x2dd8 <HLCD8_voidInit+0x324>
		__ticks = 1;
    2dce:	81 e0       	ldi	r24, 0x01	; 1
    2dd0:	90 e0       	ldi	r25, 0x00	; 0
    2dd2:	9e 83       	std	Y+6, r25	; 0x06
    2dd4:	8d 83       	std	Y+5, r24	; 0x05
    2dd6:	3f c0       	rjmp	.+126    	; 0x2e56 <HLCD8_voidInit+0x3a2>
	else if (__tmp > 65535)
    2dd8:	6f 81       	ldd	r22, Y+7	; 0x07
    2dda:	78 85       	ldd	r23, Y+8	; 0x08
    2ddc:	89 85       	ldd	r24, Y+9	; 0x09
    2dde:	9a 85       	ldd	r25, Y+10	; 0x0a
    2de0:	20 e0       	ldi	r18, 0x00	; 0
    2de2:	3f ef       	ldi	r19, 0xFF	; 255
    2de4:	4f e7       	ldi	r20, 0x7F	; 127
    2de6:	57 e4       	ldi	r21, 0x47	; 71
    2de8:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2dec:	18 16       	cp	r1, r24
    2dee:	4c f5       	brge	.+82     	; 0x2e42 <HLCD8_voidInit+0x38e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2df0:	6b 85       	ldd	r22, Y+11	; 0x0b
    2df2:	7c 85       	ldd	r23, Y+12	; 0x0c
    2df4:	8d 85       	ldd	r24, Y+13	; 0x0d
    2df6:	9e 85       	ldd	r25, Y+14	; 0x0e
    2df8:	20 e0       	ldi	r18, 0x00	; 0
    2dfa:	30 e0       	ldi	r19, 0x00	; 0
    2dfc:	40 e2       	ldi	r20, 0x20	; 32
    2dfe:	51 e4       	ldi	r21, 0x41	; 65
    2e00:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2e04:	dc 01       	movw	r26, r24
    2e06:	cb 01       	movw	r24, r22
    2e08:	bc 01       	movw	r22, r24
    2e0a:	cd 01       	movw	r24, r26
    2e0c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2e10:	dc 01       	movw	r26, r24
    2e12:	cb 01       	movw	r24, r22
    2e14:	9e 83       	std	Y+6, r25	; 0x06
    2e16:	8d 83       	std	Y+5, r24	; 0x05
    2e18:	0f c0       	rjmp	.+30     	; 0x2e38 <HLCD8_voidInit+0x384>
    2e1a:	88 ec       	ldi	r24, 0xC8	; 200
    2e1c:	90 e0       	ldi	r25, 0x00	; 0
    2e1e:	9c 83       	std	Y+4, r25	; 0x04
    2e20:	8b 83       	std	Y+3, r24	; 0x03
    2e22:	8b 81       	ldd	r24, Y+3	; 0x03
    2e24:	9c 81       	ldd	r25, Y+4	; 0x04
    2e26:	01 97       	sbiw	r24, 0x01	; 1
    2e28:	f1 f7       	brne	.-4      	; 0x2e26 <HLCD8_voidInit+0x372>
    2e2a:	9c 83       	std	Y+4, r25	; 0x04
    2e2c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e2e:	8d 81       	ldd	r24, Y+5	; 0x05
    2e30:	9e 81       	ldd	r25, Y+6	; 0x06
    2e32:	01 97       	sbiw	r24, 0x01	; 1
    2e34:	9e 83       	std	Y+6, r25	; 0x06
    2e36:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e38:	8d 81       	ldd	r24, Y+5	; 0x05
    2e3a:	9e 81       	ldd	r25, Y+6	; 0x06
    2e3c:	00 97       	sbiw	r24, 0x00	; 0
    2e3e:	69 f7       	brne	.-38     	; 0x2e1a <HLCD8_voidInit+0x366>
    2e40:	14 c0       	rjmp	.+40     	; 0x2e6a <HLCD8_voidInit+0x3b6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2e42:	6f 81       	ldd	r22, Y+7	; 0x07
    2e44:	78 85       	ldd	r23, Y+8	; 0x08
    2e46:	89 85       	ldd	r24, Y+9	; 0x09
    2e48:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e4a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2e4e:	dc 01       	movw	r26, r24
    2e50:	cb 01       	movw	r24, r22
    2e52:	9e 83       	std	Y+6, r25	; 0x06
    2e54:	8d 83       	std	Y+5, r24	; 0x05
    2e56:	8d 81       	ldd	r24, Y+5	; 0x05
    2e58:	9e 81       	ldd	r25, Y+6	; 0x06
    2e5a:	9a 83       	std	Y+2, r25	; 0x02
    2e5c:	89 83       	std	Y+1, r24	; 0x01
    2e5e:	89 81       	ldd	r24, Y+1	; 0x01
    2e60:	9a 81       	ldd	r25, Y+2	; 0x02
    2e62:	01 97       	sbiw	r24, 0x01	; 1
    2e64:	f1 f7       	brne	.-4      	; 0x2e62 <HLCD8_voidInit+0x3ae>
    2e66:	9a 83       	std	Y+2, r25	; 0x02
    2e68:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(2);
    HLCD8_voidSendCommand(ENTRY_MODE_SET);
    2e6a:	86 e0       	ldi	r24, 0x06	; 6
    2e6c:	0e 94 1e 14 	call	0x283c	; 0x283c <HLCD8_voidSendCommand>
}
    2e70:	e8 96       	adiw	r28, 0x38	; 56
    2e72:	0f b6       	in	r0, 0x3f	; 63
    2e74:	f8 94       	cli
    2e76:	de bf       	out	0x3e, r29	; 62
    2e78:	0f be       	out	0x3f, r0	; 63
    2e7a:	cd bf       	out	0x3d, r28	; 61
    2e7c:	cf 91       	pop	r28
    2e7e:	df 91       	pop	r29
    2e80:	08 95       	ret

00002e82 <HLCD8_voidClearDisplay>:

void HLCD8_voidClearDisplay(void)
{
    2e82:	df 93       	push	r29
    2e84:	cf 93       	push	r28
    2e86:	cd b7       	in	r28, 0x3d	; 61
    2e88:	de b7       	in	r29, 0x3e	; 62
    2e8a:	2e 97       	sbiw	r28, 0x0e	; 14
    2e8c:	0f b6       	in	r0, 0x3f	; 63
    2e8e:	f8 94       	cli
    2e90:	de bf       	out	0x3e, r29	; 62
    2e92:	0f be       	out	0x3f, r0	; 63
    2e94:	cd bf       	out	0x3d, r28	; 61
    HLCD8_voidSendCommand(DISPLAY_CLEAR);
    2e96:	81 e0       	ldi	r24, 0x01	; 1
    2e98:	0e 94 1e 14 	call	0x283c	; 0x283c <HLCD8_voidSendCommand>
    2e9c:	80 e0       	ldi	r24, 0x00	; 0
    2e9e:	90 e0       	ldi	r25, 0x00	; 0
    2ea0:	a0 e0       	ldi	r26, 0x00	; 0
    2ea2:	b0 e4       	ldi	r27, 0x40	; 64
    2ea4:	8b 87       	std	Y+11, r24	; 0x0b
    2ea6:	9c 87       	std	Y+12, r25	; 0x0c
    2ea8:	ad 87       	std	Y+13, r26	; 0x0d
    2eaa:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2eac:	6b 85       	ldd	r22, Y+11	; 0x0b
    2eae:	7c 85       	ldd	r23, Y+12	; 0x0c
    2eb0:	8d 85       	ldd	r24, Y+13	; 0x0d
    2eb2:	9e 85       	ldd	r25, Y+14	; 0x0e
    2eb4:	20 e0       	ldi	r18, 0x00	; 0
    2eb6:	30 e0       	ldi	r19, 0x00	; 0
    2eb8:	4a ef       	ldi	r20, 0xFA	; 250
    2eba:	54 e4       	ldi	r21, 0x44	; 68
    2ebc:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2ec0:	dc 01       	movw	r26, r24
    2ec2:	cb 01       	movw	r24, r22
    2ec4:	8f 83       	std	Y+7, r24	; 0x07
    2ec6:	98 87       	std	Y+8, r25	; 0x08
    2ec8:	a9 87       	std	Y+9, r26	; 0x09
    2eca:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2ecc:	6f 81       	ldd	r22, Y+7	; 0x07
    2ece:	78 85       	ldd	r23, Y+8	; 0x08
    2ed0:	89 85       	ldd	r24, Y+9	; 0x09
    2ed2:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ed4:	20 e0       	ldi	r18, 0x00	; 0
    2ed6:	30 e0       	ldi	r19, 0x00	; 0
    2ed8:	40 e8       	ldi	r20, 0x80	; 128
    2eda:	5f e3       	ldi	r21, 0x3F	; 63
    2edc:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2ee0:	88 23       	and	r24, r24
    2ee2:	2c f4       	brge	.+10     	; 0x2eee <HLCD8_voidClearDisplay+0x6c>
		__ticks = 1;
    2ee4:	81 e0       	ldi	r24, 0x01	; 1
    2ee6:	90 e0       	ldi	r25, 0x00	; 0
    2ee8:	9e 83       	std	Y+6, r25	; 0x06
    2eea:	8d 83       	std	Y+5, r24	; 0x05
    2eec:	3f c0       	rjmp	.+126    	; 0x2f6c <HLCD8_voidClearDisplay+0xea>
	else if (__tmp > 65535)
    2eee:	6f 81       	ldd	r22, Y+7	; 0x07
    2ef0:	78 85       	ldd	r23, Y+8	; 0x08
    2ef2:	89 85       	ldd	r24, Y+9	; 0x09
    2ef4:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ef6:	20 e0       	ldi	r18, 0x00	; 0
    2ef8:	3f ef       	ldi	r19, 0xFF	; 255
    2efa:	4f e7       	ldi	r20, 0x7F	; 127
    2efc:	57 e4       	ldi	r21, 0x47	; 71
    2efe:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2f02:	18 16       	cp	r1, r24
    2f04:	4c f5       	brge	.+82     	; 0x2f58 <HLCD8_voidClearDisplay+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2f06:	6b 85       	ldd	r22, Y+11	; 0x0b
    2f08:	7c 85       	ldd	r23, Y+12	; 0x0c
    2f0a:	8d 85       	ldd	r24, Y+13	; 0x0d
    2f0c:	9e 85       	ldd	r25, Y+14	; 0x0e
    2f0e:	20 e0       	ldi	r18, 0x00	; 0
    2f10:	30 e0       	ldi	r19, 0x00	; 0
    2f12:	40 e2       	ldi	r20, 0x20	; 32
    2f14:	51 e4       	ldi	r21, 0x41	; 65
    2f16:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2f1a:	dc 01       	movw	r26, r24
    2f1c:	cb 01       	movw	r24, r22
    2f1e:	bc 01       	movw	r22, r24
    2f20:	cd 01       	movw	r24, r26
    2f22:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2f26:	dc 01       	movw	r26, r24
    2f28:	cb 01       	movw	r24, r22
    2f2a:	9e 83       	std	Y+6, r25	; 0x06
    2f2c:	8d 83       	std	Y+5, r24	; 0x05
    2f2e:	0f c0       	rjmp	.+30     	; 0x2f4e <HLCD8_voidClearDisplay+0xcc>
    2f30:	88 ec       	ldi	r24, 0xC8	; 200
    2f32:	90 e0       	ldi	r25, 0x00	; 0
    2f34:	9c 83       	std	Y+4, r25	; 0x04
    2f36:	8b 83       	std	Y+3, r24	; 0x03
    2f38:	8b 81       	ldd	r24, Y+3	; 0x03
    2f3a:	9c 81       	ldd	r25, Y+4	; 0x04
    2f3c:	01 97       	sbiw	r24, 0x01	; 1
    2f3e:	f1 f7       	brne	.-4      	; 0x2f3c <HLCD8_voidClearDisplay+0xba>
    2f40:	9c 83       	std	Y+4, r25	; 0x04
    2f42:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2f44:	8d 81       	ldd	r24, Y+5	; 0x05
    2f46:	9e 81       	ldd	r25, Y+6	; 0x06
    2f48:	01 97       	sbiw	r24, 0x01	; 1
    2f4a:	9e 83       	std	Y+6, r25	; 0x06
    2f4c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2f4e:	8d 81       	ldd	r24, Y+5	; 0x05
    2f50:	9e 81       	ldd	r25, Y+6	; 0x06
    2f52:	00 97       	sbiw	r24, 0x00	; 0
    2f54:	69 f7       	brne	.-38     	; 0x2f30 <HLCD8_voidClearDisplay+0xae>
    2f56:	14 c0       	rjmp	.+40     	; 0x2f80 <HLCD8_voidClearDisplay+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2f58:	6f 81       	ldd	r22, Y+7	; 0x07
    2f5a:	78 85       	ldd	r23, Y+8	; 0x08
    2f5c:	89 85       	ldd	r24, Y+9	; 0x09
    2f5e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f60:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2f64:	dc 01       	movw	r26, r24
    2f66:	cb 01       	movw	r24, r22
    2f68:	9e 83       	std	Y+6, r25	; 0x06
    2f6a:	8d 83       	std	Y+5, r24	; 0x05
    2f6c:	8d 81       	ldd	r24, Y+5	; 0x05
    2f6e:	9e 81       	ldd	r25, Y+6	; 0x06
    2f70:	9a 83       	std	Y+2, r25	; 0x02
    2f72:	89 83       	std	Y+1, r24	; 0x01
    2f74:	89 81       	ldd	r24, Y+1	; 0x01
    2f76:	9a 81       	ldd	r25, Y+2	; 0x02
    2f78:	01 97       	sbiw	r24, 0x01	; 1
    2f7a:	f1 f7       	brne	.-4      	; 0x2f78 <HLCD8_voidClearDisplay+0xf6>
    2f7c:	9a 83       	std	Y+2, r25	; 0x02
    2f7e:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(2);
}
    2f80:	2e 96       	adiw	r28, 0x0e	; 14
    2f82:	0f b6       	in	r0, 0x3f	; 63
    2f84:	f8 94       	cli
    2f86:	de bf       	out	0x3e, r29	; 62
    2f88:	0f be       	out	0x3f, r0	; 63
    2f8a:	cd bf       	out	0x3d, r28	; 61
    2f8c:	cf 91       	pop	r28
    2f8e:	df 91       	pop	r29
    2f90:	08 95       	ret

00002f92 <HLCD8_voidSendString>:


void HLCD8_voidSendString(u8 * A_Pu8String)
{
    2f92:	df 93       	push	r29
    2f94:	cf 93       	push	r28
    2f96:	00 d0       	rcall	.+0      	; 0x2f98 <HLCD8_voidSendString+0x6>
    2f98:	0f 92       	push	r0
    2f9a:	cd b7       	in	r28, 0x3d	; 61
    2f9c:	de b7       	in	r29, 0x3e	; 62
    2f9e:	9b 83       	std	Y+3, r25	; 0x03
    2fa0:	8a 83       	std	Y+2, r24	; 0x02
    u8 local_u8Couter=0;
    2fa2:	19 82       	std	Y+1, r1	; 0x01
    2fa4:	0e c0       	rjmp	.+28     	; 0x2fc2 <HLCD8_voidSendString+0x30>
    while (A_Pu8String[local_u8Couter]!='\0')
    {
        HLCD8_voidSendData(A_Pu8String[local_u8Couter]);
    2fa6:	89 81       	ldd	r24, Y+1	; 0x01
    2fa8:	28 2f       	mov	r18, r24
    2faa:	30 e0       	ldi	r19, 0x00	; 0
    2fac:	8a 81       	ldd	r24, Y+2	; 0x02
    2fae:	9b 81       	ldd	r25, Y+3	; 0x03
    2fb0:	fc 01       	movw	r30, r24
    2fb2:	e2 0f       	add	r30, r18
    2fb4:	f3 1f       	adc	r31, r19
    2fb6:	80 81       	ld	r24, Z
    2fb8:	0e 94 bc 14 	call	0x2978	; 0x2978 <HLCD8_voidSendData>
        local_u8Couter++;
    2fbc:	89 81       	ldd	r24, Y+1	; 0x01
    2fbe:	8f 5f       	subi	r24, 0xFF	; 255
    2fc0:	89 83       	std	Y+1, r24	; 0x01


void HLCD8_voidSendString(u8 * A_Pu8String)
{
    u8 local_u8Couter=0;
    while (A_Pu8String[local_u8Couter]!='\0')
    2fc2:	89 81       	ldd	r24, Y+1	; 0x01
    2fc4:	28 2f       	mov	r18, r24
    2fc6:	30 e0       	ldi	r19, 0x00	; 0
    2fc8:	8a 81       	ldd	r24, Y+2	; 0x02
    2fca:	9b 81       	ldd	r25, Y+3	; 0x03
    2fcc:	fc 01       	movw	r30, r24
    2fce:	e2 0f       	add	r30, r18
    2fd0:	f3 1f       	adc	r31, r19
    2fd2:	80 81       	ld	r24, Z
    2fd4:	88 23       	and	r24, r24
    2fd6:	39 f7       	brne	.-50     	; 0x2fa6 <HLCD8_voidSendString+0x14>
    {
        HLCD8_voidSendData(A_Pu8String[local_u8Couter]);
        local_u8Couter++;
    }
    
}
    2fd8:	0f 90       	pop	r0
    2fda:	0f 90       	pop	r0
    2fdc:	0f 90       	pop	r0
    2fde:	cf 91       	pop	r28
    2fe0:	df 91       	pop	r29
    2fe2:	08 95       	ret

00002fe4 <HLCD8_voidGoToPos>:

void HLCD8_voidGoToPos(u8 A_u8RowNum,u8 A_u8ColNum)
{
    2fe4:	df 93       	push	r29
    2fe6:	cf 93       	push	r28
    2fe8:	cd b7       	in	r28, 0x3d	; 61
    2fea:	de b7       	in	r29, 0x3e	; 62
    2fec:	62 97       	sbiw	r28, 0x12	; 18
    2fee:	0f b6       	in	r0, 0x3f	; 63
    2ff0:	f8 94       	cli
    2ff2:	de bf       	out	0x3e, r29	; 62
    2ff4:	0f be       	out	0x3f, r0	; 63
    2ff6:	cd bf       	out	0x3d, r28	; 61
    2ff8:	8f 87       	std	Y+15, r24	; 0x0f
    2ffa:	68 8b       	std	Y+16, r22	; 0x10
    switch (A_u8RowNum)
    2ffc:	8f 85       	ldd	r24, Y+15	; 0x0f
    2ffe:	28 2f       	mov	r18, r24
    3000:	30 e0       	ldi	r19, 0x00	; 0
    3002:	3a 8b       	std	Y+18, r19	; 0x12
    3004:	29 8b       	std	Y+17, r18	; 0x11
    3006:	89 89       	ldd	r24, Y+17	; 0x11
    3008:	9a 89       	ldd	r25, Y+18	; 0x12
    300a:	81 30       	cpi	r24, 0x01	; 1
    300c:	91 05       	cpc	r25, r1
    300e:	31 f0       	breq	.+12     	; 0x301c <HLCD8_voidGoToPos+0x38>
    3010:	29 89       	ldd	r18, Y+17	; 0x11
    3012:	3a 89       	ldd	r19, Y+18	; 0x12
    3014:	22 30       	cpi	r18, 0x02	; 2
    3016:	31 05       	cpc	r19, r1
    3018:	31 f0       	breq	.+12     	; 0x3026 <HLCD8_voidGoToPos+0x42>
    301a:	09 c0       	rjmp	.+18     	; 0x302e <HLCD8_voidGoToPos+0x4a>
    {
    case LCD_ROW_ONE:
    HLCD8_voidSendCommand(LCD_ROW1_ADDRESS+A_u8ColNum);
    301c:	88 89       	ldd	r24, Y+16	; 0x10
    301e:	81 58       	subi	r24, 0x81	; 129
    3020:	0e 94 1e 14 	call	0x283c	; 0x283c <HLCD8_voidSendCommand>
    3024:	04 c0       	rjmp	.+8      	; 0x302e <HLCD8_voidGoToPos+0x4a>
        break;
    
    case LCD_ROW_TWO:
    HLCD8_voidSendCommand(LCD_ROW2_ADDRESS+A_u8ColNum);
    3026:	88 89       	ldd	r24, Y+16	; 0x10
    3028:	81 54       	subi	r24, 0x41	; 65
    302a:	0e 94 1e 14 	call	0x283c	; 0x283c <HLCD8_voidSendCommand>
    302e:	80 e0       	ldi	r24, 0x00	; 0
    3030:	90 e0       	ldi	r25, 0x00	; 0
    3032:	a0 e8       	ldi	r26, 0x80	; 128
    3034:	bf e3       	ldi	r27, 0x3F	; 63
    3036:	8b 87       	std	Y+11, r24	; 0x0b
    3038:	9c 87       	std	Y+12, r25	; 0x0c
    303a:	ad 87       	std	Y+13, r26	; 0x0d
    303c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    303e:	6b 85       	ldd	r22, Y+11	; 0x0b
    3040:	7c 85       	ldd	r23, Y+12	; 0x0c
    3042:	8d 85       	ldd	r24, Y+13	; 0x0d
    3044:	9e 85       	ldd	r25, Y+14	; 0x0e
    3046:	20 e0       	ldi	r18, 0x00	; 0
    3048:	30 e0       	ldi	r19, 0x00	; 0
    304a:	4a ef       	ldi	r20, 0xFA	; 250
    304c:	54 e4       	ldi	r21, 0x44	; 68
    304e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3052:	dc 01       	movw	r26, r24
    3054:	cb 01       	movw	r24, r22
    3056:	8f 83       	std	Y+7, r24	; 0x07
    3058:	98 87       	std	Y+8, r25	; 0x08
    305a:	a9 87       	std	Y+9, r26	; 0x09
    305c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    305e:	6f 81       	ldd	r22, Y+7	; 0x07
    3060:	78 85       	ldd	r23, Y+8	; 0x08
    3062:	89 85       	ldd	r24, Y+9	; 0x09
    3064:	9a 85       	ldd	r25, Y+10	; 0x0a
    3066:	20 e0       	ldi	r18, 0x00	; 0
    3068:	30 e0       	ldi	r19, 0x00	; 0
    306a:	40 e8       	ldi	r20, 0x80	; 128
    306c:	5f e3       	ldi	r21, 0x3F	; 63
    306e:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    3072:	88 23       	and	r24, r24
    3074:	2c f4       	brge	.+10     	; 0x3080 <HLCD8_voidGoToPos+0x9c>
		__ticks = 1;
    3076:	81 e0       	ldi	r24, 0x01	; 1
    3078:	90 e0       	ldi	r25, 0x00	; 0
    307a:	9e 83       	std	Y+6, r25	; 0x06
    307c:	8d 83       	std	Y+5, r24	; 0x05
    307e:	3f c0       	rjmp	.+126    	; 0x30fe <HLCD8_voidGoToPos+0x11a>
	else if (__tmp > 65535)
    3080:	6f 81       	ldd	r22, Y+7	; 0x07
    3082:	78 85       	ldd	r23, Y+8	; 0x08
    3084:	89 85       	ldd	r24, Y+9	; 0x09
    3086:	9a 85       	ldd	r25, Y+10	; 0x0a
    3088:	20 e0       	ldi	r18, 0x00	; 0
    308a:	3f ef       	ldi	r19, 0xFF	; 255
    308c:	4f e7       	ldi	r20, 0x7F	; 127
    308e:	57 e4       	ldi	r21, 0x47	; 71
    3090:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    3094:	18 16       	cp	r1, r24
    3096:	4c f5       	brge	.+82     	; 0x30ea <HLCD8_voidGoToPos+0x106>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3098:	6b 85       	ldd	r22, Y+11	; 0x0b
    309a:	7c 85       	ldd	r23, Y+12	; 0x0c
    309c:	8d 85       	ldd	r24, Y+13	; 0x0d
    309e:	9e 85       	ldd	r25, Y+14	; 0x0e
    30a0:	20 e0       	ldi	r18, 0x00	; 0
    30a2:	30 e0       	ldi	r19, 0x00	; 0
    30a4:	40 e2       	ldi	r20, 0x20	; 32
    30a6:	51 e4       	ldi	r21, 0x41	; 65
    30a8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    30ac:	dc 01       	movw	r26, r24
    30ae:	cb 01       	movw	r24, r22
    30b0:	bc 01       	movw	r22, r24
    30b2:	cd 01       	movw	r24, r26
    30b4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    30b8:	dc 01       	movw	r26, r24
    30ba:	cb 01       	movw	r24, r22
    30bc:	9e 83       	std	Y+6, r25	; 0x06
    30be:	8d 83       	std	Y+5, r24	; 0x05
    30c0:	0f c0       	rjmp	.+30     	; 0x30e0 <HLCD8_voidGoToPos+0xfc>
    30c2:	88 ec       	ldi	r24, 0xC8	; 200
    30c4:	90 e0       	ldi	r25, 0x00	; 0
    30c6:	9c 83       	std	Y+4, r25	; 0x04
    30c8:	8b 83       	std	Y+3, r24	; 0x03
    30ca:	8b 81       	ldd	r24, Y+3	; 0x03
    30cc:	9c 81       	ldd	r25, Y+4	; 0x04
    30ce:	01 97       	sbiw	r24, 0x01	; 1
    30d0:	f1 f7       	brne	.-4      	; 0x30ce <HLCD8_voidGoToPos+0xea>
    30d2:	9c 83       	std	Y+4, r25	; 0x04
    30d4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    30d6:	8d 81       	ldd	r24, Y+5	; 0x05
    30d8:	9e 81       	ldd	r25, Y+6	; 0x06
    30da:	01 97       	sbiw	r24, 0x01	; 1
    30dc:	9e 83       	std	Y+6, r25	; 0x06
    30de:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    30e0:	8d 81       	ldd	r24, Y+5	; 0x05
    30e2:	9e 81       	ldd	r25, Y+6	; 0x06
    30e4:	00 97       	sbiw	r24, 0x00	; 0
    30e6:	69 f7       	brne	.-38     	; 0x30c2 <HLCD8_voidGoToPos+0xde>
    30e8:	14 c0       	rjmp	.+40     	; 0x3112 <HLCD8_voidGoToPos+0x12e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    30ea:	6f 81       	ldd	r22, Y+7	; 0x07
    30ec:	78 85       	ldd	r23, Y+8	; 0x08
    30ee:	89 85       	ldd	r24, Y+9	; 0x09
    30f0:	9a 85       	ldd	r25, Y+10	; 0x0a
    30f2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    30f6:	dc 01       	movw	r26, r24
    30f8:	cb 01       	movw	r24, r22
    30fa:	9e 83       	std	Y+6, r25	; 0x06
    30fc:	8d 83       	std	Y+5, r24	; 0x05
    30fe:	8d 81       	ldd	r24, Y+5	; 0x05
    3100:	9e 81       	ldd	r25, Y+6	; 0x06
    3102:	9a 83       	std	Y+2, r25	; 0x02
    3104:	89 83       	std	Y+1, r24	; 0x01
    3106:	89 81       	ldd	r24, Y+1	; 0x01
    3108:	9a 81       	ldd	r25, Y+2	; 0x02
    310a:	01 97       	sbiw	r24, 0x01	; 1
    310c:	f1 f7       	brne	.-4      	; 0x310a <HLCD8_voidGoToPos+0x126>
    310e:	9a 83       	std	Y+2, r25	; 0x02
    3110:	89 83       	std	Y+1, r24	; 0x01
        break;
    }
    _delay_ms(1);

}
    3112:	62 96       	adiw	r28, 0x12	; 18
    3114:	0f b6       	in	r0, 0x3f	; 63
    3116:	f8 94       	cli
    3118:	de bf       	out	0x3e, r29	; 62
    311a:	0f be       	out	0x3f, r0	; 63
    311c:	cd bf       	out	0x3d, r28	; 61
    311e:	cf 91       	pop	r28
    3120:	df 91       	pop	r29
    3122:	08 95       	ret

00003124 <HLCD8_voidDisplayNumber>:

void HLCD8_voidDisplayNumber(u32 A_u32Number)
{
    3124:	df 93       	push	r29
    3126:	cf 93       	push	r28
    3128:	00 d0       	rcall	.+0      	; 0x312a <HLCD8_voidDisplayNumber+0x6>
    312a:	00 d0       	rcall	.+0      	; 0x312c <HLCD8_voidDisplayNumber+0x8>
    312c:	cd b7       	in	r28, 0x3d	; 61
    312e:	de b7       	in	r29, 0x3e	; 62
    3130:	9c 83       	std	Y+4, r25	; 0x04
    3132:	8b 83       	std	Y+3, r24	; 0x03
    // second method: using built in library itoa(number,string,base)
    // u8 local_u8NumToStr[100];
    // itoa(A_u32Number,local_u8NumToStr,10);
    // HLCD8_voidSendString(local_u8NumToStr);
    //****************************************************//
    u32 local_u32Number=1;
    3134:	81 e0       	ldi	r24, 0x01	; 1
    3136:	90 e0       	ldi	r25, 0x00	; 0
    3138:	9a 83       	std	Y+2, r25	; 0x02
    313a:	89 83       	std	Y+1, r24	; 0x01
    if(A_u32Number==0)
    313c:	8b 81       	ldd	r24, Y+3	; 0x03
    313e:	9c 81       	ldd	r25, Y+4	; 0x04
    3140:	00 97       	sbiw	r24, 0x00	; 0
    3142:	31 f5       	brne	.+76     	; 0x3190 <HLCD8_voidDisplayNumber+0x6c>
    {
        HLCD8_voidSendData('0');
    3144:	80 e3       	ldi	r24, 0x30	; 48
    3146:	0e 94 bc 14 	call	0x2978	; 0x2978 <HLCD8_voidSendData>
    314a:	22 c0       	rjmp	.+68     	; 0x3190 <HLCD8_voidDisplayNumber+0x6c>
    }   
    while(A_u32Number !=0)
    {
            local_u32Number=((local_u32Number * 10)+(A_u32Number%10));
    314c:	89 81       	ldd	r24, Y+1	; 0x01
    314e:	9a 81       	ldd	r25, Y+2	; 0x02
    3150:	9c 01       	movw	r18, r24
    3152:	22 0f       	add	r18, r18
    3154:	33 1f       	adc	r19, r19
    3156:	c9 01       	movw	r24, r18
    3158:	88 0f       	add	r24, r24
    315a:	99 1f       	adc	r25, r25
    315c:	88 0f       	add	r24, r24
    315e:	99 1f       	adc	r25, r25
    3160:	f9 01       	movw	r30, r18
    3162:	e8 0f       	add	r30, r24
    3164:	f9 1f       	adc	r31, r25
    3166:	8b 81       	ldd	r24, Y+3	; 0x03
    3168:	9c 81       	ldd	r25, Y+4	; 0x04
    316a:	2a e0       	ldi	r18, 0x0A	; 10
    316c:	30 e0       	ldi	r19, 0x00	; 0
    316e:	b9 01       	movw	r22, r18
    3170:	0e 94 f1 1a 	call	0x35e2	; 0x35e2 <__udivmodhi4>
    3174:	8e 0f       	add	r24, r30
    3176:	9f 1f       	adc	r25, r31
    3178:	9a 83       	std	Y+2, r25	; 0x02
    317a:	89 83       	std	Y+1, r24	; 0x01
            A_u32Number=A_u32Number/10;
    317c:	8b 81       	ldd	r24, Y+3	; 0x03
    317e:	9c 81       	ldd	r25, Y+4	; 0x04
    3180:	2a e0       	ldi	r18, 0x0A	; 10
    3182:	30 e0       	ldi	r19, 0x00	; 0
    3184:	b9 01       	movw	r22, r18
    3186:	0e 94 f1 1a 	call	0x35e2	; 0x35e2 <__udivmodhi4>
    318a:	cb 01       	movw	r24, r22
    318c:	9c 83       	std	Y+4, r25	; 0x04
    318e:	8b 83       	std	Y+3, r24	; 0x03
    u32 local_u32Number=1;
    if(A_u32Number==0)
    {
        HLCD8_voidSendData('0');
    }   
    while(A_u32Number !=0)
    3190:	8b 81       	ldd	r24, Y+3	; 0x03
    3192:	9c 81       	ldd	r25, Y+4	; 0x04
    3194:	00 97       	sbiw	r24, 0x00	; 0
    3196:	d1 f6       	brne	.-76     	; 0x314c <HLCD8_voidDisplayNumber+0x28>
    3198:	14 c0       	rjmp	.+40     	; 0x31c2 <HLCD8_voidDisplayNumber+0x9e>
            A_u32Number=A_u32Number/10;

    }
    while (local_u32Number!=1)
    {
        HLCD8_voidSendData((local_u32Number%10)+48);
    319a:	89 81       	ldd	r24, Y+1	; 0x01
    319c:	9a 81       	ldd	r25, Y+2	; 0x02
    319e:	2a e0       	ldi	r18, 0x0A	; 10
    31a0:	30 e0       	ldi	r19, 0x00	; 0
    31a2:	b9 01       	movw	r22, r18
    31a4:	0e 94 f1 1a 	call	0x35e2	; 0x35e2 <__udivmodhi4>
    31a8:	80 5d       	subi	r24, 0xD0	; 208
    31aa:	0e 94 bc 14 	call	0x2978	; 0x2978 <HLCD8_voidSendData>
        local_u32Number=local_u32Number/10;
    31ae:	89 81       	ldd	r24, Y+1	; 0x01
    31b0:	9a 81       	ldd	r25, Y+2	; 0x02
    31b2:	2a e0       	ldi	r18, 0x0A	; 10
    31b4:	30 e0       	ldi	r19, 0x00	; 0
    31b6:	b9 01       	movw	r22, r18
    31b8:	0e 94 f1 1a 	call	0x35e2	; 0x35e2 <__udivmodhi4>
    31bc:	cb 01       	movw	r24, r22
    31be:	9a 83       	std	Y+2, r25	; 0x02
    31c0:	89 83       	std	Y+1, r24	; 0x01
    {
            local_u32Number=((local_u32Number * 10)+(A_u32Number%10));
            A_u32Number=A_u32Number/10;

    }
    while (local_u32Number!=1)
    31c2:	89 81       	ldd	r24, Y+1	; 0x01
    31c4:	9a 81       	ldd	r25, Y+2	; 0x02
    31c6:	81 30       	cpi	r24, 0x01	; 1
    31c8:	91 05       	cpc	r25, r1
    31ca:	39 f7       	brne	.-50     	; 0x319a <HLCD8_voidDisplayNumber+0x76>
    {
        HLCD8_voidSendData((local_u32Number%10)+48);
        local_u32Number=local_u32Number/10;
    }
}
    31cc:	0f 90       	pop	r0
    31ce:	0f 90       	pop	r0
    31d0:	0f 90       	pop	r0
    31d2:	0f 90       	pop	r0
    31d4:	cf 91       	pop	r28
    31d6:	df 91       	pop	r29
    31d8:	08 95       	ret

000031da <HSSD_voidDisplay>:
#include "../Include/HAL/SSD/SSD_Private.h"
#include "../Include/HAL/SSD/SSD_Configuration.h"

#include <util/delay.h>
void HSSD_voidDisplay(u8 A_u8Number,u8 A_u8PortId)
{
    31da:	df 93       	push	r29
    31dc:	cf 93       	push	r28
    31de:	00 d0       	rcall	.+0      	; 0x31e0 <HSSD_voidDisplay+0x6>
    31e0:	00 d0       	rcall	.+0      	; 0x31e2 <HSSD_voidDisplay+0x8>
    31e2:	cd b7       	in	r28, 0x3d	; 61
    31e4:	de b7       	in	r29, 0x3e	; 62
    31e6:	89 83       	std	Y+1, r24	; 0x01
    31e8:	6a 83       	std	Y+2, r22	; 0x02
	switch(A_u8Number)
    31ea:	89 81       	ldd	r24, Y+1	; 0x01
    31ec:	28 2f       	mov	r18, r24
    31ee:	30 e0       	ldi	r19, 0x00	; 0
    31f0:	3c 83       	std	Y+4, r19	; 0x04
    31f2:	2b 83       	std	Y+3, r18	; 0x03
    31f4:	8b 81       	ldd	r24, Y+3	; 0x03
    31f6:	9c 81       	ldd	r25, Y+4	; 0x04
    31f8:	8b 35       	cpi	r24, 0x5B	; 91
    31fa:	91 05       	cpc	r25, r1
    31fc:	09 f4       	brne	.+2      	; 0x3200 <HSSD_voidDisplay+0x26>
    31fe:	4c c0       	rjmp	.+152    	; 0x3298 <HSSD_voidDisplay+0xbe>
    3200:	2b 81       	ldd	r18, Y+3	; 0x03
    3202:	3c 81       	ldd	r19, Y+4	; 0x04
    3204:	2c 35       	cpi	r18, 0x5C	; 92
    3206:	31 05       	cpc	r19, r1
    3208:	e4 f4       	brge	.+56     	; 0x3242 <HSSD_voidDisplay+0x68>
    320a:	8b 81       	ldd	r24, Y+3	; 0x03
    320c:	9c 81       	ldd	r25, Y+4	; 0x04
    320e:	87 30       	cpi	r24, 0x07	; 7
    3210:	91 05       	cpc	r25, r1
    3212:	09 f4       	brne	.+2      	; 0x3216 <HSSD_voidDisplay+0x3c>
    3214:	5a c0       	rjmp	.+180    	; 0x32ca <HSSD_voidDisplay+0xf0>
    3216:	2b 81       	ldd	r18, Y+3	; 0x03
    3218:	3c 81       	ldd	r19, Y+4	; 0x04
    321a:	28 30       	cpi	r18, 0x08	; 8
    321c:	31 05       	cpc	r19, r1
    321e:	34 f4       	brge	.+12     	; 0x322c <HSSD_voidDisplay+0x52>
    3220:	8b 81       	ldd	r24, Y+3	; 0x03
    3222:	9c 81       	ldd	r25, Y+4	; 0x04
    3224:	86 30       	cpi	r24, 0x06	; 6
    3226:	91 05       	cpc	r25, r1
    3228:	91 f1       	breq	.+100    	; 0x328e <HSSD_voidDisplay+0xb4>
    322a:	5d c0       	rjmp	.+186    	; 0x32e6 <HSSD_voidDisplay+0x10c>
    322c:	2b 81       	ldd	r18, Y+3	; 0x03
    322e:	3c 81       	ldd	r19, Y+4	; 0x04
    3230:	2f 33       	cpi	r18, 0x3F	; 63
    3232:	31 05       	cpc	r19, r1
    3234:	39 f1       	breq	.+78     	; 0x3284 <HSSD_voidDisplay+0xaa>
    3236:	8b 81       	ldd	r24, Y+3	; 0x03
    3238:	9c 81       	ldd	r25, Y+4	; 0x04
    323a:	8f 34       	cpi	r24, 0x4F	; 79
    323c:	91 05       	cpc	r25, r1
    323e:	89 f1       	breq	.+98     	; 0x32a2 <HSSD_voidDisplay+0xc8>
    3240:	52 c0       	rjmp	.+164    	; 0x32e6 <HSSD_voidDisplay+0x10c>
    3242:	2b 81       	ldd	r18, Y+3	; 0x03
    3244:	3c 81       	ldd	r19, Y+4	; 0x04
    3246:	2f 36       	cpi	r18, 0x6F	; 111
    3248:	31 05       	cpc	r19, r1
    324a:	09 f4       	brne	.+2      	; 0x324e <HSSD_voidDisplay+0x74>
    324c:	48 c0       	rjmp	.+144    	; 0x32de <HSSD_voidDisplay+0x104>
    324e:	8b 81       	ldd	r24, Y+3	; 0x03
    3250:	9c 81       	ldd	r25, Y+4	; 0x04
    3252:	80 37       	cpi	r24, 0x70	; 112
    3254:	91 05       	cpc	r25, r1
    3256:	5c f4       	brge	.+22     	; 0x326e <HSSD_voidDisplay+0x94>
    3258:	2b 81       	ldd	r18, Y+3	; 0x03
    325a:	3c 81       	ldd	r19, Y+4	; 0x04
    325c:	26 36       	cpi	r18, 0x66	; 102
    325e:	31 05       	cpc	r19, r1
    3260:	29 f1       	breq	.+74     	; 0x32ac <HSSD_voidDisplay+0xd2>
    3262:	8b 81       	ldd	r24, Y+3	; 0x03
    3264:	9c 81       	ldd	r25, Y+4	; 0x04
    3266:	8d 36       	cpi	r24, 0x6D	; 109
    3268:	91 05       	cpc	r25, r1
    326a:	29 f1       	breq	.+74     	; 0x32b6 <HSSD_voidDisplay+0xdc>
    326c:	3c c0       	rjmp	.+120    	; 0x32e6 <HSSD_voidDisplay+0x10c>
    326e:	2b 81       	ldd	r18, Y+3	; 0x03
    3270:	3c 81       	ldd	r19, Y+4	; 0x04
    3272:	2d 37       	cpi	r18, 0x7D	; 125
    3274:	31 05       	cpc	r19, r1
    3276:	21 f1       	breq	.+72     	; 0x32c0 <HSSD_voidDisplay+0xe6>
    3278:	8b 81       	ldd	r24, Y+3	; 0x03
    327a:	9c 81       	ldd	r25, Y+4	; 0x04
    327c:	8f 37       	cpi	r24, 0x7F	; 127
    327e:	91 05       	cpc	r25, r1
    3280:	49 f1       	breq	.+82     	; 0x32d4 <HSSD_voidDisplay+0xfa>
    3282:	31 c0       	rjmp	.+98     	; 0x32e6 <HSSD_voidDisplay+0x10c>
	{
	case ZERO:
		MDIO_voidSetPortValue(A_u8PortId,ZERO);
    3284:	8a 81       	ldd	r24, Y+2	; 0x02
    3286:	6f e3       	ldi	r22, 0x3F	; 63
    3288:	0e 94 4a 09 	call	0x1294	; 0x1294 <MDIO_voidSetPortValue>
    328c:	2c c0       	rjmp	.+88     	; 0x32e6 <HSSD_voidDisplay+0x10c>
		break;
	case ONE:
		MDIO_voidSetPortValue(A_u8PortId,ONE);
    328e:	8a 81       	ldd	r24, Y+2	; 0x02
    3290:	66 e0       	ldi	r22, 0x06	; 6
    3292:	0e 94 4a 09 	call	0x1294	; 0x1294 <MDIO_voidSetPortValue>
    3296:	27 c0       	rjmp	.+78     	; 0x32e6 <HSSD_voidDisplay+0x10c>
		break;
	case TWO:
		MDIO_voidSetPortValue(A_u8PortId,TWO);
    3298:	8a 81       	ldd	r24, Y+2	; 0x02
    329a:	6b e5       	ldi	r22, 0x5B	; 91
    329c:	0e 94 4a 09 	call	0x1294	; 0x1294 <MDIO_voidSetPortValue>
    32a0:	22 c0       	rjmp	.+68     	; 0x32e6 <HSSD_voidDisplay+0x10c>
		break;
	case THREE:
		MDIO_voidSetPortValue(A_u8PortId,THREE);
    32a2:	8a 81       	ldd	r24, Y+2	; 0x02
    32a4:	6f e4       	ldi	r22, 0x4F	; 79
    32a6:	0e 94 4a 09 	call	0x1294	; 0x1294 <MDIO_voidSetPortValue>
    32aa:	1d c0       	rjmp	.+58     	; 0x32e6 <HSSD_voidDisplay+0x10c>
		break;
	case FOUR:
		MDIO_voidSetPortValue(A_u8PortId,FOUR);
    32ac:	8a 81       	ldd	r24, Y+2	; 0x02
    32ae:	66 e6       	ldi	r22, 0x66	; 102
    32b0:	0e 94 4a 09 	call	0x1294	; 0x1294 <MDIO_voidSetPortValue>
    32b4:	18 c0       	rjmp	.+48     	; 0x32e6 <HSSD_voidDisplay+0x10c>
		break;
	case FIVE:
		MDIO_voidSetPortValue(A_u8PortId,FIVE);
    32b6:	8a 81       	ldd	r24, Y+2	; 0x02
    32b8:	6d e6       	ldi	r22, 0x6D	; 109
    32ba:	0e 94 4a 09 	call	0x1294	; 0x1294 <MDIO_voidSetPortValue>
    32be:	13 c0       	rjmp	.+38     	; 0x32e6 <HSSD_voidDisplay+0x10c>
		break;
	case SIX:
		MDIO_voidSetPortValue(A_u8PortId,SIX);
    32c0:	8a 81       	ldd	r24, Y+2	; 0x02
    32c2:	6d e7       	ldi	r22, 0x7D	; 125
    32c4:	0e 94 4a 09 	call	0x1294	; 0x1294 <MDIO_voidSetPortValue>
    32c8:	0e c0       	rjmp	.+28     	; 0x32e6 <HSSD_voidDisplay+0x10c>
		break;
	case SEVEN:
		MDIO_voidSetPortValue(A_u8PortId,SEVEN);
    32ca:	8a 81       	ldd	r24, Y+2	; 0x02
    32cc:	67 e0       	ldi	r22, 0x07	; 7
    32ce:	0e 94 4a 09 	call	0x1294	; 0x1294 <MDIO_voidSetPortValue>
    32d2:	09 c0       	rjmp	.+18     	; 0x32e6 <HSSD_voidDisplay+0x10c>
		break;
	case EIGHT:
		MDIO_voidSetPortValue(A_u8PortId,EIGHT);
    32d4:	8a 81       	ldd	r24, Y+2	; 0x02
    32d6:	6f e7       	ldi	r22, 0x7F	; 127
    32d8:	0e 94 4a 09 	call	0x1294	; 0x1294 <MDIO_voidSetPortValue>
    32dc:	04 c0       	rjmp	.+8      	; 0x32e6 <HSSD_voidDisplay+0x10c>
		break;
	case NINE:
		MDIO_voidSetPortValue(A_u8PortId,NINE);
    32de:	8a 81       	ldd	r24, Y+2	; 0x02
    32e0:	6f e6       	ldi	r22, 0x6F	; 111
    32e2:	0e 94 4a 09 	call	0x1294	; 0x1294 <MDIO_voidSetPortValue>
		break;
	}
}
    32e6:	0f 90       	pop	r0
    32e8:	0f 90       	pop	r0
    32ea:	0f 90       	pop	r0
    32ec:	0f 90       	pop	r0
    32ee:	cf 91       	pop	r28
    32f0:	df 91       	pop	r29
    32f2:	08 95       	ret

000032f4 <HSSD_voidDisplayAscending>:

void HSSD_voidDisplayAscending(u8 A_u8PortId)
{
    32f4:	df 93       	push	r29
    32f6:	cf 93       	push	r28
    32f8:	cd b7       	in	r28, 0x3d	; 61
    32fa:	de b7       	in	r29, 0x3e	; 62
    32fc:	6f 97       	sbiw	r28, 0x1f	; 31
    32fe:	0f b6       	in	r0, 0x3f	; 63
    3300:	f8 94       	cli
    3302:	de bf       	out	0x3e, r29	; 62
    3304:	0f be       	out	0x3f, r0	; 63
    3306:	cd bf       	out	0x3d, r28	; 61
    3308:	8a 8f       	std	Y+26, r24	; 0x1a
u8 arr[]={ZERO,ONE,TWO,THREE,FOUR,FIVE,SIX,SEVEN,EIGHT,NINE};
    330a:	ce 01       	movw	r24, r28
    330c:	40 96       	adiw	r24, 0x10	; 16
    330e:	9c 8f       	std	Y+28, r25	; 0x1c
    3310:	8b 8f       	std	Y+27, r24	; 0x1b
    3312:	e8 e6       	ldi	r30, 0x68	; 104
    3314:	f0 e0       	ldi	r31, 0x00	; 0
    3316:	fe 8f       	std	Y+30, r31	; 0x1e
    3318:	ed 8f       	std	Y+29, r30	; 0x1d
    331a:	fa e0       	ldi	r31, 0x0A	; 10
    331c:	ff 8f       	std	Y+31, r31	; 0x1f
    331e:	ed 8d       	ldd	r30, Y+29	; 0x1d
    3320:	fe 8d       	ldd	r31, Y+30	; 0x1e
    3322:	00 80       	ld	r0, Z
    3324:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3326:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3328:	01 96       	adiw	r24, 0x01	; 1
    332a:	9e 8f       	std	Y+30, r25	; 0x1e
    332c:	8d 8f       	std	Y+29, r24	; 0x1d
    332e:	eb 8d       	ldd	r30, Y+27	; 0x1b
    3330:	fc 8d       	ldd	r31, Y+28	; 0x1c
    3332:	00 82       	st	Z, r0
    3334:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3336:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3338:	01 96       	adiw	r24, 0x01	; 1
    333a:	9c 8f       	std	Y+28, r25	; 0x1c
    333c:	8b 8f       	std	Y+27, r24	; 0x1b
    333e:	9f 8d       	ldd	r25, Y+31	; 0x1f
    3340:	91 50       	subi	r25, 0x01	; 1
    3342:	9f 8f       	std	Y+31, r25	; 0x1f
    3344:	ef 8d       	ldd	r30, Y+31	; 0x1f
    3346:	ee 23       	and	r30, r30
    3348:	51 f7       	brne	.-44     	; 0x331e <HSSD_voidDisplayAscending+0x2a>
	for(u8 i=0;i<10;i++)
    334a:	1f 86       	std	Y+15, r1	; 0x0f
    334c:	81 c0       	rjmp	.+258    	; 0x3450 <HSSD_voidDisplayAscending+0x15c>
	{
		HSSD_voidDisplay(arr[i],A_u8PortId);
    334e:	8f 85       	ldd	r24, Y+15	; 0x0f
    3350:	28 2f       	mov	r18, r24
    3352:	30 e0       	ldi	r19, 0x00	; 0
    3354:	ce 01       	movw	r24, r28
    3356:	40 96       	adiw	r24, 0x10	; 16
    3358:	fc 01       	movw	r30, r24
    335a:	e2 0f       	add	r30, r18
    335c:	f3 1f       	adc	r31, r19
    335e:	80 81       	ld	r24, Z
    3360:	6a 8d       	ldd	r22, Y+26	; 0x1a
    3362:	0e 94 ed 18 	call	0x31da	; 0x31da <HSSD_voidDisplay>
    3366:	80 e0       	ldi	r24, 0x00	; 0
    3368:	90 e0       	ldi	r25, 0x00	; 0
    336a:	aa e7       	ldi	r26, 0x7A	; 122
    336c:	b4 e4       	ldi	r27, 0x44	; 68
    336e:	8b 87       	std	Y+11, r24	; 0x0b
    3370:	9c 87       	std	Y+12, r25	; 0x0c
    3372:	ad 87       	std	Y+13, r26	; 0x0d
    3374:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3376:	6b 85       	ldd	r22, Y+11	; 0x0b
    3378:	7c 85       	ldd	r23, Y+12	; 0x0c
    337a:	8d 85       	ldd	r24, Y+13	; 0x0d
    337c:	9e 85       	ldd	r25, Y+14	; 0x0e
    337e:	20 e0       	ldi	r18, 0x00	; 0
    3380:	30 e0       	ldi	r19, 0x00	; 0
    3382:	4a ef       	ldi	r20, 0xFA	; 250
    3384:	54 e4       	ldi	r21, 0x44	; 68
    3386:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    338a:	dc 01       	movw	r26, r24
    338c:	cb 01       	movw	r24, r22
    338e:	8f 83       	std	Y+7, r24	; 0x07
    3390:	98 87       	std	Y+8, r25	; 0x08
    3392:	a9 87       	std	Y+9, r26	; 0x09
    3394:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3396:	6f 81       	ldd	r22, Y+7	; 0x07
    3398:	78 85       	ldd	r23, Y+8	; 0x08
    339a:	89 85       	ldd	r24, Y+9	; 0x09
    339c:	9a 85       	ldd	r25, Y+10	; 0x0a
    339e:	20 e0       	ldi	r18, 0x00	; 0
    33a0:	30 e0       	ldi	r19, 0x00	; 0
    33a2:	40 e8       	ldi	r20, 0x80	; 128
    33a4:	5f e3       	ldi	r21, 0x3F	; 63
    33a6:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    33aa:	88 23       	and	r24, r24
    33ac:	2c f4       	brge	.+10     	; 0x33b8 <HSSD_voidDisplayAscending+0xc4>
		__ticks = 1;
    33ae:	81 e0       	ldi	r24, 0x01	; 1
    33b0:	90 e0       	ldi	r25, 0x00	; 0
    33b2:	9e 83       	std	Y+6, r25	; 0x06
    33b4:	8d 83       	std	Y+5, r24	; 0x05
    33b6:	3f c0       	rjmp	.+126    	; 0x3436 <HSSD_voidDisplayAscending+0x142>
	else if (__tmp > 65535)
    33b8:	6f 81       	ldd	r22, Y+7	; 0x07
    33ba:	78 85       	ldd	r23, Y+8	; 0x08
    33bc:	89 85       	ldd	r24, Y+9	; 0x09
    33be:	9a 85       	ldd	r25, Y+10	; 0x0a
    33c0:	20 e0       	ldi	r18, 0x00	; 0
    33c2:	3f ef       	ldi	r19, 0xFF	; 255
    33c4:	4f e7       	ldi	r20, 0x7F	; 127
    33c6:	57 e4       	ldi	r21, 0x47	; 71
    33c8:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    33cc:	18 16       	cp	r1, r24
    33ce:	4c f5       	brge	.+82     	; 0x3422 <HSSD_voidDisplayAscending+0x12e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    33d0:	6b 85       	ldd	r22, Y+11	; 0x0b
    33d2:	7c 85       	ldd	r23, Y+12	; 0x0c
    33d4:	8d 85       	ldd	r24, Y+13	; 0x0d
    33d6:	9e 85       	ldd	r25, Y+14	; 0x0e
    33d8:	20 e0       	ldi	r18, 0x00	; 0
    33da:	30 e0       	ldi	r19, 0x00	; 0
    33dc:	40 e2       	ldi	r20, 0x20	; 32
    33de:	51 e4       	ldi	r21, 0x41	; 65
    33e0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    33e4:	dc 01       	movw	r26, r24
    33e6:	cb 01       	movw	r24, r22
    33e8:	bc 01       	movw	r22, r24
    33ea:	cd 01       	movw	r24, r26
    33ec:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    33f0:	dc 01       	movw	r26, r24
    33f2:	cb 01       	movw	r24, r22
    33f4:	9e 83       	std	Y+6, r25	; 0x06
    33f6:	8d 83       	std	Y+5, r24	; 0x05
    33f8:	0f c0       	rjmp	.+30     	; 0x3418 <HSSD_voidDisplayAscending+0x124>
    33fa:	88 ec       	ldi	r24, 0xC8	; 200
    33fc:	90 e0       	ldi	r25, 0x00	; 0
    33fe:	9c 83       	std	Y+4, r25	; 0x04
    3400:	8b 83       	std	Y+3, r24	; 0x03
    3402:	8b 81       	ldd	r24, Y+3	; 0x03
    3404:	9c 81       	ldd	r25, Y+4	; 0x04
    3406:	01 97       	sbiw	r24, 0x01	; 1
    3408:	f1 f7       	brne	.-4      	; 0x3406 <HSSD_voidDisplayAscending+0x112>
    340a:	9c 83       	std	Y+4, r25	; 0x04
    340c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    340e:	8d 81       	ldd	r24, Y+5	; 0x05
    3410:	9e 81       	ldd	r25, Y+6	; 0x06
    3412:	01 97       	sbiw	r24, 0x01	; 1
    3414:	9e 83       	std	Y+6, r25	; 0x06
    3416:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3418:	8d 81       	ldd	r24, Y+5	; 0x05
    341a:	9e 81       	ldd	r25, Y+6	; 0x06
    341c:	00 97       	sbiw	r24, 0x00	; 0
    341e:	69 f7       	brne	.-38     	; 0x33fa <HSSD_voidDisplayAscending+0x106>
    3420:	14 c0       	rjmp	.+40     	; 0x344a <HSSD_voidDisplayAscending+0x156>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3422:	6f 81       	ldd	r22, Y+7	; 0x07
    3424:	78 85       	ldd	r23, Y+8	; 0x08
    3426:	89 85       	ldd	r24, Y+9	; 0x09
    3428:	9a 85       	ldd	r25, Y+10	; 0x0a
    342a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    342e:	dc 01       	movw	r26, r24
    3430:	cb 01       	movw	r24, r22
    3432:	9e 83       	std	Y+6, r25	; 0x06
    3434:	8d 83       	std	Y+5, r24	; 0x05
    3436:	8d 81       	ldd	r24, Y+5	; 0x05
    3438:	9e 81       	ldd	r25, Y+6	; 0x06
    343a:	9a 83       	std	Y+2, r25	; 0x02
    343c:	89 83       	std	Y+1, r24	; 0x01
    343e:	89 81       	ldd	r24, Y+1	; 0x01
    3440:	9a 81       	ldd	r25, Y+2	; 0x02
    3442:	01 97       	sbiw	r24, 0x01	; 1
    3444:	f1 f7       	brne	.-4      	; 0x3442 <HSSD_voidDisplayAscending+0x14e>
    3446:	9a 83       	std	Y+2, r25	; 0x02
    3448:	89 83       	std	Y+1, r24	; 0x01
}

void HSSD_voidDisplayAscending(u8 A_u8PortId)
{
u8 arr[]={ZERO,ONE,TWO,THREE,FOUR,FIVE,SIX,SEVEN,EIGHT,NINE};
	for(u8 i=0;i<10;i++)
    344a:	8f 85       	ldd	r24, Y+15	; 0x0f
    344c:	8f 5f       	subi	r24, 0xFF	; 255
    344e:	8f 87       	std	Y+15, r24	; 0x0f
    3450:	8f 85       	ldd	r24, Y+15	; 0x0f
    3452:	8a 30       	cpi	r24, 0x0A	; 10
    3454:	08 f4       	brcc	.+2      	; 0x3458 <HSSD_voidDisplayAscending+0x164>
    3456:	7b cf       	rjmp	.-266    	; 0x334e <HSSD_voidDisplayAscending+0x5a>
	{
		HSSD_voidDisplay(arr[i],A_u8PortId);
		_delay_ms(SSD_DELAY);
	}
}
    3458:	6f 96       	adiw	r28, 0x1f	; 31
    345a:	0f b6       	in	r0, 0x3f	; 63
    345c:	f8 94       	cli
    345e:	de bf       	out	0x3e, r29	; 62
    3460:	0f be       	out	0x3f, r0	; 63
    3462:	cd bf       	out	0x3d, r28	; 61
    3464:	cf 91       	pop	r28
    3466:	df 91       	pop	r29
    3468:	08 95       	ret

0000346a <HSSD_voidDisplayDescending>:

void HSSD_voidDisplayDescending(u8 A_u8PortId)
{
    346a:	df 93       	push	r29
    346c:	cf 93       	push	r28
    346e:	cd b7       	in	r28, 0x3d	; 61
    3470:	de b7       	in	r29, 0x3e	; 62
    3472:	6f 97       	sbiw	r28, 0x1f	; 31
    3474:	0f b6       	in	r0, 0x3f	; 63
    3476:	f8 94       	cli
    3478:	de bf       	out	0x3e, r29	; 62
    347a:	0f be       	out	0x3f, r0	; 63
    347c:	cd bf       	out	0x3d, r28	; 61
    347e:	8a 8f       	std	Y+26, r24	; 0x1a
u8 arr[]={ZERO,ONE,TWO,THREE,FOUR,FIVE,SIX,SEVEN,EIGHT,NINE};
    3480:	ce 01       	movw	r24, r28
    3482:	40 96       	adiw	r24, 0x10	; 16
    3484:	9c 8f       	std	Y+28, r25	; 0x1c
    3486:	8b 8f       	std	Y+27, r24	; 0x1b
    3488:	e2 e7       	ldi	r30, 0x72	; 114
    348a:	f0 e0       	ldi	r31, 0x00	; 0
    348c:	fe 8f       	std	Y+30, r31	; 0x1e
    348e:	ed 8f       	std	Y+29, r30	; 0x1d
    3490:	fa e0       	ldi	r31, 0x0A	; 10
    3492:	ff 8f       	std	Y+31, r31	; 0x1f
    3494:	ed 8d       	ldd	r30, Y+29	; 0x1d
    3496:	fe 8d       	ldd	r31, Y+30	; 0x1e
    3498:	00 80       	ld	r0, Z
    349a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    349c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    349e:	01 96       	adiw	r24, 0x01	; 1
    34a0:	9e 8f       	std	Y+30, r25	; 0x1e
    34a2:	8d 8f       	std	Y+29, r24	; 0x1d
    34a4:	eb 8d       	ldd	r30, Y+27	; 0x1b
    34a6:	fc 8d       	ldd	r31, Y+28	; 0x1c
    34a8:	00 82       	st	Z, r0
    34aa:	8b 8d       	ldd	r24, Y+27	; 0x1b
    34ac:	9c 8d       	ldd	r25, Y+28	; 0x1c
    34ae:	01 96       	adiw	r24, 0x01	; 1
    34b0:	9c 8f       	std	Y+28, r25	; 0x1c
    34b2:	8b 8f       	std	Y+27, r24	; 0x1b
    34b4:	9f 8d       	ldd	r25, Y+31	; 0x1f
    34b6:	91 50       	subi	r25, 0x01	; 1
    34b8:	9f 8f       	std	Y+31, r25	; 0x1f
    34ba:	ef 8d       	ldd	r30, Y+31	; 0x1f
    34bc:	ee 23       	and	r30, r30
    34be:	51 f7       	brne	.-44     	; 0x3494 <HSSD_voidDisplayDescending+0x2a>
	for(u8 j=9;j>=0;j--)
    34c0:	89 e0       	ldi	r24, 0x09	; 9
    34c2:	8f 87       	std	Y+15, r24	; 0x0f
	{
		HSSD_voidDisplay(arr[j],A_u8PortId);
    34c4:	8f 85       	ldd	r24, Y+15	; 0x0f
    34c6:	28 2f       	mov	r18, r24
    34c8:	30 e0       	ldi	r19, 0x00	; 0
    34ca:	ce 01       	movw	r24, r28
    34cc:	40 96       	adiw	r24, 0x10	; 16
    34ce:	fc 01       	movw	r30, r24
    34d0:	e2 0f       	add	r30, r18
    34d2:	f3 1f       	adc	r31, r19
    34d4:	80 81       	ld	r24, Z
    34d6:	6a 8d       	ldd	r22, Y+26	; 0x1a
    34d8:	0e 94 ed 18 	call	0x31da	; 0x31da <HSSD_voidDisplay>
    34dc:	80 e0       	ldi	r24, 0x00	; 0
    34de:	90 e0       	ldi	r25, 0x00	; 0
    34e0:	aa e7       	ldi	r26, 0x7A	; 122
    34e2:	b4 e4       	ldi	r27, 0x44	; 68
    34e4:	8b 87       	std	Y+11, r24	; 0x0b
    34e6:	9c 87       	std	Y+12, r25	; 0x0c
    34e8:	ad 87       	std	Y+13, r26	; 0x0d
    34ea:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    34ec:	6b 85       	ldd	r22, Y+11	; 0x0b
    34ee:	7c 85       	ldd	r23, Y+12	; 0x0c
    34f0:	8d 85       	ldd	r24, Y+13	; 0x0d
    34f2:	9e 85       	ldd	r25, Y+14	; 0x0e
    34f4:	20 e0       	ldi	r18, 0x00	; 0
    34f6:	30 e0       	ldi	r19, 0x00	; 0
    34f8:	4a ef       	ldi	r20, 0xFA	; 250
    34fa:	54 e4       	ldi	r21, 0x44	; 68
    34fc:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3500:	dc 01       	movw	r26, r24
    3502:	cb 01       	movw	r24, r22
    3504:	8f 83       	std	Y+7, r24	; 0x07
    3506:	98 87       	std	Y+8, r25	; 0x08
    3508:	a9 87       	std	Y+9, r26	; 0x09
    350a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    350c:	6f 81       	ldd	r22, Y+7	; 0x07
    350e:	78 85       	ldd	r23, Y+8	; 0x08
    3510:	89 85       	ldd	r24, Y+9	; 0x09
    3512:	9a 85       	ldd	r25, Y+10	; 0x0a
    3514:	20 e0       	ldi	r18, 0x00	; 0
    3516:	30 e0       	ldi	r19, 0x00	; 0
    3518:	40 e8       	ldi	r20, 0x80	; 128
    351a:	5f e3       	ldi	r21, 0x3F	; 63
    351c:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    3520:	88 23       	and	r24, r24
    3522:	2c f4       	brge	.+10     	; 0x352e <HSSD_voidDisplayDescending+0xc4>
		__ticks = 1;
    3524:	81 e0       	ldi	r24, 0x01	; 1
    3526:	90 e0       	ldi	r25, 0x00	; 0
    3528:	9e 83       	std	Y+6, r25	; 0x06
    352a:	8d 83       	std	Y+5, r24	; 0x05
    352c:	3f c0       	rjmp	.+126    	; 0x35ac <HSSD_voidDisplayDescending+0x142>
	else if (__tmp > 65535)
    352e:	6f 81       	ldd	r22, Y+7	; 0x07
    3530:	78 85       	ldd	r23, Y+8	; 0x08
    3532:	89 85       	ldd	r24, Y+9	; 0x09
    3534:	9a 85       	ldd	r25, Y+10	; 0x0a
    3536:	20 e0       	ldi	r18, 0x00	; 0
    3538:	3f ef       	ldi	r19, 0xFF	; 255
    353a:	4f e7       	ldi	r20, 0x7F	; 127
    353c:	57 e4       	ldi	r21, 0x47	; 71
    353e:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    3542:	18 16       	cp	r1, r24
    3544:	4c f5       	brge	.+82     	; 0x3598 <HSSD_voidDisplayDescending+0x12e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3546:	6b 85       	ldd	r22, Y+11	; 0x0b
    3548:	7c 85       	ldd	r23, Y+12	; 0x0c
    354a:	8d 85       	ldd	r24, Y+13	; 0x0d
    354c:	9e 85       	ldd	r25, Y+14	; 0x0e
    354e:	20 e0       	ldi	r18, 0x00	; 0
    3550:	30 e0       	ldi	r19, 0x00	; 0
    3552:	40 e2       	ldi	r20, 0x20	; 32
    3554:	51 e4       	ldi	r21, 0x41	; 65
    3556:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    355a:	dc 01       	movw	r26, r24
    355c:	cb 01       	movw	r24, r22
    355e:	bc 01       	movw	r22, r24
    3560:	cd 01       	movw	r24, r26
    3562:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3566:	dc 01       	movw	r26, r24
    3568:	cb 01       	movw	r24, r22
    356a:	9e 83       	std	Y+6, r25	; 0x06
    356c:	8d 83       	std	Y+5, r24	; 0x05
    356e:	0f c0       	rjmp	.+30     	; 0x358e <HSSD_voidDisplayDescending+0x124>
    3570:	88 ec       	ldi	r24, 0xC8	; 200
    3572:	90 e0       	ldi	r25, 0x00	; 0
    3574:	9c 83       	std	Y+4, r25	; 0x04
    3576:	8b 83       	std	Y+3, r24	; 0x03
    3578:	8b 81       	ldd	r24, Y+3	; 0x03
    357a:	9c 81       	ldd	r25, Y+4	; 0x04
    357c:	01 97       	sbiw	r24, 0x01	; 1
    357e:	f1 f7       	brne	.-4      	; 0x357c <HSSD_voidDisplayDescending+0x112>
    3580:	9c 83       	std	Y+4, r25	; 0x04
    3582:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3584:	8d 81       	ldd	r24, Y+5	; 0x05
    3586:	9e 81       	ldd	r25, Y+6	; 0x06
    3588:	01 97       	sbiw	r24, 0x01	; 1
    358a:	9e 83       	std	Y+6, r25	; 0x06
    358c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    358e:	8d 81       	ldd	r24, Y+5	; 0x05
    3590:	9e 81       	ldd	r25, Y+6	; 0x06
    3592:	00 97       	sbiw	r24, 0x00	; 0
    3594:	69 f7       	brne	.-38     	; 0x3570 <HSSD_voidDisplayDescending+0x106>
    3596:	14 c0       	rjmp	.+40     	; 0x35c0 <HSSD_voidDisplayDescending+0x156>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3598:	6f 81       	ldd	r22, Y+7	; 0x07
    359a:	78 85       	ldd	r23, Y+8	; 0x08
    359c:	89 85       	ldd	r24, Y+9	; 0x09
    359e:	9a 85       	ldd	r25, Y+10	; 0x0a
    35a0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    35a4:	dc 01       	movw	r26, r24
    35a6:	cb 01       	movw	r24, r22
    35a8:	9e 83       	std	Y+6, r25	; 0x06
    35aa:	8d 83       	std	Y+5, r24	; 0x05
    35ac:	8d 81       	ldd	r24, Y+5	; 0x05
    35ae:	9e 81       	ldd	r25, Y+6	; 0x06
    35b0:	9a 83       	std	Y+2, r25	; 0x02
    35b2:	89 83       	std	Y+1, r24	; 0x01
    35b4:	89 81       	ldd	r24, Y+1	; 0x01
    35b6:	9a 81       	ldd	r25, Y+2	; 0x02
    35b8:	01 97       	sbiw	r24, 0x01	; 1
    35ba:	f1 f7       	brne	.-4      	; 0x35b8 <HSSD_voidDisplayDescending+0x14e>
    35bc:	9a 83       	std	Y+2, r25	; 0x02
    35be:	89 83       	std	Y+1, r24	; 0x01
}

void HSSD_voidDisplayDescending(u8 A_u8PortId)
{
u8 arr[]={ZERO,ONE,TWO,THREE,FOUR,FIVE,SIX,SEVEN,EIGHT,NINE};
	for(u8 j=9;j>=0;j--)
    35c0:	8f 85       	ldd	r24, Y+15	; 0x0f
    35c2:	81 50       	subi	r24, 0x01	; 1
    35c4:	8f 87       	std	Y+15, r24	; 0x0f
    35c6:	7e cf       	rjmp	.-260    	; 0x34c4 <HSSD_voidDisplayDescending+0x5a>

000035c8 <main>:
//LCD4
#include "../Include/HAL/LCD4/LCD4_Configuration.h"
#include "../Include/HAL/LCD4/LCD4_Interface.h"

void main(void)
{
    35c8:	df 93       	push	r29
    35ca:	cf 93       	push	r28
    35cc:	cd b7       	in	r28, 0x3d	; 61
    35ce:	de b7       	in	r29, 0x3e	; 62
    MDIO_voidInit();
    35d0:	0e 94 47 06 	call	0xc8e	; 0xc8e <MDIO_voidInit>
    HLCD8_voidInit();
    35d4:	0e 94 5a 15 	call	0x2ab4	; 0x2ab4 <HLCD8_voidInit>
    HLCD8_voidDisplayNumber(5534);
    35d8:	8e e9       	ldi	r24, 0x9E	; 158
    35da:	95 e1       	ldi	r25, 0x15	; 21
    35dc:	0e 94 92 18 	call	0x3124	; 0x3124 <HLCD8_voidDisplayNumber>
    35e0:	ff cf       	rjmp	.-2      	; 0x35e0 <main+0x18>

000035e2 <__udivmodhi4>:
    35e2:	aa 1b       	sub	r26, r26
    35e4:	bb 1b       	sub	r27, r27
    35e6:	51 e1       	ldi	r21, 0x11	; 17
    35e8:	07 c0       	rjmp	.+14     	; 0x35f8 <__udivmodhi4_ep>

000035ea <__udivmodhi4_loop>:
    35ea:	aa 1f       	adc	r26, r26
    35ec:	bb 1f       	adc	r27, r27
    35ee:	a6 17       	cp	r26, r22
    35f0:	b7 07       	cpc	r27, r23
    35f2:	10 f0       	brcs	.+4      	; 0x35f8 <__udivmodhi4_ep>
    35f4:	a6 1b       	sub	r26, r22
    35f6:	b7 0b       	sbc	r27, r23

000035f8 <__udivmodhi4_ep>:
    35f8:	88 1f       	adc	r24, r24
    35fa:	99 1f       	adc	r25, r25
    35fc:	5a 95       	dec	r21
    35fe:	a9 f7       	brne	.-22     	; 0x35ea <__udivmodhi4_loop>
    3600:	80 95       	com	r24
    3602:	90 95       	com	r25
    3604:	bc 01       	movw	r22, r24
    3606:	cd 01       	movw	r24, r26
    3608:	08 95       	ret

0000360a <__prologue_saves__>:
    360a:	2f 92       	push	r2
    360c:	3f 92       	push	r3
    360e:	4f 92       	push	r4
    3610:	5f 92       	push	r5
    3612:	6f 92       	push	r6
    3614:	7f 92       	push	r7
    3616:	8f 92       	push	r8
    3618:	9f 92       	push	r9
    361a:	af 92       	push	r10
    361c:	bf 92       	push	r11
    361e:	cf 92       	push	r12
    3620:	df 92       	push	r13
    3622:	ef 92       	push	r14
    3624:	ff 92       	push	r15
    3626:	0f 93       	push	r16
    3628:	1f 93       	push	r17
    362a:	cf 93       	push	r28
    362c:	df 93       	push	r29
    362e:	cd b7       	in	r28, 0x3d	; 61
    3630:	de b7       	in	r29, 0x3e	; 62
    3632:	ca 1b       	sub	r28, r26
    3634:	db 0b       	sbc	r29, r27
    3636:	0f b6       	in	r0, 0x3f	; 63
    3638:	f8 94       	cli
    363a:	de bf       	out	0x3e, r29	; 62
    363c:	0f be       	out	0x3f, r0	; 63
    363e:	cd bf       	out	0x3d, r28	; 61
    3640:	09 94       	ijmp

00003642 <__epilogue_restores__>:
    3642:	2a 88       	ldd	r2, Y+18	; 0x12
    3644:	39 88       	ldd	r3, Y+17	; 0x11
    3646:	48 88       	ldd	r4, Y+16	; 0x10
    3648:	5f 84       	ldd	r5, Y+15	; 0x0f
    364a:	6e 84       	ldd	r6, Y+14	; 0x0e
    364c:	7d 84       	ldd	r7, Y+13	; 0x0d
    364e:	8c 84       	ldd	r8, Y+12	; 0x0c
    3650:	9b 84       	ldd	r9, Y+11	; 0x0b
    3652:	aa 84       	ldd	r10, Y+10	; 0x0a
    3654:	b9 84       	ldd	r11, Y+9	; 0x09
    3656:	c8 84       	ldd	r12, Y+8	; 0x08
    3658:	df 80       	ldd	r13, Y+7	; 0x07
    365a:	ee 80       	ldd	r14, Y+6	; 0x06
    365c:	fd 80       	ldd	r15, Y+5	; 0x05
    365e:	0c 81       	ldd	r16, Y+4	; 0x04
    3660:	1b 81       	ldd	r17, Y+3	; 0x03
    3662:	aa 81       	ldd	r26, Y+2	; 0x02
    3664:	b9 81       	ldd	r27, Y+1	; 0x01
    3666:	ce 0f       	add	r28, r30
    3668:	d1 1d       	adc	r29, r1
    366a:	0f b6       	in	r0, 0x3f	; 63
    366c:	f8 94       	cli
    366e:	de bf       	out	0x3e, r29	; 62
    3670:	0f be       	out	0x3f, r0	; 63
    3672:	cd bf       	out	0x3d, r28	; 61
    3674:	ed 01       	movw	r28, r26
    3676:	08 95       	ret

00003678 <_exit>:
    3678:	f8 94       	cli

0000367a <__stop_program>:
    367a:	ff cf       	rjmp	.-2      	; 0x367a <__stop_program>
